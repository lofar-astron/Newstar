%!PS-Adobe-2.1
%%Creator: DECwrite T2.0-IFT
%%+Copyright (c) 1990 DIGITAL EQUIPMENT CORPORATION.  
%%+All Rights Reserved.
%%DocumentFonts: (atend)
%%EndComments
%%BeginProcSet DEC_WRITE 1.07
/DEC_WRITE_dict 150 dict def DEC_WRITE_dict begin/$D save def/$I 0 def/$S 0
def/$C matrix def/$R matrix def/$L matrix def/$E matrix def/pat1{/px exch
def/pa 8 array def 0 1 7{/py exch def/pw 4 string def 0 1 3{pw exch px py 1
getinterval putinterval}for pa py pw put}for}def/pat2{/pi exch def/cflag
exch def save cflag 1 eq{eoclip}{clip}ifelse newpath{clippath
pathbbox}stopped not{/ph exch def/pw exch def/py exch def/px exch def/px px
3072 div floor 3072 mul def/py py 3072 div floor 3072 mul def px py
translate/pw pw px sub 3072 div floor 1 add cvi def/ph ph py sub 3072 div
floor 1 add cvi def pw 3072 mul ph 3072 mul scale/pw pw 32 mul def/ph ph 32
mul def/px 0 def/py 0 def pw ph pi[pw 0 0 ph 0 0]{pa py get/px px 32 add
def px pw ge{/px 0 def/py py 1 add 8 mod def}if}pi type/booleantype
eq{imagemask}{image}ifelse}if restore}def/PS{/_op exch def/_np 8 string def
0 1 7{/_ii exch def/num _op _ii get def _np 7 _ii sub num -4 bitshift PX
num 15 and 4 bitshift -4 bitshift PX 4 bitshift or put}for _np}def/PX{[15 7
11 3 13 5 9 1 14 6 10 2 12 4 8 0]exch get}def/FR{0.7200 0 $E defaultmatrix
dtransform/yres exch def/xres exch def xres dup mul yres dup mul add
sqrt}def/SU{/_sf exch def/_sa exch def/_cs exch def/_mm $C currentmatrix
def/rm _sa $R rotate def/sm _cs dup $L scale def sm rm _mm _mm concatmatrix
_mm concatmatrix pop 1 0 _mm dtransform/y1 exch def/x1 exch def/_vl x1 dup
mul y1 dup mul add sqrt def/_fq FR _vl div def/_na y1 x1 atan def _mm 2 get
_mm 1 get mul _mm 0 get _mm 3 get mul sub 0 gt{{neg}/_sf load
concatprocs/_sf exch def}if _fq _na/_sf load setscreen}def/BO{/_yb exch
def/_xb exch def/_bv _bs _yb _bw mul _xb 8 idiv add get def/_mk 1 7 _xb 8
mod sub bitshift def _bv _mk and 0 ne $I 1 eq xor}def/BF{DEC_WRITE_dict
begin/_yy exch def/_xx exch def/_xi _xx 1 add 2 div _bp mul cvi def/_yi _yy
1 add 2 div _bp mul cvi def _xi _yi BO{/_nb _nb 1 add def 1}{/_fb _fb 1 add
def 0}ifelse end}def/setpattern{/_cz exch def/_bw exch def/_bp exch def/_bs
exch PS def/_nb 0 def/_fb 0 def _cz 0/BF load SU{}settransfer _fb _fb _nb
add div setgray/$S 1 def}def/invertpattern{$S 0 eq{{1 exch
sub}currenttransfer concatprocs settransfer}if}def/invertscreen{/$I 1
def/$S 0 def}def/revertscreen{/$I 0 def}def/setrect{/$h exch def/$w exch
def/$y exch def/$x exch def newpath $x $y moveto $w $x add $y lineto $w $x
add $h $y add lineto $x $h $y add lineto closepath}def/concatprocs{/_p2
exch cvlit def/_p1 exch cvlit def/_pn _p1 length _p2 length add array def
_pn 0 _p1 putinterval _pn _p1 length _p2 putinterval _pn
cvx}def/OF/findfont load def/findfont{dup DEC_WRITE_dict exch
known{DEC_WRITE_dict exch get}if DEC_WRITE_dict/OF get exec}def
mark/ISOLatin1Encoding 
8#000 1 8#001{StandardEncoding exch get}for /emdash/endash
8#004 1 8#025{StandardEncoding exch get}for /quotedblleft/quotedblright
8#030 1 8#054{StandardEncoding exch get}for /minus 8#056 1 8#217
{StandardEncoding exch get}for/dotlessi 8#301 1 8#317{StandardEncoding 
exch get}for/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered
/macron/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph
/periodcentered/cedilla/onesuperior/ordmasculine/guillemotright/onequarter
/onehalf/threequarters/questiondown/Agrave/Aacute/Acircumflex/Atilde
/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave
/Iacute/Icircumflex/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde
/Odieresis/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave
/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
256 array astore def cleartomark 
/encodefont{findfont dup maxlength dict begin{1 index/FID ne{def}{pop
pop}ifelse}forall/Encoding exch def dup/FontName exch def currentdict
definefont end}def/loads{/$/ISOLatin1Encoding load def/&/encodefont load
def/*/invertpattern load def/+/revertscreen load def/-/invertscreen load
def/:/concatprocs load def/^/setpattern load def/~/pat1 load def/_/pat2
load def/@/setrect load def/A/arcn load def/B/ashow load def/C/curveto load
def/D/def load def/E/eofill load def/F/findfont load def/G/setgray load
def/H/closepath load def/I/clip load def/J/fill load def/K/kshow load
def/L/lineto load def/M/moveto load def/N/newpath load def/O/rotate load
def/P/pop load def/R/grestore load def/S/gsave load def/T/translate load
def/U/sub load def/V/div load def/W/widthshow load def/X/exch load
def/Y/awidthshow load def/a/save load def/c/setlinecap load def/d/setdash
load def/e/restore load def/f/setfont load def/g/initclip load def/h/show
load def/i/setmiterlimit load def/j/setlinejoin load def/k/stroke load
def/l/rlineto load def/m/rmoveto load def/n/currentfont load
def/o/scalefont load def/p/currentpoint load def/q/setrgbcolor load
def/r/currenttransfer load def/s/scale load def/t/setmatrix load
def/u/settransfer load def/w/setlinewidth load def/x/matrix load
def/y/currentmatrix load def}def
end
%%EndProcSet
%%EndProlog
%%BeginSetup
DEC_WRITE_dict begin
loads
version cvi 23.0 gt {
currentdict {dup type /arraytype eq
{bind def} {pop pop} ifelse} forall} if
0.0100 0.0100 s

%%EndSetup
%%Page: 1 1
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
5947 -1650 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1800 o f
(Porting C Applications DEC OSF/1 Alpha) h
17298 -4200 M
n 0.667 o f
(Lu Anne Van de Pas  ) h
18565 -6600 M
(               ) h
300 -11400 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
103.3 0 32 (The DEC OSF/1 V1.2 system takes advantage of the full 64\255bit capabilities of the Al\255) W
300 -12800 M
80.2 0 32 (pha architecture.  In doing so, it introduces a number of extended capabilities beyond) W
300 -14200 M
311.4 0 32 (32\255bit architectures that can effect the portability and interoperability of programs.  ) W
300 -15600 M
186.2 0 32 (Careful coding practices can help reduce these inconsistencies.  The following sec\255) W
300 -17000 M
106.2 0 32 (tions will look at specific aspects of the C language and explain certain programming) W
300 -18400 M
70.1 0 32 (techniques that will help in both new program development and the porting of existing) W
300 -19800 M
(programs from DEC ULTRIX to DEC OSF/1 Alpha systems.     ) h
300 -23450 M
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Overview) h
300 -26100 M
/Helvetica-ISOLatin1 F 1200 o f
2.8 0 32 (The ease of moving a C program from a 32\255bit VAX or MIPS architecture to a full 64\255bit) W
300 -27500 M
159.3 0 32 (implementation of the Alpha architecture depends upon:  1. the overall coding disci\255) W
300 -28900 M
203.6 0 32 (plines employed in the application, and 2. the use of nonstandard system features. ) W
300 -30300 M
24.1 0 32 (For example, a program written with adherence to the ANSI C standard, using function) W
300 -31700 M
39.2 0 32 (prototypes, and having no assumption about the machine size of data types or system) W
300 -33100 M
100.8 0 32 (architectural specifics, can be ported with ease.   Special care may need to be taken) W
300 -34500 M
42.9 0 32 (when mixing 64\255bit and 32\255bit systems through data sharing mechanisms such as net\255) W
300 -35900 M
(works, databases, and shared file systems.) h
300 -37300 M
300 -38700 M
20.7 0 32 (At a high level, the general coding issues can be outlined by examining specifics in the) W
300 -40100 M
60.6 0 32 (host \(build\) and target \(runtime\) environment of the DEC OSF/1 Alpha system.   Each) W
300 -41500 M
108.0 0 32 (of the areas described below affects the portability of the application.  The  program\255) W
300 -42900 M
198.6 0 32 (ming techniques and examples in the remaining sections will show in detail how to) W
300 -44300 M
(code or recode your program.) h
300 -46300 M
/Symbol F 1200 o f
(\267) h
2100 -46300 M
/Helvetica-ISOLatin1 F 1200 o f
(Development environment) h
2100 -47700 M
2100 -49100 M
17.7 0 32 (When you port an application to the DEC OSF/1 Alpha system  you must recompile) W
2100 -50500 M
15.0 0 32 (the application or use the binary translator. \(See MX documentation for information) W
2100 -51900 M
(on translating executables from the MIPS architecture to Alpha.\) ) h
2100 -53300 M
6060 -53300 M
2100 -54700 M
25.1 0 32 (The DEC OSF/1 Alpha development environment has a similar compilation, linking,) W
2100 -56100 M
64.9 0 32 (debugging, and performance analysis tools as RISC ULTRIX.  The Alpha develop\255) W
2100 -57500 M
31.8 0 32 (ment environment, C compiler and related tools, has additional support for ANSI C,) W
2100 -58900 M
64.8 0 32 (64\255bit data types and addresses, and shared libraries.  Lint has additional features) W
2100 -60300 M
309.7 0 32 (to help find 32\255to\25564 bit conversion problems.  ) W
2100 -61700 M
-7200 7200 T
R

showpage
$P e

%%Page: 2 2
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
/Symbol F 1200 o f
(\267) h
2100 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
(Compiler optimizations:  ) h
2100 -2600 M
2100 -4000 M
89.4 0 32 (The DEC OSF/1 Alpha C compiler has additional optimizations and code schedul\255) W
2100 -5400 M
47.5 0 32 (ing specific to the Alpha architecture.   Because of this you may notice different er\255) W
2100 -6800 M
(ror messages between ULTRIX and Alpha systems.  ) h
300 -8800 M
/Symbol F 1200 o f
(\267) h
2100 -8800 M
/Helvetica-ISOLatin1 F 1200 o f
(Data Representation:  ) h
2100 -10200 M
6060 -10200 M
2100 -11600 M
150.6 0 32 (In order to take advantage of the 64\255bit architecture the C data types have been) W
2100 -13000 M
50.6 0 32 (modified to include a 64\255bit type.   In the table below, 'int' is unchanged as a 32 bit) W
2100 -14400 M
123.4 0 32 (entity, and long is redefined to be 64 bits.  In order to extend the address space, ) W
2100 -15800 M
(pointers on Alpha are defined to be 64 bits.) h
2100 -17200 M
6060 -17200 M
2100 -18600 M
158.5 0 32 (The DEC OSF/1 Alpha system has also defined a 'long long' data type to be 64) W
2100 -20000 M
47.3 0 32 (bits.  It provides the unique name for a 64\255bit data type that may provide additional) W
2100 -21400 M
(interoperability between 32\255bit and 64\255bit systems.  ) h
2100 -22800 M
6060 -22800 M
2100 -24200 M
39.8 0 32 (Similar to VAX and MIPS systems, the DEC OSF/1 Alpha system  uses right\255to\255left) W
2100 -25600 M
(byte order for integer types \(little\255endian\).) h
29100 -25600 M
2100 -27000 M
300 -54400 M
S
0 26300 m
p T
0 -26300 45901 26300 @ I N
N
S
50 -50 T
N
0 G
5171 -1500 M
/Times-Roman-ISOLatin1 $
/Times-Roman & P
/Times-Roman-ISOLatin1 F 1200 o f
(Data type ) h
600 -2884 M
-50 50 T
R

S
15325 -50 T
N
0 G
737 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32\255bit MIPS or VAX system) h
(         ) h
4521 -2900 M
(\(size in bits\) ) h
-15325 50 T
R

S
30600 -50 T
N
0 G
2609 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
( 64\255bit Alpha system      ) h
4659 -2900 M
(\(size in bits\)) h
-30600 50 T
R

S
50 -3900 T
N
0 G
6605 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(char) h
-50 3900 T
R

S
15325 -3900 T
N
0 G
7337 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(8) h
-15325 3900 T
R

S
30600 -3900 T
N
0 G
7325 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(8) h
-30600 3900 T
R

S
50 -6350 T
N
0 G
6437 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(short) h
-50 6350 T
R

S
15325 -6350 T
N
0 G
7037 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(16) h
-15325 6350 T
R

S
30600 -6350 T
N
0 G
7025 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(16) h
-30600 6350 T
R

S
50 -8800 T
N
0 G
7004 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(int) h
-50 8800 T
R

S
15325 -8800 T
N
0 G
7037 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32) h
-15325 8800 T
R

S
30600 -8800 T
N
0 G
7025 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32) h
-30600 8800 T
R

S
50 -11250 T
N
0 G
6570 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(long) h
-50 11250 T
R

S
15325 -11250 T
N
0 G
7037 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32) h
-15325 11250 T
R

S
30600 -11250 T
N
0 G
7025 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(64) h
-30600 11250 T
R

S
50 -13700 T
N
0 G
5354 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(long long) h
-50 13700 T
R

S
15325 -13700 T
N
0 G
4421 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Not available) h
-15325 13700 T
R

S
30600 -13700 T
N
0 G
7025 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(64) h
-30600 13700 T
R

S
50 -16150 T
N
0 G
6537 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(float) h
600 -2884 M
-50 16150 T
R

S
15325 -16150 T
N
0 G
1037 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32    \( MIPS:  IEEE Single\)) h
600 -2900 M
(           \(VAX:  F float\)) h
-15325 16150 T
R

S
30600 -16150 T
N
0 G
3192 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32   \(IEEE Single\)) h
600 -2900 M
(         ) h
-30600 16150 T
R

S
50 -20000 T
N
0 G
6004 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(double) h
600 -2884 M
-50 20000 T
R

S
15325 -20000 T
N
0 G
954 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(64    \(MIPS:  IEEE Double\)) h
600 -2900 M
(           \(VAX:  G or D float\)) h
-15325 20000 T
R

S
30600 -20000 T
N
0 G
2810 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(64    \(IEEE Double\)) h
600 -2884 M
-30600 20000 T
R

S
50 -23850 T
N
0 G
5937 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(pointer) h
-50 23850 T
R

S
15325 -23850 T
N
0 G
7037 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(32) h
-15325 23850 T
R

S
30600 -23850 T
N
0 G
7025 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(64) h
-30600 23850 T
R

S
N
0 -3875 M
46001 -3875 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -6325 M
46001 -6325 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -8775 M
46001 -8775 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -11225 M
46001 -11225 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -13675 M
46001 -13675 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -16125 M
46001 -16125 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -19975 M
46001 -19975 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -23825 M
46001 -23825 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

R
45901 0 m
300 -56400 M
300 -58400 M
/Symbol F 1200 o f
(\267) h
2100 -58400 M
/Helvetica-ISOLatin1 F 1200 o f
(Data access) h
2100 -59800 M
2701 -59800 M
2100 -61200 M
44.5 0 32 (The VAX and MIPS architectures are both byte and word addressable.  Alpha sup\255) W
2100 -62600 M
16.7 0 32 (ports only memory accesses of longword \(32 bits\) or quadword \(64 bits\).   Byte and) W
2100 -64000 M
59.3 0 32 (word accesses are accomplished by multiple instructions which load a longword or) W
-7200 7200 T
R

showpage
$P e

%%Page: 3 3
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
2100 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
23.6 0 32 (quadword,  mask, and shift to get the desired entity.  This lack of a single operation) W
2100 -2600 M
22.6 0 32 (for byte and word access may produce incorrect results in cases where you are ac\255) W
2100 -4000 M
81.9 0 32 (cessing adjacent byte or word entities in shared memory segments.  For instance, ) W
2100 -5400 M
46.7 0 32 (a multi\255threaded application or multiple processes that has access to adjacent byte) W
2100 -6800 M
289.5 0 32 (data through shared memory or shared memory\255mapped files will have to use) W
2100 -8200 M
309.2 0 32 (thread mutual exclusion locking functions or semaphone locks, respectively, to) W
2100 -9600 M
(avoid  conflicts with accesses to adjacent byte or word data items.   ) h
300 -11600 M
/Symbol F 1200 o f
(\267) h
2100 -11600 M
/Helvetica-ISOLatin1 F 1200 o f
(Data Alignment) h
2100 -13000 M
(        ) h
2100 -14400 M
55.6 0 32 (On both MIPS and ALPHA systems the data alignment is implied by the data type.  ) W
2100 -15800 M
50.8 0 32 (For instance, an  ) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
50.8 0 32 (int) W
/Helvetica-ISOLatin1 F 1200 o f
50.8 0 32 ( \(32 bits\) is aligned on a  4 byte boundary.  On MIPS systems,) W
2100 -17200 M
2.3 0 32 (a ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
2.3 0 32 (long ) W
/Helvetica-ISOLatin1 F 1200 o f
2.3 0 32 (\(32 bits\) is also aligned on a 4 byte boundary.  But on Alpha systems, a) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
2.3 0 32 (  long) W
2100 -18600 M
/Helvetica-ISOLatin1 F 1200 o f
212.9 0 32 (\(64 bits\) is aligned on 8 byte boundaries.  If using assembly language, you will) W
2100 -20000 M
85.4 0 32 (need to understand and code according to these alignment restrictions.  If using a) W
2100 -21400 M
55.9 0 32 (high\255level language such as C, the compiler will take care of this alignment for you) W
2100 -22800 M
70.5 0 32 (but it is still important that you understand these alignment differences when using) W
2100 -24200 M
137.0 0 32 (long and pointer types in structure definitions that are shared between 32\255bit and) W
2100 -25600 M
(64\255bit systems.  ) h
300 -27600 M
/Symbol F 1200 o f
(\267) h
2100 -27600 M
/Helvetica-ISOLatin1 F 1200 o f
(File system) h
2100 -29000 M
6060 -29000 M
2100 -30400 M
150.0 0 32 (On the 32\255bit systems of MIPS and VAX, files and file systems were limited to 2) W
2100 -31800 M
178.3 0 32 (gigabytes in size.  This limit was imposed by the programming interface and file) W
2100 -33200 M
65.3 0 32 (system which used a 32\255bit integer to represent the file offset in bytes \() W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
65.3 0 32 (off_t) W
/Helvetica-ISOLatin1 F 1200 o f
65.3 0 32 (\) when) W
2100 -34600 M
101.1 0 32 (navigating within a file or file system.  On a 64\255bit DEC OSF/1 Alpha system, you) W
2100 -36000 M
87.7 0 32 (can now build much larger files and file systems.  ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
87.7 0 32 (off_t ) W
/Helvetica-ISOLatin1 F 1200 o f
87.7 0 32 ( is defined to be a ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
87.7 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
87.7 0 32 ( on) W
2100 -37400 M
(Alpha systems.  ) h
2100 -38800 M
6060 -38800 M
90.9 0 32 (Given this extended capability, it is possible to build files and files systems) W
2100 -40200 M
61.4 0 32 (that can not be fully accessed by 32\255bit systems.  This is very important to keep in) W
2100 -41600 M
4.2 0 32 (mind when working in an distributed environment where file systems are shared be\255) W
2100 -43000 M
(tween 32 and 64 bit systems.   ) h
2100 -44400 M
2100 -45800 M
300 -49450 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Coding Guidelines) h
300 -52100 M
/Helvetica-ISOLatin1 F 1200 o f
34.5 0 32 (When developing or porting C code the RISC ULTRIX and DEC OSF/1 Alpha systems) W
300 -53500 M
111.4 0 32 (are similar in a number of ways.  Both systems are little endian.  Both support 32\255bit) W
300 -54900 M
81.5 0 32 (integers, 16\255bit shorts, 8\255bit characters, and IEEE single and double floating point for\255) W
300 -56300 M
52.1 0 32 (mats.   And both have a similar development environment and C compiler.  The major) W
300 -57700 M
36.5 0 32 (differences you need to consider in coding are in the size of addresses, the availability) W
300 -59100 M
9.4 0 32 (of 64\255bit integer types, the data type alignment restrictions, byte and word accessibility,) W
300 -60500 M
(and interoperability between 32\255bit and 64\255bit systems.  ) h
300 -62500 M
6060 -62500 M
300 -63900 M
106.2 0 32 (The remainder of this chapter will go through specific C coding examples and outline) W
-7200 7200 T
R

showpage
$P e

%%Page: 4 4
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
2.8 0 32 (areas that may need to be changed for this 64\255bit architecture.  Many of these changes) W
300 -2600 M
91.0 0 32 (deal with the "cleaning up" of data type usage, so that you can have code that works) W
300 -4000 M
(on both the 32\255bit and 64\255bits systems.) h
300 -7650 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Header files \255 Constant definitions) h
300 -10300 M
/Helvetica-ISOLatin1 F 1200 o f
131.9 0 32 (On Alpha,  there are a few changes to the standard header files that are directly re\255) W
300 -11700 M
(lated to 64\255bit data types.  These include:  ) h
300 -13100 M
( ) h
300 -14500 M
(/usr/include/limits.h ) h
300 -35700 M
S
0 20700 m
p T
0 -20700 39601 20700 @ I N
N
S
50 -50 T
N
0 G
2835 -1500 M
/Times-Roman-ISOLatin1 $
/Times-Roman & P
/Times-Roman-ISOLatin1 F 1200 o f
(Constant) h
600 -2884 M
-50 50 T
R

S
10037 -50 T
N
0 G
2502 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Definition) h
600 -2884 M
-10037 50 T
R

S
20024 -50 T
N
0 G
2785 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Value on) h
2769 -2900 M
(ULTRIX) h
-20024 50 T
R

S
30011 -50 T
N
0 G
2437 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Value on ) h
3303 -2900 M
(Alpha) h
-30011 50 T
R

S
50 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(LONG_BIT) h
600 -2884 M
-50 3900 T
R

S
10037 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Number of bits in) h
600 -2900 M
(a long) h
-10037 3900 T
R

S
20024 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(            32) h
600 -2884 M
-20024 3900 T
R

S
30011 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(            64) h
600 -2884 M
-30011 3900 T
R

S
50 -7750 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(LONG_MAX) h
600 -2884 M
-50 7750 T
R

S
10037 -7750 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Maximum value) h
600 -2900 M
(of a long type) h
-10037 7750 T
R

S
20024 -7750 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0x7fffffff) h
600 -2884 M
-20024 7750 T
R

S
30011 -7750 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0x7fffffffffffffff) h
600 -2884 M
-30011 7750 T
R

S
50 -11600 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(LONG_MIN) h
600 -2884 M
-50 11600 T
R

S
10037 -11600 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Minimum value) h
600 -2900 M
(of a long type) h
-10037 11600 T
R

S
20024 -11600 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0x80000000) h
600 -2884 M
-20024 11600 T
R

S
30011 -11600 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0x80000000000) h
600 -2900 M
(00000) h
-30011 11600 T
R

S
50 -15450 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(ULONG_MAX) h
600 -2884 M
-50 15450 T
R

S
10037 -15450 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Maximun value) h
600 -2900 M
(of an unsigned) h
600 -4300 M
(long) h
-10037 15450 T
R

S
20024 -15450 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(4294967295U) h
600 -2884 M
-20024 15450 T
R

S
30011 -15450 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(1844674407370) h
600 -2900 M
(9551615U) h
600 -4284 M
-30011 15450 T
R

S
N
10012 0 M
10012 -20775 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
19999 0 M
19999 -20775 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
29986 0 M
29986 -20775 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -3875 M
39701 -3875 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -7725 M
39701 -7725 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -11575 M
39701 -11575 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -15425 M
39701 -15425 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
25.0 -20675.0 39551.0 20650.0 @
S
50 w
0 c
0 j
2 i
0.00 G k
R
R
R
39601 0 m
40620 -35700 M
300 -38750 M
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Constants) h
300 -41400 M
/Helvetica-ISOLatin1 F 1200 o f
39.5 0 32 (Some constants may have different values between 32\255bit and 64\255bit systems.  For in\255) W
300 -42800 M
44.7 0 32 (stance, the hexadecimal value, 0xFFFFFFFF, has the value \2551 on a 32\255bit system and) W
300 -44200 M
60.5 0 32 (the value 4294967295 on Alpha.   The table below lists a few other interesting integer) W
300 -45600 M
(constants and their values. ) h
300 -47000 M
300 -63200 M
S
0 15100 m
p T
0 -15100 39204 15100 @ I N
N
S
50 -50 T
N
0 G
2268 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(C constant ) h
600 -2884 M
-50 50 T
R

S
10037 -50 T
N
0 G
3235 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
( Value ) h
600 -2884 M
-10037 50 T
R

S
20024 -50 T
N
0 G
2287 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
( Value on ) h
3369 -2900 M
(MIPS) h
-20024 50 T
R

S
29614 -50 T
N
0 G
2137 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(Value on   ) h
3153 -2900 M
(Alpha ) h
-29614 50 T
R

S
50 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0xFFFFFFFF) h
-50 3900 T
R

S
10037 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\(2^32\) \2551 ) h
-10037 3900 T
R

S
20024 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
( \2551 ) h
6360 -1500 M
-20024 3900 T
R

S
29614 -3900 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(4294967295) h
-29614 3900 T
R

S
50 -6350 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(4294967296) h
-50 6350 T
R

S
10037 -6350 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(2^32) h
6360 -1500 M
-10037 6350 T
R

S
20024 -6350 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\(0\)) h
-20024 6350 T
R

S
29614 -6350 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(4294967296) h
-29614 6350 T
R

S
50 -8800 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0x100000000) h
-50 8800 T
R

S
10037 -8800 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(2^32) h
-10037 8800 T
R

S
20024 -8800 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\(0\)) h
6360 -1500 M
-20024 8800 T
R

S
29614 -8800 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(4294967296) h
-29614 8800 T
R

S
50 -11250 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(0xFFFFFFFFFFF) h
600 -2900 M
(FFFFF) h
-50 11250 T
R

S
10037 -11250 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\(2^64\) \2551) h
6360 -1500 M
600 -2900 M
-10037 11250 T
R

S
20024 -11250 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\2551) h
6360 -1500 M
600 -2900 M
-20024 11250 T
R

S
29614 -11250 T
N
0 G
600 -1500 M
/Times-Roman-ISOLatin1 F 1200 o f
(\2551) h
600 -2884 M
-29614 11250 T
R

S
N
10012 0 M
10012 -15175 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
19999 0 M
19999 -15175 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
29589 0 M
29589 -15175 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -3875 M
39304 -3875 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -6325 M
39304 -6325 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -8775 M
39304 -8775 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
N
0 -11225 M
39304 -11225 L
S
50 w
0 c
0 j
2 i
0.00 G k
R
R

S
25.0 -15075.0 39154.0 15050.0 @
S
50 w
0 c
0 j
2 i
0.00 G k
R
R
R
39204 0 m
-7200 7200 T
R

showpage
$P e

%%Page: 5 5
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
300 -2600 M
300 -5650 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Definitions and  Declarations ) h
300 -9200 M
n 0.857 o f
(Structure Size) h
300 -11200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
15.2 0 32 (Structures and unions on DEC OSF/1 Alpha systems change size from 32\255bit systems.) W
300 -12600 M
22.2 0 32 (This is due to the new 64\255bit data sizes and the additional alignment considerations for) W
300 -14000 M
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
151.0 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
151.0 0 32 ( and pointer.  In the example below, the structure,) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
151.0 0 32 ( TextNode) W
/Helvetica-ISOLatin1 F 1200 o f
151.0 0 32 (, grows in size be\255) W
300 -15400 M
(cause all of its members double in size from 4 bytes to 8 bytes for pointer types.) h
300 -17400 M
6060 -17400 M
(struct TextNode {) h
300 -18800 M
6060 -18800 M
11820 -18800 M
(char *text;) h
300 -20200 M
6060 -20200 M
11820 -20200 M
(struct TextNode *left;) h
300 -21600 M
6060 -21600 M
11820 -21600 M
(struct TextNode *right;) h
300 -23000 M
6060 -23000 M
11820 -23000 M
(} ;) h
300 -24400 M
300 -25800 M
179.5 0 32 (This change in size is an important consideration if you are sharing data defined in) W
300 -27200 M
12.7 0 32 (structures between 32\255bit and 64\255bit systems.   Be careful about using longs and point\255) W
300 -28600 M
89.1 0 32 (ers as members in shared structures.  These data types now introduce sizes that are) W
300 -30000 M
216.4 0 32 (not available on 32\255bit systems.  One of the most portable methods is to only use) W
300 -31400 M
136.3 0 32 (typedef types in structures and set up the types as appropriate for the system.  You) W
300 -32800 M
(can automatically do this by utilizing information in the limits.h header file. ) h
300 -34200 M
300 -35600 M
191.9 0 32 (Additionally, you should be careful when building unions between ints and pointers,) W
300 -37000 M
(since they are no longer the same size.  ) h
300 -38400 M
300 -41300 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Structure Member Alignment) h
300 -43300 M
/Helvetica-ISOLatin1 F 1200 o f
107.2 0 32 (Members of structures and unions are aligned on their "natural" boundaries.  That is,) W
300 -44700 M
251.9 0 32 (char is aligned on a byte boundary, short on a word boundary, int on a longword) W
300 -46100 M
(boundary, and longs and pointers on quadword boundaries.   ) h
300 -47500 M
6060 -47500 M
300 -48900 M
65.2 0 32 (This means that additional space will be used for padding member alignment in struc\255) W
300 -50300 M
(tures and unions.) h
300 -52300 M
6060 -52300 M
(struct  TextCountNode {) h
300 -53700 M
6060 -53700 M
(            char  *text; ) h
300 -55100 M
6060 -55100 M
(             int size,) h
300 -56500 M
6060 -56500 M
(             struct TextCountNode *left;) h
300 -57900 M
6060 -57900 M
(             struct TextCountNode *right;) h
29100 -57900 M
300 -59300 M
6060 -59300 M
(};) h
300 -60700 M
300 -62100 M
132.1 0 32 (On 32\255bit systems the size of this structure would be 16 bytes. On 64\255bit Alpha sys\255) W
300 -63500 M
61.4 0 32 (tems the size of the structure would be 32 bytes: 8 bytes for each pointer and 4 bytes) W
-7200 7200 T
R

showpage
$P e

%%Page: 6 6
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
(of padding after the member, ) h
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1200 o f
(size) h
/Helvetica-ISOLatin1 F 1200 o f
(, for the alignment of the pointer, ) h
/Helvetica-Bold-ISOLatin1 F 1200 o f
(left.) h
40620 -1200 M
300 -3200 M
/Helvetica-ISOLatin1 F 1200 o f
167.5 0 32 (Additional padding may also be introduced at the end of structure, to assure proper) W
300 -4600 M
29.4 0 32 (structure alignment for arrays of these structures.  The structure must terminate on the) W
300 -6000 M
(same alignment boundary on which it started.) h
300 -7400 M
300 -8800 M
101.1 0 32 (Given these additional alignment considerations, you should always use) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
101.1 0 32 ( sizeof) W
/Helvetica-ISOLatin1 F 1200 o f
101.1 0 32 ( to de\255) W
300 -10200 M
132.2 0 32 (termine the size of a structure.  Don't assume the size of a structure is the accumu\255) W
300 -11600 M
80.2 0 32 (lated size of all of the objects defined in it.  Additional space will be taken up for pad\255) W
300 -13000 M
(ding the member alignment.  ) h
300 -15000 M
155.7 0 32 (To minimize the amount of padded needed, you may want to reorder members in a) W
300 -16400 M
(structure.   For example, ) h
300 -18400 M
6060 -18400 M
(struct s {) h
300 -19800 M
6060 -19800 M
11820 -19800 M
(int count;) h
300 -21200 M
6060 -21200 M
11820 -21200 M
(struct s *next;) h
300 -22600 M
6060 -22600 M
11820 -22600 M
(int total;) h
300 -24000 M
6060 -24000 M
(}) h
300 -26000 M
(has a ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(sizeo) h
/Helvetica-ISOLatin1 F 1200 o f
(f 24 bytes.  This definition can be recoded to ) h
300 -27400 M
6060 -27400 M
300 -28800 M
6060 -28800 M
(struct s{) h
300 -30200 M
6060 -30200 M
11820 -30200 M
(struct s *next;) h
300 -31600 M
6060 -31600 M
11820 -31600 M
(int count;) h
300 -33000 M
6060 -33000 M
11820 -33000 M
(int total;) h
300 -34400 M
6060 -34400 M
(}) h
300 -36400 M
(Which has a ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(sizeof) h
/Helvetica-ISOLatin1 F 1200 o f
( 16 bytes.) h
300 -37800 M
300 -39200 M
300 -42100 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Structure Alignment) h
300 -44100 M
/Helvetica-ISOLatin1 F 1200 o f
240.7 0 32 (In order to have specific members aligned on their required boundaries, structures) W
300 -45500 M
(themselves need to have the alignment of the strictest aligned member.  ) h
300 -47500 M
6060 -47500 M
(struct  {) h
11820 -47500 M
300 -48900 M
6060 -48900 M
11820 -48900 M
(char *text;) h
300 -50300 M
6060 -50300 M
11820 -50300 M
(int count;) h
300 -51700 M
6060 -51700 M
11820 -51700 M
(} CountedString;) h
300 -53700 M
300 -55100 M
13.1 0 32 (In the example above, the sizeof\() W
/Helvetica-Bold-ISOLatin1 F 1200 o f
13.1 0 32 (CountedString) W
/Helvetica-ISOLatin1 F 1200 o f
13.1 0 32 (\) is 16 bytes \(*) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
13.1 0 32 (text) W
/Helvetica-ISOLatin1 F 1200 o f
13.1 0 32 ( = 8 bytes,) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
13.1 0 32 ( count) W
/Helvetica-ISOLatin1 F 1200 o f
13.1 0 32 ( =) W
300 -56500 M
158.9 0 32 (4 bytes, tail padding = 4 bytes.\)  This structure needs to be aligned on a quadword) W
300 -57900 M
31.5 0 32 (boundary because the pointer requires quadword alignment.  This means that a defini\255) W
300 -59300 M
32.3 0 32 (tion that has ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
32.3 0 32 (CountedString) W
/Helvetica-ISOLatin1 F 1200 o f
32.3 0 32 ( as a member will have each reference to ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
32.3 0 32 (CountedString) W
300 -60700 M
/Helvetica-ISOLatin1 F 1200 o f
(on a quadword boundary.) h
300 -62700 M
6060 -62700 M
(CountedString CsArray[10]) h
-7200 7200 T
R

showpage
$P e

%%Page: 7 7
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
6060 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
(struct {) h
300 -2600 M
6060 -2600 M
11820 -2600 M
(char line[MAX_LINE];) h
300 -4000 M
6060 -4000 M
11820 -4000 M
(struct CountedString string;) h
300 -5400 M
6060 -5400 M
(}TextAndString;) h
300 -7400 M
165.2 0 32 (In each of the above examples, the ) W
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1200 o f
165.2 0 32 (CountedString) W
/Helvetica-ISOLatin1 F 1200 o f
165.2 0 32 ( structure will force alignment of) W
300 -8800 M
53.4 0 32 (the beginning of the structure to be on a quadword boundary.    In the first declaration) W
300 -10200 M
162.3 0 32 (above, no additional padding \(beyond 4 bytes of tail padding\) will be introduced be\255) W
300 -11600 M
29.4 0 32 (cause ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
29.4 0 32 (CountedString) W
/Helvetica-ISOLatin1 F 1200 o f
29.4 0 32 ( will naturally align on a quadword boundary.  In the second, ad\255) W
300 -13000 M
40.3 0 32 (ditional padding maybe introduced \(depending upon the value of MAX_LINE\) to insure) W
300 -14400 M
(proper quadword alignment for the structure member, ) h
/Helvetica-Bold-ISOLatin1 F 1200 o f
(string) h
/Helvetica-ISOLatin1 F 1200 o f
(.) h
300 -15800 M
300 -18700 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Variable Declarations) h
300 -20100 M
6060 -20100 M
300 -22100 M
/Helvetica-ISOLatin1 F 1200 o f
60.6 0 32 (With the changes in ) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
60.6 0 32 (long ) W
/Helvetica-ISOLatin1 F 1200 o f
60.6 0 32 (and pointer type you should be careful to code your applica\255) W
300 -23500 M
14.4 0 32 (tion so that it can work on both 32\255bit and 64\255bit systems. Check your ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
14.4 0 32 (int) W
/Helvetica-ISOLatin1 F 1200 o f
14.4 0 32 ( and ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
14.4 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
14.4 0 32 ( dec\255) W
300 -24900 M
163.4 0 32 (larations.  If you have specific variables that you need to be 32 bits in size on both) W
300 -26300 M
96.5 0 32 (DEC OSF/1 on MIPS and Alpha then define the type to be ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
96.5 0 32 (int.) W
/Helvetica-ISOLatin1 F 1200 o f
96.5 0 32 (  If the variable should) W
300 -27700 M
35.6 0 32 (be 32 bits on DEC OSF/1 on MIPS and 64 bits on Alpha then define the variable to be) W
300 -29100 M
/Helvetica-Oblique-ISOLatin1 F 1200 o f
128.1 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
128.1 0 32 (.   Remember if the type specifier is missing from a declaration, it defaults to) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
128.1 0 32 ( int) W
300 -30500 M
/Helvetica-ISOLatin1 F 1200 o f
60.9 0 32 (type.  For example, here are six declarations which declare the variables to be of size ) W
300 -31900 M
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(int ) h
/Helvetica-ISOLatin1 F 1200 o f
(and the function to be returning type) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
( int) h
/Helvetica-ISOLatin1 F 1200 o f
(.  ) h
300 -33300 M
6060 -33300 M
300 -34700 M
6060 -34700 M
(extern e;) h
300 -36100 M
6060 -36100 M
(register n;) h
300 -37500 M
6060 -37500 M
(static x;) h
300 -38900 M
6060 -38900 M
(unsigned i;) h
17580 -38900 M
300 -40300 M
6060 -40300 M
(const c;) h
300 -41700 M
6060 -41700 M
(funtion\(\);) h
300 -43100 M
300 -46000 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Bit\255Fields) h
300 -48000 M
/Helvetica-ISOLatin1 F 1200 o f
105.5 0 32 (Bit fields are allowed on any integral type on Alpha.  \(ANSI C only requires, bit\255fields) W
300 -49400 M
132.1 0 32 (with int, signed int, and unsigned int types.\)  In a C declaration, if a bit\255field immedi\255) W
300 -50800 M
34.5 0 32 (ately follows another in a structure declaration the following bit\255field will be packed into) W
300 -52200 M
41.7 0 32 (adjacent bits of the former unit.  Since long is now 64 bits in length on Alpha, adjacent) W
300 -53600 M
92.9 0 32 (declarations of bit\255fields of type long may contain multiple bit\255field definitions in cases) W
300 -55000 M
136.5 0 32 (that previously did not on RISC or VAX.  This change may cause different results in) W
300 -56400 M
348.3 0 32 (operations on these bit\255fields.  To insure the same behavior when porting code,) W
300 -57800 M
(change bit\255field definitions of type ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(long) h
/Helvetica-ISOLatin1 F 1200 o f
( to ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(int) h
/Helvetica-ISOLatin1 F 1200 o f
(.) h
-7200 7200 T
R

showpage
$P e

%%Page: 8 8
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1350 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Statements and Expressions) h
300 -4900 M
n 0.857 o f
(Variable Assignments and Function Arguments) h
300 -6900 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
(On DEC OSF/1 Alpha,  since) h
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
( int) h
/Helvetica-ISOLatin1 F 1200 o f
( and ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(long) h
/Helvetica-ISOLatin1 F 1200 o f
( are no longer defined to be the same size, ) h
300 -8300 M
111.2 0 32 (you can not freely interchange their use without the possibility of truncation of signifi\255) W
300 -9700 M
65.4 0 32 (cant digits.  Use the lint utility to help you find these problems.   You should avoid as\255) W
300 -11100 M
(signments such as ) h
300 -12500 M
300 -13900 M
6060 -13900 M
(int i;) h
300 -15300 M
6060 -15300 M
(long l;) h
300 -17300 M
6060 -17300 M
(i = l;) h
300 -18700 M
300 -20100 M
(Also, you should avoid passing long arguments to functions expecting type ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(int) h
/Helvetica-ISOLatin1 F 1200 o f
(.  ) h
300 -21500 M
300 -22900 M
6060 -22900 M
(int  toascii\(int\); ) h
300 -24300 M
6060 -24300 M
(int i;) h
300 -25700 M
6060 -25700 M
(long l;) h
300 -27700 M
6060 -27700 M
(i= toascii\(l\) ) h
300 -29100 M
300 -30500 M
300 -31900 M
93.6 0 32 (Pointers and ints should not be freely exchanged on DEC OSF/1 Alpha.  Assigning a) W
300 -33300 M
81.8 0 32 (pointer to an int,  then assigning back to a pointer,  and dereferencing the pointer will) W
300 -34700 M
(result in a bus error.   ) h
300 -36100 M
6060 -36100 M
300 -37500 M
6060 -37500 M
(int i ;) h
300 -38900 M
6060 -38900 M
(char *buffer;) h
300 -40900 M
6060 -40900 M
(buffer = \(char *\)malloc\(MAX_LINE\)) h
300 -42300 M
6060 -42300 M
(i = \(int\)buffer;) h
17580 -42300 M
300 -43700 M
6060 -43700 M
(buffer = \(char*\)i;) h
300 -45100 M
300 -46500 M
151.1 0 32 (Similarly, passing a pointer to a function expecting an ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
151.1 0 32 (int ) W
/Helvetica-ISOLatin1 F 1200 o f
151.1 0 32 (argument will result in lost) W
300 -47900 M
(information.) h
300 -49300 M
6060 -49300 M
(void f\(\);) h
300 -50700 M
6060 -50700 M
(char *cp;) h
300 -52700 M
6060 -52700 M
(f\(cp\);) h
11820 -52700 M
17580 -52700 M
300 -54100 M
300 -55500 M
70.7 0 32 (This nonportable function declaration will produce a compiler warning if you use ANSI) W
300 -56900 M
(C prototypes, such as: ) h
300 -58300 M
300 -59700 M
6060 -59700 M
(void f\(int\); ) h
300 -61100 M
6060 -61100 M
(char *cp;) h
300 -63100 M
6060 -63100 M
(f\(cp\); ) h
-7200 7200 T
R

showpage
$P e

%%Page: 9 9
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
300 -2600 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
161.1 0 32 (You can also find these pointer to int assignments by using the \255h flag of the lint\(1\)) W
300 -4000 M
248.5 0 32 (command, which will find pointer to ) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
248.5 0 32 (int) W
/Helvetica-ISOLatin1 F 1200 o f
248.5 0 32 ( argument passing and assignments.  Even) W
300 -5400 M
106.7 0 32 (though a pointer can be converted to a type ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
106.7 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
106.7 0 32 ( on Alpha without a loss of informa\255) W
300 -6800 M
(tion, you should use the ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(void * ) h
/Helvetica-ISOLatin1 F 1200 o f
(type if you need to use a generic pointer type.) h
300 -8200 M
300 -9600 M
4.5 0 32 (Additionally, watch out for poor programming practices such as different multiple defini\255) W
300 -11000 M
30.1 0 32 (tions of the same object.   For instance,  two structures that are used in different areas) W
300 -12400 M
(of your code to refer to the same object in different ways.  Such as) h
300 -14400 M
6060 -14400 M
(struct node {) h
300 -15800 M
6060 -15800 M
(    int src_addr, dst_addr; ) h
300 -17200 M
6060 -17200 M
(    char *name; ) h
300 -18600 M
6060 -18600 M
(   } ; ) h
300 -20000 M
300 -22000 M
6060 -22000 M
(struct node {) h
300 -23400 M
6060 -23400 M
(    struct node *src, *dst;) h
300 -24800 M
6060 -24800 M
(    char * name;) h
300 -26200 M
6060 -26200 M
(  }) h
300 -28200 M
300 -29600 M
79.3 0 32 (This type of nonstandard coding should be replace with a union declaration.  Be thor\255) W
300 -31000 M
136.4 0 32 (ough when porting this type of code to a 64\255bit system, the interdependency and in\255) W
300 -32400 M
(compatibilities between these two structures may be difficult to find.  ) h
300 -33800 M
300 -35200 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Integer and Long Constants \255 Assignment and Argument Passing) h
300 -36600 M
300 -38000 M
/Helvetica-ISOLatin1 F 1200 o f
77.7 0 32 (In C, an integer constant is specified like, 543210.  To specify a long int constant you) W
300 -39400 M
59.3 0 32 (use the suffix L or l.  To specify a unsigned long you use the UL or ul suffix. \(L is pre\255) W
300 -40800 M
113.0 0 32 (ferred since l is easily confused with 1\). Note the example where three different con\255) W
300 -42200 M
(stants are passed to the function, ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(labs\(\)) h
/Helvetica-ISOLatin1 F 1200 o f
(: ) h
300 -44200 M
6060 -44200 M
(labs\(543210\)) h
300 -45600 M
6060 -45600 M
(labs\(543210L\)) h
300 -47000 M
6060 -47000 M
(labs\(543210UL\)) h
300 -48400 M
300 -49800 M
127.7 0 32 (On DEC OSF/1 on MIPS, 543210 would be passed as a 4 byte constant in all three) W
300 -51200 M
35.6 0 32 (examples.  On an Alpha system ,  543210 would be treated as a 4 byte constant,  and) W
300 -52600 M
162.7 0 32 (543210L or 543210UL would be treated as a 8 byte constant.  If the ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
162.7 0 32 (labs\(\) ) W
/Helvetica-ISOLatin1 F 1200 o f
162.7 0 32 (function) W
300 -54000 M
214.8 0 32 (was expecting a ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
214.8 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
214.8 0 32 ( argument each of these invocations would work as expected) W
300 -55400 M
96.1 0 32 (since the ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
96.1 0 32 (int ) W
/Helvetica-ISOLatin1 F 1200 o f
96.1 0 32 (constants would be converted to ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
96.1 0 32 (long.) W
/Helvetica-ISOLatin1 F 1200 o f
96.1 0 32 (   Problems happen if the function) W
300 -56800 M
/Helvetica-Oblique-ISOLatin1 F 1200 o f
65.1 0 32 (labs\(\) ) W
/Helvetica-ISOLatin1 F 1200 o f
65.1 0 32 (was expecting type int.  In this case the long constant would be truncated to an) W
300 -58200 M
38.7 0 32 (integer constant.  This truncation would result in the loss of significant digits if the con\255) W
300 -59600 M
31.5 0 32 (stant was greater then maximum integer constant \(INT_MAX\) of +2147483647, or less) W
300 -61000 M
161.9 0 32 (then the minimum integer constant \(INT_MIN\) of \2552147483648, or for unsigned con\255) W
300 -62400 M
672.2 0 32 (stants greater then the maximum unsigned integer constant \(UINT_MAX\) of) W
300 -63800 M
37.1 0 32 (4294967295.  This problem would also be present in an assignment expression where) W
-7200 7200 T
R

showpage
$P e

%%Page: 10 10
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
158.0 0 32 (a long integer constant was assigned to a variable of type int.   In these cases it is) W
300 -2600 M
74.3 0 32 (important to explicitly use the L or UL suffix and make sure the function arguments or) W
300 -4000 M
(variables being assigned to are of the appropriate ) h
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(long) h
/Helvetica-ISOLatin1 F 1200 o f
( type.) h
300 -6000 M
86.0 0 32 (It is also important to note that when you are passing zero to a pointer argument and) W
300 -7400 M
56.7 0 32 (no function prototype is visible, always use NULL \(Defined in stdio.h\).  Using) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
56.7 0 32 ( 0 ) W
/Helvetica-ISOLatin1 F 1200 o f
56.7 0 32 (will re\255) W
300 -8800 M
42.3 0 32 (sult in using a 4 byte zero instead of a 8 byte zero \(0L\).   \(In a comparison, an assign\255) W
300 -10200 M
118.7 0 32 (ment, or a function call where the correct function prototype is in scope,  standard C) W
300 -11600 M
(promotion rules will be in effect and the correct value will be assigned.\)) h
300 -13000 M
300 -15900 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Integer and Long Constants \255 Shift operations) h
300 -17900 M
/Helvetica-ISOLatin1 F 1200 o f
104.5 0 32 (A bit shift operation on a integer constant will yield an 32\255bit constant.  If you need a) W
300 -19300 M
96.6 0 32 (result of type long then you need to use the L or UL suffix for long integer constants. ) W
300 -20700 M
(For example, ) h
300 -22100 M
300 -23500 M
6060 -23500 M
(long value;) h
300 -24900 M
300 -26300 M
6060 -26300 M
(value = 10 << 2; ) h
17580 -26300 M
300 -28300 M
300 -29700 M
2.9 0 32 (results in ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
2.9 0 32 (value) W
/Helvetica-ISOLatin1 F 1200 o f
2.9 0 32 ( getting assigned a 32\255bit constant. The top 32 bits of ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
2.9 0 32 (value) W
/Helvetica-ISOLatin1 F 1200 o f
2.9 0 32 ( will depend) W
300 -31100 M
157.0 0 32 (on the type of the value shifted.  Signed values are sign\255extended; unsigned values) W
300 -32500 M
9.2 0 32 (are zero extended.  If you want a 64\255bit constant then be sure to use the L or UL suffix.) W
300 -33900 M
15.1 0 32 (\(Note that only the left operand of a shift operator determines the result type.  The type) W
300 -35300 M
(of shift count operand is irrelevant.\) ) h
300 -38200 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Sizeof expression) h
300 -40200 M
/Helvetica-ISOLatin1 F 1200 o f
73.2 0 32 (The result of the ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
73.2 0 32 (sizeof) W
/Helvetica-ISOLatin1 F 1200 o f
73.2 0 32 ( operator is of type ) W
/Helvetica-Bold-ISOLatin1 F 1200 o f
73.2 0 32 (size_t) W
/Helvetica-ISOLatin1 F 1200 o f
73.2 0 32 (, which is of an ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
73.2 0 32 (unsigned ) W
73.2 0 32 (long) W
/Helvetica-ISOLatin1 F 1200 o f
73.2 0 32 ( on Al\255) W
300 -41600 M
(pha.  ) h
300 -44500 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Pointer Subtraction) h
300 -46500 M
/Helvetica-ISOLatin1 F 1200 o f
36.4 0 32 (The length of the integer required to hold the difference between two pointers to mem\255) W
300 -47900 M
(bers of the same array, ptrdiff_t \(stddef.h\), is an ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(signed long) h
/Helvetica-ISOLatin1 F 1200 o f
( on Alpha.) h
300 -49300 M
300 -52200 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(Functions with a variable number of arguments) h
300 -54200 M
/Helvetica-ISOLatin1 F 1200 o f
149.8 0 32 (When writing a routine that receives a variable \(context\255dependent\) number of argu\255) W
300 -55600 M
147.5 0 32 (ments you must use the stdargs \(stdarg.h\) or varargs \(varargs.h\) mechanism.   See) W
300 -57000 M
(the varargs\(3\) reference page for more information on the use of these macros. ) h
300 -58400 M
-7200 7200 T
R

showpage
$P e

%%Page: 11 11
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1350 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1400 o f
(Library Calls) h
300 -4900 M
n 0.857 o f
(printf, scanf functions) h
300 -6900 M
300 -8300 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
122.0 0 32 (When using the printf\255type function conversion specifiers for longs use the "l" \(lower\255) W
300 -9700 M
149.7 0 32 (case letter L\) size specification, with the d, u, o, and x operations to specify assign\255) W
300 -11100 M
23.6 0 32 (ment of type long or unsigned long.  For instance, when printing a long as signed deci\255) W
300 -12500 M
131.9 0 32 (mal use the %ld instead of %d, when printing a long as a unsigned decimal use the) W
300 -13900 M
6.1 0 32 (%lu instead of %u. If the letter l size specification is not used the type is assumed to be) W
300 -15300 M
98.3 0 32 (int, unsigned int, or int * depending upon the conversion specification.  In which case) W
300 -16700 M
(the long types will be converted to the smaller int types and information may be lost.   ) h
300 -18700 M
14.4 0 32 (When printing a pointer use %p.  If you want to print the pointer as a specific represen\255) W
300 -20100 M
141.1 0 32 (tation then the pointer should be cast to an appropriate integer type \(long for Alpha\)) W
300 -21500 M
32.0 0 32 (before using the desired format specifier.  For example, to print a pointer as a long un\255) W
300 -22900 M
(signed decimal number use %lu: ) h
300 -24900 M
6060 -24900 M
(char *p;) h
300 -26900 M
6060 -26900 M
(printf \( "%p %lu\\n",  \(void *\)p,  \(long\)p \);) h
300 -28300 M
300 -29700 M
85.1 0 32 (For a portable way to print an integer of arbitrary size, case the integer to long or un\255) W
300 -31100 M
(signed long, then use the %L conversion specifier.  For example:) h
300 -33100 M
6060 -33100 M
(printf \("%ld\\n", \(unsigned long\) sizeof \(num\)\);) h
300 -34500 M
300 -37400 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(malloc, calloc functions) h
300 -38800 M
300 -40800 M
/Helvetica-ISOLatin1 F 1200 o f
59.5 0 32 (Memory allocation library functions such as ) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
59.5 0 32 (ma) W
/Helvetica-ISOLatin1 F 1200 o f
59.5 0 32 (lloc guarantee to return data aligned to) W
300 -42200 M
79.7 0 32 (the maximum alignment of any object.  On Alpha, ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
79.7 0 32 (malloc) W
/Helvetica-ISOLatin1 F 1200 o f
79.7 0 32 ( returns a pointer to memory) W
300 -43600 M
(that is quadword aligned.) h
300 -46500 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(lseek function) h
300 -48500 M
/Helvetica-ISOLatin1 F 1200 o f
2.7 0 32 (When calling the) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
2.7 0 32 ( lseek ) W
/Helvetica-ISOLatin1 F 1200 o f
2.7 0 32 (system call for setting the current position in a file,  use the ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
2.7 0 32 (off_t) W
300 -49900 M
/Helvetica-ISOLatin1 F 1200 o f
6.1 0 32 (type defined in ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
6.1 0 32 (types.h) W
/Helvetica-ISOLatin1 F 1200 o f
6.1 0 32 ( for the file offset.   Passing an int or long constant may work but) W
300 -51300 M
69.4 0 32 (it is not the portable and is not guarantee to continue to work.  The following example) W
300 -52700 M
(shows correct uses of ) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
(lseek) h
/Helvetica-ISOLatin1 F 1200 o f
(.) h
300 -54100 M
300 -55500 M
(       lseek function: ) h
300 -56900 M
300 -58300 M
6060 -58300 M
(#include <unistd.h>) h
300 -59700 M
6060 -59700 M
300 -61100 M
6060 -61100 M
(off_t offset, pos;) h
300 -62500 M
(                ...) h
300 -63900 M
6060 -63900 M
(pos = lseek\( fd, offset, SEEK_SET \);) h
-7200 7200 T
R

showpage
$P e

%%Page: 12 12
/$P a D
g N
0 79200 T
S
R
S
7200 -7200 T
N
0 G
300 -1200 M
6060 -1200 M
/Helvetica-ISOLatin1 $
/Helvetica & P
/Helvetica-ISOLatin1 F 1200 o f
(pos = lseek\( fd, \(off_t\)0, SEEK_CUR\);) h
300 -2600 M
300 -4000 M
300 -6900 M
/Helvetica-Bold-ISOLatin1 $
/Helvetica-Bold & P
/Helvetica-Bold-ISOLatin1 F 1200 o f
(fsetpos, fgetpos functions) h
300 -8900 M
/Helvetica-ISOLatin1 F 1200 o f
19.5 0 32 (When setting or getting the file postions for a file with the ANSI C functions of ) W
/Helvetica-Oblique-ISOLatin1 $
/Helvetica-Oblique & P
/Helvetica-Oblique-ISOLatin1 F 1200 o f
19.5 0 32 (fsetpos\(\)) W
300 -10300 M
/Helvetica-ISOLatin1 F 1200 o f
94.5 0 32 (or) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
94.5 0 32 ( fgetpos\(\)) W
/Helvetica-ISOLatin1 F 1200 o f
94.5 0 32 ( respectively,  the file position is specified by a value of type ) W
/Helvetica-Oblique-ISOLatin1 F 1200 o f
94.5 0 32 (fpos_t) W
/Helvetica-ISOLatin1 F 1200 o f
94.5 0 32 (.  This) W
300 -11700 M
(type is defined as a) h
/Helvetica-Oblique-ISOLatin1 F 1200 o f
( long) h
/Helvetica-ISOLatin1 F 1200 o f
( on Alpha.   ) h
300 -15350 M
/Helvetica-Bold-ISOLatin1 F 1400 o f
(D) h
(evelopment Tools) h
300 -18000 M
/Helvetica-ISOLatin1 F 1200 o f
111.4 0 32 (The DEC OSF/1 Alpha system supplies a number of development tools that help mi\255) W
300 -19400 M
70.2 0 32 (grate applications to this 64\255bit system.  These include an enhanced lint tools, special) W
300 -20800 M
(linker flags to help with truncation of 64\255bit addresses, and a 32\255bit compatibility mode.) h
300 -23700 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(lint) h
300 -25700 M
/Helvetica-ISOLatin1 F 1200 o f
65.1 0 32 (The lint\(1\) utility on both DEC OSF/1 MIPS and Alpha have been enhanced to find int) W
300 -27100 M
(and pointer assignments and argument passing.  ) h
300 -28500 M
300 -31400 M
/Helvetica-Bold-ISOLatin1 F 1200 o f
(ld) h
300 -33400 M
/Helvetica-ISOLatin1 F 1200 o f
132.0 0 32 (The Alpha linker, ld\(1\), loads the program text and data in the high 64 bit virtual ad\255) W
300 -34800 M
94.6 0 32 (dress space of the process by default.  This means that no valid addresses will be in) W
300 -36200 M
13.5 0 32 (the range of the 32\255bit address.  Therefore. unintended pointer truncations will trap into) W
300 -37600 M
60.9 0 32 (the kernel and cause a runtime error.  This diagnostic feature assists  in porting appli\255) W
300 -39000 M
77.9 0 32 (cations from 32 bit to 64 bit environments.  To override this behavior you can use the) W
300 -40400 M
(\255T/\255D ld options to move the program in the address space.    ) h
300 -42400 M
300 -44400 M
300 -46400 M
( ) h
300 -48400 M
300 -49498 M
300 -50815 M
-7200 7200 T
R

showpage
$P e

%%Trailer
$D restore
end % DEC_WRITE_dict
%%Pages: 12
%%DocumentFonts: Helvetica-Bold-ISOLatin1
%%+ Helvetica-ISOLatin1
%%+ Symbol
%%+ Times-Roman-ISOLatin1
%%+ Helvetica-Oblique-ISOLatin1

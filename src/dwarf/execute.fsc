C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C.Ident:	SYS_EXECUTE (EXECUTE.FSC)
C.Keywords:	DWARF, Program, Execution Start
C.Author:	Friso Olnon (NFRA, Dwingeloo)
C.Language:	Fortran
C.Environment:	Unix, VAX
C.Comments:
C.Version:	900417 FMO - recreation
C.Version:	910913 FMO - for N-programs: add LOG, DATAB, INFIX, APPLY and
C			DE_APPLY qualifiers and change the meaning of RUN
C.Version:	911203 GvD - start program via EXECL if interactive
C.Version:	920313 GvD - include optional arguments
C.Version:	930607 WNB - add UFLAG
C.Version:	930923 CMV - logical names for new maintenance system
C.Version:	940121 CMV - changed messenger
C.Version:	940211 WNB - change file inquire
C.Version:	940215 WNB - add MEMORY
C.Version:	940216 WNB - Make FSC
C.Version:	940223 CMV - Call to SYMBOL_DEFINE had disappeared
C.Version:	940224 CMV - Quote DATAB and INFIX before passing to sp_list
C.Version:	940224 CMV - add MODELB
C.Version:	940304 WNB - add proper handling of N switches
C				quote MODELB before passing to sp_list
C-------------------------------------------------------------------------
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	SUBROUTINE EXECUTE
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'DWE_DEF'
C
C
C.Purpose:	Start a DWARF application program
C.Returns:	Not applicable
C.Notes:
C	- The program is started via a EXECL or SYSTEM call.
C	- With /BATCH or /NOWAIT, the program will run in the background;
C	  otherwise it will run in the foreground.
C	- Program input:
C		if /INPUT=<file> is given: from that file;
C		else if /BATCH: from the null device;
C		else: from the terminal (note that /NOWAIT causes the program
C			to stop when it needs input).
C	- Program output:
C		if /BATCH: in the file <prognam><stream>.log;
C		otherwise: to the terminal.
C	- When /DEBUG is given, the program will be executed under dbx. The
C	  debug switch is ignored for /BATCH, /NOWAIT and /INPUT.
C-------------------------------------------------------------------------
C
	CHARACTER*(*)	PROGRAM, TYPE
		PARAMETER (PROGRAM  = 'EXECUTE')
		PARAMETER (TYPE     = '.EXE'   )
C
	INTEGER		SP_LIST
	INTEGER		CLI_INIT, CLI_GET
	INTEGER		DWC_CTL_OPEN
#ifdef wn_vx__
	INTEGER		DWC_WAITPR
	INTEGER		DWC_IBMODE_INQ, DWC_IDENT_GET
	INTEGER		SYS$GETJPI, SYS$WAITFR
#endif
	INTEGER		DWC_SYM_SPLIT
	INTEGER		DWC_PROG_CHECK, DWC_STREAM_CHECK, DWC_STREAM_GET
	INTEGER		DWC_SYM_BUILD
	INTEGER		PPD_INIT, PPD_EXIT
	INTEGER		MSG_INIT, MSG_SET
	INTEGER		SYMBOL_DEFINE, SYMBOL_EXIT, FILNAM_FULL
	INTEGER		SYMBOL_GET
	INTEGER		STR_SIGLEN, STR_COPY
	INTEGER		GEN_SYSTEM
	LOGICAL		WNFOP
	INTEGER		WNCALN
C
	CHARACTER	PROG*9, STRM*12, STREAM*12, KEY*16
	CHARACTER	SYMNAM*25, SYMVAL*255, QUALS*512
	CHARACTER	EXEFILE*80, INFILE*80, OUTFILE*80, COMMAND*256
	CHARACTER*40	SYMBOL
	CHARACTER*32	TXT
	INTEGER		IS, TMP, LEXE, LIN, LOUT, LC
	INTEGER		LP,LS,LK,LN,LV,LQ,LSYM
	LOGICAL		IS_GLOBAL, EXIST
	INTEGER		FCAT
#ifdef wn_vx__
	CHARACTER	PRCNAM*15
	INTEGER		LPRC
#endif
C
C					Initialize
C					- get DWARF control variables
C					- start messenger
C					- initialize command-line interpreter
C
	IS = DWC_CTL_OPEN ()
	IF (IAND(IS,1).NE.0) IS = MSG_INIT (PROGRAM,F_T)
	IF (IAND(IS,1).NE.0) IS = CLI_INIT (NRARG,SW__TXT,ATTR,PROMPT,DEFVAL)
	IF (IAND(IS,1).EQ.0) GOTO 999
C
C					Get program and stream names
C
	IS = CLI_GET (SW__TXT(SW_PRO),VSW(SW_PRO),LSW(SW_PRO))
	IF (IAND(IS,1).NE.0)
	1	IS = DWC_SYM_SPLIT (VSW(SW_PRO)(:LSW(SW_PRO)),PROG,LP,
	1			STRM,LS,KEY,LK)
	IF (IAND(IS,1).NE.0) IS = DWC_PROG_CHECK (PROG(:LP),LP,IS_GLOBAL)
	IF (IAND(IS,1).EQ.0) GOTO 999
	IF (LS.GT.0) THEN
		IS = DWC_STREAM_CHECK (STRM(:LS),STREAM,LS,IS_GLOBAL)
	ELSE
		IS = DWC_STREAM_GET (STREAM,LS,IS_GLOBAL)
	END IF
	IF (IAND(IS,1).EQ.0) GOTO 999
C
C					Find the executable image file
C

	IS = FILNAM_FULL (PROG(:LP)//TYPE,EXEFILE,LEXE,' ')
	IF (IAND(IS,1).EQ.0) GOTO 999
	EXIST=WNFOP(FCAT,EXEFILE(:LEXE),'R')
	IF (EXIST) THEN
		CALL WNFCL(FCAT)
		IS = MSG_SET (DWC_EXEUSER,1)
		CALL WNCTXT(DWLOG,DWMSG,PROG(:LP)//TYPE)
	ELSE
	   IS = FILNAM_FULL (PROG(:LP)//TYPE,EXEFILE,LEXE,'n_uexe')
	   IF (IAND(IS,1).EQ.0) GOTO 999
	   EXIST=WNFOP(FCAT,EXEFILE(:LEXE),'R')
	   IF (EXIST) THEN
		CALL WNFCL(FCAT)
		IS = MSG_SET (DWC_EXEUSER,1)
		CALL WNCTXT(DWLOG,DWMSG,PROG(:LP)//TYPE)
	   ELSE
		IS = FILNAM_FULL (PROG(:LP)//TYPE,EXEFILE,LEXE,'n_exe')
		IF (IAND(IS,1).EQ.0) GOTO 999
		EXIST=WNFOP(FCAT,EXEFILE(:LEXE),'R')
		IF (EXIST) THEN
		  CALL WNFCL(FCAT)
		ELSE
		  GOTO 991
		END IF
	   END IF
	END IF
#ifdef wn_vx__
C
C					Wait for image in this stream
C					- First SYS$GETJPI is used to do the
C					  wait job quicker in case the stream
C					  is inactive (DWC_WAITPR would give
C					  more overhead).
C					- Besides, it takes a while before
C					  SPAWN starts the image in the
C					  subprocess, so DWC_WAITPR might not
C					  recognize the image name (and won't
C					  wait). This happens if a next EXECUTE
C					  is done immediately after the first
C					  EXECUTE/NOWAIT.
C
	IS = DWC_IDENT_GET (PRCNAM,LPRC)
	IF (IAND(IS,1).EQ.0) GOTO 999
	PRCNAM(LPRC+1:) = STREAM
	LPRC = LPRC+LS
	DO WHILE (SYS$GETJPI(%VAL(0),,PRCNAM(:LPRC),0,,,))
		CALL SYS$WAITFR (%VAL(0))
		TMP = DWC_WAITPR (PROG,STREAM)
	END DO
#endif
C
C					Analyse the qualifiers
C
	DO I=2,NRARG
	  IS = CLI_GET (SW__TXT(I),VSW(I),LSW(I))
	  IF (IAND(IS,1).EQ.0) GOTO 999
	  QSW(I) = IS
	END DO
C
C SET SAVE FOR RUN
C
	IF (PROG(:1).NE.'N' .AND. QSW(SW_RUN).EQ.DWC_ABSENT)
	1		QSW(SW_RUN) = DWC_PRESENT
	IF (PROG(:1).EQ.'N' .AND. QSW(SW_RUN).EQ.DWC_NEGATED)
	1		QSW(SW_SAV) = DWC_PRESENT
C
C					Create symbol DWARF_<prognam>_CONTROL
C					- to pass the stream name and the ASK,
C					  SAVE and TEST qualifiers to PROG_START
C					  (used for update of DWARF common)
C					- The symbol name need not contain the
C					  stream name since it is unique until
C					  the next run of EXECUTE (in fact,
C					  even the program name is superfluous).
C
	SYMNAM = 'DWARF_'//PROG(:LP)//'_CONTROL'
	LN = STR_SIGLEN (SYMNAM)
C
C
	SYMVAL = '000'
	LV = 0
	IF (QSW(SW_ASK).EQ.DWC_PRESENT) THEN
		SYMVAL(1:1) = '2'
	ELSE IF (QSW(SW_ASK).EQ.DWC_NEGATED) THEN
		SYMVAL(1:1) = '1'
	END IF
	IF (QSW(SW_SAV).EQ.DWC_PRESENT) THEN
		SYMVAL(2:2) = '2'
	ELSE IF (QSW(SW_SAV).EQ.DWC_NEGATED) THEN
		SYMVAL(2:2) = '1'
	END IF
	IF (QSW(SW_TES).EQ.DWC_PRESENT) THEN
		SYMVAL(3:3) = '2'
	ELSE IF (QSW(SW_TES).EQ.DWC_NEGATED) THEN
		SYMVAL(3:3) = '1'
	END IF
#ifdef wn_vx__
	WRITE (SYMVAL(4:),1000) LS,STREAM(:LS),
	1		LSW(SW_INP),VSW(SW_INP)(:LSW(SW_INP))
 1000	FORMAT (I2.2,A,I2.2,A)
	LV = 3+2+LS+2+LSW(SW_INP)
#else
	WRITE (SYMVAL(4:),1000) LS,STREAM(:LS),'00'
 1000	FORMAT (I2.2,A,A)
	LV = 3+2+LS+2
#endif
	TMP = SYMBOL_DEFINE(SYMNAM(:LN),SYMVAL(:LV),DWC__LOCALSYM)
C
C					Specify defaults for N programs
C					according to the qualifiers given
C
	IF (PROG(:1).EQ.'N') THEN
		QUALS = ' '
		LQ = 0
		VSW(SW_RUN)='YES'			!/RUN VALUE
		DO I=SW_LOG,NRARG			!CHECK ALL POSSIBLES
		  IF (QSW(I).EQ.DWC_NEGATED) THEN
		    TXT='/X_'//SW__TXT(I)(:WNCALN(SW__TXT(I)))//
	1			'='//NEGDEF(I)
		    IS = STR_COPY (TXT(:WNCALN(TXT)),QUALS,LQ)
		  ELSE IF (QSW(I).EQ.DWC_PRESENT) THEN
		    IF (I.EQ.SW_DAT .OR. I.EQ.SW_INF .OR.
	1			I.EQ.SW_MOD) THEN	!ADD ""
		      TXT='/X_'//SW__TXT(I)(:WNCALN(SW__TXT(I)))//
	1			'="'//VSW(I)(:LSW(I))//'"'
		    ELSE
		      TXT='/X_'//SW__TXT(I)(:WNCALN(SW__TXT(I)))//
	1			'='//VSW(I)(:LSW(I))
		    END IF
		    IS = STR_COPY (TXT(:WNCALN(TXT)),QUALS,LQ)
		  END IF
		END DO
		IF (LQ.GT.0) THEN
		  IS = PPD_INIT (PROG(:LP))
		  IF (IAND(IS,1).EQ.0) THEN
		    IS = MSG_SET (IS,0)
		    GOTO 999
		  END IF
		  IS = SP_LIST (PROG(:LP),STREAM(:LS),QUALS(:LQ))
		  TMP = PPD_EXIT ()
		  IF (IAND(IS,1).EQ.0) GOTO 999
		END IF
	END IF
	IS = SYMBOL_EXIT ()
C
C					Start the program, unless /NORUN
C					is given for a non-N program
C
	IF (PROG(:1).EQ.'N' .OR. QSW(SW_RUN).NE.DWC_NEGATED) THEN
#ifdef wn_vx__
C
C					If /BATCH:
C					- start EXEBATCH.COM to save session
C					  context and queue batch job
C
		IF (QSW(SW_BAT).EQ.DWC_PRESENT) THEN
			CALL LIB$DO_COMMAND ('@n_exe:EXEBATCH "'
	1				//VSW(SW_PRO)(:LSW(SW_PRO))//'"' )
			GOTO 999
		ENDIF
C
C					If in batch mode:
C					- start program execution via RUN
C
		IF (IAND(DWC_IBMODE_INQ('BATCH'),1) .NE. 0) THEN
			CALL LIB$DO_COMMAND ('$ RUN/NODEBUG '//EXEFILE(:LEXE))
			GOTO 999
		ENDIF
C
C					If /NOWAIT:
C					- spawn subprocess running the image
C					- the CONTROL symbol will transmit the
C					  qualifier information
C					- EXENOWAIT.COM must be used as an
C					  intermediate layer to execute a
C					  SET MESSAGE
C
		IF (QSW(SW_WAI).EQ.DWC_NEGATED) THEN
			CALL LIB$DO_COMMAND ('SPAWN/NOWAIT/PROCESS='
	1					//PRCNAM(:LPRC)
	1					//' @n_exe:EXENOWAIT "'
	1					//EXEFILE(:LEXE)//'"')
			GOTO 999
		ENDIF
C
C					Otherwise:
C					- start program via RUN command
C
		IF (QSW(SW_DEB).EQ.DWC_NEGATED) THEN
			CALL LIB$DO_COMMAND ('$ RUN/NODEBUG '//EXEFILE(:LEXE))
		ELSE IF (QSW(SW_DEB).EQ.DWC_PRESENT) THEN
			CALL LIB$DO_COMMAND ('$ RUN/DEBUG '//EXEFILE(:LEXE))
		ELSE
			CALL LIB$DO_COMMAND ('$ RUN '//EXEFILE(:LEXE))
		ENDIF
	ENDIF
#else
C
C					If /DEBUG is given:
C					- ignore for /BATCH, /NOWAIT or /INPUT
C					- run program under dbx
C
		IF (QSW(SW_DEB).EQ.DWC_PRESENT .AND.
	1			QSW(SW_BAT).NE.DWC_PRESENT .AND.
	1	    		QSW(SW_WAI).NE.DWC_NEGATED .AND.
	1			LSW(SW_INP).EQ.0) THEN
			COMMAND = 'dbx '//EXEFILE(:LEXE)
		ELSE
			COMMAND = EXEFILE(:LEXE)
		END IF
		LC = STR_SIGLEN (COMMAND)
C
C					Determine standard input stream
C					- /INPUT=<file>: that file
C					- /BATCH: the null device
C					- otherwise: terminal
C
		IF (LSW(SW_INP).GT.0) THEN
			IS = FILNAM_FULL (VSW(SW_INP)(:LV),INFILE,LIN,' ')
			IF (IAND(IS,1).EQ.0) GOTO 999
			COMMAND(LC+1:) = ' <'//INFILE(:LIN)
		ELSE IF (QSW(SW_BAT).EQ.DWC_PRESENT) THEN
			COMMAND(LC+1:) = ' </dev/null'
		END IF
		LC = STR_SIGLEN (COMMAND)
C
C					Determine standard output stream
C					- /BATCH: <prognam><stream>.log
C					- otherwise: terminal
C
		IF (QSW(SW_BAT).EQ.DWC_PRESENT) THEN
			IS = FILNAM_FULL (PROG(:LP)//STREAM(:LS)//'.LOG',
	1			OUTFILE,LOUT,' ')
			IF (IAND(IS,1).EQ.0) GOTO 999
			COMMAND = COMMAND(:LC)//' >'//OUTFILE(:LOUT)
			LC = STR_SIGLEN (COMMAND)
		END IF
C
C					If /NOWAIT or /BATCH:
C					- run program in the background
C
		IF (QSW(SW_WAI).EQ.DWC_NEGATED .OR.
	1			QSW(SW_BAT).EQ.DWC_PRESENT) THEN
			COMMAND = COMMAND(:LC)//' &'
			LC = LC+2
		END IF
C
C					Start program
C					If the command contains no blanks, it
C					can be executed via EXECL (which does
C					not start a new process).
C					Since GEN_EXECL is a C routine, add
C					a zero to the strings.
C					Otherwise (or if EXECL returns, thus
C					fails), we use SYSTEM.
C
		IF (INDEX (COMMAND(:LC),' ') .EQ. 0) THEN
		    CALL GEN_EXECL (COMMAND(:LC)//CHAR(0), PROG(:LP)//CHAR(0))
		ENDIF
		TMP = GEN_SYSTEM (COMMAND(:LC)//CHAR(0))
		GOTO 900
	END IF
#endif
C
C
C
C
 999	IF (IAND(IS,1).EQ.0) TMP = MSG_SET (DWC_EXEERRORS,0)
C
 991	IS = MSG_SET (DWC_FILNOTFND,1)
	CALL WNCTXT(DWLOG,DWMSG,PROG(:LP)//TYPE)
	TMP = MSG_SET (DWC_EXEERRORS,0)
	E_C = IS		! Exit code for WNGEX
 900	CONTINUE
C
C
	END

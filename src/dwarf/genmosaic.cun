/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*.Ident:	GEN_MOSAIC
/*.Keywords:	On-line Help
/*.Author:	Marco de Vos (NFRA, Dwingeloo)
/*.Language:	C
/*.Environment:	UNIX (needs xmosaic.exe)
/*.Comments:
/*.Version:	930712 CMV - Created
/*.Version:	930927 CMV - Changed name of interface file (pidfile)
/*.Version:	931116 CMV - Trap undefined DISPLAY
/*.Version:	931223 CMV - Added nshow.pef
/*.Version:	940117 CMV - Write also to Mosaic.pid for Mosaic 2.1
/*.Version:	940328 CMV - Add file://localhost to get there from http:..
/*.Version:	940728 HjV - Use correct directory for requested keyword
/*.Version:	940812 CMV - Use double underscore in name
		940901 JPH - Undo 840812
/*-----------------------------------------------------------------------*/
/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/

#include <signal.h>
#include <stdlib.h>
#include <stdio.h>

#ifdef _STANDALONE_

main()

{
   char cc[128],*prog="nscan";
   int  ii,i1=5,i2=0;

   ii=strlen("display");
   gen_mosaic_(prog,&i1,"display",&ii,NULL,&i2);

   printf("Keyword: ");
   while (fgets(cc,128,stdin)) {
     ii=strlen(cc);
     gen_mosaic_(prog,&i1,cc,&ii,NULL,&i2);
     printf("Keyword: ");
   }
}
#endif

gen_mosaic_ (prog,lprog,key,lkey,xdisp,ldisp)

char *prog,*key,*xdisp;
int  *lprog,*lkey,*ldisp;

{

/*.Purpose:	Start xmosaic at specified keyword
/*.Returns:	PID of xmosaic or -1 any error occurred
/*.Notes:	
/*-----------------------------------------------------------------------*/

/*
   Name of the file in which the pid is saved. 
   The chance that on the same host a process with the same pid
   will occur for this user is small. Any other procedure than this
   save file will force us to edit xmosaic, which I don't want to 
   do now.
*/
   static char pidfile[128];

/*
   Name of the html file to be loaded, name of display,
   argument list of xmosaic to be started
*/
   static char name[128],disp[128];
   static char *args[]={"xmosaic",name,"-display",disp,NULL};   

/*
   This list should contain all pef files. 
   We could do this in a more flexible way, but that's for future
*/
   static char *pefs[]={"ngen","ncomm","nmap","nmodel","nsets","nshow",
                        "dwarf",NULL};

   int  pid=0,ii,start_new,l1,l2;
   char file[128],*hlp;
   FILE *fp;


/*
   We need to find the last significant character of prog, key and disp
   because they will be passed from Fortran.
*/
   for (l1=0; l1<(*lprog) && prog[l1]!=' '  && 
                             prog[l1]!='\n' && prog[l1]!='\0'; l1++);
   for (l2=0; l2<(*lkey)  && key[l2]!=' '   && 
                             key[l2]!='\n'  && key[l2]!='\0'; l2++);

   if (*ldisp>0) {
     for (ii=0; ii<(*ldisp) && xdisp[ii]!=' ' && xdisp[ii]!='\0'; ii++)
            disp[ii]=xdisp[ii];
     disp[ii]='\0';
   } else if (getenv("DISPLAY")!=NULL) {      /* DISPLAY defined, use it */
     strcpy(disp,getenv("DISPLAY"));
   } else {                                   /* Else try hostname:0.0   */
/*
     *ldisp=100;
     gethost_(disp,ldisp);
     strcat(disp,":0.0");
*/                                            /* or rather: disable      */
     printf("\nDISPLAY is undefined, you need it for hypertext help!\n");
     printf("Definition of DISPLAY through NGEN is not sufficient, you\n");
     printf("should really use something like  setenv DISPLAY name:0.0\n\n");
     return(0);
   }

/*
   Construct the name of the xmosaic interface file
*/
   strcpy(pidfile,"/tmp/xm-"); 
   for (ii=0; ii<100 && disp[ii]!='\0'; ii++) 
     if (disp[ii]==':') pidfile[8+ii]='.'; else pidfile[8+ii]=disp[ii];
   pidfile[8+ii]='\0';

/*
   Construct URL of requested keyword.

   Since it may be a general keyword, we check the html directory for
   the program name first, then for a list of .pef files.
   This is clumsy, but I cannot see a way around it now.
*/
   hlp=getenv("n_hlp");
   sprintf(name,"%s/%.*s/%.*s_%.*s.html",hlp,l1,prog,l1,prog,l2,key);
   fp=fopen(name,"r");
   for (ii=0; fp==NULL && pefs[ii]!=NULL; ii++) {
      sprintf(name,"%s/%s/%s_%.*s.html",hlp,pefs[ii],pefs[ii],l2,key);
      fp=fopen(name,"r");
   }

   if (fp==NULL) {
      printf("\nNo such file for %.*s %.*s\n\n",l1,prog,l2,key);
      return(0);
   }
   fclose(fp);
   
/*
   If this routine starts xmosaic, it creates a file /tmp/xmosaic-pid  
   containing it's pid.
      
   Any follwing calls check wether this file exists,
   If so, we try to send an interrupt and wait for the response.
   If the interrupt failed, we remove the /tmp file
   If no response occured or if no /tmp/xmosaic etc file existed,
   we try to start a new xmosaic.

   In future, we might want to change xmosaic to make it's communication
   a bit more flexible (inter-host communication etc).
*/

   start_new=1;
   
   fp=fopen(pidfile,"r");
   if (fp!=NULL) {
      pid=-1;
      fscanf(fp,"%d",&pid);
      fclose(fp);
      
      if (pid>0) {
         sprintf(file,"/tmp/Mosaic.%d",pid);
         fp=fopen(file,"w");
         if (fp==NULL) return(-1);
         fprintf(fp,"goto\nfile://localhost%s\n",name);
         fclose(fp);
/*
   Keep compatible with Mosaic <2.1 as well
*/
         sprintf(file,"/tmp/xmosaic.%d",pid);
         fp=fopen(file,"w");
         if (fp==NULL) return(-1);
         fprintf(fp,"goto\nfile://localhost%s\n",name);
         fclose(fp);

         if (kill(pid,SIGUSR1)) {
            unlink(pidfile);
         } else {
            start_new=0;
         }
      }      
   }

/*
   No xmosaic available, start child process, start xmosaic
*/

   if (start_new) {
      printf("Trying to start xmosaic on %s, please wait..\n",disp);
      pid=fork();
      if (pid==0) {                 /* We are the child process now */
         freopen("/dev/null","w",stderr);
         sprintf(file,"%s/xmosaic.exe",getenv("n_exe"));
         if (execv(file,args)==-1) { 
            printf("Error starting xmosaic on %s...\n",disp);  
            unlink(pidfile);
            exit(-1); 
         }
      } else {
/*
   Save pid in file for future calls
*/
         fp=fopen(pidfile,"w");
         if (fp!=NULL) {
            fprintf(fp,"%d\n",pid);
            fclose(fp);
         }
      }
   }

   return(pid);
}

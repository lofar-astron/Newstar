/*++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
/*.Ident:	GENUN_LINKC
/*.Keywords:	Network Task-to-task Communication
/*.Author:	Ger van Diepen (NFRA, Dwingeloo)
/*.Language:	C
/*.Environment:	UNIX
/*.Comments:
/*.Version:	911231 GvD - creation
/*--------------------------------------------------------------------------*/

#include <sys/types.h>
#include <stdio.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/uio.h>

/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_sinit_ (msg,sd,port,maxc,snode)
	char	msg[];			/* (o) error message		    */
	int	**sd;			/* (o) socket descriptor	    */
	short	*port;			/* (i) port where server is listening*/
	int	*maxc;			/* (i) max nr of clients	    */
	char	 snode[];		/* (i) node name of server system   */
	{

/*.Purpose:	Handle a logical link
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		0	no heap storage available
/*			2	no event flag
/*			4	no assign
/*			6	get address client
/*			8	listen
/*			10	accept
/*			12	bind
/*			14	get address server
/*			16	connect
/*			18	close
/*			20	read
/*			22	write
/*.Notes:
/*	- LINKC_SINIT is called by LINK_SV_START to start the server.
/*--------------------------------------------------------------------------*/

	    struct	sockaddr_in sock_name;
	    struct	hostent    *hostentptr;
	    int		sock;
	    int		*socd;

/*
Set initially to no message
*/
	    msg[0] = '\0';
/*
Allocate storage on the heap for 2 socket-ids
Initialize it
*/
	    if ((socd = (int *) malloc (2*sizeof(int))) == NULL)
		return 0;
	    *sd       = socd;
	    *socd     = -1;
	    *(socd+1) = -1;
/*
Create a socket for the server to listen
Store the socket-id
*/
	    if ((sock = socket (AF_INET, SOCK_STREAM, 0)) == -1) {
		linkc_error (msg);
		return 4;
	    }
	    *socd = sock;
/*
Get the internet address of the server node
*/
	    if ((hostentptr = gethostbyname (snode)) == NULL) {
		linkc_error (msg);
		return 14;
	    }
/*
Bind address and port to the server socket
*/
	    sock_name.sin_family = hostentptr->h_addrtype;
	    sock_name.sin_port   = htons(*port);
	    sock_name.sin_addr   = *((struct in_addr *) hostentptr->h_addr);
	    if (bind (sock, &sock_name, sizeof(sock_name))) {
		linkc_error (msg);
		return 12;
	    }
/*
Listen on the socket for a connection (max. maxc connections)
*/
	    if (listen (sock, *maxc)) {
		linkc_error (msg);
		return 8;
	    }
/*
Successfully ended
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_sacc_ (msg,sd)
	char	msg[];			/* (o) error message		    */
	int	*sd[2];			/* (o) socket descriptor	    */
	{

/*.Purpose:	Complete a logical link
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		2	error report left in message buffer
/*.Notes:
/*	- This function is called by the server program in answer to the link 
/*	  request from the requestor program.
/*--------------------------------------------------------------------------*/

	    struct	sockaddr_in sock_name;
	    int		leng, sock;

/*
Set initially to no message
*/
	    msg[0] = '\0';
/*
Accept a connection
Store the socket-id
*/
	    leng = sizeof(sock_name);
	    if ((sock = accept ((*sd)[0], &sock_name, &leng)) == -1) {
		linkc_error (msg);
		return 10;
	    }
	    (*sd)[1] = sock;
/*
Successfully ended
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_cinit_ (msg,sd,port,snode)
	char	msg[];			/* (o) error message		    */
	int	**sd;			/* (o) socket descriptor	    */
	short	*port;			/* (i) port where server is listening*/
	char	 snode[];		/* (i) node name of server system   */
	{

/*.Purpose:	Handle a logical link
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		2	error report left in message buffer
/*			4	no heap storage available
/*.Notes:
/*	- LINK_CINIT is called by LINK_CL_START to start the client.
/*--------------------------------------------------------------------------*/

	    struct	sockaddr_in sock_name;
	    struct	hostent    *hostentptr;
	    int		sock;
	    int		*socd;
	    int		i;
/*
Set initially to no message
*/
	    msg[0] = '\0';
/*
Allocate storage on the heap for 2 socket-ids
Initialize it
*/
	    if ((socd = (int *) malloc (2*sizeof(int))) == NULL)
		return 0;
	    *sd       = socd;
	    *socd     = -1;
	    *(socd+1) = -1;
/*
Create a socket for the client
Store the socket-id (twice)
*/
	    if ((sock = socket (AF_INET, SOCK_STREAM, 0)) == -1) {
		linkc_error (msg);
		return 4;
	    }
	    *socd     = sock;
	    *(socd+1) = sock;
/*
Get the internet address of the server node
*/
	    if ((hostentptr = gethostbyname (snode)) == NULL) {
		linkc_error (msg);
		return 14;
	    }
/*
Store the address and server port
Make a connection to the server
*/
	    sock_name.sin_family = hostentptr->h_addrtype;
	    sock_name.sin_port   = htons(*port);
	    sock_name.sin_addr   = *((struct in_addr *) hostentptr->h_addr);
	    if (connect (sock, &sock_name, sizeof(sock_name))) {
		linkc_error (msg);
		return 16;
	    }
/*
Successfully ended
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_bread_ (msg,sd,buf,lbuf,lout)
	char	msg[];			/* (o) error message		    */
	int	*sd[2];			/* (o) socket descriptor	    */
	char	 buf[];			/* (o) bytes read		    */
	int	*lbuf;			/* (i) length of buf		    */
	int	*lout;			/* (o) nr of bytes read		    */
	{

/*.Purpose:	Read a stream of bytes over the logical link
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1	also for end-of-data
/*	error		2	error report left in message buffer
/*.Notes:
/*	- LOUT = 0 signals the end-of-data.
/*--------------------------------------------------------------------------*/

	    int nr;

/*
Set initially to no message
*/
	    *lout  = 0;
	    msg[0] = '\0';
/*
Read from the socket
Store nr of bytes read
*/
	    if ((nr = read ((*sd)[1], buf, *lbuf)) == -1) {
		linkc_error (msg);
		return 20;
	    }
	    *lout = nr;
/*
Successfully ended
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_bwrite_ (msg,sd,buf,lbuf,lout)
	char	msg[];			/* (o) error message		    */
	int	*sd[2];			/* (i) socket descriptor	    */
	char	 buf[];			/* (i) bytes to write		    */
	int	*lbuf;			/* (i) length of buf		    */
	int	*lout;			/* (o) nr of bytes written	    */
	{

/*.Purpose:	Send a stream of bytes over the logical link
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		2	error report left in message buffer
/*.Notes:
/*--------------------------------------------------------------------------*/

	    int nr;

/*
Set initially to no message
*/
	    *lout  = 0;
	    msg[0] = '\0';
/*
Write to the socket
*/
	    if ((nr = write ((*sd)[1], buf, *lbuf)) == -1) {
		linkc_error (msg);
		return 22;
	    }
	    *lout = nr;
/*
Successfully ended
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_scclose_ (msg,sd,chnr)
	char	msg[];			/* (o) error message		    */
	int	*sd[2];			/* (m) socket descriptor	    */
	int	*chnr;			/* (i) sockets to close (1 or 2)    */
	{

/*.Purpose:	Close a socket
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		2	error report left in message buffer
/*.Notes:
/*--------------------------------------------------------------------------*/

	    int sock, is;

/*
Set initially to no message
*/
	    is = 1;
	    msg[0] = '\0';
/*
Get the socket to close
*/
	    if (*chnr == 1)
		sock = (*sd)[0];
	    else
		sock = (*sd)[1];
/*
Shutdown and close it if defined
*/
	    if (sock != -1) {
		if (shutdown (sock,2) == -1) {
		    is = 18;
		    linkc_error (msg);
		}
		if (close (sock)) {
		    is = 18;
		    linkc_error (msg);
		}
	    }
/*
Ended
*/
	    return is;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_scend_ (msg,sd,chnr)
	char	msg[];			/* (o) error message		    */
	int	**sd;			/* (m) socket descriptor	    */
	int	*chnr;			/* (i) nr of sockets to free (1 or 2)
						(not used)		    */
	{

/*.Purpose:	Release the heap
/*.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
/*	success		1
/*	error		2	error report left in message buffer
/*.Notes:
/*--------------------------------------------------------------------------*/

/*
Set initially to no message
*/
	    msg[0] = '\0';
/*
Free the heap
Clear pointer
*/
	    free (*sd);
	    sd = 0;
/*
Ended successfully
*/
	    return 1;
	}
/*+PDOC+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++*/
	linkc_error (msg)
	char	msg[];			/* (o) error message		    */
	{

/*.Purpose:	Get message for errno
/*.Notes:
/*--------------------------------------------------------------------------*/

	    gen_cerror_ (msg,80);
/*
Ended successfully
*/
	    return 1;
	}

C	Include module PARM_6
C	Created by BLDDEF from: _$1$DIA3:[TESTDWARF.SRC.DEF]PARM.DEF; on 17-OCT-90
C
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C.Ident:	DEF_PARM
C.Keywords:	PARM control block, Definition
C.Author:	Ger van Diepen (NFRA, Dwingeloo)
C.Language:	DWARF-DEF
C.Environment:	VAX or Alliant
C.Comments:
C.Version:	830708 GVD - version 1
C.Version:	831207 GVD - version 2
C.Version:	840411 GVD - added SYSOUT and exit-handler block
C.Version:	840705 GVD - remove PARM$DWARFPART
C			- extend PARM$STR to 12 bytes
C			- add PARM$ISLEN
C			- remove PARM__SIZE and PARM
C.Version:	840727 GVD - extended string lengths
C.Version:	850521 JPH - Add names for special nr-of-elements-per set values
C.Version:	850801 KK  - Add min length keyword name (MINLKEY)
C.Version:	880622 FMO - new DWARFDEF
C			- added initialization values
C			- added character-string equivalents PROGNAM, STREAM
C.Version:	890317 FMO - new version: PARM_6
C			- removed inclusion of DWARF_n
C			- removed fields IMG, STR and ID
C			- added fields PROGSTRM and LS
C			- renamed fields IMGLEN, ISLEN, KEYLEN and MINLKEY
C					to LP, LPS, LK and LKMIN
C			- made fields KEY and PKEY character strings
C			- removed field SYMLEN and PARM_ string definitions
C			- move field PARM$LK from fixed to variable part
C-------------------------------------------------------------------------
C
C	Description of the common area in which the program's keywords and
C	their values are kept.
C
C
	INTEGER*4  PARM__LENVS
	PARAMETER (PARM__LENVS          =255)                   !lengths of value strings
C
C
C		Definition of parameter area
C
	INTEGER*4  PARM_LENGTH
	PARAMETER (PARM_LENGTH          =1)         !&1     !#J !generated: field to contain the block length
	INTEGER*4  PARM_TYPE
	PARAMETER (PARM_TYPE            =2)         !&1     !#J !generated: field to contain the block type
C
C			Fixed part (parameter independent)
C
	INTEGER*4  PARM_PROGNAM
	PARAMETER (PARM_PROGNAM         =3)         !&12    !#C !program name
	INTEGER*4  PARM_LP
	PARAMETER (PARM_LP              =6)         !&1     !#J !significant length of PROGNAM
	INTEGER*4  PARM_STREAM
	PARAMETER (PARM_STREAM          =7)         !&12    !#C !stream name (prefixed with '$')
	INTEGER*4  PARM_LS
	PARAMETER (PARM_LS              =10)        !&1     !#J !significant length of STREAM
	INTEGER*4  PARM_PROGSTRM
	PARAMETER (PARM_PROGSTRM        =11)        !&25    !#C !fixed part of symbol name
	INTEGER*4  PARM_LPS
	PARAMETER (PARM_LPS             =18)        !&1     !#J !significant length of <prognam>$<stream>
C
	INTEGER*4  PARM_MODE
	PARAMETER (PARM_MODE            =19)        !&1     !#J !program mode	0 = interactive, 1 = batch
	INTEGER*4  PARM_PRC
	PARAMETER (PARM_PRC             =20)        !&1     !#J !process mode	0 = main, 1 = subprocess
	INTEGER*4  PARM_DEV
	PARAMETER (PARM_DEV             =21)        !&1     !#J !input device	0 = SYS$INPUT (batch)
                                                        !		1 = SYS$COMMAND (interactive)
                                                        !		2 = SYS$COMMAND (subprocess)
	INTEGER*4  PARM_SYSOUT
	PARAMETER (PARM_SYSOUT          =22)        !&1     !#J !output device	0 = terminal, 1 = other
C
	INTEGER*4  PARM_EXH
	PARAMETER (PARM_EXH             =23)        !&0     !#J !exit-handler block
	INTEGER*4  PARM_EHLINK
	PARAMETER (PARM_EHLINK          =23)        !&1     !#J !forward link
	INTEGER*4  PARM_EHADDR
	PARAMETER (PARM_EHADDR          =24)        !&1     !#J !address of exit routine
	INTEGER*4  PARM_EHNRARG
	PARAMETER (PARM_EHNRARG         =25)        !&1     !#J !nr of arguments for exit routine
	INTEGER*4  PARM_EHSTADDR
	PARAMETER (PARM_EHSTADDR        =26)        !&1     !#J !address of exit status
	INTEGER*4  PARM_EHSTATUS
	PARAMETER (PARM_EHSTATUS        =27)        !&1     !#J !exit status
C
	INTEGER*4  PARM_NRKEY
	PARAMETER (PARM_NRKEY           =28)        !&1     !#J !nr of input/modify keywords
	INTEGER*4  PARM_KEYLDYN
	PARAMETER (PARM_KEYLDYN         =29)        !&1     !#J !length of all keyword entries
	INTEGER*4  PARM_KEYADYN
	PARAMETER (PARM_KEYADYN         =30)        !&1     !#J !address of dynamic storage for keyword entries
C
C			Fixed field with parameter-dependent content
C
	INTEGER*4  PARM_KEYACUR
	PARAMETER (PARM_KEYACUR         =31)        !&1     !#J !address of current keyword entry
C
C
C		KEYPART is a description of a keyword entry.
C		- It contains all data needed for a keyword in GET_PARM.
C		- It is used as a local copy of the entry for the current
C		  keyword; its original address is saved in KEYACUR.
C
C		Definition of fixed part of keyword entry
C
	INTEGER*4  PARM_KEYPART
	PARAMETER (PARM_KEYPART         =32)        !&0     !#J
	INTEGER*4  PARM_KEY
	PARAMETER (PARM_KEY             =32)        !&16    !#C !keyword (user's parameter name)
	INTEGER*4  PARM_PKEY
	PARAMETER (PARM_PKEY            =36)        !&16    !#C !program's parameter name
	INTEGER*4  PARM_LK
	PARAMETER (PARM_LK              =40)        !&1     !#J !significant length of the keyword
	INTEGER*4  PARM_LKMIN
	PARAMETER (PARM_LKMIN           =41)        !&1     !#J !minimum-match length of the keyword
	INTEGER*4  PARM_APPD
	PARAMETER (PARM_APPD            =42)        !&1     !#J !address of keyword entry in mapped PPD file
	INTEGER*4  PARM_LOOP
	PARAMETER (PARM_LOOP            =43)        !&1     !#J !loop switch	0 = no loop attribute
C						1 = a value has been given
C						2 = end-of-loop has been given
	INTEGER*4  PARM_ASK
	PARAMETER (PARM_ASK             =44)        !&1     !#J !ask switch	-1= /NOASK given for keyword
C						0 = /NOASK given for program
C						1 = /ASK given
	INTEGER*4  PARM_IO
	PARAMETER (PARM_IO              =45)        !&1     !#J !I/O type of keyword
C						1 = input
C						2 = output
C						3 = modify (=input/output)
	INTEGER*4  PARM_ASKSW
	PARAMETER (PARM_ASKSW           =46)        !&1     !#J !ask switch set by DWC_GPDEF
C						TRUE = do not ask
C						FALSE= ask
C
C		Description of initial default value sets
C
	INTEGER*4  PARM_EXELDYN
	PARAMETER (PARM_EXELDYN         =47)        !&1     !#J !length of dynamic storage
	INTEGER*4  PARM_EXEADYN
	PARAMETER (PARM_EXEADYN         =48)        !&1     !#J !address of NVALUES/SET (and dynamic block)
	INTEGER*4  PARM_EXEAVAL
	PARAMETER (PARM_EXEAVAL         =49)        !&1     !#J !address of the value block
	INTEGER*4  PARM_EXEASW
	PARAMETER (PARM_EXEASW          =50)        !&1     !#J !address of the "defined" switch array
	INTEGER*4  PARM_EXENRS
	PARAMETER (PARM_EXENRS          =51)        !&1     !#J !nr of value sets
	INTEGER*4  PARM_EXEVPS
	PARAMETER (PARM_EXEVPS          =52)        !&1     !#J !reserved nr of value per set
C
	INTEGER*4  PARM_EXETYPE
	PARAMETER (PARM_EXETYPE         =53)        !&1     !#J !type of values
C						0 = no value
C						1 = SPECIFY default
C						2 = PIN default
C
C		Description of current default value sets (analogous)
C
	INTEGER*4  PARM_DEFLDYN
	PARAMETER (PARM_DEFLDYN         =54)        !&1     !#J !length
	INTEGER*4  PARM_DEFADYN
	PARAMETER (PARM_DEFADYN         =55)        !&1     !#J !address
	INTEGER*4  PARM_DEFAVAL
	PARAMETER (PARM_DEFAVAL         =56)        !&1     !#J
	INTEGER*4  PARM_DEFASW
	PARAMETER (PARM_DEFASW          =57)        !&1     !#J
	INTEGER*4  PARM_DEFNRS
	PARAMETER (PARM_DEFNRS          =58)        !&1     !#J
	INTEGER*4  PARM_DEFVPS
	PARAMETER (PARM_DEFVPS          =59)        !&1     !#J
C
	INTEGER*4  PARM_DEFSNR
	PARAMETER (PARM_DEFSNR          =60)        !&1     !#J !nr of current set
	INTEGER*4  PARM_DEFPTR
	PARAMETER (PARM_DEFPTR          =61)        !&1     !#J !pointer to current value in current set
	INTEGER*4  PARM_DEFCNT
	PARAMETER (PARM_DEFCNT          =62)        !&1     !#J !counter for TO/BY arrays
C
	INTEGER*4  PARM_DEFLDEF
	PARAMETER (PARM_DEFLDEF         =63)        !&1     !#J !length of current default set
	INTEGER*4  PARM_DEFADEF
	PARAMETER (PARM_DEFADEF         =64)        !&1     !#J !address of current default set
C
C		Description of value sets to use (analogous)
C
	INTEGER*4  PARM_VALLDYN
	PARAMETER (PARM_VALLDYN         =65)        !&1     !#J !length
	INTEGER*4  PARM_VALADYN
	PARAMETER (PARM_VALADYN         =66)        !&1     !#J !address
	INTEGER*4  PARM_VALAVAL
	PARAMETER (PARM_VALAVAL         =67)        !&1     !#J
	INTEGER*4  PARM_VALASW
	PARAMETER (PARM_VALASW          =68)        !&1     !#J
	INTEGER*4  PARM_VALNRS
	PARAMETER (PARM_VALNRS          =69)        !&1     !#J
	INTEGER*4  PARM_VALVPS
	PARAMETER (PARM_VALVPS          =70)        !&1     !#J
C
	INTEGER*4  PARM_VALSNR
	PARAMETER (PARM_VALSNR          =71)        !&1     !#J
	INTEGER*4  PARM_VALPTR
	PARAMETER (PARM_VALPTR          =72)        !&1     !#J
	INTEGER*4  PARM_VALCNT
	PARAMETER (PARM_VALCNT          =73)        !&1     !#J
C
C		Description of saved value string
C
	INTEGER*4  PARM_SAVLEN
	PARAMETER (PARM_SAVLEN          =74)        !&1     !#J !length
	INTEGER*4  PARM_SAVADR
	PARAMETER (PARM_SAVADR          =75)        !&1     !#J !address
C
	INTEGER*4  PARM_KEYEND
	PARAMETER (PARM_KEYEND          =76)        !&1     !#J !marks the end of KEYPART
	INTEGER*4  PARM__LENGTH
	PARAMETER (PARM__LENGTH         =76)                    !generated: block length (in longwords)
	INTEGER*4  PARM__TYPE
	PARAMETER (PARM__TYPE           =11)                    !generated: block type
C
C		Parameter for the length of KEYPART
C
	INTEGER*4 PARM__LENKP
	PARAMETER (PARM__LENKP=4*(PARM_KEYEND-PARM_KEYPART))
	INTEGER*4	PARM__DEFTYP
	PARAMETER	(PARM__DEFTYP=7)
	INTEGER*4	PARM__DEFVSN
	PARAMETER	(PARM__DEFVSN=6)
C
	EXTERNAL	PARM_BLOCK
C
C Common block specification
C
	INTEGER*4 PARM$LENGTH
	EQUIVALENCE (PARM$LENGTH,PARM__(0))
	INTEGER*4 PARM$TYPE
	EQUIVALENCE (PARM$TYPE,PARM__(4))
	CHARACTER*12 PARM$PROGNAM
	EQUIVALENCE (PARM$PROGNAM,PARM__(8))
	INTEGER*4 PARM$LP
	EQUIVALENCE (PARM$LP,PARM__(20))
	CHARACTER*12 PARM$STREAM
	EQUIVALENCE (PARM$STREAM,PARM__(24))
	INTEGER*4 PARM$LS
	EQUIVALENCE (PARM$LS,PARM__(36))
	CHARACTER*25 PARM$PROGSTRM
	EQUIVALENCE (PARM$PROGSTRM,PARM__(40))
	INTEGER*4 PARM$LPS
	EQUIVALENCE (PARM$LPS,PARM__(68))
	INTEGER*4 PARM$MODE
	EQUIVALENCE (PARM$MODE,PARM__(72))
	INTEGER*4 PARM$PRC
	EQUIVALENCE (PARM$PRC,PARM__(76))
	INTEGER*4 PARM$DEV
	EQUIVALENCE (PARM$DEV,PARM__(80))
	INTEGER*4 PARM$SYSOUT
	EQUIVALENCE (PARM$SYSOUT,PARM__(84))
	INTEGER*4 PARM$EXH(1)
	EQUIVALENCE (PARM$EXH,PARM__(88))
	INTEGER*4 PARM$EHLINK
	EQUIVALENCE (PARM$EHLINK,PARM__(88))
	INTEGER*4 PARM$EHADDR
	EQUIVALENCE (PARM$EHADDR,PARM__(92))
	INTEGER*4 PARM$EHNRARG
	EQUIVALENCE (PARM$EHNRARG,PARM__(96))
	INTEGER*4 PARM$EHSTADDR
	EQUIVALENCE (PARM$EHSTADDR,PARM__(100))
	INTEGER*4 PARM$EHSTATUS
	EQUIVALENCE (PARM$EHSTATUS,PARM__(104))
	INTEGER*4 PARM$NRKEY
	EQUIVALENCE (PARM$NRKEY,PARM__(108))
	INTEGER*4 PARM$KEYLDYN
	EQUIVALENCE (PARM$KEYLDYN,PARM__(112))
	INTEGER*4 PARM$KEYADYN
	EQUIVALENCE (PARM$KEYADYN,PARM__(116))
	INTEGER*4 PARM$KEYACUR
	EQUIVALENCE (PARM$KEYACUR,PARM__(120))
	INTEGER*4 PARM$KEYPART(1)
	EQUIVALENCE (PARM$KEYPART,PARM__(124))
	CHARACTER*16 PARM$KEY
	EQUIVALENCE (PARM$KEY,PARM__(124))
	CHARACTER*16 PARM$PKEY
	EQUIVALENCE (PARM$PKEY,PARM__(140))
	INTEGER*4 PARM$LK
	EQUIVALENCE (PARM$LK,PARM__(156))
	INTEGER*4 PARM$LKMIN
	EQUIVALENCE (PARM$LKMIN,PARM__(160))
	INTEGER*4 PARM$APPD
	EQUIVALENCE (PARM$APPD,PARM__(164))
	INTEGER*4 PARM$LOOP
	EQUIVALENCE (PARM$LOOP,PARM__(168))
	INTEGER*4 PARM$ASK
	EQUIVALENCE (PARM$ASK,PARM__(172))
	INTEGER*4 PARM$IO
	EQUIVALENCE (PARM$IO,PARM__(176))
	INTEGER*4 PARM$ASKSW
	EQUIVALENCE (PARM$ASKSW,PARM__(180))
	INTEGER*4 PARM$EXELDYN
	EQUIVALENCE (PARM$EXELDYN,PARM__(184))
	INTEGER*4 PARM$EXEADYN
	EQUIVALENCE (PARM$EXEADYN,PARM__(188))
	INTEGER*4 PARM$EXEAVAL
	EQUIVALENCE (PARM$EXEAVAL,PARM__(192))
	INTEGER*4 PARM$EXEASW
	EQUIVALENCE (PARM$EXEASW,PARM__(196))
	INTEGER*4 PARM$EXENRS
	EQUIVALENCE (PARM$EXENRS,PARM__(200))
	INTEGER*4 PARM$EXEVPS
	EQUIVALENCE (PARM$EXEVPS,PARM__(204))
	INTEGER*4 PARM$EXETYPE
	EQUIVALENCE (PARM$EXETYPE,PARM__(208))
	INTEGER*4 PARM$DEFLDYN
	EQUIVALENCE (PARM$DEFLDYN,PARM__(212))
	INTEGER*4 PARM$DEFADYN
	EQUIVALENCE (PARM$DEFADYN,PARM__(216))
	INTEGER*4 PARM$DEFAVAL
	EQUIVALENCE (PARM$DEFAVAL,PARM__(220))
	INTEGER*4 PARM$DEFASW
	EQUIVALENCE (PARM$DEFASW,PARM__(224))
	INTEGER*4 PARM$DEFNRS
	EQUIVALENCE (PARM$DEFNRS,PARM__(228))
	INTEGER*4 PARM$DEFVPS
	EQUIVALENCE (PARM$DEFVPS,PARM__(232))
	INTEGER*4 PARM$DEFSNR
	EQUIVALENCE (PARM$DEFSNR,PARM__(236))
	INTEGER*4 PARM$DEFPTR
	EQUIVALENCE (PARM$DEFPTR,PARM__(240))
	INTEGER*4 PARM$DEFCNT
	EQUIVALENCE (PARM$DEFCNT,PARM__(244))
	INTEGER*4 PARM$DEFLDEF
	EQUIVALENCE (PARM$DEFLDEF,PARM__(248))
	INTEGER*4 PARM$DEFADEF
	EQUIVALENCE (PARM$DEFADEF,PARM__(252))
	INTEGER*4 PARM$VALLDYN
	EQUIVALENCE (PARM$VALLDYN,PARM__(256))
	INTEGER*4 PARM$VALADYN
	EQUIVALENCE (PARM$VALADYN,PARM__(260))
	INTEGER*4 PARM$VALAVAL
	EQUIVALENCE (PARM$VALAVAL,PARM__(264))
	INTEGER*4 PARM$VALASW
	EQUIVALENCE (PARM$VALASW,PARM__(268))
	INTEGER*4 PARM$VALNRS
	EQUIVALENCE (PARM$VALNRS,PARM__(272))
	INTEGER*4 PARM$VALVPS
	EQUIVALENCE (PARM$VALVPS,PARM__(276))
	INTEGER*4 PARM$VALSNR
	EQUIVALENCE (PARM$VALSNR,PARM__(280))
	INTEGER*4 PARM$VALPTR
	EQUIVALENCE (PARM$VALPTR,PARM__(284))
	INTEGER*4 PARM$VALCNT
	EQUIVALENCE (PARM$VALCNT,PARM__(288))
	INTEGER*4 PARM$SAVLEN
	EQUIVALENCE (PARM$SAVLEN,PARM__(292))
	INTEGER*4 PARM$SAVADR
	EQUIVALENCE (PARM$SAVADR,PARM__(296))
	INTEGER*4 PARM$KEYEND
	EQUIVALENCE (PARM$KEYEND,PARM__(300))
	BYTE PARM__(0:303)
	INTEGER*4 PARM_(76)
	EQUIVALENCE (PARM_,PARM__)
C
	COMMON /PARM_COMMON/ PARM_
C

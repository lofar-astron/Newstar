C+ NCLCRD.FOR
C  WNB 920103
C
C  Revisions:
C	JPH 920224	Comments
C       HjV 950512	Add DATAFAC
C
C
	SUBROUTINE NCLCRD(FBM,BMH,BEM,FMP,DPTIN,MPH,MAP,IMAP)
C
C  Read beam and map for patch type clean
C
C  Result:
C	CALL NCLCRD ( FBM_J:I, BMH_B(*)_I, BEM_E(-*:*,0:*):O,
C				FMP_J:I, DPTIN_J:I, MPH_B(*):I,
C				MAP_E(2,0:*):O, IMAP_I(4,0:*):O)
C				Read beam (BEM) and map (MAP, IMAP) patch into
C				memory, using files FBM, FMP and map header
C				MPH and beam header BMH, and data at DPTIN.
C				MAP points are cast in the format (L,M,flux)
C				BEM is in standard array format with the
C				Prussian-hat peak added to the central point
C				The following COMMON variables are set:
C				  MAPPAT	nr of points in map patch
C				  CURMAX	maximum absolute value in patch
C				  CURPMX	linear position in patch of 
C						 maximum
C							 
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
	INCLUDE 'NCL_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FBM			!BEAM FILE
	BYTE BMH(0:*)			!BEAM HEADER
	REAL BEM(-BEMPAT:BEMPAT,0:BEMPAT) !BEAM
	INTEGER FMP			!INPUT MAP FILE
	INTEGER DPTIN			!DATA POINTER
	BYTE MPH(0:*)			!MAP HEADER
	REAL MAP(2,0:*)			!MAP
	INTEGER*2 IMAP(4,0:*)		!MAP
C
C  Function references:
C
	LOGICAL WNFRD			!READ DISK
	INTEGER WNGGJ			!GET J VALUE
C
C  Data declarations:
C
	INTEGER MCNT			!CNT POINTS
	INTEGER JC			!AREA COUNT
	REAL LBUF(0:8191)		!DATA BUFFER
C-
C
C READ BEAM
C
	J=WNGGJ(BMH(MPH_NRA_1))			!LENGTH LINE
	J=WNGGJ(BMH(MPH_MDP_1))+LB_E*(J*WNGGJ(BMH(MPH_NDEC_1))/2+
	1		WNGGJ(BMH(MPH_NRA_1))/2-BEMPAT) !OFFSET LINE 0
	DO I=0,BEMPAT
	  IF (.NOT.WNFRD(FBM,LB_E*(2*BEMPAT+1),BEM(-BEMPAT,I),J)) THEN
	    CALL WNCTXT(F_TP,'Read error beam')
	    CALL WNGEX				!STOP PROGRAM
	  END IF
	  J=J+LB_E*WNGGJ(BMH(MPH_NRA_1))	!NEXT LINE
	END DO
	BEM(0,0)=BEM(0,0)+PRHAT			!ADD PRUSSIAN HAT
C
C READ MAP
C
	CURMAX=-1E20				!INIT. MAX
	MCNT=0					!# OF POINTS
	J=WNGGJ(MPH(MPH_NRA_1))			!MAP PTR
	J=DPTIN+LB_E*(J*(WNGGJ(MPH(MPH_NDEC_1))/2+
	1		TAREA(2,1))+WNGGJ(MPH(MPH_NRA_1))/2+TAREA(0,1))
	J1=LB_E*WNGGJ(MPH(MPH_NRA_1))		!LINE LENGTH
	J2=LB_E*TAREA(2,0)			!LENGTH TO READ
	DO I=TAREA(2,1),TAREA(3,1)		!ALL MAP LINES
	  IF (.NOT.WNFRD(FMP,J2,LBUF(0),J)) THEN !READ LINE
	    CALL WNCTXT(F_TP,'Read error map')
	    CALL WNGEX				!STOP
	  END IF
	  J=J+J1				!NEXT PTR
	  I2=0					!START POINT
	  DO JC=1,NAREA				!ALL AREAS
	    IF (I.GE.PAREA(2,JC,1) .AND. I.LE.PAREA(3,JC,1)) THEN !LINE OK
	      I2=MAX(I2,PAREA(0,JC,1)-TAREA(0,1)) !START POINT
	      DO I1=I2+TAREA(0,1),PAREA(1,JC,1)	!ALL POINTS
		R0=ABS(LBUF(I2))*DATAFAC	!MAP VALUE
		IF (R0.GT.MAPLIM) THEN
		  IMAP(1,MCNT)=I1		!PTR IN LINE
		  IMAP(2,MCNT)=I		!LINE #
		  MAP(2,MCNT)=LBUF(I2)*DATAFAC	!FLUX
		  IF (CURMAX.LT.R0) THEN	!NEW MAX
		    CURMAX=R0
		    CURPMX=MCNT			!POS. MAX
		  END IF
		  MCNT=MCNT+1			!CNT POINT
		  IF (MCNT.GE.MAPPAT) GOTO 20	!BUFFER FULL
		END IF
		I2=I2+1				!NEXT POINT
	      END DO
	    END IF
	  END DO
	END DO
C
 20	CONTINUE
	MAPPAT=MCNT				!# OF POINTS PRESENT
C
	RETURN
C
C
	END

C+ NMADAR.FOR
C  WNB 910402
C
C  Revisions:
C	WNB 911220	Error for negative centre
C	WNB 920109	Error for odd checking
C	HjV 920520	HP does not allow extended source lines
C
	SUBROUTINE NMADAR(MXNAR,NAR,FAREA,MNWID,MXAREA,TAREA,PAREA,
	1			TEAR,PEAR)
C
C  Get area parameters
C
C  Result:
C
C	CALL NMADAR( MXNAR_J:I, NAR_J:O, FAREA_J(0:3):I, MNWID_J:I,
C				MXAREA_J(0:3):I, TAREA_J(0:3):IO,
C				PAREA_J(0:3,*):O, TEAR_J(0:3):O,
C				PEAR_J(0:3,*):O)
C				Get areas maximally MXNAR sub-area's,
C				and return the number found in NAR.
C				FAREA specifies the full field coordinates,
C				MNWID indicates a minimum width if >0, and
C				a check for odd/even.
C				MXAREA specifies the maximum area that can be
C				found; TAREA will be used as default, and
C				return the total enclosing area; PAREA are
C				the partial area's found.
C				TEAR and PEAR are the same in edge format.
C
C PIN references:
C
C	AREA
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER MXNAR		!MAX. AREAS TO FIND
	INTEGER NAR		!# OF AREAS FOUND
	INTEGER FAREA(0:3)	!TOTAL INPUT AREA
	INTEGER MNWID		!MIN. WIDTH AND ODD/EVEN CHECK
	INTEGER MXAREA(0:3)	!MAX. AREA THAT MAYBE GOT
	INTEGER TAREA(0:3)	!TOTAL ENCLOSING AREA FOUND/DEFAULT
	INTEGER PAREA(0:3,*)	!SUB-AREAS FOUND
	INTEGER TEAR(0:3)	!EDGE FORMAT TOTAL AREA
	INTEGER PEAR(0:3,*)	!EDGE FORMAT AREAS
C
C  Function references:
C
	LOGICAL WNDPAR		!GET USER DATA
C
C  Data declarations:
C
	INTEGER LAREA(0:3)			!LOCAL AREA
C-
C
C INIT
C
	NAR=0					!NO AREA'S FOUND
C
C GET AREA
C
 10	CONTINUE
	DO I=0,3
	  LAREA(I)=TAREA(I)			!DEFAULT AREA
	END DO
	IF (NAR.GE.MXNAR) GOTO 20		!NO MORE
	IF (NAR.GT.0 .OR. LAREA(2).EQ.0 .OR. LAREA(3).EQ.0) THEN
	  JS=WNDPAR('AREA',LAREA,4*LB_J,J0,'""') !NO DEFAULT
	ELSE
	  JS=WNDPAR('AREA',LAREA,4*LB_J,J0,A_B(-A_OB),LAREA,4) !DEFAULT
	END IF
	IF (.NOT.JS) THEN
	  IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 20	!NO MORE
	  GOTO 10				!RETRY
	ELSE IF (J0.EQ.0) THEN
	  GOTO 20				!ASSUME END
	ELSE IF (J0.LT.0) THEN			!FULL AREA
	  DO I=0,3
	    LAREA(I)=FAREA(I)
	  END DO
	END IF
C
C SAVE AN AREA IN EDGES FORMAT
C
	PEAR(0,NAR+1)=MAX(FAREA(0)-FAREA(2)/2,
	1		LAREA(0)-LAREA(2)/2)	!LEFT EDGE
	PEAR(1,NAR+1)=MIN(FAREA(0)+(FAREA(2)-1)/2,
	1		LAREA(0)+(LAREA(2)-1)/2) !RIGHT EDGE
	PEAR(2,NAR+1)=MAX(FAREA(1)-FAREA(3)/2,
	1		LAREA(1)-LAREA(3)/2)	!BOTTOM EDGE
	PEAR(3,NAR+1)=MIN(FAREA(1)+(FAREA(3)-1)/2,
	1		LAREA(1)+(LAREA(3)-1)/2) !TOP EDGE
C
C CHECK MAXIMUM AREA
C
	IF (PEAR(1,NAR+1)-PEAR(0,NAR+1).GE.MXAREA(2)) THEN !WIDTH
	  I=(PEAR(1,NAR+1)+PEAR(0,NAR+1)+1)/2	!CENTRE
	  PEAR(0,NAR+1)=I-MXAREA(2)/2		!LEFT EDGE
	  PEAR(1,NAR+1)=I+(MXAREA(2)-1)/2	!RIGHT EDGE
	END IF
	IF (PEAR(3,NAR+1)-PEAR(2,NAR+1).GE.MXAREA(3)) THEN !HEIGHT
	  I=(PEAR(3,NAR+1)+PEAR(2,NAR+1)+1)/2	!CENTRE
	  PEAR(2,NAR+1)=I-MXAREA(3)/2		!BOTTOM EDGE
	  PEAR(3,NAR+1)=I+(MXAREA(3)-1)/2	!TOP EDGE
	END IF
C
C CHECK MINIMUM WIDTH
C
	IF (MNWID.EQ.0) THEN			!NO CHECK
	ELSE IF (IAND(MNWID,1).EQ.0) THEN	!EVEN AND MINIMUM
	  IF (IAND(1,PEAR(1,NAR+1)-PEAR(0,NAR+1)).EQ.0) THEN !ADJUST EVEN
	    PEAR(1,NAR+1)=PEAR(1,NAR+1)-1
	  END IF
	  IF (IAND(1,PEAR(3,NAR+1)-PEAR(2,NAR+1)).EQ.0) THEN !ADJUST EVEN
	    PEAR(3,NAR+1)=PEAR(3,NAR+1)-1
	  END IF
	  IF (PEAR(1,NAR+1)-PEAR(0,NAR+1).LT.MNWID-1) GOTO 11 !TOO SMALL
	  IF (PEAR(3,NAR+1)-PEAR(2,NAR+1).LT.MNWID-1) GOTO 11 !TOO SMALL
	ELSE					!ODD AND MINIMUM
	  IF (IAND(1,PEAR(1,NAR+1)-PEAR(0,NAR+1)).NE.0) THEN !ADJUST ODD
	    PEAR(0,NAR+1)=PEAR(0,NAR+1)+1
	  END IF
	  IF (IAND(1,PEAR(3,NAR+1)-PEAR(2,NAR+1)).NE.0) THEN !ADJUST ODD
	    PEAR(2,NAR+1)=PEAR(2,NAR+1)+1
	  END IF
	  IF (PEAR(1,NAR+1)-PEAR(0,NAR+1).LT.MNWID-1) GOTO 11 !TOO SMALL
	  IF (PEAR(3,NAR+1)-PEAR(2,NAR+1).LT.MNWID-1) GOTO 11 !TOO SMALL
	END IF
C
C CHECK IF ANYTHING LEFT
C
	IF (PEAR(1,NAR+1).LT.PEAR(0,NAR+1) .OR.
	1		PEAR(3,NAR+1).LT.PEAR(2,NAR+1)) THEN !CHECK IF ANYTHING
 11	  CONTINUE
	  CALL WNCTXT(F_TP,'Area has wrong boundaries')
	ELSE
	  NAR=NAR+1				!COUNT AREA
	END IF
	GOTO 10					!MORE
C
C SORT ON LEFT EDGES
C
 20	CONTINUE
	IF (NAR.LE.0) GOTO 800			!READY
	DO I=1,NAR
	  DO I1=I+1,NAR
	    IF (PEAR(0,I).GT.PEAR(0,I1)) THEN
	      DO I2=0,3				!SORT
		I3=PEAR(I2,I)
		PEAR(I2,I)=PEAR(I2,I1)
		PEAR(I2,I1)=I3
	      END DO
	    END IF
	  END DO
	END DO
C
C FIND TOTAL WIDTH
C
	DO I=0,3				!START VALUE
	  TEAR(I)=PEAR(I,1)
	END DO
	DO I=2,NAR
	  DO I1=0,3,2
	    TEAR(I1)=MIN(TEAR(I1),PEAR(I1,I))
	    TEAR(I1+1)=MAX(TEAR(I1+1),PEAR(I1+1,I))
	  END DO
	END DO
C
C SAVE IN OTHER FORMAT
C
	TAREA(2)=TEAR(1)-TEAR(0)+1		!WIDTH
	TAREA(3)=TEAR(3)-TEAR(2)+1
	TAREA(0)=TEAR(0)+TAREA(2)/2		!CENTRE
	TAREA(1)=TEAR(2)+TAREA(3)/2
	DO I=1,NAR
	  PAREA(2,I)=PEAR(1,I)-PEAR(0,I)+1	!WIDTH
	  PAREA(3,I)=PEAR(3,I)-PEAR(2,I)+1
	  PAREA(0,I)=PEAR(0,I)+PAREA(2,I)/2	!CENTRE
	  PAREA(1,I)=PEAR(2,I)+PAREA(3,I)/2
	END DO
C
C SHOW RESULT:
C
	CALL WNCTXT(F_TP,'!/Area(s) selected:')
	CALL WNCTXT(F_TP,'Total   : l= !SJ, m= !SJ, dl= !SJ, dm= !SJ',
	1		TAREA(0),TAREA(1),TAREA(2),TAREA(3))
	IF (NAR.GT.1) THEN
	  DO I=1,NAR
	    CALL WNCTXT(F_TP,
	1		'Area!3$UJ : l= !SJ, m= !SJ, dl= !SJ, dm= !SJ',
	1		I,PAREA(0,I),PAREA(1,I),PAREA(2,I),PAREA(3,I))
	  END DO
	END IF
	CALL WNCTXT(F_TP,' ')
C
C READY
C
 800	CONTINUE
C
	RETURN					!READY
C
C
	END

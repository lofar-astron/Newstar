C+ NMAFMC.FOR
C  WNB 911031
C
C  Revisions:
C	WNB 911115	Change minimum beam factor
C	HjV 920520	HP does not allow extended source lines
C	WNB 920811	Add possibility to use noise as weight
C	WNB 920828	Update for line velocities
C	HjV 930311	Change some text
C	WNB 930602	Use BEMLIM, check weight limit
C	WNB 930826	New beam factors
C	WNB 930928	Multiple instruments for beam
C	WNB 930930	Use Fiddle codes
C	CMV 940506	Increase buffer size for output lines
C	CMV 940513	Also increase maximum number of input maps
C
	SUBROUTINE NMAFMC(TYP)
C
C  Combine mosaic maps
C
C  Result:
C
C	CALL NMAFMC ( TYP_J:I)		Combine mosaic maps. TYP:
C					MOS: FTSIZ gives pixel centre
C					LMM: CNTDVL gives lm (arcsec) centre
C					RAM: CNTDVL gives RADEC (fract) centre
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'GFH_O_DEF'		!FILE HEADER
	INCLUDE 'SGH_O_DEF'		!SUB-GROUP HEADER
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
	INTEGER MXNMP			!MAX. OF INPUT MAPS
	  PARAMETER (MXNMP=1024)
	INTEGER MXBUF			!BUFFER SIZE
	  PARAMETER (MXBUF=16384)
C
C  Arguments:
C
	INTEGER TYP			!TYPE TO DO
C
C  Function references:
C
	LOGICAL WNFOP			!OPEN FILE
	INTEGER WNFEOF			!FILE LENGTH
	LOGICAL WNFWR			!WRITE DISK
	LOGICAL WNFRD			!READ DISK
	LOGICAL WNDLNF,WNDLNG,WNDLNK	!LINK MAPS
	CHARACTER*32 WNTTSG		!MAP NAME
	LOGICAL NMASTG			!GET SET
	LOGICAL NMOBMF			!GET RANGE FOR BEAM
	DOUBLE PRECISION NMOBMV		!BEAM VALUES
C
C  Data declarations:
C
	INTEGER FCA,FCAO		!FILE AREAS
	INTEGER HIST			!MAP HISTOGRAM ADDRESS
	INTEGER NIN			!# OF INPUT MAPS
	CHARACTER*32 TXT		!TEXT DATA
	REAL WTMAX			!MAX. WEIGHT FOUND
	INTEGER LM0(0:1,0:MXNMP-1)	!OUTPUT CENTRE IN INPUT MAP COORD.
	INTEGER OUTP			!OUTPUT POINTER
	INTEGER SNAM(0:7,0:MXNMP-1)	!SET NAME
	INTEGER MPHP(-1:MXNMP-1)	!MAP HEADER POINTER
	BYTE MPH(0:MPHHDL-1,-1:MXNMP-1)	!MAP HEADER
	  INTEGER*2 MPHI(0:MPHHDL/2-1,-1:MXNMP-1)
	  INTEGER MPHJ(0:MPHHDL/4-1,-1:MXNMP-1)
	  REAL MPHE(0:MPHHDL/4-1,-1:MXNMP-1)
	  DOUBLE PRECISION MPHD(0:MPHHDL/8-1,-1:MXNMP-1)
	  EQUIVALENCE (MPH,MPHI,MPHJ,MPHE,MPHD)
	REAL DAT(0:MXBUF-1)		!MAP LINE INPUT
	REAL ODAT(0:MXBUF-1)		!MAP LINE OUTPUT
	REAL WDAT(0:MXBUF-1)		!MAP LINE WEIGHT
	REAL LDAT(0:MXBUF-1)		!MAP LINE CHECK WEIGHT
C-
C
C INIT
C
	CALL WNMHS8(HIST,1,1E0)			!INIT HISTO
	IF (.NOT.WNFOP(FCA,FILIN(1),'U')) THEN	!OPEN INPUT/OUTPUT
	  CALL WNCTXT(F_TP,'Cannot open !AS',FILIN(1))
	  GOTO 900
	END IF
C
C GET SETS
C
	NIN=0					!COUNT SETS
	DO WHILE (NIN.LT.MXNMP .AND. 
	1	  NMASTG(FCA,SETS(0,0,1),MPH(0,NIN),
	1		MPHP(NIN),SNAM(0,NIN)))	!GET SETS
	  IF (ABS(MPHD(MPH_RA_D,0)-MPHD(MPH_RA_D,NIN)).GT.1D-6 .OR.
	1	ABS(MPHD(MPH_DEC_D,0)-MPHD(MPH_DEC_D,NIN)).GT.1D-6) THEN
	    CALL WNCTXT(F_TP,'Wrong reference coordinates for !AS',
	1		WNTTSG(SNAM(0,NIN),0))
	  ELSE IF (ABS(MPHD(MPH_SRA_D,0)-MPHD(MPH_SRA_D,NIN)).GT.1D-9 .OR.
	1	ABS(MPHD(MPH_SDEC_D,0)-MPHD(MPH_SDEC_D,NIN)).GT.1D-9) THEN
	    CALL WNCTXT(F_TP,'Wrong l,m steps for !AS',
	1		WNTTSG(SNAM(0,NIN),0))
	  ELSE IF (ABS(MPHD(MPH_FRQO_D,0)-MPHD(MPH_FRQO_D,NIN))
	1		.GT.10) THEN
	    CALL WNCTXT(F_TP,
	1		'Cannot combine different frequencies for !AS',
	1		WNTTSG(SNAM(0,NIN),0))
	  ELSE
	    NIN=NIN+1				!COUNT MAP
	  END IF
	END DO
	IF (NIN.LE.0) THEN
	  CALL WNCTXT(F_TP,'No input data specified')
	  GOTO 900
	ELSE
	  CALL WNCTXT(F_TP,'Total of !UJ valid input maps',NIN)
	END IF
C
C GET OUTPUT DATA
C
	IF (FILIN(2).NE.'*') THEN		!OTHER OUTPUT
	  FCAO=0				!FORCE NEW
	  IF (.NOT.WNFOP(FCAO,FILIN(2),'U')) THEN
	    CALL WNCTXT(F_TP,'Cannot open !AS',FILIN(2))
	    GOTO 900
	  END IF
	ELSE
	  FCAO=FCA				!OUTPUT=INPUT
	END IF
	OUTP=WNFEOF(FCAO)			!NEW MAP
	NODOUT=NODIN(1)				!OUTPUT NAME
	CALL WNGMV(MPHHDL,MPH(0,0),MPH(0,-1))	!NEW HEADER
	CALL WNGMV(8*LB_J,SNAM(0,0),SGNR(0))	!SAVE NAME
C
C PREPARE OUTPUT HEADER
C
	MPHI(MPH_PCD_I,-1)=1			!INDICATE FIDDLE
	IF (TYP.EQ.FID_LMM) THEN		!LM CENTRE
	  FTSIZ(0)=NINT(CNTDVL(0)/3600./360./MPHD(MPH_SRA_D,-1))
	  FTSIZ(1)=NINT(CNTDVL(1)/3600./360./MPHD(MPH_SDEC_D,-1))
	ELSE IF (TYP.EQ.FID_RAM) THEN		!RADEC CENTRE
	  CALL WNMDRD(MPHD(MPH_RA_D,-1),MPHD(MPH_DEC_D,-1),
	1	D0,D1,
	1	CNTDVL(0),CNTDVL(1))		!L,M CENTRE
	  FTSIZ(0)=NINT(D0/DPI2/MPHD(MPH_SRA_D,-1))
	  FTSIZ(1)=NINT(D1/DPI2/MPHD(MPH_SDEC_D,-1))
	END IF
	MPHD(MPH_SHR_D,-1)=FTSIZ(0)*MPHD(MPH_SRA_D,-1) !CENTRE L,M
	MPHD(MPH_SHD_D,-1)=FTSIZ(1)*MPHD(MPH_SDEC_D,-1)
	MPHJ(MPH_NRA_J,-1)=OUTSIZ(0)		!LENGTH LINE
	MPHJ(MPH_NDEC_J,-1)=OUTSIZ(1)		!# OF LINES
	MPHJ(MPH_ZRA_J,-1)=OUTSIZ(0)/2		!CENTRE POINT
	MPHJ(MPH_ZDEC_J,-1)=OUTSIZ(1)/2		!CENTRE LINE
	MPHJ(MPH_MXR_J,-1)=0			!POS. MAX/MIN
	MPHJ(MPH_MXD_J,-1)=0
	MPHJ(MPH_MNR_J,-1)=0
	MPHJ(MPH_MND_J,-1)=0
	MPHE(MPH_MAX_E,-1)=-1E36		!MAX.
	MPHE(MPH_MIN_E,-1)=1E36			!MIN.
	MPHJ(MPH_NPT_J,-1)=0			!# OF POINTS
	MPHJ(MPH_NBL_J,-1)=0			!# OF BASEL.
	MPHJ(MPH_NST_J,-1)=0			!# OF SETS
	MPHD(MPH_SUM_D,-1)=0
	MPHD(MPH_BDW_D,-1)=0
	MPHD(MPH_FRQ_D,-1)=0
	CALL WNMDLM(MPHD(MPH_RA_D,-1),MPHD(MPH_DEC_D,-1),
	1	DPI2*MPHD(MPH_SHR_D,-1),DPI2*MPHD(MPH_SHD_D,-1),
	1	MPHD(MPH_RAO_D,-1),MPHD(MPH_DECO_D,-1)) !RA, DEC CENTRE OUTPUT
	MPHD(MPH_FRQO_D,-1)=0
	DO I=0,NIN-1
	  MPHJ(MPH_NPT_J,-1)=MPHJ(MPH_NPT_J,I)+MPHJ(MPH_NPT_J,-1) !# OF POINTS
	  MPHJ(MPH_NBL_J,-1)=MPHJ(MPH_NBL_J,I)+MPHJ(MPH_NBL_J,-1) !# OF BASEL.
	  MPHJ(MPH_NST_J,-1)=MPHJ(MPH_NST_J,I)+MPHJ(MPH_NST_J,-1) !# OF SETS
	  MPHD(MPH_SUM_D,-1)=MPHD(MPH_SUM_D,I)+MPHD(MPH_SUM_D,-1) !NORM.
	  MPHD(MPH_BDW_D,-1)=MPHD(MPH_BDW_D,I)+MPHD(MPH_BDW_D,-1) !BANDW.
	  MPHD(MPH_FRQ_D,-1)=MPHD(MPH_FRQ_D,I)*MPHD(MPH_BDW_D,I)+
	1		MPHD(MPH_FRQ_D,-1)			  !FREQ.
	  MPHD(MPH_FRQO_D,-1)=MPHD(MPH_FRQO_D,I)*MPHD(MPH_BDW_D,I)+
	1		MPHD(MPH_FRQO_D,-1)			  !FREQ.
	  MPHE(MPH_VEL_E,-1)=MPHE(MPH_VEL_E,I)*MPHD(MPH_BDW_D,I)+
	1		MPHE(MPH_VEL_E,-1)			  !VEL.
	  MPHE(MPH_VELR_E,-1)=MPHE(MPH_VELR_E,I)*MPHD(MPH_BDW_D,I)+
	1		MPHE(MPH_VELR_E,-1)			  !REF. VEL.
	  MPHD(MPH_FRQC_D,-1)=MPHD(MPH_FRQC_D,I)*MPHD(MPH_BDW_D,I)+
	1		MPHD(MPH_FRQC_D,-1)			  !FREQ.
	  MPHD(MPH_FRQ0_D,-1)=MPHD(MPH_FRQ0_D,I)*MPHD(MPH_BDW_D,I)+
	1		MPHD(MPH_FRQ0_D,-1)			  !FREQ.
	  MPHD(MPH_FRQV_D,-1)=MPHD(MPH_FRQV_D,I)*MPHD(MPH_BDW_D,I)+
	1		MPHD(MPH_FRQV_D,-1)			  !FREQ.
	END DO
	MPHD(MPH_FRQ_D,-1)=MPHD(MPH_FRQ_D,-1)/MPHD(MPH_BDW_D,-1)
	MPHD(MPH_FRQO_D,-1)=MPHD(MPH_FRQO_D,-1)/MPHD(MPH_BDW_D,-1)
	MPHE(MPH_VEL_E,-1)=MPHE(MPH_VEL_E,-1)/MPHD(MPH_BDW_D,-1)
	MPHE(MPH_VELR_E,-1)=MPHE(MPH_VELR_E,-1)/MPHD(MPH_BDW_D,-1)
	MPHD(MPH_FRQC_D,-1)=MPHD(MPH_FRQC_D,-1)/MPHD(MPH_BDW_D,-1)
	MPHD(MPH_FRQ0_D,-1)=MPHD(MPH_FRQ0_D,-1)/MPHD(MPH_BDW_D,-1)
	MPHD(MPH_FRQV_D,-1)=MPHD(MPH_FRQV_D,-1)/MPHD(MPH_BDW_D,-1)
	MPHE(MPH_FRA_E,-1)=(OUTSIZ(0)-1)*MPHD(MPH_SRA_D,-1) !FIELD SIZE RA
	MPHE(MPH_FDEC_E,-1)=(OUTSIZ(1)-1)*MPHD(MPH_SDEC_D,-1) !FIELD SIZE DEC
	MPHE(MPH_FFRQ_E,-1)=0			!FIELD SIZE FREQ
	MPHI(MPH_CD_I+7,-1)=1			!SET DE-BEAMED
	CALL WNCTXS(TXT,'Mosaic sum')
	CALL WNGMFS(MPH_UCM_N,TXT,MPH(MPH_UCM_1,-1)) !SET COMMENT
	MPHJ(MPH_MDP_J,-1)=OUTP			!DATA POINTER
C
C GET BEAM FACTOR
C
	IF (.NOT.NMOBMF(MPHJ(MPH_INST_J,-1),MPHD(MPH_FRQO_D,-1))) THEN
	  CALL WNCTXT(F_TP,'Cannot obtain (de-)beam information '//
	1		'for mosaic')
	  CALL WNGEX				!STOP
	END IF
C
C MAP POSITIONS
C
	CALL WNMDLM(MPHD(MPH_RA_D,-1),MPHD(MPH_DEC_D,-1),
	1	DPI2*MPHD(MPH_SHR_D,-1),DPI2*MPHD(MPH_SHD_D,-1),
	1	D0,D1)				!RA, DEC CENTRE OUTPUT MAP
	DO I=0,NIN-1				!ALL INPUT MAPS
	  CALL WNMCRD(MPHD(MPH_RA_D,I),MPHD(MPH_DEC_D,I),
	1	R0,R1,D0,D1)			!L, M THIS POINT IN INPUT MAP
	  LM0(0,I)=NINT((R0/PI2-MPHD(MPH_SHR_D,I))/MPHD(MPH_SRA_D,I)) !POINT L
	  LM0(1,I)=NINT((R1/PI2-MPHD(MPH_SHD_D,I))/MPHD(MPH_SDEC_D,I)) !POINT M
	END DO
C
C READ DATA
C
	DO I=0,OUTSIZ(1)-1			!ALL LINES
	  CALL WNGMVZ(LB_E*OUTSIZ(0),ODAT)	!ZERO SUM
	  CALL WNGMVZ(LB_E*OUTSIZ(0),WDAT)	!ZERO WEIGHT
	  CALL WNGMVZ(LB_E*OUTSIZ(0),LDAT)	!ZERO LIMIT WEIGHT
	  WTMAX=0.				!MAX. LINE WEIGHT
C
C MAPS
C
	  DO I1=0,NIN-1
	    J0=I-OUTSIZ(1)/2+LM0(1,I1)+MPHJ(MPH_NDEC_J,I1)/2 !LINE TO DO
	    IF (J0.GE.0 .AND.
	1		J0.LT.MPHJ(MPH_NDEC_J,I1)) THEN !INCLUDE LINE
	      IF (.NOT.WNFRD(FCA,LB_E*MPHJ(MPH_NRA_J,I1),DAT,
	1		MPHJ(MPH_MDP_J,I1)+
	1		LB_E*J0*MPHJ(MPH_NRA_J,I1))) THEN !READ LINE
	        CALL WNCTXT(F_TP,'Error reading Map !AS',
	1		WNTTSG(SNAM(0,I1),0))
	        CALL WNGEX			!STOP
	      END IF
C
C MAKE OUTPUT
C
	      DO I2=0,OUTSIZ(0)-1		!ALL POINTS
		J1=I2-OUTSIZ(0)/2+LM0(0,I1)+MPHJ(MPH_NRA_J,I1)/2
		IF (J1.GE.0 .AND. J1.LT.MPHJ(MPH_NRA_J,I1)) THEN
		  CALL WNMDLM(MPHD(MPH_RA_D,-1),MPHD(MPH_DEC_D,-1),
	1		(I2-OUTSIZ(0)/2+FTSIZ(0))*MPHD(MPH_SRA_D,-1)*DPI2,
	1		(I-OUTSIZ(1)/2+FTSIZ(1))*MPHD(MPH_SDEC_D,-1)*DPI2,
	1		D0,D1)			!RA,DEC POINT
		  CALL WNMCRD(MPHD(MPH_RAO_D,I1),MPHD(MPH_DECO_D,I1),
	1		R0,R1,
	1		D0,D1)			!L,M BEAM POINT
		  D0=NMOBMV(MPHD(MPH_FRQO_D,-1),
	1		R0,R1,
	1		BEMLIM,.TRUE.)		!VALUE
		  D1=MPHE(MPH_NOS_E,I1)**2	!NOISE
		  IF (POLT(0,0).EQ.0 .OR. D1.LE.0) THEN	!NO NOISE
	            ODAT(I2)=ODAT(I2)+DAT(J1)*
	1			(D0**(MPHI(MPH_CD_I+7,I1)+1))
	            WDAT(I2)=WDAT(I2)+D0**2
		    LDAT(I2)=LDAT(I2)+1.
		  ELSE
	            ODAT(I2)=ODAT(I2)+DAT(J1)*
	1		(D0**(MPHI(MPH_CD_I+7,I1)+1))/D1
	            WDAT(I2)=WDAT(I2)+D0**2/D1
		    LDAT(I2)=LDAT(I2)+1./D1
		  END IF
		END IF
		WTMAX=MAX(WTMAX,LDAT(I2))	!MAX. WEIGHT THIS LINE
	      END DO				!END POINTS
	    END IF
C
C NEXT MAP
C
	  END DO
C
C MAKE OUTPUT
C
	  DO I2=0,OUTSIZ(0)-1			!ALL POINTS
	    IF (WDAT(I2).NE.0) THEN
	      ODAT(I2)=ODAT(I2)/WDAT(I2)
	      IF (WDAT(I2).LT.POLT(1,0)*WTMAX) ODAT(I2)=0 !LIMIT EDGE OUTPUT
	    END IF
	  END DO				!END POINTS
C
C STATISTICS
C
	  R0=-1E36				!MAX
	  R1=1E36				!MIN
	  CALL WNMFMX(OUTSIZ(0),ODAT,1D0,R0,I3,R1,I4) !NORM. AND FIND MAX/MIN
	  IF (R0.GT.MPHE(MPH_MAX_E,-1)) THEN	!NEW MAX
	    MPHE(MPH_MAX_E,-1)=R0
	    MPHJ(MPH_MXR_J,-1)=I3-OUTSIZ(0)/2
	    MPHJ(MPH_MXD_J,-1)=I-OUTSIZ(1)/2
	  END IF
	  IF (R1.LT.MPHE(MPH_MIN_E,-1)) THEN	!NEW MIN
	    MPHE(MPH_MIN_E,-1)=R1
	    MPHJ(MPH_MNR_J,-1)=I4-OUTSIZ(0)/2
	    MPHJ(MPH_MND_J,-1)=I-OUTSIZ(1)/2
	  END IF
	  CALL WNMHS1(HIST,OUTSIZ(0),ODAT)	!MAKE HISTO
C
C OUTPUT LINE
C
	  IF (.NOT.WNFWR(FCAO,LB_E*OUTSIZ(0),ODAT,OUTP)) THEN
 20	    CONTINUE
	    CALL WNCTXT(F_TP,'Error writing output map')
	    CALL WNGEX				!STOP
	  END IF
	  OUTP=OUTP+LB_E*OUTSIZ(0)		!NEXT OUTPUT POINTER
C
C NEXT LINE
C
	END DO
C
C WRITE MAP HEADER
C
	CALL WNMHS3(HIST,1,F_P)			!SHOW HISTOGRAM
	CALL WNMHS4(HIST,MPHE(MPH_NOS_E,-1),F_P) !SET NOISE
	MPHP(-1)=WNFEOF(FCAO)			!WHERE TO WRITE
	CALL WNDSTI(FCA,SNAM(0,0))		!MAKE AN INDEX IF NECESSARY
	IF (.NOT.WNFWR(FCAO,MPHHDL,MPH(0,-1),MPHP(-1))) GOTO 20 !WRITE HEADER
	IF (.NOT.WNDLNG(GFH_LINKG_1,0,SGH_GROUPN_1,
	1		FCAO,SGPH(0),SGNR(0))) THEN
 30	  CONTINUE
	  CALL WNCTXT(F_TP,'Error creating sub-group')
	  CALL WNGEX				!STOP
	END IF
	DO I=1,4
	  IF (.NOT.WNDLNF(SGPH(I-1)+SGH_LINKG_1,SNAM(I,0),SGH_GROUPN_1,
	1		FCAO,SGPH(I),SGNR(I))) GOTO 30
	END DO
	I=5
	IF (.NOT.WNDLNK(GFH_LINK_1,MPHP(-1),MPH_SETN_1,
	1		FCAO)) GOTO 30
	IF (.NOT.WNDLNG(SGPH(I-1)+SGH_LINKG_1,MPHP(-1),SGH_GROUPN_1,
	1		FCAO,SGPH(I),SGNR(I))) GOTO 30
	IF (.NOT.WNFRD(FCAO,MPHHDL,MPH(0,-1),MPHP(-1))) GOTO 30 !HEADER
	SGNR(6)=-1				!END NAME
	CALL WNCTXT(F_T,'MAP !AS created',WNTTSG(SGNR,0))
	CALL WNCTXT(F_P,'!^')
	CALL NMAPMH(F_P,MPH(0,-1),SGNR,NODOUT)	!PRINT HEADER
C
C READY
C
 900	CONTINUE
	CALL WNMHS9(HIST)			!CLEAR HISTO
	CALL WNFCL(FCA)				!CLOSE FILES
	CALL WNFCL(FCAO)
C
	RETURN
C
C
	END

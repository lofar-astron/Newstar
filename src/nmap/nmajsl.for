C+ NMAJSL.FOR
C  CMV 940530
C
C  Revisions:
C	CMV 940530	Created
C	CMV 940614	Removed type
C	HjV 970415	Do not divide by zero for % OF 12h OBS.
C	AXC 010709      Linux port Changed check
C
	SUBROUTINE NMAJSL
C
C  Create/show a job summary log
C
C  Result:
C
C	CALL NMAJSL()	will write the general part of the job summary
C			log and show sets pointer/length in JOBSUM
C
C	CALL NMAJSS(FCAIN_J:I,STH(0:*)_J:I,SCNHA_E:I,IFRT(0:*)_I:I,
C		    BASEL(0:*)_E:I,APDATA(0:*)_E:I)
C			will update the summary for a set of input data
C			defined by Sector header STH with baselines in
C			BASEL and weights in APDATA. This routine should
C			be called for each scan with hour angle SCNHA.
C
C	CALL NMAJSM(MPH)
C			will update the summary for output map MPH
C
C	CALL NMAJSP(OUT_J:I,FCA2_J:I,MPHJ(0:*)_J:I,
C			SNAM(0:*)_J:I,NODNAM_C*(*):I)
C			will show the summary for the header in MPHJ
C			and file FCAIN on output OUT (F_T, F_TP etc)
C			using SNAM and NODNAM as a description.
C
C PIN references:
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMA_DEF'
	INCLUDE 'STH_O_DEF'		!SECTOR HEADER
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
	INCLUDE 'OHW_O_DEF'		!OH BLOCK
C
C  Parameters:
C
	INTEGER MAXCHAR			!MAX NUMBER OF CHARACTERS ON A LINE
	  PARAMETER (MAXCHAR=80)
	INTEGER MAXLINE			!MAX NUMBER OF LINES IN SUMMARY
	  PARAMETER (MAXLINE=23+STHIFR)
	INTEGER MAXSEQ			!MAX NUMBER OF SEQUENCE-NO'S KEPT
	  PARAMETER (MAXSEQ=8)
C
C  Entry points:
C
C
C  Arguments:
C
	INTEGER FCAIN			!INPUT FILE
	BYTE STH(0:*)			!SECTOR HEADER
	REAL SCNHA			!HA of Scan
	INTEGER*2 IFRT(0:*)		!IFR TABLE
	REAL BASEL(0:*)			!BASELINES
	REAL APDATA(0:*)		!WEIGHTS
C
	BYTE MPH_I(0:*)			!MAP HEADER
C
	INTEGER OUT			!OUTPUT FILE(S)
	INTEGER FCA2			!INPUT FILE
	INTEGER MPHJ_I(0:*)		!MAP HEADER
	INTEGER SNAM(0:7)		!SET NAME
	CHARACTER NODNAM*(*)		!NODE NAME
C
C  Function references:
C
	LOGICAL WNFWR			!WRITE FILE
	LOGICAL WNFRD			!READ FILE
	INTEGER WNFEOF			!FIND END OF FILE
	CHARACTER*32 WNTTSG		!GET MAP SET NAME
	INTEGER WNGGJ			!GET INTEGER
	INTEGER*2 WNGGI			!GET INTEGER
	REAL*8 WNGGD			!GET DOUBLE PRECISION
	REAL*4 WNGGE			!GET SINGLE PRECISION
C
C  Data declarations:
C
	INTEGER SIFR			!NO OF IFRS IN SECTOR
	INTEGER ICOL			!COLUMN NUMBER
	INTEGER ISEQ			!INDEX IN SEQ ARRAY
	INTEGER CSEQ			!CURRENT SEQ NO
	INTEGER ITIM(4)			!BUFFER FOR TIMES
	REAL*8 FRQ			!OBS. FREQUENCY
	REAL BS0,BS1			!BUFFER FOR RESOLUTION
C
	BYTE MPH(0:MPHHDL-1)		!LOCAL MAP HEADER
	  INTEGER*2 MPHI(0:MPHHDL/2-1)
	  INTEGER MPHJ(0:MPHHDL/4-1)
	  REAL MPHE(0:MPHHDL/4-1)
	  DOUBLE PRECISION MPHD(0:MPHHDL/8-1)
	  EQUIVALENCE (MPH,MPHI,MPHJ,MPHE,MPHD)
C
	BYTE OHW(0:OHWHDL-1)			!OH
	  INTEGER*2 OHWI(0:OHWHDL/2-1)
	  INTEGER   OHWJ(0:OHWHDL/4-1)
	  REAL OHWE(0:OHWHDL/4-1)
	  REAL*8 OHWD(0:OHWHDL/8-1)
	  EQUIVALENCE (OHW,OHWI,OHWJ,OHWE,OHWD)
C
	CHARACTER TMP1*32,TMP2*32,TMP3*32	!TEMP. BUFFERS
	CHARACTER LINE*80		!BUFFER FOR LINE OF TEXT
	BYTE JBUF(1:80,1:MAXLINE)	!BUFFER FOR SUMMARY
C
	INTEGER LI(0:STHIFR-1)		!LOOKUP TABLE FOR ORDERING IFRS
	INTEGER NIFR			!NUMBER OF IFRS SAVED
	INTEGER SEQ(MAXSEQ)		!SEQUENCE NUMBERS
	REAL TOT12(2,MAXSEQ)		!PERCENTAGE OF 12 HR OBS
	REAL SCN(MAXSEQ)		!NUMBER OF SCANS
	REAL CNT(0:STHIFR-1,MAXSEQ)	!POINTS USED
	REAL HAR(0:1,MAXSEQ)		!HOUR ANGLE RANGE
	REAL MBAS			!MAX BASELINE
	LOGICAL FIRST			!INITIALISE RANGES
	REAL VLR(0:1)			!VELOCITY RANGE
	INTEGER CHR(0:1)		!CHANNEL RANGE
	REAL DTR(0:1)			!DATA RANGE
	REAL TBW			!TOTAL BANDWIDTH FROM FIRST OH
	REAL CBW			!AVERAGE CHANNEL BANDWIDTH
	REAL NOS			!AVERAGE NOISE
	REAL NMAP			!NUMBER OF MAPS
	INTEGER*2 PRJ			!PROJECT (OF FIRST SEQ)
C
	CHARACTER STR(0:5)*16		!SOME STRINGS
	  DATA STR/'No subtract',  'Model subtracted',
	1	   'no clip',      'clipped',
	1	   'not corrected','corrected'/
	CHARACTER CVL(0:5)*12		!Convolution types
	  DATA CVL/'No ','Gaussian','Box','Prolate 4*4',
	1	   'ExpSinc','Prolate 6*6'/
	CHARACTER TPR(0:5)*8		!Taper types
	  DATA TPR/'None', 'Gaussian','Linear','Natural',
	1	   'Overr','Rgauss'/
C
	COMMON /JSL_COM/JBUF,LI,NIFR,SEQ,SCN,TOT12,CNT,HAR,
	1		FIRST,VLR,CHR,DTR,TBW,CBW,NOS,NMAP,PRJ
C-
C
C Initialise
C
	JOBSUM(0)=0			!DEFAULT: NO LOG
	JOBSUM(0)=0	
	CALL WNGMVB(80*MAXLINE,JBUF)	!CLEAR BUFFER
	DO I=1,MAXSEQ
	   SEQ(I)=0			!NOT YET DEFINED
	END DO
	FIRST=.TRUE.			!NEED TO INITIALISE RANGES 
	TBW= -1				!UNKNOWN YET
	PRJ= -1				!UNKNOWN YET
	CHR(0)= 32768			!UNKNOWN YET
	CHR(1)= -1			!UNKNOWN YET
	MBAS=3000			!SOME DEFAULT
C
C Initialise order for ifrs
C
	LI(0)= 9+10*256			!9a
	LI(1)= 9+11*256			!9b
	LI(2)= 9+12*256			!9c
	LI(3)= 9+13*256			!9d
	LI(4)=10+11*256			!ab
	LI(5)=10+12*256			!ac
	LI(6)=10+13*256			!ad
	LI(7)=11+12*256			!bc
	LI(8)=11+13*256			!bd
	LI(9)=12+13*256			!cd
	NIFR=10
	DO I=8,0,-1
	  LI(NIFR)  =I+10*256		!8a..0a
	  LI(NIFR+1)=I+11*256		!8b..0b
	  NIFR=NIFR+2
	END DO
	DO I=8,0,-1
	  LI(NIFR)  =I+12*256		!8c..0c
	  LI(NIFR+1)=I+13*256		!8d..0d
	  NIFR=NIFR+2
	END DO
C
C Fill in header line and first row for SCN items
C
	CALL WNGSGU(TMP1)				!User
	CALL WNCTXS(LINE,'Job !AS '//
	1	    '!40C\Date !%DN !%T  by !AS',
	1	    CNTCVL(1),TMP1)			!Write to string
	CALL WNGMFS(80,LINE,JBUF(1,1))			!Save in buffer
C
	CALL WNGMFS(13,'Sequenceno.  ',JBUF(1,19))
	CALL WNGMFS(13,'Obs.date     ',JBUF(1,20))
	CALL WNGMFS(13,'UT time      ',JBUF(1,21))
	CALL WNGMFS(13,'HA-range     ',JBUF(1,22))
	CALL WNGMFS(13,'% of 12h obs ',JBUF(1,23))
	DO I=0,NIFR-1
	  CALL WNCTXS(TMP1,' !1$X!1$X ',MOD(LI(I),256),LI(I)/256)
	  CALL WNGMFS(4,TMP1,JBUF(1,24+I))
	END DO
C
C Write to file
C
	JOBSUM(0)=WNFEOF(FCAOUT)	!APPEND TO FILE
	JOBSUM(1)=(23+NIFR)*80		!NUMBER OF CHARACTERS
	GOTO 10
C
C Add input data to summary log
C
	ENTRY NMAJSS(FCAIN,STH,SCNHA,IFRT,BASEL,APDATA)
C
C Find column
C
	SIFR=WNGGJ(STH(STH_NIFR_1))	!GET NO OF IFRS
	CSEQ=WNGGJ(STH(STH_VNR_1))	!GET SEQUENCE NUMBER
	ISEQ=1
	DO WHILE (SEQ(ISEQ).NE.CSEQ.AND.
	1	  SEQ(ISEQ).NE.0.AND.ISEQ.LT.MAXSEQ)	!NO MATCH
	  ISEQ=ISEQ+1					!TRY NEXT
	END DO
	ICOL=13*ISEQ					!FIND COLUMN
C
C If not found and still space, create new column
C
	IF (SEQ(ISEQ).EQ.0) THEN
	   SEQ(ISEQ)=CSEQ				!SAVE SEQUENCE NUMBER
 	   SCN(ISEQ)=0					!NO SCANS YET
	   HAR(0,ISEQ)=  999				!NO RANGE KNOWN 
	   HAR(1,ISEQ)= -999
C
C Fill in fixed items for column, extra things in header for first col.
C
	   CALL WNCTXS(TMP1,'!12$UJ',CSEQ)		!WRITE TO STRING
	   CALL WNGMFS(12,TMP1,JBUF(ICOL,19))		!SAVE IN BUFFER
	   J=WNGGJ(STH(STH_OHP_1))			!GET POINTER TO OH
	   I1=WNGGJ(STH(STH_NOH_1))			!GET LENGTH OF OH
	   IF (J.NE.0) THEN				!Read OH block if any
	      IF (WNFRD(FCAIN,I1,OHW,J)) THEN
	         CALL WNCTXS(TMP1,'!2$ZI!2$ZI!2$ZI (!3$ZI)',
	1		OHWI(OHW_DATE_I+1),OHWI(OHW_DATE_I+2),
	1		OHWI(OHW_DATE_I+3),OHWI(OHW_SDAY_I))	!yymmdd (day)
	         CALL WNGMFS(12,TMP1,JBUF(ICOL,20))	!SAVE IN BUFFER
	         I1=OHWI(OHW_STIM_I)*10			!MAKE SECONDS
	         ITIM(1)=I1/3600			!GET HOURS
	         ITIM(2)=MOD(I1/60,60)			!GET MINUTES
	         I1=OHWI(OHW_ETIM_I)*10			!MAKE SECONDS
	         ITIM(3)=I1/3600			!GET HOURS
	         ITIM(4)=MOD(I1/60,60)			!GET MINUTES
	         CALL WNCTXS(TMP1,'!2$ZJ:!2$ZJ-!2$ZJ:!2$ZJ',
	1			ITIM(1),ITIM(2),ITIM(3),ITIM(4)) !UT-time
	         CALL WNGMFS(12,TMP1,JBUF(ICOL,21))	!SAVE IN BUFFER
C
		 IF (PRJ.LT.0) PRJ=OHWI(OHW_PROJECT_I)	!SAVE FIRST PROJECT
		 IF (TBW.LT.0) TBW=OHWE(OHW_BAND_E)	!SAVE FIRST TOTAL BAND
C
	     END IF
	   END IF
C
	   I1=0						!NO. OF SEL. IFR'S
	   DO I=0,NIFR-1				!FOR ALL IFR'S
	      CNT(I,ISEQ)=0				!NO POINTS YET
	      DO I3=0,SIFR				!FIND IFR IN TABLE
	        IF (IFRT(I3).EQ.LI(I)) THEN		!FOUND
	           IF (BASEL(I3).GT.MBAS.AND.
	1	       SIFRS(I3/256,MOD(I3,256),0).NE.0) 
	1			MBAS=BASEL(I3) 		!NEW MAX
	           IF (BASEL(I3).GT.0) THEN		!SELECTED
	             I1=I1+1				!COUNT IFR
	             CALL WNCTXS(TMP1,'!6$E6.0',BASEL(I3)) !WRITE TO STRING
	             CALL WNGMFS(6,TMP1,JBUF(ICOL,24+I))
	           ELSE
	             CALL WNGMFS(11,'  ---- (--)',JBUf(ICOL,24+I)) !NOT SELECTED
	           END IF
	        END IF
	      END DO
	   END DO
C
	   R0=0.5/WNGGE(STH(STH_HAI_1))			!HA SCANS IN 12h OBS.
	   TOT12(1,ISEQ)=R0*I1				!TOTAL POINTS
	   TOT12(2,ISEQ)=0				!INIT COUNTER
C
	END IF
C
C If found, update the percentage used and Ha range
C
	IF (SEQ(ISEQ).EQ.CSEQ) THEN
 	   SCN(ISEQ)=SCN(ISEQ)+1			!ADD THIS SCAN
	   IF (SCNHA.LT.HAR(0,ISEQ)) THEN		!NEW MINIMUM
	      HAR(0,ISEQ)=SCNHA
	      CALL WNCTXS(TMP1,'!4$E4.0 -',SCNHA*360)
	      CALL WNGMFS(6,TMP1,JBUF(ICOL,22))
	   END IF
	   IF (SCNHA.GT.HAR(1,ISEQ)) THEN		!NEW MAXIMUM
	      HAR(1,ISEQ)=SCNHA
	      CALL WNCTXS(TMP1,'- !4$E4.0',SCNHA*360)
	      CALL WNGMFS(6,TMP1,JBUF(ICOL+5,22))
	   END IF
C
	   DO I=0,NIFR-1				!FOR ALL IFR'S
	      DO I3=0,SIFR				!FIND IFR IN TABLE
	        IF (IFRT(I3).EQ.LI(I).AND.
	1	    BASEL(I3).GT.0) THEN		!FOUND AND SELECTED
		   IF (APDATA(I3).GT.0) THEN		! AND NOT FLAGGED
	              CNT(I,ISEQ)=CNT(I,ISEQ)+1		!COUNT FOR IFR
	              TOT12(2,ISEQ)=TOT12(2,ISEQ)+1	!COUNT FOR TOTAL
	           END IF
	           R0=100.*CNT(I,ISEQ)/SCN(ISEQ)	!MAKE %
	           IF (R0.GT.99) THEN			!ALL
	             CALL WNGMFS(4,'(**)',JBUF(ICOL+7,24+I))
	           ELSE IF (CNT(I,ISEQ).EQ.0) THEN	!NONE
	             CALL WNGMFS(4,'(..)',JBUF(ICOL+7,24+I))
	           ELSE					!0...100%
	             CALL WNCTXS(TMP1,'(!2$E2.0)',R0)	!WRITE TO STRING
	             CALL WNGMFS(4,TMP1,JBUF(ICOL+7,24+I))
	           END IF
	        END IF
	      END DO
	   END DO
C
           IF (TOT12(1,ISEQ).LE.0.0) THEN
              CALL WNCTXS(TMP1,'  0.0')
           ELSE
              CALL WNCTXS(TMP1,'!5$E5.1',
	1	   100.*TOT12(2,ISEQ)/TOT12(1,ISEQ)) !% OF 12h OBS.
           ENDIF
	   CALL WNGMFS(5,TMP1,JBUF(ICOL+6,23))		!SAVE IN BUFFER
C
C Check channel range here, since output map starts at channel 0 always
C
	   I1=WNGGI(STH(STH_CHAN_1))
	   IF (I1.LT.CHR(0)) CHR(0)=I1
	   IF (I1.GT.CHR(1)) CHR(1)=I1
C
	END IF
C
	RETURN					!DO NOT YET UPDATE IN FILE
C
C Add next output map to summary log
C
	ENTRY NMAJSM(MPH_I)
C
	IF (JOBSUM(0).EQ.0) RETURN		!QUIT IF NOT SUMMARY YET
C
	CALL WNGMV(MPHHDL,MPH_I,MPH)		!LOCAL COPY OF HEADER
	IF (FIRST) THEN				!INITIALISE RANGES
	   FIRST=.FALSE.
	   CBW=0
	   NOS=0
	   NMAP=0
	   VLR(0)=MPHD(MPH_VEL_E)		!AVERAGE OVER STH_VEL
	   VLR(1)=MPHD(MPH_VEL_E)
	   DTR(0)=MPHE(MPH_MIN_E)
	   DTR(1)=MPHE(MPH_MAX_E)
	ELSE
	   IF (MPHD(MPH_VEL_E).LT.VLR(0))  VLR(0)=MPHE(MPH_VEL_E)
	   IF (MPHD(MPH_VEL_E).GT.VLR(1))  VLR(1)=MPHE(MPH_VEL_E)
	   IF (MPHE(MPH_MIN_E).LT.DTR(0))  DTR(0)=MPHE(MPH_MIN_E)
	   IF (MPHE(MPH_MAX_E).GT.DTR(1))  DTR(1)=MPHE(MPH_MAX_E)
	END IF
	CBW=CBW+MPHD(MPH_BDW_D)			!UPDATE AV. CHANNEL BANDWIDTH
	NOS=NOS+MPHE(MPH_NOS_E)
	NMAP=NMAP+1				
C
	R0=MBAS					!MAX BASELINE
	IF (TAPTYP.NE.0) R0=MIN(R0,TAPVAL)	!MAY BE TAPER LIMITED
	IF (CWGTYP.NE.0) R0=MIN(R0,CWGVAL)
	FRQ=CNTDVL(12)				!OBS. FREQ
	IF (D1.EQ.0) FRQ=CNTDVL(6)		!FALLBACK: CHANNEL FREQ
	BS0=1.5D0/(R0*DPI2*FRQ/CL/(1.D-6))	!BEAM IN RAD  D*c/(2pi f)
	BS0=BS0/DPI2				!BEAM IN CIRCLES
	IF (CWGTYP.NE.0.AND.R0.EQ.CWGVAL) THEN
	  BS1=BS0				!CIRC.WEIGHT
	ELSE
	  BS1=BS0/SIN(MPHD(MPH_DEC_D)*DPI2)	!ASSYMMETRIC
	END IF
C
	CALL WNCTXS(LINE,'Taper       !6$E6.1 (!AS)'//
	1	    '!40C\FFT Size    !6$UJ  x !6$UJ pix',
	1	    TAPVAL,TPR(TAPTYP),
	1	    MPHJ(MPH_FSR_J),MPHJ(MPH_FSD_J))
	CALL WNGMFS(80,LINE,JBUF(1,3))
	CALL WNCTXS(LINE,'Circ.weight !6$E6.1 (!AS)'//
	1	    '!40C\Outsize     !6$UJ  x !6$UJ pix',
	1	    CWGVAL,TPR(CWGTYP),
	1	    MPHJ(MPH_NRA_J),MPHJ(MPH_NDEC_J))
	CALL WNGMFS(80,LINE,JBUF(1,4))
	CALL WNCTXS(LINE,'Polarisations: !#AS'//
	1	    '!40C\Fieldsize    !5$E5.1  x !5$E5.1  arcmin',
	1	    NPOL,POLC,
	1	    MPHE(MPH_FRA_E )*360*60,
	1	    MPHE(MPH_FDEC_E)*360*60)
	CALL WNGMFS(80,LINE,JBUF(1,5))
	CALL WNCTXS(LINE,'Convolution:   !AS (!AS)'//
	1	    '!40C\    =       !7$EAF7.2 x !6$EAF6.2 deg',
	1	    CVL(MPHI(MPH_CD_I+1)),STR(4+MPHI(MPH_CD_I+2)),
	1	    MPHE(MPH_FRA_E),MPHE(MPH_FDEC_E))
	CALL WNGMFS(80,LINE,JBUF(1,6))
	CALL WNCTXS(LINE,'!AS, !AS'//
	1	    '!40C\Pix. size    !6$D6.2 x !6$D6.2 arcsec',
	1	    STR(  MPHI(MPH_CD_I+4)),
	1	    STR(2+MPHI(MPH_CD_I+3)),
	1	    MPHD(MPH_SRA_D)*360D0*3600D0,
	1	    MPHD(MPH_SDEC_D)*360D0*3600D0)
	CALL WNGMFS(80,LINE,JBUF(1,7))
C
	CALL WNCTXS(LINE,'Pix/beam     !6$D6.1 x !6$D6.1'//
	1	    '!40C\Beam size    !6$D6.2 x !6$D6.2 arcsec',
	1	    BS0/MPHD(MPH_SRA_D),BS1/MPHD(MPH_SDEC_D),
	1	    BS0*360D0*3600D0,BS1*360D0*3600D0)
	CALL WNGMFS(80,LINE,JBUF(1,8))
C
	CALL WNCTXS(LINE,'Field   !AS'//
	1	    '!40C\Project !12$UI',
	1	    CNTCVL(0),PRJ)		!GET FIELD AND PROJECT
	CALL WNGMFS(80,LINE,JBUF(1,10))		!SAVE IN BUFFER
C
	CALL WNCTXS(LINE,'RA      !8$DHF6 = !8$DPF8.3 deg'//
	1	    '!40C\Dec     !8$DDF6 = !8$DAF8.3  (!E5.0)',
	1	    MPHD(MPH_RA_D), MPHD(MPH_RA_D),
	1	    MPHD(MPH_DEC_D),MPHD(MPH_DEC_D),
	1	    MPHE(MPH_EPO_E))
	CALL WNGMFS(80,LINE,JBUF(1,11))
C
	CALL WNCTXS(LINE,'Obs.frq.  !10$D10.3 MHz '//
	1	    '!40C\Cen. vel.   !8$D8.1          km/s',
	1	    FRQ,CNTDVL(8))
	CALL WNGMFS(80,LINE,JBUF(1,13))
	CALL WNCTXS(LINE,'Bandwidth   !8$E8.3 MHz '//
	1	    '!40C\Vel. range  !8$E8.1 - !8$E8.1 km/s',
	1	    TBW,VLR(0),VLR(1))
	CALL WNGMFS(80,LINE,JBUF(1,14))
	CALL WNCTXS(LINE,'Channel bw  !6$E6.1   kHz'//
	1	    '!40C\Channels    !4$UJ - !4$UJ ',
	1	    CBW/NMAP*1000,CHR(0),CHR(1))
	CALL WNGMFS(80,LINE,JBUF(1,15))
	CALL WNCTXS(LINE,'Datarange   !8$E8.2 - !8$E8.2 '//
	1	    '!40C\Av. noise   !10$E10.4',
	1	    DTR(0),DTR(1),NOS/NMAP)
	CALL WNGMFS(80,LINE,JBUF(1,16))
C
	GOTO 10					!UPDATE IN FILE
C
C Update in file
C
  10	CONTINUE
	IF (.NOT.WNFWR(FCAOUT,JOBSUM(1),JBUF,JOBSUM(0))) THEN	!WRITE
	   JOBSUM(0)=0			!DISABLE JOB SUMMARY
	   JOBSUM(1)=0
	   CALL WNCTXT(F_TP,'Cannot write job summary log')
	END IF
	RETURN
C
C Print job summary log
C
	ENTRY NMAJSP(OUT,FCA2,MPHJ_I,SNAM,NODNAM)
C
	IF (MPHJ_I(MPH_JOBP_J).EQ.0.OR.
	1	MPHJ_I(MPH_JOBL_J).EQ.0) THEN 		!CHECK IF IT'S THERE
	   CALL WNCTXT(F_TP,'No Job Summary Log for !AS in node !AS',
	1			WNTTSG(SNAM,0),NODNAM)
	   RETURN
	END IF
	IF (.NOT.WNFRD(FCA2,MPHJ_I(MPH_JOBL_J),
	1		JBUF,MPHJ_I(MPH_JOBP_J))) THEN	!TRY TO READ
	   CALL WNCTXT(F_TP,
	1	'Cannot read Job Summary Log for !AS in node !AS',
	1	WNTTSG(SNAM,0),NODNAM)
	   RETURN
	END IF
C
	CALL WNCTXT(OUT,'!/\#Job Summary Log of !AS in node !AS',
	1		WNTTSG(SNAM,0),NODNAM)
C
	I1=1						!FIRST LINE
	I2=MPHJ_I(MPH_JOBL_J)/80			!LAST LINE
	DO WHILE (I1.LE.I2)				!ALL LINES
	   CALL WNGMTS(80,JBUF(1,I1),LINE)		!MOVE INTO STRING
	   CALL WNCTXT(OUT,'!AS',LINE)			!PRINT
	   I1=I1+1					!NEXT LINE
	END DO
C
	CALL WNCTXT(OUT,'#End')
	RETURN
C
	END


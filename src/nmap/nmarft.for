C+ NMARFT.FOR
C  HjV 940714
C
C  Revisions:
C	CMV 940926	Use both SCAL and OFF, variable length headers
C       JPH 950116      No missing label report for wildcard label
C       HjV 950131	Typo in calculation MIN DEC position, buffer too small
C	CMV 960126	Message if LABEL=* and diskfile not found
C       HjV 970407      Check for return status after WNFRD
C
	SUBROUTINE NMARFT
C
C  Read FITS format in WMP maps
C
C
C  Result:
C
C	CALL NMAWFT		Read FITS tape
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
        INCLUDE 'GFH_O_DEF'             !GENERAL FILE HEADER
        INCLUDE 'SGH_O_DEF'             !SUB-GROUP HEADER
	INCLUDE 'NMA_DEF'
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
C
C  Parameters:
C
	INTEGER FBFLEN			!FITS BUFFER LENGTH
	  PARAMETER (FBFLEN=2880)
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL NMARFH			!READ FITS HEADER
	LOGICAL WNFMOU			!MOUNT TAPE
	LOGICAL WNFOP,WNFOPF		!OPEN FILE
	LOGICAL WNFWR			!WRITE DATA
	LOGICAL WNFRD			!READ DATA
	INTEGER WNFTLB			!CURRENT TAPE LABEL
	CHARACTER*32 WNTTSG		!MAP SET NAME
	INTEGER WNCALN			!STRING LENGTH
        LOGICAL WNDLNF,WNDLNG,WNDLNK	!LINK SUB-GROUP
        INTEGER WNFEOF                  !FILE POINTER
	LOGICAL NMASTG			!GET MAP SET
C
C  Data declarations:
C
	INTEGER TP			!# OF BITS PER DATAPOINT
	CHARACTER*160 OFILE		!FILE NAME
	INTEGER MPHP			!MAP HEADER POINTER
	BYTE MPH(0:MPHHDL-1)		!MAP HEADER
	  INTEGER*2 MPHI(0:MPHHDL/2-1)
	  INTEGER MPHJ(0:MPHHDL/4-1)
	  REAL MPHE(0:MPHHDL/4-1)
	  DOUBLE PRECISION MPHD(0:MPHHDL/8-1)
	  EQUIVALENCE (MPH,MPHI,MPHJ,MPHE,MPHD)
	CHARACTER*(FBFLEN) FBUF		!FITS BUFFER
	  BYTE LFBUF(0:FBFLEN-1)
	  INTEGER*2 IFBUF(0:FBFLEN/2-1)
	  INTEGER JFBUF(0:FBFLEN/4-1)
	  REAL EFBUF(0:FBFLEN/4-1)
	  EQUIVALENCE (FBUF,LFBUF,IFBUF,JFBUF,EFBUF)
	REAL INBUF(0:FBFLEN-1)		!MAP LINE BUFFER
	REAL SCAL,OFF			!DATA SCALE and OFFSET
	INTEGER*2 ITRB(0:3)		!DATA TRANSLATION I
	  DATA ITRB/2,1440,0,1/
	INTEGER*2 JTRB(0:3)		!DATA TRANSLATION J
	  DATA JTRB/3,720,0,1/        
	INTEGER*2 ETRB(0:3)		!DATA TRANSLATION E
	  DATA ETRB/4,720,0,1/
	INTEGER*2 PLC(0:1,0:7)		!POL. CODES
          DATA PLC/'XX',0,'XY',1,'YX',2,'YY',3,
	1    		'I ',0,'Q ',2,'U ',2,'V ',3/
        INTEGER TPC(0:1,0:7)		!TYPE CODES
          DATA TPC/'MAP ',0,'AP  ',1,'COVE',2,'REAL',3,
	1    		'IMAG',4,'AMPL',5,'PHAS',6,'HOLO',7/
	INTEGER ILABEL			!LABEL TO PROCESS
	INTEGER NRCUB			!# OF CUBICS
	INTEGER NRDPTS			!# OF DATAPOINTS
	REAL RPI(0:1)			!REFERENCE PIXEL INDEX (HOR,VERT)
C-
C
C INIT
C
	IF (.NOT.WNDLNG(GFH_LINKG_1,0,SGH_GROUPN_1,FCAOUT,
	1    	SGPH(0),SGNR(0))) THEN		!CREATE JOB LEVEL
 30	   CONTINUE
	   CALL WNCTXT(F_TP,'Error creating sub-group')
	   CALL WNGEX				!STOP
	END IF
C
C OPEN INPUT
C
	J=0
 20	CONTINUE
        J=J+1					!COUNT INPUT LABEL
        IF (NLAB.LT.0) THEN			!ALL LABELS ON TAPE
          ILABEL=J				!NEXT INPUT LABEL
        ELSE IF (J.LE.NLAB) THEN
          ILABEL=ILAB(J)			!NEXT INPUT LABEL
        ELSE
          GOTO 800				!READY WITH JOB
        END IF
	IF (IUNIT.EQ.'D') THEN
	  CALL WNCTXS(OFILE,'!AS\.!6$ZJ',FILIN,ILABEL) !MAKE FILE NAME
	  IF (.NOT.WNFOP(FCATAP,OFILE(1:WNCALN(OFILE)),'R')) THEN
	    IF (NLAB.GT.0) THEN
	       CALL WNCTXT(F_TP,'Cannot open input file !AS',OFILE)
	    ELSE
	       CALL WNCTXT(F_TP,'No files found for !AS',FILIN)
	       CALL WNCTXT(F_T,'Expecting file !AS',OFILE)
	    END IF
	    GOTO 800
	  END IF
	ELSE
	  IF (ILABEL.LE.0) THEN			!AT END OF TAPE
	    IF (.NOT.WNFOPF(FCATAP,' ','R',0,FBFLEN,80,0)) THEN
 51	      CONTINUE
	      CALL WNCTXT(F_TP,'Cannot open input tape')
	      GOTO 800
	    END IF
	    ILABEL=WNFTLB(FCATAP)		!LABEL
	  ELSE
	    IF (.NOT.WNFOPF(FCATAP,' ','R',0,FBFLEN,
	1			80,ILABEL)) GOTO 51 !OPEN TAPE
	  END IF
	  CALL WNCTXS(OFILE,'!6$ZJ',ILABEL)	!LABEL NAME
	END IF
        IF (.NOT.WNDLNG(SGPH(0)+SGH_LINKG_1,0,SGH_GROUPN_1,
	1		FCAOUT,SGPH(1),SGNR(1))) GOTO 30  !CREATE FIELD
C
C READ HEADER DATA
C
	J2=0					!OUTPUT POINTER
	CALL WNGMVZ(MPH__L,MPH)			!CLEAR MAP HEADER
	IF (.NOT.NMARFH(FBFLEN,FBUF,LFBUF,TP,ILABEL-1,
	1	MPH,MPHI,MPHJ,MPHE,MPHD,
	2    	SCAL,OFF,NRCUB,NRDPTS,RPI,J2,FCATAP)) GOTO 800 !GET HEADER
C
C WRITE MPH
C
        IF (.NOT.WNDLNG(SGPH(1)+SGH_LINKG_1,0,SGH_GROUPN_1,
	1		FCAOUT,SGPH(2),SGNR(2))) GOTO 30  !CREATE CHANNEL
        I1=0					!POL. CODE
        DO I=0,7
          IF (MPHI(MPH_POL_1/LB_I).EQ.PLC(0,I)) I1=PLC(1,I)
        END DO
        IF (.NOT.WNDLNF(SGPH(2)+SGH_LINKG_1,I1,SGH_GROUPN_1,
	1		FCAOUT,SGPH(3),SGNR(3))) GOTO 30  !CREATE CHANNEL
        I1=0					!TYPE CODE
        DO I=0,7
          IF (MPHJ(MPH_TYP_1/LB_J).EQ.TPC(0,I)) I1=TPC(1,I)
        END DO
        IF (.NOT.WNDLNF(SGPH(3)+SGH_LINKG_1,I1,SGH_GROUPN_1,
	1		FCAOUT,SGPH(4),SGNR(4))) GOTO 30  !CREATE CHANNEL
        MPHI(MPH_LEN_I)=MPH__L			!LENGTH
        MPHI(MPH_VER_I)=MPH__V			!VERSION
        MPHI(MPH_DCD_I)=5			!REAL VALUES
	J4=0					!OUTPUT BUF POINTER
	DO I2=1,NRCUB
	  MPHP=WNFEOF(FCAOUT)			!MAP HEADER POINTER
	  IF (.NOT.WNFWR(FCAOUT,MPH__L,MPH,MPHP)) THEN	!WRITE HEADER
	     CALL WNCTXT(F_TP,'Error writing !AS',FILOUT)
	     GOTO 800
	  END IF
	  IF (.NOT.WNDLNK(GFH_LINK_1,MPHP,
	1		MPH_SETN_1,FCAOUT)) GOTO 30	!LINK MAP
	  IF (.NOT.WNDLNG(SGPH(4)+SGH_LINKG_1,MPHP,SGH_GROUPN_1,
	1    		FCAOUT,SGPH(5),SGNR(5))) GOTO 30  !CREATE CHANNEL
	  IF (.NOT.WNFRD(FCAOUT,MPH__L,MPH,MPHP)) GOTO 30 !REREAD HEADER
	  MPHJ(MPH_MDP_J)=WNFEOF(FCAOUT)	!MAP DATA POINTER
	  J0=MPHJ(MPH_MDP_J)			!OUTPUT POINTER
C
C READ MAP DATA
C
	  J3=0					!# OF DATAPOINTS PROCESSED
	  MPHE(MPH_MAX_E)=-1E36			!MAX
	  MPHJ(MPH_MXR_J)=-1			!POSITION MAX. IN RA
	  MPHJ(MPH_MXD_J)=-1			!POSITION MAX. IN DEC
	  MPHE(MPH_MIN_E)=1E36			!MIN
	  MPHJ(MPH_MNR_J)=-1			!POSITION MIN. IN RA
	  MPHJ(MPH_MND_J)=-1			!POSITION MIN. IN DEC
	  DO WHILE (J3.LT.NRDPTS)
	    IF (.NOT.WNFRD(FCATAP,FBFLEN,LFBUF,J2)) THEN   !READ FITS BLOCK
	       IF (E_C .NE. '00000870'X .AND. E_C .NE. '00000000'X) THEN
		 CALL WNCTXT(F_TP,'ERROR: ')
		 CALL WNCTXT(F_TP,'ERROR: Error reading FITS DATA')
		 CALL WNCTXT(F_TP,'ERROR: Program halted with error !XJ',E_C)
		 CALL WNCTXT(F_TP,'ERROR: ')
	       ENDIF
	       GOTO 800
	    END IF
	    J2=J2+FBFLEN			!INPUT DISK POINTER
	    IF (TP.EQ.8) THEN
	      J4=FBFLEN
	      DO I4=0,J4-1			!INPUT BYTES
	        I1=LFBUF(I4)
	        IF (I1.LT.0) I1=I1+255
	        INBUF(I4)=I1/SCAL+OFF		!SCALE DATA
	      END DO
	    ELSE IF (TP.EQ.16) THEN
	      CALL WNTTTL(FBFLEN,IFBUF,ITRB,5)
	      J4=FBFLEN/LB_I
	      DO I4=0,J4-1			!INPUT WORDS
	        INBUF(I4)=IFBUF(I4)/SCAL+OFF		!SCALE DATA
	      END DO
	    ELSE IF (TP.EQ.32) THEN			!32 BITS
	      CALL WNTTTL(FBFLEN,JFBUF,JTRB,5)
	      J4=FBFLEN/LB_J
	      DO I4=0,J4-1			!INPUT WORDS
	        INBUF(I4)=JFBUF(I4)/SCAL+OFF		!SCALE DATA
	      END DO
	    ELSE IF (TP.EQ.-32) THEN		!REAL
	      CALL WNTTTL(FBFLEN,EFBUF,ETRB,5)
	      J4=FBFLEN/LB_E
	      DO I4=0,J4-1			!INPUT WORDS
	        INBUF(I4)=EFBUF(I4)/SCAL+OFF		!SCALE DATA
	      END DO
	    ELSE				!UNKNOWN INPUT TYPE
	      CALL WNCTXT(F_TP,'ERROR: Unknown BITPIX !UJ',TP)
	      CALL WNCTXT(F_TP,'Cannot write map data, aborting...')
	      GOTO 800
	    END IF
C
	    IF (J3+J4.GT.NRDPTS) J4=NRDPTS-J3	!FORGET REST OF RECORD
	    IF (.NOT.WNFWR(FCAOUT,LB_E*J4,INBUF,J0)) THEN !WRITE A RECORD
 44		CALL WNCTXT(F_TP,'Error writing data')
		GOTO 800
	    END IF
	    J0=J0+LB_E*J4
C
	    DO I4=0,J4-1
	      J3=J3+1					!COUNT DATAPOINT
	      IF (INBUF(I4).GE.MPHE(MPH_MAX_E)) THEN
		  MPHE(MPH_MAX_E)=INBUF(I4)		!MAX
		  MPHJ(MPH_MXR_J)=MOD(J3,MPHJ(MPH_NRA_J)) !POSITION IN RA
		  MPHJ(MPH_MXD_J)=J3/MPHJ(MPH_NRA_J)      !POSITION IN DEC
	      ELSE IF (INBUF(I4).LE.MPHE(MPH_MIN_E)) THEN
		  MPHE(MPH_MIN_E)=INBUF(I4)		!MIN
		  MPHJ(MPH_MNR_J)=MOD(J3,MPHJ(MPH_NRA_J)) !POSITION IN RA
		  MPHJ(MPH_MND_J)=J3/MPHJ(MPH_NRA_J)      !POSITION IN DEC
	      END IF
	    END DO
	  END DO
C
C READY WITH THIS MAP
C
	  MPHJ(MPH_MXR_J)=MPHJ(MPH_MXR_J)-RPI(0)	!POSITION MAX. IN RA
	  MPHJ(MPH_MXD_J)=MPHJ(MPH_MXD_J)-RPI(1)+1	!POSITION MAX. IN DEC
	  MPHJ(MPH_MNR_J)=MPHJ(MPH_MNR_J)-RPI(0)	!POSITION MIN. IN RA
	  MPHJ(MPH_MND_J)=MPHJ(MPH_MND_J)-RPI(1)+1	!POSITION MIN. IN DEC
          IF (.NOT.WNFWR(FCAOUT,MPH__L,MPH,MPHP)) THEN	!REWRITE HEADER
	     CALL WNCTXT(F_TP,'Error writing !AS',FILOUT)
	     GOTO 800
	  END IF
          SGNR(6)=-1
          CALL WNCTXT(F_TP,'Map !AS (!AD) loaded from !AS',
	1      		WNTTSG(SGNR,0),MPH(MPH_FNM_1),
	2    		MPH_FNM_N,OFILE)
cc	  CALL NMAPMH(F_TP,MPH,SGNR,NODOUT)	!PRINT MAP-HEADER
	END DO					!NEXT CUBE-VLAK
C
C READY
C
	CALL WNFCL(FCATAP)			!CLOSE INPUT
	GOTO 20					!NEXT LABEL
C
 800	CONTINUE
	CALL WNFCL(FCATAP)			!CLOSE INPUT
	CALL WNFDMO(FCATAP)			!DISMOUNT INPUT
	CALL WNFCL(FCAOUT)			!CLOSE OUTPUT
C
	RETURN
C
C
	END

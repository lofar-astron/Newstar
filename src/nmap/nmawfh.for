C+ NMAWFH.FOR
C  WNB 910403
C
C  Revisions:
C	WNB 920808	Change sign for RA shift
C	WNB 920811	Change coordinates if shift
C	WNB 920818	Make for longer header; option for units
C	WNB 920828	Update for line velocities, instrument
C	WNB 921110	Correct mosaic positions
C	WNB 921113	... and sign
C	WNB 921119	Correct some velocity formats
C	WNB 921119	Add real output; cube
C	WNB 930118	Correct typo CRPIX1
C       HjV 940714	Add several keywords, change 'APT' in 'AP'
C	CMV 940929	Write pol.angle in degrees
C	CMV 940930	Correct division by zero in freq. spacing
C	JPH 950116	Backtrack on comment input: SUBROUTINE becomes FUNCTION
C	CMV/JPH 960402	Use DAF/DPF formatting to output RA and DEC
C
C
	LOGICAL FUNCTION NMAWFH(FBUF,TP,UNIT,OLABEL,
	1			MPH,MPHI,MPHJ,MPHE,MPHD,
	1			CNM,CNF,FMXMN,ABW,SCAL)
C
C  Create FITS map header
C
C  Result:
C
C	NMAWFH_L = NMAWFH( FBUF_C5760:O, TP_J:I, UNIT_E:I, OLABEL_J:I,
C			MPH_B(0:*):I, MPHI_I(0:*):I,
C			MPHJ_J(0:*):I, MPHE_E(0:*):I, MPHD_D(0:*):I,
C			CNM_J:I, CNF_J:I, FMXMN_D(0:1):I, ABW_D:I,
C			SCAL_E:O)
C				Create FITS header of type TP (16 or 32) 
C				from MPH map header in FBUF, and return SCALe.
C				UNIT is 200. for Jy output, 1. for W.U.
C				OLABEL is current label.
C				CNM # of maps/file, CNF # of input maps,
C				FMXMN max/min frequency, ABW average bandwidth.
C			Return value:
C				.FALSE. if backtrack requested
C
C  PIN references:
C
C	COMMENT		Comment line(s)
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
C
C  Parameters:
C
	INTEGER FHDLEN			!LENGTH HEADER
	  PARAMETER (FHDLEN=2*2880)
C
C  Arguments:
C
	CHARACTER*(FHDLEN) FBUF		!FITS BUFFER
	INTEGER TP			!HEADER TYPE (16 OR 32)
	REAL UNIT			!SCALE OUTPUT (200 OR 1)
	INTEGER OLABEL			!OUTPUT LABEL
	BYTE MPH(0:*)			!MPH MAP HEADER
	INTEGER*2 MPHI(0:*)
	INTEGER MPHJ(0:*)
	REAL MPHE(0:*)
	DOUBLE PRECISION MPHD(0:*)
	INTEGER CNM			!SIMULTANEOUS OUTPUT MAPS
	INTEGER CNF			!SIMULTANEOUS INPUT MAPS
	DOUBLE PRECISION FMXMN(0:1)	!MAX/MIN FREQUENCY
	DOUBLE PRECISION ABW		!AVERAGE BANDWIDTH
	REAL SCAL			!DATA SCALE
C
C  Function references:
C
	LOGICAL WNDPAR			!GET USER DATA
C
C  Data declarations:
C
	REAL LUNIT			!DATA UNIT
	INTEGER LVEL			!VEL TEST
	CHARACTER*4 C2
	CHARACTER*4 C4
	CHARACTER*8 C8
C-
	NMAWFH = .TRUE.
C
C REQUIRED HEADER PARAMETERS
C
	J=1
	FBUF=' '
	CALL WNCTXS(FBUF(J:J+79),
	1		'SIMPLE  =                    T')
	J=J+80
	IF (TP.EQ.16) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BITPIX  =                   16')
	ELSE IF (TP.EQ.32) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BITPIX  =                   32')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BITPIX  =                  -32')
	END IF
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'NAXIS   =                    3')
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'NAXIS1  =!21$UJ',MPHJ(MPH_NRA_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'NAXIS2  =!21$UJ',MPHJ(MPH_NDEC_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'NAXIS3  =!21$UJ',CNM)
	J=J+80
	SCAL=MAX(ABS(MPHE(MPH_MAX_E)),ABS(MPHE(MPH_MIN_E))) !SCALE
	IF (SCAL.NE.0.0) THEN
	  IF (TP.EQ.16) THEN
	    SCAL=(2.**15-1.)/SCAL
	  ELSE IF (TP.EQ.32) THEN
	    SCAL=(2.**30-1.)/SCAL
	  ELSE
	    SCAL=1.
	  END IF
	ELSE
	  SCAL=1.
	END IF
	CALL WNGMTS(4,MPH(MPH_TYP_1),C4)		!MAP TYPE
	CALL WNCTXS(FBUF(J:J+79),
	1		'MAPTYP  = ''!AS''',C4)
	J=J+80
	CALL WNGMTS(2,MPH(MPH_POL_1),C2)		!POL. CODE
	CALL WNCTXS(FBUF(J:J+79),
	1		'POL     = ''!AS''',C2)
	J=J+80
	IF (C4.EQ.'AP') THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BSCALE  =!21$E7!32C/REAL = TAPE *BSCALE + BZERO',
	1				1./SCAL)
	  LUNIT=1.					!NO UNIT
C
C	Convert radians to degrees using AIPS convention
C
	ELSE IF (C2.EQ.'PA') THEN			!POL. ANGLE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BSCALE  =!21$E7!32C/REAL = TAPE *BSCALE + BZERO',
	1				(1./SCAL)*(180./PI))
	  LUNIT=1.					!DEGREE
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BSCALE  =!21$E7!32C/REAL = TAPE *BSCALE + BZERO',
	1				1./SCAL/UNIT)
	  LUNIT=UNIT
	END IF
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'BZERO   =                  0.0')
	J=J+80
	IF (C2.EQ.'PA') THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BUNIT   = ''DEGREE ''')
	ELSE IF (UNIT.EQ.200. .OR. C4.EQ.'AP') THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BUNIT   = ''JY/BEAM ''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BUNIT   = ''W.U. ''')
	END IF
	J=J+80
	CALL WNCTXS(C8,'!%DN')
	CALL WNCTXS(FBUF(J:J+79),
	1		'DATE    = ''!AS/!AS/!AS''',
	1			C8(5:6),C8(3:4),C8(1:2))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1		'ORIGIN  = ''DWINGELOO (NL)  PGM=NMAP(!AS)''',
	1			PRGVER)
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'EPOCH   =!21$E7!32C/EPOCH OF MAP',
	1		MPHE(MPH_EPO_E))
	J=J+80
	IF (MPHJ(MPH_INST_J).EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'INSTRUME= ''ATCA        ''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'INSTRUME= ''WSRT        ''')
	END IF
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CRVAL1  =!21$DPF7!32C/REF. PIXEL RIGHT ASCENSION (DEGREES)',
	1		MPHD(MPH_RA_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CRPIX1  =!21$D7!32C/REF. PIXEL HOR. INDEX, LL=(1,1)',
	1		MPHJ(MPH_NRA_J)/2+1D0-
	1			MPHD(MPH_SHR_D)/MPHD(MPH_SRA_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CDELT1  =!21$DAF7!32C/RA INCREMENT (DEGREES)',
	1		-MPHD(MPH_SRA_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CTYPE1  = ''RA---NCP''')
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CRVAL2  =!21$DAF7!32C/REF. PIXEL DECLINATION (DEGREES)',
	1		MPHD(MPH_DEC_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CRPIX2  =!21$D7!32C/REF. PIXEL VERT. INDEX, LL=(1,1)',
	1		MPHJ(MPH_NDEC_J)/2+1D0-
	1			MPHD(MPH_SHD_D)/MPHD(MPH_SDEC_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CDELT2  =!21$DAF7!32C/DEC INCREMENT (DEGREES)',
	1		MPHD(MPH_SDEC_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CTYPE2  = ''DEC--NCP''')
	J=J+80
	IF (MPHJ(MPH_VELC_J).GT.0 .AND. MPHJ(MPH_VELC_J).LE.4) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRVAL3  =!21$D13!32C/FREQUENCY (HERTZ)',
	1		(MPHD(MPH_FRQV_D))*1.D6)
	  LVEL=1
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRVAL3  =!21$D7!32C/FREQUENCY (HERTZ)',
	1		(MPHD(MPH_FRQO_D))*1.D6)
	  LVEL=0
	END IF
	J=J+80
	IF (LVEL.EQ.1 .AND. CNF.GT.1 .AND. 
	1	ABS(FMXMN(0)-FMXMN(1)).GT.1E-16) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRPIX3  =!21$D7',
	1		(MPHD(MPH_FRQV_D)-FMXMN(1))/
	1			((FMXMN(0)-FMXMN(1))/(CNF-1))+1D0)
	  J=J+80
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CDELT3  =!21$D7!32C/CHANNEL SEPARATION (HERTZ)',
	1		((FMXMN(0)-FMXMN(1))*1.D6)/(CNF-1))
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRPIX3  =!19$UJ\.0',
	1		1)
	  J=J+80
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CDELT3  =!21$D7!32C/CHANNEL SEPARATION (HERTZ)',
	1		MPHD(MPH_BDW_D)*1.D6)
	END IF
	J=J+80
	IF (LVEL.EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRESL3  =!21$D7!32C/BANDWIDTH (HERTZ)',
	1		ABW*1.D6)
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1	'CRESL3  =!21$D7!32C/BANDWIDTH (HERTZ)',
	1		MPHD(MPH_BDW_D)*1.D6)
	END IF
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CTYPE3  = ''FREQ   ''')
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'OBJECT  = ''            ''')
	CALL WNGMTS(12,MPH(MPH_FNM_1),FBUF(J+11:J+22))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'DATE-OBS=!21$E21.3',
	1		MPHE(MPH_OEP_E))
	J=J+80
	IF (LVEL.EQ.1 .AND. CNF.GT.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1	'BANDW   =!21$D7!32C/TOTAL BANDWIDTH OF OBS(HERTZ)',
	1		(ABS((FMXMN(0)-FMXMN(1)))*1.D6*CNF)/(CNF-1))
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1	'BANDW   =!21$D7!32C/TOTAL BANDWIDTH OF OBS(HERTZ)',
	1		MPHD(MPH_BDW_D)*1.D6)
	END IF
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'VEL     =!21$E7!32C/CENTRE VELOCITY (M/S)',
	1		MPHE(MPH_VEL_E))
	J=J+80
	IF (LVEL.EQ.1) THEN
	  IF (MPHJ(MPH_VELC_J).EQ.1) THEN
	    CALL WNCTXS(FBUF(J:J+79),
	1		'VELCODE = ''RHEL        ''')	!!!
	  ELSE IF (MPHJ(MPH_VELC_J).EQ.2) THEN
	    CALL WNCTXS(FBUF(J:J+79),
	1		'VELCODE = ''RLSR        ''')	!!!
	  ELSE IF (MPHJ(MPH_VELC_J).EQ.3) THEN
	    CALL WNCTXS(FBUF(J:J+79),
	1		'VELCODE = ''OHEL        ''')	!!!
	  ELSE IF (MPHJ(MPH_VELC_J).EQ.4) THEN
	    CALL WNCTXS(FBUF(J:J+79),
	1		'VELCODE = ''OLSR        ''')	!!!
	  END IF
	  J=J+80
	  CALL WNCTXS(FBUF(J:J+79),
	1	'VELR    =!21$E7!32C/REFERENCE VELOCITY (M/S)',
	1		MPHE(MPH_VELR_E))
	  J=J+80
	  CALL WNCTXS(FBUF(J:J+79),
	1	'FREQR   =!21$D13!32C/REFERENCE FREQUENCY (HERTZ)',
	1		(MPHD(MPH_FRQC_D))*1.D6)
	  J=J+80
	  CALL WNCTXS(FBUF(J:J+79),
	1	'FREQ0   =!21$D13!32C/REST FREQUENCY (HERTZ)',
	1		(MPHD(MPH_FRQ0_D))*1.D6)
	  J=J+80
	END IF
	CALL WNCTXS(FBUF(J:J+79),
	1	'PCRA    =!21$DPF7!32C/POINTING CENTRE R.A. (DEG)',
	1		MPHD(MPH_RAO_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'PCDEC   =!21$DAF7!32C/POINTING CENTRE DEC (DEG)',
	1		MPHD(MPH_DECO_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'NBLANK  =!21$UJ!32C/NUMBER OF UNDEF. VALUES',
	1		0)
	J=J+80
	IF (MPHI(MPH_CD_I+0).EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''GAUSSIAN   ''')
	ELSE IF (MPHI(MPH_CD_I+0).EQ.2) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''LINEAR     ''')
	ELSE IF (MPHI(MPH_CD_I+0).EQ.3) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''NATURAL    ''')
	ELSE IF (MPHI(MPH_CD_I+0).EQ.4) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''OVERR      ''')
	ELSE IF (MPHI(MPH_CD_I+0).EQ.5) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''RGAUSS     ''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'BLGRAD  = ''UNKNOWN    ''')
	END IF
	CALL WNCTXS(FBUF(J+31:J+79),'/TAPER TYPE')
	J=J+80
	IF (MPHI(MPH_CD_I+1).EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''GAUSSIAN   ''')
	ELSE IF (MPHI(MPH_CD_I+1).EQ.2) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''BOX        ''')
	ELSE IF (MPHI(MPH_CD_I+1).EQ.3) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''PROLATE 4*4''')
	ELSE IF (MPHI(MPH_CD_I+1).EQ.4) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''EXP*SINC   ''')
	ELSE IF (MPHI(MPH_CD_I+1).EQ.5) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''PROLATE 6*6''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVGRID  = ''UNKNOWN    ''')
	END IF
	CALL WNCTXS(FBUF(J+31:J+79),'/CONVOLUTION TYPE')
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CORGRID =!21$UI!32C/CORRECT FOR CONVOLUTION',
	1	MPHI(MPH_CD_I+2))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'CLIP    =!21$UI!32C/CLIPPING DONE',
	1	MPHI(MPH_CD_I+3))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'SUBTR   =!21$UI!32C/SOURCE SUBTRACTION',
	1	MPHI(MPH_CD_I+4))
	J=J+80
	IF (MPHI(MPH_CD_I+5).EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''NORMAL     ''')
	ELSE IF (MPHI(MPH_CD_I+5).EQ.2) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''COSINE     ''')
	ELSE IF (MPHI(MPH_CD_I+5).EQ.3) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''SINE       ''')
	ELSE IF (MPHI(MPH_CD_I+5).EQ.4) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''AMPLITUDE  ''')
	ELSE IF (MPHI(MPH_CD_I+5).EQ.5) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''PHASE      ''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'DATTYP  = ''UNKNOWN    ''')
	END IF
	CALL WNCTXS(FBUF(J+31:J+79),'/DATA TYPE')
	J=J+80
	IF (MPHI(MPH_CD_I+6).EQ.0) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVCDT   = ''NORMAL     ''')
	ELSE IF (MPHI(MPH_CD_I+6).EQ.1) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UCVDT   = ''BAS-HA     ''')
	ELSE IF (MPHI(MPH_CD_I+6).EQ.2) THEN
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVCDT   = ''IFR-HA     ''')
	ELSE
	  CALL WNCTXS(FBUF(J:J+79),
	1		'UVCDT   = ''UNKNOWN    ''')
	END IF
	CALL WNCTXS(FBUF(J+31:J+79),'/UV COORDINATE TYPE')
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'DEBEAM  =!21$UI!32C/DE-BEAM COUNT',
	1	MPHI(MPH_CD_I+7))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'DATAMAX =!21$E7!32C/MAX. INTENSITY',
	1		MPHE(MPH_MAX_E)/LUNIT)
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'DATAMIN =!21$E7!32C/MIN. INTENSITY',
	1		MPHE(MPH_MIN_E)/LUNIT)
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'NINTF   =!21$UJ!32C/TOTAL INTERFEROMETERS',
	1		MPHJ(MPH_NBL_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'NFREQ   =!21$UJ!32C/TOTAL # OF FREQUENCY POINTS',
	1		CNF)
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'NOISE   =!21$E7!32C/NOISE IN MAP',
	1		MPHE(MPH_NOS_E)/LUNIT)
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'NORM    =!21$D7!32C/NORM. FACTOR IN FFT',
	1		MPHD(MPH_SUM_D))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'FFTRA   =!21$UJ!32C/FFT SIZE IN R.A.',
	1		MPHJ(MPH_FSR_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'FFTDEC  =!21$UJ!32C/FFT SIZE IN DEC.',
	1		MPHJ(MPH_FSD_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'SETNR   =!21$UJ!32C/# OF SET.',
	1		MPHJ(MPH_SETN_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'INSECT  =!21$UJ!32C/INPUT SECTORS.',
	1		MPHJ(MPH_NST_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'INPTS   =!21$UJ!32C/INPUT POINTS.',
	1		MPHJ(MPH_NPT_J))
	J=J+80
	CALL WNCTXS(FBUF(J:J+79),
	1	'MAPLAB  =!21$UJ!32C/LABEL OF THIS MAP',
	1		OLABEL)
	J=J+80
C
C COMMENT
C
	J1=J						! remember
 10	CONTINUE
	JS=.TRUE.
	J0=1
	DO WHILE (J.LT.FHDLEN-80 .AND. J0.GT.0 .AND. JS)
 11	  CONTINUE
	  FBUF(J:J+79)='COMMENT'
	  JS=WNDPAR('COMMENT',FBUF(J+10:J+79),70,J0,'""')
	  IF (.NOT.JS) THEN
	    IF (E_C.EQ.DWC_ENDOFLOOP) THEN
	      IF (J.GT.J1) THEN
		CALL WNCTXT(F_TP,'    Restarting comment input')
	        GOTO 10
	      ELSE
		CALL WNCTXT(F_TP,'    Aborting FITS write')
		NMAWFH=.FALSE.
		GOTO 900
	      ENDIF
	    ENDIF
	  ELSE	      
	    J=J+80
	  ENDIF
	END DO
C
	FBUF(J:)='END'
C
900	CONTINUE
	RETURN
C
C
	END

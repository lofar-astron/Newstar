C+ NGCCOB.FOR
C  WNB 920821
C
C  Revisions:
C	HjV 930423	Change name of some keywords
C	WNB 930628	Add POL and BLN in output; TRHA, TRHAI, TRFB, TRFI
C	WNB 930711	Make sure print shows correct file #
C	CMV 931210	Add 'NGF_LOOPS' argument to WNDXLP
C	CMV 931220	Pass FCA of input file to WNDXLP and WNDSTA/Q
C	CMV 940805	Add TRTYP=2
C	JPH 940819	NGF_LOOPS before NGF_SETS as in all Newstar programs
C			Include input data type in MERGE data type
C			'plot' --> 'cut'
C			Replace CONTINUE/GOTO by DO WHILE/ENDDO
C	JPH 940823	Comments (lowercase)
C			New output group for every new input group
C			Do not store empty sets
C			NGCSPH --> NGCSPL
C       HjV 941031	Line too long
C 
C
	SUBROUTINE NGCCOB
C
C  Make combination file
C
C  Result:
C
C	CALL NGCCOB			Make combination output file using
C					user specified expression.
C
C
C  Pin references:
C
C	EXPRESSION	Expression to use
C	USE_NGF_SET	Plot to use
C	NGF_SETS	Plots to use
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'GFH_O_DEF'		!GENERAL FILE HEADER
	INCLUDE 'SGH_O_DEF'		!SUB-GROUP HEADER
	INCLUDE 'NGF_O_DEF'		!CUT HEADER
	INCLUDE 'NGC_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL WNDPAR			!GET USER DATA
	LOGICAL WNDLNG,WNDLNK,WNDLNF	!LINK SETS
	LOGICAL WNDSTA			!GET SETS
	LOGICAL WNDXLP			!GET LOOPS
	LOGICAL WNDXLN			!NEXT LOOP
	LOGICAL WNFRD			!READ DISK
	LOGICAL WNFWR			!WRITE DISK
	INTEGER WNFEOF			!EOF POINTER
	LOGICAL WNGGVA			!GET MEMORY
	CHARACTER*32 WNTTSG		!SET NAME
	LOGICAL NGCSTG,NGCSTL		!GET CUT
	LOGICAL NGCEXP			!ANALYZE EXPRESSION
	LOGICAL NGCEXC			!CALCULATE EXPRESSION
C
C  Data declarations:
C
	INTEGER PRVGRP			! previous group nr
	INTEGER NDONE			! CUTS DONE
	INTEGER NCUT			!# OF CUTS TO USE
	INTEGER CUTS(MXNPLT,2)		!CUTS TO USE
	INTEGER PSET(0:7,0:1,MXNPLT)	!CUTS IN EXPRESSION
	INTEGER SNAM(0:7,MXNPLT)	!CUT NAME
	INTEGER NGFHP			!HEADER POINTER
	CHARACTER*80 INSTR		!EXPRESSION STRING
	CHARACTER*80 OUTSTR		!ERROR STRING
	CHARACTER*(NGF_TYP_N) HSTR,HSTR1
	INTEGER COD(256)		!CODED EXPRESSION
	INTEGER NPTS			!LENGTH SINGLE CUT
	REAL HA,HAE			!START,END HA OUTPUT CUT
	REAL HAINC			!HA INCREMENT OUTPUT CUT
	REAL CHA			!HA CURRENT POINT
	REAL CUT			!UT CURRENT POINT
	REAL CFQ			!FREQ CURRENT POINT
	REAL CBL			!BASELINE CURRENT POINT
	REAL CRA			!RA CURRENT POINT
	REAL CDEC			!DEC CURRENT POINT
	COMPLEX CUTV(MXNPLT)		!CUT VALUE LIST
	INTEGER BUFL,BUFL1		!LENGTH DATA BUFFER
	INTEGER BUFAD,BUFAD1		!ADDRESS DATA BUFFER
	BYTE NGF(0:NGFHDL-1,0:MXNPLT)	!CUT HEADERS
	  INTEGER*2 NGFI(0:NGFHDL/2-1,0:MXNPLT)
	  INTEGER NGFJ(0:NGFHDL/4-1,0:MXNPLT)
	  REAL NGFE(0:NGFHDL/4-1,0:MXNPLT)
	  EQUIVALENCE (NGF,NGFI,NGFJ,NGFE)
	COMPLEX C2
C-
C
C GET EXPRESSION
C
 10	CONTINUE
	IF (OPT.EQ.'COM') THEN			!COMBINE
	  IF (.NOT.WNDPAR('EXPRESSION',INSTR,LEN(INSTR),
	1		J0,'""')) THEN		!EXPRESSION
	    IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 900
	    GOTO 10
	  END IF
	  IF (J0.LE.0) GOTO 900
	  IF (.NOT.NGCEXP(INSTR,OUTSTR,COD,CUTS,NCUT)) THEN
	    CALL WNCTXT(F_TP,'!/Error in expression:!/  !AS!/',
	1			OUTSTR)
	    GOTO 10
	  END IF
	  IF (NCUT.EQ.0) THEN
	    CALL WNCTXT(F_TP,'!/No cuts used in expression')
	    GOTO 10
	  END IF
	ELSE					!MERGE
 12	  CONTINUE
	  IF (.NOT.WNDXLP('NGF_LOOPS',FCAOUT)) THEN
	    IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 900	!EXIT
	    GOTO 12
	  END IF
	  IF (.NOT.WNDSTA('NGF_SETS',MXNSET,SETS,FCAOUT)) GOTO 12 !CUTS TO USE
	  IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 12	!EXPRESSION AGAIN
	  IF (SETS(0,0).EQ.0) GOTO 12
	  CALL WNDXLI(LPOFF)			!INIT LOOPING
	END IF
C
C GET CUTS
C
 14	CONTINUE
	IF (OPT.EQ.'COM') THEN			!COMBINE
	  DO I=1,NCUT
	    CUTS(I,2)=-1			!SET NOT SEEN
	  END DO
	  DO I=1,NCUT
	    CALL WNCTXT(F_TP,'Define cut #!UJ:',
	1		IAND(CUTS(I,1),NOT(NGCSDL)))
 11	    CONTINUE
	    IF (.NOT.WNDSTA('USE_NGF_SET',1,PSET(0,0,I),FCAOUT)) THEN
	      IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 10	!RETRY EXPRESSION
	    END IF
	    IF (PSET(0,0,I).EQ.0) GOTO 11	!RETRY
	  END DO
	END IF
C
C GET CUTS
C
	PRVGRP=-1
	NDONE=0
	DO WHILE (WNDXLN(LPOFF)) 
	  IF (OPT.EQ.'COM') THEN		!COMBINE
	    DO I=1,NCUT
	      CALL WNDSTR(FCAOUT,PSET(0,0,I))	!RESET CUT SEARCH
	      IF (IAND(CUTS(I,1),NGCSDL).EQ.0) THEN !LOOP WANTED
	        IF (.NOT.NGCSTL(FCAOUT,PSET(0,0,I),NGF(0,I),
	1		NGFHP,SNAM(0,I),LPOFF)) THEN
 20	          CONTINUE
	          CALL WNCTXT(F_TP,'!/Expression cut #!UJ not present!/',
	1		IAND(CUTS(I,1),NOT(NGCSDL)))
	          GOTO 10			!RETRY EXPRESSION
	        END IF
	      ELSE				!NO LOOP WANTED
	        IF (.NOT.NGCSTG(FCAOUT,PSET(0,0,I),NGF(0,I),
	1			NGFHP,SNAM(0,I))) GOTO 20
	      END IF
	      CALL WNDSTI(FCAOUT,SNAM(0,I))	!MAKE SURE PROPER NAME
	      CUTS(I,2)=NGFHP			!SAVE HEADER POINTER
	    END DO
	  ELSE					!MERGE
	    NCUT=0				!CNT CUTS
	    DO WHILE(NGCSTL(FCAOUT,SETS,NGF(0,NCUT+1),
	1		NGFHP,SNAM(0,NCUT+1),LPOFF)) !GET CUT
	      IF (NCUT.LT.MXNPLT-1) THEN
	        NCUT=NCUT+1			!COUNT
	        CUTS(NCUT,2)=NGFHP		!SAVE HEADER POINTER
	        CUTS(NCUT,1)=NCUT		!A NUMBER
	      END IF
	    END DO
	    IF (NCUT.LE.0) GOTO 30		! nothing found, NEXT LOOP
	  END IF
C
C SET LENGTHS CUTS: Find extremes HA and HAE of HA-range, set HAINC to the
C  smallest increment
C
	  NPTS=NGFJ(NGF_SCN_J,1)		!INIT VALUES
	  HA=NGFE(NGF_HAB_E,1)*360.
	  HAINC=NGFE(NGF_HAI_E,1)*360.
	  HAE=NGFE(NGF_HAB_E,1)*360.+(NPTS-1)*HAINC
	  DO I=2,NCUT
	    NPTS=MAX(NPTS,NGFJ(NGF_SCN_J,I))
	    HA=MIN(HA,NGFE(NGF_HAB_E,I)*360.)
	    HAINC=MIN(HAINC,NGFE(NGF_HAI_E,I)*360.)
	    HAE=MAX(HAE,NGFE(NGF_HAB_E,I)*360.+(NGFJ(NGF_SCN_J,I)-1)*
	1		NGFE(NGF_HAI_E,I)*360.)
	  END DO
	  NPTS=MAX(NPTS,NINT((HAE-HA)/HAINC)+1)	! points in output cut
	  BUFL=LB_X*(NCUT+1)*NPTS		! GET DATA BUFFER
	  IF (.NOT.WNGGVA(BUFL,BUFAD)) THEN
 22	    CONTINUE
	    CALL WNCTXT(F_TP,'!/Cannot get cut-data buffer')
	    GOTO 900
	  END IF
	  BUFAD=(BUFAD-A_OB)/LB_X
	  CALL WNGMVZ(BUFL,A_X(BUFAD))		! clear BUFFER
C
	  IF (OPT.NE.'COM') THEN		!MERGE
	    BUFL1=LB_J*NPTS			! COUNT BUFFER
	    IF (.NOT.WNGGVA(BUFL1,BUFAD1)) THEN
	      CALL WNGFVA(BUFL,BUFAD*LB_X+A_OB)
	      GOTO 22
	    END IF
	    BUFAD1=(BUFAD1-A_OB)/LB_J
	    CALL WNGMVZ(BUFL1,A_J(BUFAD1))
	  END IF
C
C READ CUT DATA
C
	  DO I=1,NCUT				!READ ALL DATA
	    IF (.NOT.WNFRD(FCAOUT,LB_X*NGFJ(NGF_SCN_J,I),
	1		A_X(BUFAD+I*NPTS),NGFJ(NGF_DPT_J,I))) THEN
21 	      CONTINUE
	      CALL WNCTXT(F_TP,'!/Error reading cut file #!UJ',
	1		IAND(CUTS(I,1),NOT(NGCSDL)))
	      GOTO 10				!RETRY EXPRESSION
	    END IF
	  END DO
C
C BUILD COMBINED CUT. For every HA in the output cut, the nearest value in each
C  of the input cuts is used. This results in some smoothing, in particular if
C  the input cuts do not all have the same HAINC.
C
	  CRA=NGFE(NGF_RA_E,1)*360.		!CURRENT RA
	  CDEC=NGFE(NGF_DEC_E,1)*360.
	  CFQ=NGFE(NGF_FRQ_E,1)
	  CBL=NGFE(NGF_BLN_E,1)
	  DO I1=0,NPTS-1			!ALL DATA
	    CHA=HA+I1*HAINC			!CURRENT HA
	    CUT=360.*((CHA/360.-NGFE(NGF_HAB_E,1))*0.99727+
	1			NGFE(NGF_UTB_E,1)) !CURRENT UT
	    DO I=1,NCUT				!ALL SETS
	      R1=(CHA/360.-NGFE(NGF_HAB_E,I))/NGFE(NGF_HAI_E,I) !OFFSET
	      I2=NINT(R1)
	      IF (I2.LT.0 .OR. I2.GE. NGFJ(NGF_SCN_J,I)) THEN
	        CUTV(I)=CMPLX(NGCDLC,NGCDLC)	!SET DELETE VALUE
	      ELSE
	        CUTV(I)=A_X(BUFAD+I*NPTS+I2)	!DATA
	      END IF
	    END DO
	    IF (OPT.EQ.'COM') THEN		!COMBINE
	      IF (NGFJ(NGF_TRTYP_J,1).EQ.1) THEN !TRANSPOSE
	        CFQ=NGFE(NGF_TRFB_E,1)+CHA/FRHACV*NGFE(NGF_TRFI_E,1)
	        CHA=NGFE(NGF_TRHA_E,1)*360.
	      ELSE IF (NGFJ(NGF_TRTYP_J,1).EQ.2) THEN	!BASELINE
	        CBL=CHA
	        CHA=NGFE(NGF_TRHA_E,1)*360.
	      END IF
	      IF (.NOT.NGCEXC(COD,COD,CUTV,CHA,CUT,CFQ,CBL,CRA,CDEC,
	1			C2)) THEN	!CALCULATE POINT
	        CALL WNCTXT(F_TP,
	1   '!/Unexpected compile error during execution'//
	2	      '- operation aborted !/')
	        CALL WNGFVA(BUFL,BUFAD*LB_X+A_OB) !RELEASE BUFFER
	        GOTO 10				!RETRY EXPRESSION
	      END IF
	      A_X(BUFAD+I1)=C2			! value OK, copy it
	    ELSE				!MERGE
	      DO I=1,NCUT
	        IF (REAL(CUTV(I)).NE.NGCDLC) THEN !PRESENT
	          A_X(BUFAD+I1)=A_X(BUFAD+I1)+CUTV(I) ! ADD value
	          A_J(BUFAD1+I1)=A_J(BUFAD1+I1)+1 ! and COUNT it
	        END IF
	      END DO
	    END IF
	  END DO
C
C ADD NEW POINT TO CUT FILE
C
	  CALL WNGMVZ(NGFHDL,NGF(0,0))		!ZERO NGF
	  NGFE(NGF_MAX_E,0)=NGCDLC		!INIT MAX/MIN
	  NGFE(NGF_MIN_E,0)=-NGCDLC		! (note: NGCDLC defined neg.!)
	  DO I=0,NPTS-1				!ALL POINTS
	    IF (OPT.NE.'COM') THEN		!MERGE
	      IF (A_J(BUFAD1+I).GT.0) THEN	! >0 input points found: average
	        A_X(BUFAD+I)=A_X(BUFAD+I)/A_J(BUFAD1+I)
	      ELSE				! none found: set "invalid"
	        A_X(BUFAD+I)=CMPLX(NGCDLC,NGCDLC)
	      END IF
	    END IF
	    IF (REAL(A_X(BUFAD+I)).NE.NGCDLC) THEN
	      C2=A_X(BUFAD+I)
	      NGFE(NGF_MAX_E,0)=MAX(NGFE(NGF_MAX_E,0),ABS(C2)) !NEW MAX/MIN
	      NGFE(NGF_MIN_E,0)=MIN(NGFE(NGF_MIN_E,0),ABS(C2))
	    ELSE
	      C2=CMPLX(NGCDLC,NGCDLC)		!DELETED
	      NGFJ(NGF_DEL_J,0)=NGFJ(NGF_DEL_J,0)+1 !COUNT
	    END IF
	    A_X(BUFAD+I+NGFJ(NGF_SCN_J,0))=C2	!SAVE VALUE
	  END DO
C
	  NGFI(NGF_VER_I,0)=1			!FILL CUT HEADER	     
	  NGFI(NGF_LEN_I,0)=NGFHDL
	  CALL WNGMV(NGF_NAM_N,NGF(NGF_NAM_1,1),NGF(NGF_NAM_1,0))
	  NGFE(NGF_RA_E,0)=NGFE(NGF_RA_E,1)
	  NGFE(NGF_DEC_E,0)=NGFE(NGF_DEC_E,1)
	  NGFE(NGF_FRQ_E,0)=NGFE(NGF_FRQ_E,1)
	  NGFE(NGF_BDW_E,0)=NGFE(NGF_BDW_E,1)
	  NGFE(NGF_HAB_E,0)=HA/360.
	  NGFE(NGF_HAI_E,0)=HAINC/360.
	  NGFE(NGF_HAV_E,0)=NGFE(NGF_HAV_E,1)
	  NGFE(NGF_UTB_E,0)=NGFE(NGF_UTB_E,1)
	  NGFE(NGF_UTE_E,0)=NGFE(NGF_UTE_E,1)
	  NGFJ(NGF_SCN_J,0)=NPTS
	  NGFJ(NGF_VNR_J,0)=NGFJ(NGF_VNR_J,1)
	  NGFJ(NGF_BDN_J,0)=NGFJ(NGF_BDN_J,1)
	  CALL WNGMV(NGF_IFR_N,NGF(NGF_IFR_1,1),NGF(NGF_IFR_1,0))
	  CALL WNGMV(NGF_POL_N,NGF(NGF_POL_1,1),NGF(NGF_POL_1,0))
	  NGFI(NGF_ODY_I,0)=NGFI(NGF_ODY_I,1)
	  NGFI(NGF_OYR_I,0)=NGFI(NGF_OYR_I,1)
	  NGFE(NGF_BLN_E,0)=NGFE(NGF_BLN_E,1)
	  NGFE(NGF_TRHAI_E,0)=NGFE(NGF_TRHAI_E,1)
	  NGFE(NGF_TRHA_E,0)=NGFE(NGF_TRHA_E,1)
	  NGFE(NGF_TRFB_E,0)=NGFE(NGF_TRFB_E,1)
	  NGFE(NGF_TRFI_E,0)=NGFE(NGF_TRFI_E,1)
	  IF (OPT.EQ.'COM') THEN		!COMBINE
	    HSTR=OUTSTR				!EXPRESSION
	  ELSE
C
C Make TYP string
C
	    CALL WNGMTS(8, NGF(NGF_TYP_1,1), HSTR)
	    DO I=1,8
	      IF (HSTR(I:I).LT.'A' .OR. HSTR(I:I).GT.'Z') GOTO 511
	    ENDDO
511	    CONTINUE
	    I=I-1
	  END IF
	  HSTR1=HSTR(1:I)
	  CALL WNCTXS(HSTR,'!AS !AS-!AS',
	1	HSTR1,WNTTSG(SNAM(0,1),0) ,WNTTSG(SNAM(0,NCUT),0))
	  HSTR1=HSTR
	  CALL WNCTXS(HSTR,'!AS',HSTR1)
	  CALL WNGMFS(NGF_TYP_N,HSTR,NGF(NGF_TYP_1,0))
C
C Create indices; new group for each new input group, copy remainder, new
C  sequence number
C
	  IF (SNAM(0,1).NE.PRVGRP) THEN
	    IF (.NOT.WNDLNG(GFH_LINKG_1,0,SGH_GROUPN_1,FCAOUT,
	1		SGPH(0),SGNR(0))) THEN !CREATE new group
 51	      CONTINUE
	      CALL WNCTXT(F_TP,'!/Error linking sub-group')
	      GOTO 900
	    ENDIF
	  END IF
	  PRVGRP=SNAM(0,1)
	  IF (.NOT.WNDLNF(SGPH(0)+SGH_LINKG_1,SNAM(1,1),
	1		SGH_GROUPN_1,FCAOUT,SGPH(1),SGNR(1))) GOTO 51
 	  IF (.NOT.WNDLNF(SGPH(1)+SGH_LINKG_1,SNAM(2,1),
	1		SGH_GROUPN_1,FCAOUT,SGPH(2),SGNR(2))) GOTO 51
	  IF (.NOT.WNDLNF(SGPH(2)+SGH_LINKG_1,SNAM(3,1),
	1		SGH_GROUPN_1,FCAOUT,SGPH(3),SGNR(3))) GOTO 51
	  IF (.NOT.WNDLNF(SGPH(3)+SGH_LINKG_1,SNAM(4,1),
	1		SGH_GROUPN_1,FCAOUT,SGPH(4),SGNR(4))) GOTO 51
C
C Store data only if there are any
C
	  IF (NGFE(NGF_MAX_E,0).NE.NGCDLC) THEN
	    J=WNFEOF(FCAOUT)			!OUTPUT POINTER
	    NGFJ(NGF_DPT_J,0)=J+NGFHDL		!DATA POINTER
	    IF (.NOT.WNFWR(FCAOUT,NGFHDL,NGF,J)) GOTO 21 !WRITE HEADER
	    IF (.NOT.WNFWR(FCAOUT,LB_X*NGFJ(NGF_SCN_J,0),
	1		A_X(BUFAD),J+NGFHDL)) GOTO 21 !DATA
	    IF (.NOT.WNDLNK(GFH_LINK_1,J,
	1		NGF_SETN_1,FCAOUT)) GOTO 51 !LINK DATA
	    IF (.NOT.WNDLNG(SGPH(4)+SGH_LINKG_1,J,
	1		SGH_GROUPN_1,FCAOUT,SGPH(5),SGNR(5))) GOTO 51 !INDEX
C
	    IF (.NOT.WNFRD(FCAOUT,NGFHDL,NGF,J)) GOTO 21 !REREAD HEADER
	  ELSE
	    CALL WNGMFS(40,'EMPTY, no data stored                         ',
	1	NGF(NGF_TYP_1,0))	  
	  ENDIF
	  NDONE=NDONE+1
	  IF (MOD(NDONE,100).EQ.0) 
	1	CALL NGCSPL(SGNR,NGF(0,0),NDONE)! sign of line
	  CALL WNGFVA(BUFL,BUFAD*LB_X+A_OB)	!RELEASE BUFFER
	  IF (OPT.NE.'COM') 			!MERGE
	1	CALL WNGFVA(BUFL1,BUFAD1*LB_J+A_OB) !RELEASE BUFFER
C
C LOOP IF NECESSARY
C
30	  CONTINUE
	ENDDO
	CALL WNCTXT(F_TP,'!UJ cuts created',NDONE)					!NEXT LOOP
	GOTO 10
C
C READY
C
 900	CONTINUE
	RETURN					!READY
C
C
	END

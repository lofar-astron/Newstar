C+ NATLWD.FOR
C  WNB 920514
C
C  Revisions:
C	WNB 921028	Correct MJD and selection, integration
C	WNB 921102	Correct integration
C	WNB 921104	Add UT=
C	WNB 921110	Typo in UT=
C	WNB 921123	Add Continuum and offset
C	WNB 921124	Better continuum; add invert; flagging
C	WNB 921125	Limit integration
C	WNB 921210	Change invert sign
C	WNB 921222	Add PANG
C	WNB 930407	Change HA and phase direction
C	WNB 930414	Change HAV; sign phase; cater for no data
C	WNB 930819	Add DIPC
C
	SUBROUTINE NATLWD(FCAT,TAB,TABE,BUFP,IFRS,CJOB)
C
C  Write ATNF data into SCN file
C
C  Result:
C
C	CALL NATLWD( FCAT_J:I, TAB_J(MAX_SU,MAX_IF,0:*):O,
C				TABE_E(MAX_SU,MAX_IF,0:*):O, BUFP_J:I,
C				IFRS_J:I, CJOB_J:I)
C				Will load ATNF data into SCN file, reading from
C				FCAT for IFRS encountered.
C				CJOB is the current job.
C				BUFP points to a usable buffer
C				TAB:
C				0: COUNT
C				1: START UT(E)
C				2: DUT(E)
C				3: FIRST TMP POINTER
C				4: CURRENT UT
C				5: PREVIOUS TMP POINTER (OR -1)
C				6: START HA (RAD.)
C				7: IFRS
C				8: SELECT IF
C				9: SELECT SOURCE
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NAT_DEF'
	INCLUDE 'RPF_DEF'		!RPFITS DATA
	INCLUDE 'GFH_O_DEF'		!GENERAL FILE HEADER
	INCLUDE 'SGH_O_DEF'		!SUB-GROUP HEADER
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'SCH_O_DEF'		!SCAN HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FCAT			!INPUT FILE
	INTEGER TAB(MAX_SU,MAX_IF,0:*)	!DESCRIPTION TABLE
	REAL TABE(MAX_SU,MAX_IF,0:*)
	INTEGER BUFP			!A USABLE BUFFER
	INTEGER IFRS			!INTERFEROMETERS SEEN
	INTEGER CJOB			!CURRENT JOB
C
C  Function references:
C
	INTEGER WNCALN			!STRING LENGTH
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNFWR			!WRITE DATA
	INTEGER WNFEOF			!FILE POSITION
	LOGICAL WNDLNG,WNDLNF,WNDLNK	!LINK SUB-GROUP
	REAL WNGENF			!NORMALIZE ANGLE
	INTEGER WNMEJF			!FLOOR
C
C  Data declarations:
C
	INTEGER*2 IFRT(0:STHIFR-1)	!INTERFEROMETER TABLE
	INTEGER MONTH(12)		!DAYS IN MONTH
	  DATA MONTH/31,28,31,30,31,30,31,31,30,31,30,31/
	INTEGER PX(0:3)			!POL. ORDER
	  DATA PX/0,3,1,2/
	INTEGER I10,I101,I102,I103
	INTEGER I11,I1IF,I12,I13
	INTEGER LCONT(-4:2*MXNCNT)	!CONTINUUM DATA
	INTEGER TCNT			!AVERAGE COUNT
	COMPLEX DATXX			!DATA POINT
	  REAL DATXE(0:1)
	  EQUIVALENCE (DATXX,DATXE)
	INTEGER DATJ(0:9)		!DATA AREA
	  REAL DATE(0:9)
	  EQUIVALENCE (DATJ,DATE)
	  INTEGER LDAT			!LINK DATA
	  EQUIVALENCE (LDAT,DATJ(0))
	  INTEGER BAS			!BASELINE CODE
	  EQUIVALENCE (BAS,DATJ(1))
	  REAL UT,U,V,W			!COORDINATES
	  EQUIVALENCE (UT,DATE(2)),(U,DATE(3)),(V,DATE(4)),(W,DATE(5))
	  INTEGER FLAG			!FLAG DATA
	  EQUIVALENCE (FLAG,DATJ(6))
	  INTEGER BIN			!PULSAR BIN
	  EQUIVALENCE (BIN,DATJ(7))
	  INTEGER IFNO			!IF
	  EQUIVALENCE (IFNO,DATJ(8))
	  INTEGER SRCNO			!SOURCE
	  EQUIVALENCE (SRCNO,DATJ(9))
	REAL BUFE(0:MXNIFR*4*3-1)	!DATA BUFFER
	INTEGER*2 BUFI(0:MXNIFR*4*3-1)
	BYTE STH(0:STHHDL-1)		!SET HEADER
	  INTEGER*2 STHI(0:STHHDL/2-1)
	  INTEGER   STHJ(0:STHHDL/4-1)
	  REAL STHE(0:STHHDL/4-1)
	  REAL*8 STHD(0:STHHDL/8-1)
	  EQUIVALENCE (STH,STHI,STHJ,STHE,STHD)
	BYTE SCH(0:SCHHDL-1)		!SCAN HEADER
	  INTEGER*2 SCHI(0:SCHHDL/2-1)
	  INTEGER   SCHJ(0:SCHHDL/4-1)
	  REAL SCHE(0:SCHHDL/4-1)
	  REAL*8 SCHD(0:SCHHDL/8-1)
	  EQUIVALENCE (SCH,SCHI,SCHJ,SCHE,SCHD)
	INTEGER I6
	REAL R2
C-
C
C INIT
C
C MAKE SET HEADERS
C
	CALL WNGMVZ(STHHDL,STH(0))		!CLEAR
	STHI(STH_LEN_I)=STHHDL			!LENGTH
	STHI(STH_VER_I)=STHHDV			!VERSION
	STHE(STH_EPO_E)=2000.			!EPOCH
	READ (DATOBS,'(I2,X,I2,X,I2)') I,I1,STHI(STH_OBS_I+1) !DATE AND YEAR
	DO I2=1,I1-1
	  I=I+MONTH(I2)
	END DO
	IF (MOD(STHI(STH_OBS_I+1),4).EQ.0 .AND. I1.GT.2) I=I+1 !LEAP YEAR
	STHI(STH_OBS_I)=I			!DAY
	STHD(STH_MJD_D)=INT(STHI(STH_OBS_I+1)*365.25+0.1)+
	1		STHI(STH_OBS_I)+24150.	!MJD AT 0HR UT
	STHE(STH_OEP_E)=(STHD(STH_MJD_D)-24150.)/365.25+1900. !OBS. DATE IN JUL.
	DO I=1,NANT				!TEL. POSITIONS
	  IF (I.LE.MXNTEL) THEN
	    STHE(STH_RTP_E+STHTEL-MXNTEL+I-1)=
	1	SQRT((X(I)-X(1))**2+(Y(I)-Y(1))**2+
	1		(Z(I)-Z(1))**2)
	  END IF
	  IF (I.EQ.1) THEN			!AVERAGE E-W ANGLE
	    R0=0
	    R1=0
	  ELSE
	    R0=R0+(X(I)-X(1))
	    R1=R1+(Y(I)-Y(1))
	  END IF
	END DO
	IF (NANT.GT.1) R2=ATAN2(R1,R0)
	STHD(STH_UTST_D)=1.002737909265+.589E-10*
	1		(STHD(STH_MJD_D)-24150.)/36525. !UT/ST DAY
	STHJ(STH_INST_J)=1			!INDICATE ATCA
	STHJ(STH_DIPC_J)='0aaaaaaa'X		!ASSUME PARALLEL DIPOLES
	I=0					!BASELINE COUNT
	STHJ(STH_NIFR_J)=0			!IFR COUNT
	DO I1=1,6				!ALL TEL.
	  DO I2=I1,6
	    IF (IAND(IFRS,2**I).NE.0) THEN	!SEEN
	      IFRT(STHJ(STH_NIFR_J))=(7+I2)*256+(7+I1)
	      STHJ(STH_NIFR_J)=STHJ(STH_NIFR_J)+1 !COUNT
	    END IF
	    I=I+1				!NEXT BASELINE
	  END DO
	END DO
	IF (STHJ(STH_NIFR_J).LE.0) GOTO 900	!NO DATA
	STHJ(STH_IFRP_J)=WNFEOF(FCAOUT)		!SAVE INTERFEROMETER TABLE
	IF (.NOT.WNFWR(FCAOUT,LB_I*STHJ(STH_NIFR_J),
	1		IFRT,STHJ(STH_IFRP_J))) GOTO 10
C
C LOOP IF
C
	DO I1=1,N_IF				!ALL IF'S
	  IF (TAB(1,I1,8).EQ.0) GOTO 30		!NOT SELECTED
 20	  CONTINUE
	  STHI(STH_PLN_I)=IF_NSTOK(I1)		!# OF POLARISATIONS
	  IF (IF_NSTOK(I1).EQ.3) STHI(STH_PLN_I)=2 !MAKE CORRECT
	  STHI(STH_PLN_I)=MIN(4,STHI(STH_PLN_I))
	  STHD(STH_FRQ0_D)=RFREQ/1D6		!REST FREQUENCY LINE
	  STHE(STH_VEL_E)=VEL1			!VELOCITY
	  IF (IVELREF.EQ.258) THEN		!VELOCITY CODE
	    STHJ(STH_VELC_J)=1			!HELIOC. RADIO
	  ELSE IF (IVELREF.EQ.258) THEN
	    STHJ(STH_VELC_J)=1			!HELIOC. RADIO
	  ELSE IF (IVELREF.EQ.257) THEN
	    STHJ(STH_VELC_J)=2			!LSR RADIO
	  ELSE IF (IVELREF.EQ.2) THEN
	    STHJ(STH_VELC_J)=3			!HELIOC. OPTICAL
	  ELSE IF (IVELREF.EQ.1) THEN
	    STHJ(STH_VELC_J)=4			!LSR OPTICAL
	  ELSE
	    STHJ(STH_VELC_J)=0			!UNKNOWN
	  END IF
	  STHD(STH_FRQC_D)=IF_FREQ(I1)/1E6	!CENTRE LINE FREQUENCY
	  I1IF=ABS(MIN(0,NINT(LOG(DCL*100/IF_FREQ(I1)/90.)
	1		/LOG(2D0))))		!BAND NUMBER
	  IF (.NOT.WNDLNF(SGPH(0)+SGH_LINKG_1,I1IF,
	1		SGH_GROUPN_1,FCAOUT,
	1		SGPH(1),SGNR(1))) THEN	!FIND/CREATE SUB-GROUP
	    CALL WNCTXT(F_TP,'!/Cannot link sub-group')
	    GOTO 900				!QUIT
	  END IF
C
C LOOP SOURCES
C
	  DO I=1,N_SU				!ALL SOURCES
	    IF (TAB(I,1,9).EQ.0) GOTO 31	!NOT SELECTED
 21	    CONTINUE
	    STHI(STH_PTS_I)=I-1			!POINTING SET #
	    CALL WNGMFS(STH_FIELD_N,SU_NAME(I),STH(STH_FIELD_1)) !FIELD NAME
	    STHD(STH_RAE_D)=SU_RA(I)/DPI2	!RA EPOCH
	    STHD(STH_DECE_D)=SU_DEC(I)/DPI2	!DEC EPOCH
	    IF (SU_RAD(I).EQ.0 .AND. SU_DECD(I).EQ.0) THEN
	      STHD(STH_RA_D)=SU_RA(I)/DPI2	!APP. RA
	      STHD(STH_DEC_D)=SU_DEC(I)/DPI2	!APP. DEC
	    ELSE
	      STHD(STH_RA_D)=SU_RAD(I)/DPI2	!APP. RA
	      STHD(STH_DEC_D)=SU_DECD(I)/DPI2	!APP. DEC
	    END IF
	    STHE(STH_PHI_E)=STHE(STH_PHI_E)/PI2	!MAKE CIRCLES
	    I10=NFSRC				!FOR SAFETY OPTIMIZING
	    DO I2=1,NFSRC
	      IF (SU_NAME(I).EQ.FSRC(I2)) THEN	!FOUND SOURCE
		I10=I2-1			!SAVE POSITION
		GOTO 23
	      END IF
	    END DO
	    NFSRC=MIN(MXFSRC,NFSRC+1)		!SAVE NEW SOURCE
	    FSRC(NFSRC)=SU_NAME(I)
 23	    CONTINUE
	    IF (.NOT.WNDLNF(SGPH(1)+SGH_LINKG_1,I10,SGH_GROUPN_1,FCAOUT,
	1		SGPH(2),SGNR(2))) THEN	!FIND/CREATE SUB-GROUP
	      CALL WNCTXT(F_TP,'!/Cannot link sub-group')
	      GOTO 900				!QUIT
	    END IF
	    CALL WNCTXT(F_TP,'!6C\Src/IF !4$UJ/!2$UJ: !UJ\.!UJ\.!UJ'//
	1		'!32C\RA= !10$DPF15.5 Dec= !10$DAF15.5'//
	1		' UT= !5$EHF4',
	1		I10,I1IF,SGNR(0),SGNR(1),SGNR(2),
	1		STHD(STH_RAE_D),STHD(STH_DECE_D),
	1		TABE(I,I1,1)/3600./24.)
C
C LOOP CHANNELS
C
	    DO I2=0,2*MXNCNT			!GET CONT. DEFINITION
	      LCONT(I2)=CONTIN(I2)
	    END DO
	    LCONT(-1)=0				!COUNT
	    LCONT(-2)=0				!AVERAGE
	    LCONT(-3)=1000000			!LOWEST
	    LCONT(-4)=0				!HIGHEST
	    IF (CONTIN(0).EQ.-1) THEN		!SELECT 75%
	      LCONT(0)=1
	      I2=NINT(0.7501*IF_NFREQ(I1))	!CHANNELS TO GET
	      LCONT(2)=(IF_NFREQ(I1)+1+I2)/2	!HIGHEST
	      LCONT(1)=LCONT(2)-I2+1		!LOWEST
	    END IF
	    IF (LCONT(0).NE.0) THEN		!GET RANGE
	      DO I2=1,LCONT(0)			!PAIRS
		LCONT(2*I2-1)=MAX(1,LCONT(2*I2-1)) !LIMIT
		LCONT(2*I2)=MIN(IF_NFREQ(I1),LCONT(2*I2))
	        DO I10=LCONT(2*I2-1),LCONT(2*I2) !EACH PAIR
		  LCONT(-1)=LCONT(-1)+1		!COUNT
		  LCONT(-2)=LCONT(-2)+I10	!AVERAGE CHANNEL
		  LCONT(-3)=MIN(LCONT(-3),I10)	!LOWEST
		  LCONT(-4)=MAX(LCONT(-4),I10)	!HIGHEST
		END DO
	      END DO
	      IF (LCONT(-1).LE.0) THEN		!NONE
	        LCONT(0)=0
	      ELSE
		LCONT(-2)=LCONT(-2)/LCONT(-1)	!AVERAGE CHANNEL
		LCONT(-3)=LCONT(-4)-LCONT(-3)+1	!WIDTH
	      END IF
	    END IF
	    DO I2=0,IF_NFREQ(I1)		!ALL BANDS
	      IF (I2.EQ.0) THEN			!CONTINUUM
	        IF (LCONT(0).EQ.0) GOTO 32	!NOT WANTED
	      ELSE
		LCONT(0)=1			!SET NORMAL
		LCONT(1)=I2
		LCONT(2)=I2
	        IF (NCHN(CJOB).GE.0) THEN	!MUST CHECK
	          DO I10=1,NCHN(CJOB)
	            IF (ICHN(I10,CJOB).EQ.I2) 
	1		GOTO 22			!FOUND SELECTION
	          END DO
	          GOTO 32			!NOT SELECTED
	        END IF
	      END IF
 22	      CONTINUE
	      IF (.NOT.WNDLNF(SGPH(2)+SGH_LINKG_1,I2,
	1		SGH_GROUPN_1,FCAOUT,
	1		SGPH(3),SGNR(3))) THEN	!FIND/CREATE SUB-GROUP
	        CALL WNCTXT(F_TP,'!/Cannot link sub-group')
	        GOTO 900			!QUIT
	      END IF
	      STHI(STH_CHAN_I)=I2
	      IF (I2.EQ.0) THEN			!CONT. CHANNEL
	        STHD(STH_FRQ_D)=(IF_FREQ(I1)-(IF_REF(I1)-LCONT(-2))*
	1		(IF_INVERT(I1)*IF_BW(I1)/(IF_NFREQ(I1)-1)))/1E6
		STHE(STH_BAND_E)=IF_BW(I1)/(IF_NFREQ(I1)-1)/1E6
	1			*LCONT(-3)	!CONTINUUM BAND
	      ELSE				!SPECTRAL
	        STHD(STH_FRQ_D)=(IF_FREQ(I1)-(IF_REF(I1)-I2)*
	1		IF_INVERT(I1)*IF_BW(I1)/(IF_NFREQ(I1)-1))/1E6
		STHE(STH_BAND_E)=IF_BW(I1)/(IF_NFREQ(I1)-1)/1E6
	      END IF
	      STHD(STH_FRQE_D)=STHD(STH_FRQ_D)
	      STHE(STH_HAV_E)=MAX(REAL(INTIME),TABE(I,I1,2))*
	1		STHD(STH_UTST_D)/240./360. !HA AVERAGE
C
C WRITE DATA
C
	      STHE(STH_HAI_E)=TABE(I,I1,2)*STHD(STH_UTST_D)/240./360. !HA INC.
	      IF (STHE(STH_HAI_E).LE.0) STHE(STH_HAI_E)=STHE(STH_HAV_E)
	      STHJ(STH_SCN_J)=TAB(I,I1,0)		!# OF SCANS
	      STHJ(STH_SCNL_J)=SCHHDL+3*LB_I*STHJ(STH_NIFR_J)*
	1		STHI(STH_PLN_I)			!LENGTH SCAN
	      STHE(STH_HAB_E)=WNGENF((TABE(I,I1,6))/PI2) !START HA
	      STHD(STH_MJD_D)=AINT(STHD(STH_MJD_D))+
	1		TABE(I,I1,1)/(24.*3600.) !START MJD
	      I101=MAX(0,MIN(NINT(INTOFF/24./3600./STHE(STH_HAI_E)),
	1		STHJ(STH_SCN_J)-1))		!START OFFSET
	      I10=MAX(1,MIN(NINT(INTTIM/24./3600./STHE(STH_HAI_E)),
	1		STHJ(STH_SCN_J)-I101))		!SCANS INTEGRATED
	      STHJ(STH_SCN_J)=(STHJ(STH_SCN_J)-I101)/I10 !# OF OUTPUT SCANS
	      STHE(STH_HAB_E)=STHE(STH_HAB_E)+((I10-1)/2.+I101)*
	1		STHE(STH_HAI_E)			!NEW START
	      STHE(STH_HAI_E)=STHE(STH_HAI_E)*I10	!NEW STEP
	      STHE(STH_HAV_E)=STHE(STH_HAV_E)*I10	!NEW AVERAGE
	      IF (STHJ(STH_SCN_J).LE.0) GOTO 32		!NO SCANS, SKIP
C
C WRITE AND LINK SET HEADER
C
	      I3=WNFEOF(FCAOUT)			!POINTER
	      IF (.NOT.WNFWR(FCAOUT,STHHDL,STH(0),I3)) THEN
 10		CONTINUE
		CALL WNCTXT(F_TP,'Error writing scan data')
	        CALL WNGEX			!STOP
	      END IF
	      IF (.NOT.WNDLNK(GFH_LINK_1,I3,STH_SETN_1,FCAOUT))
	1			GOTO 10		!LINK SET
	      IF (.NOT.WNDLNG(SGPH(3)+SGH_LINKG_1,I3,SGH_GROUPN_1,FCAOUT,
	1		SGPH(4),SGNR(4))) GOTO 10 !LINK SUB-GROUP
	      IF (.NOT.WNFRD(FCAOUT,STHHDL,STH(0),I3)) GOTO 10 !RE-READ STH
	      STHJ(STH_SCNP_J)=WNFEOF(FCAOUT)	!DATA POINTER
	      IF (.NOT.WNFWR(FCAOUT,STHHDL,STH(0),I3)) GOTO 10 !RE-WRITE STH
	      J0=TAB(I,I1,3)			!TMP POINTER
C
C LOOP SCANS
C
	      DO I3=0,MIN(I101,STHJ(STH_SCN_J)*I10)-1 !SKIP START
		IF (.NOT.WNFRD(FCAT,2*LB_J,DATJ(0),J0)) GOTO 10 !LINK DATA
		J0=DATJ(0)			!NEXT LINK POINTER
	      END DO
	      DO I3=0,STHJ(STH_SCN_J)-1		!ALL OUTPUT TIMES
		CALL WNGMVZ(STHJ(STH_NIFR_J)*STHI(STH_PLN_I)*
	1		3*LB_E,BUFE)		!EMPTY SUMS
		TCNT=0
		DO I11=0,I10-1			!ALL INPUT SCANS
		  IF (.NOT.WNFRD(FCAT,2*LB_J,DATJ(0),J0)) GOTO 10 !LINK DATA
		  DO I102=1,LCONT(0)		!ALL CONT. GROUPS
		    DO I103=LCONT(2*I102-1),LCONT(2*I102) !ALL SUB-CHANNELS
		      IF (.NOT.WNFRD(FCAT,MXNIFR*IF_NSTOK(I1)*LB_X, !READ DATA
	1			A_B(BUFP-A_OB),J0+2*LB_J+
	1			(I103-1)*MXNIFR*IF_NSTOK(I1)*LB_X)) GOTO 10
		      I5=0			!COUNT IFR
		      DO I4=0,MXNIFR-1		!COPY ALL
		        IF (IAND(IFRS,2**I4).NE.0) THEN !SELECTED
		          IF (IAND(DATJ(1),2**I4).NE.0) THEN !PRESENT
		            DO I6=0,STHI(STH_PLN_I)-1 !ALL POL
			      CALL WNGMV(LB_X,
	1				A_B(BUFP-A_OB+
	1				LB_X*(IF_NSTOK(I1)*I4+I6)),
	1				DATXX)	!DATA
			      DATXE(1)=-IF_INVERT(I1)*DATXE(1) !INVERT PHASE
			      I12=I5*3*STHI(STH_PLN_I)+I6*3 !POINTER
			      IF (DATXE(0).EQ.0 .AND. DATXE(1).EQ.0) THEN !BAD
				GOTO 11
			      ELSE
			        IF (STHI(STH_PLN_I).NE.4) THEN !SAME ORDER
			          BUFE(I12)=BUFE(I12)+DATXE(0)
			          BUFE(I12+1)=BUFE(I12+1)+DATXE(1)
			        ELSE		!SWITCH ORDER
			          I13=I5*3*STHI(STH_PLN_I)+PX(I6)*3
			          BUFE(I13)=BUFE(I13)+DATXE(0)
			          BUFE(I13+1)=BUFE(I13+1)+DATXE(1)
			        END IF
			        BUFE(I12+2)=BUFE(I12+2)+1. !WEIGHT
			      END IF
		            END DO
 11			    CONTINUE
		          END IF
		          I5=I5+1		!COUNT
		        END IF
		      END DO			!IFR
		      TCNT=TCNT+1		!COUNT POINTS
		    END DO			!SUB-CHANNELS
		  END DO			!CHANNEL GROUPS
		  J0=DATJ(0)			!NEXT LINK POINTER
		END DO				!INPUT SCANS
C
C AVERAGE AND MAX.
C
		R0=0
		DO I4=0,STHJ(STH_NIFR_J)-1	!FIND MAX AND AVERAGE
		  DO I5=0,STHI(STH_PLN_I)-1
		    I12=I4*3*STHI(STH_PLN_I)+I5*3 !POINTER
		    IF (TCNT.GT.0 .AND.
	1			BUFE(I12+2).EQ.TCNT) THEN
		      BUFE(I12+0)=BUFE(I12+0)/BUFE(I12+2) !AVERAGE
		      BUFE(I12+1)=BUFE(I12+1)/BUFE(I12+2)
		      BUFE(I12+2)=BUFE(I12+2)/BUFE(I12+2)
		      R0=MAX(R0,ABS(BUFE(I12+0)*200.))
		      R0=MAX(R0,ABS(BUFE(I12+1)*200.))
		    ELSE
		      CALL WNGMVZ(3*LB_E,BUFE(I12)) !BAD DATA
		    END IF
		  END DO
		END DO
		R1=1				!FIND SCALE
		DO WHILE (R0.GT.32760.)
		  R1=R1*2.
		  R0=R0/2.
		END DO
		DO I4=0,STHJ(STH_NIFR_J)-1	!WRITE DATA
		  DO I5=0,STHI(STH_PLN_I)-1
		    I12=I4*3*STHI(STH_PLN_I)+I5*3
		    BUFI(I12+1)=BUFE(I12+0)/R1*200. !COS
		    BUFI(I12+2)=BUFE(I12+1)/R1*200. !SIN
		    BUFI(I12+0)=BUFE(I12+2)	!WEIGHT
		  END DO
		END DO
		CALL WNGMVZ(SCHHDL,SCH)		!MAKE SCAN HEADER
		SCHE(SCH_HA_E)=STHE(STH_HAB_E)+I3*STHE(STH_HAI_E) !HA
		SCHE(SCH_MAX_E)=R0*R1		!SAVE MAX
		SCHE(SCH_SCAL_E)=R1-1.		!SAVE SCALE
		SCHE(SCH_PANG_E)=		!PARALL. ANGLE
	1		ATAN2(DBLE(CLATA*SIN(PI2*SCHE(SCH_HA_E))),
	1		COS(PI2*STHD(STH_DEC_D))*
	1		CLATA*SIN(PI2*STHD(STH_DEC_D))*
	1			COS(PI2*SCHE(SCH_HA_E)))/PI2
		IF (.NOT.WNFWR(FCAOUT,SCHHDL,SCH,
	1		STHJ(STH_SCNP_J)+
	1		I3*STHJ(STH_SCNL_J))) GOTO 10 !WRITE SCAN
		IF (.NOT.WNFWR(FCAOUT,STHJ(STH_SCNL_J)-SCHHDL,
	1		BUFI,
	1		SCHHDL+STHJ(STH_SCNP_J)+
	1		I3*STHJ(STH_SCNL_J))) GOTO 10 !WRITE SCAN
	      END DO				!SCANS
 32	      CONTINUE
	    END DO				!CHANNELS
 31	    CONTINUE
	  END DO				!SOURCES
 30	  CONTINUE
	END DO					!BANDS
C
 900	CONTINUE
	RETURN					!READY
C
C
	END

C+ NLEIRD.FOR
C  HjV 950116
C
C  Revisions:
C	HjV 951113	Add stuff for ARC-option
C
C
	LOGICAL FUNCTION NLEIRD(INFCA,FCAT,NRINTF,OFFINTF,
	1                       BINT,HABOFF,ONS,OHAB,MJDHA0,NIFR,IFRT,
	1			STH,STHI,STHJ,STHE,STHD,
	1			OBSDATE,OBSSTART,OBSEND,OLSYS,PRNAME,FIELD,
	1			FWGT,DIPOLE,DBUF,TMPBUF)
C
C  Read LEIDEN data into TMP file
C
C  Result:
C
C	NLEIRD_J = NLEIRD( INFCA_J:I, FCAT_J:I,
C			BINT_J:I, HABOFF_E:I, ONS_J(6):IO, OHAB_E:IO,
C			MJDHA0_D:O,NIFR_J:IO, IFRT_J(9,0:*):IO, STHI_I(0:*):IO,
C			STHJ_J(0:*):IO, STHE_E(0:*):IO, STHD_D(0:*):IO,
C			OBSDATE_J:O, OBSSTART_D:O, OBSEND_D:O, 
C			OLSYS_I:O, PRNAME_C(3):O, FIELD_C(16):O,
C			FWGT_E:IO, DIPOLE_I:O, 
C			DBUF_I(2,0:*):I, TMPBUF_I(3:0:*))
C				Read LEIDEN data from tape/disk to TMP file.
C				INFCA indicates the file to read,
C				FCAT is the TMP file; 
C				NRINTF is nr. of interferometers,
C       			OFFINTF is array with offsets for each interf.,
C				BINT is the basic integration time (10 s).
C				HABOFF gives the start of integration.
C				MJDHA0 is the MJD for HA=0
C				ONS gives the integration data, OHAB the
C				start HA of the output. If ONS(1)<0 the
C				start of a new channel is indicated.
C				NIFR is the number of inetrferometers found,
C				IFRT describes the interferometers.
C				STH is the template set header
C				OBSDATE is Observation date (yyddd)
C				OBSSTART is Observation start-time in sec.
C				OBSEND is Observation end-time in sec.
C				OLSYS is online computer program nr.
C				PRNAME is initials of project scientist
C				FIELD is field name
C				FWGT the max. value of all integration times
C				DIPOLE is the dipole position
C				DBUF is an input buffer,
C				TMPBUF is used for writing.
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NSC_DEF'
        INCLUDE 'IHL_O_DEF'			!IH BLOCK
        INCLUDE 'IHL_T_DEF'
	INCLUDE 'STH_O_DEF'			!SET HEADER
C
C  Parameters:
C
C
C  Entry points:
C
C
C  Arguments:
C
	INTEGER INFCA				!INPUT FILE DESCRIPTOR
	INTEGER FCAT				!TMP OUTPUT FILE DESCRIPTOR
	INTEGER*2 NRINTF			!# OF INTERF.
	INTEGER OFFINTF(0:159)			!OFFSET FOR EACH INTERF.
	INTEGER BINT				!BASIC INTEGRATION IN SEC
	REAL HABOFF				!INTEGRATION START OFFSET
	INTEGER ONS(6)				!INTEGRATION DATA
	REAL OHAB				!START HA
	DOUBLE PRECISION MJDHA0			!MJD AT HA0
	INTEGER NIFR				!# OF IFRS FOUND
	INTEGER IFRT(9,0:*)			!IFR DESCRIPTION
	BYTE STH(0:*)				!SET HEADER
	INTEGER*2 STHI(0:*)			
	INTEGER STHJ(0:*)			
	REAL STHE(0:*)
	REAL*8 STHD(0:*)
	INTEGER OBSDATE				!Obs. date (yyddd)
	REAL*8  OBSSTART			!Obs. start-time in SEC.
	REAL*8  OBSEND				!Obs. end-time in SEC.
	INTEGER*2 OLSYS				!Online program nr.
	CHARACTER*3 PRNAME			!Initals project scientist
	CHARACTER*16 FIELD			!Field name
	REAL FWGT				!MAX. INT. TIMES
	INTEGER*2 DIPOLE
	INTEGER*2 DBUF(2,0:MXDATN-1)		!INPUT BUFFER
	INTEGER*2 TMPBUF(3,0:MXDATX-1)		!OUTPUT BUFFER FOR WRITING
C
C  Function references:
C
	LOGICAL WNFRD				!READ DATA
	LOGICAL WNFWR				!WRITE DATA
C
C  Data declarations:
C
	REAL SUMC,SUMS				!INTEGRATE
	INTEGER N				!# OF INTEGRATED POINTS
	INTEGER NS(-6:6)			!INTEGRATION DATA
	REAL HAB				!START HA
	INTEGER WTEL				!WEST TELESCOPE
	INTEGER OTEL				!EAST TELESCOPE
	INTEGER IPOL				!POLARISATION NR. (0-3)
	INTEGER SHR,SMIN,SSEC
	INTEGER SYY,UTDAY,STDAY
	REAL*8 UT,ST,JD
	REAL*4 RTPARR(0:9,0:3)			!ARRAY WITH BASELINE (M)
C
	INTEGER*2 DBH_T(2,2)			!TRANSLATE DATA
	  DATA DBH_T/2,0,0,1/
C
        BYTE IHL(0:IHLHDL-1)                    !IH
          INTEGER*2 IHLI(0:IHLHDL/2-1)
          INTEGER   IHLJ(0:IHLHDL/4-1)
          REAL*4    IHLE(0:IHLHDL/4-1)
          REAL*8    IHLD(0:IHLHDL/8-1)
          EQUIVALENCE (IHL,IHLI,IHLJ,IHLE,IHLD)
C-
C
C INIT
C
C
C READ IFRS
C
	NLEIRD=.TRUE.				!ASSUME OK
	DO I=0,STHJ(STH_NIFR_J)-1		!ALL INTERFEROMETERS
	  J=OFFINTF(I)				!DISK POINTER IH
	  IF (.NOT.WNFRD(INFCA,IHLHDL,IHL,J)) THEN !READ IH BLOCK
	    CALL WNCTXT(F_TP,'!/Read error IH block #!UJ (INTF. #!UJ) (!XJ)',
	1		J,I,E_C)
	    GOTO 10				!NEXT
	  END IF
	  IF (IBMSW) CALL WNTTIL(IHLHDL,IHL,IHL_T) !TRANSLATE
	  IF (DECSW) CALL WNTTDL(IHLHDL,IHL,IHL_T)
C
C FILL SET HEADER WHEN FIRST IH READ
C
	  IF (I.EQ.0) THEN
C SAVE SOME STUFF FOR NLEILU
	     DIPOLE=IHL(IHL_CHINFO_B+1)
	     OBSDATE=IHLJ(IHL_SDAY_J)
	     OBSSTART=IHLD(IHL_STIM_D)
	     OBSEND=IHLD(IHL_ETIM_D)
	     OLSYS=IHL(IHL_OLSYS_B)
	     CALL WNGMV(3,IHL(IHL_PRNAME_1),PRNAME)	!PROJECT SCIENTIST
	     CALL WNGMV(16,IHL(IHL_FIELD_1),FIELD)	!FIELD NAME
C
	     STHJ(STH_DIPC_J)=0				!DIPOLE SETTING
	     I1=IHL(IHL_CHINFO_B+1)
	     DO I2=0,STHTEL-1
		IF (I2.LT.10) THEN 			!WEST TEL.
		   STHJ(STH_DIPC_J)=STHJ(STH_DIPC_J)+ISHFT(I1/4,2*I2)
		ELSE					!EAST TEL
		   STHJ(STH_DIPC_J)=STHJ(STH_DIPC_J)+ISHFT(MOD(I1,4),2*I2)
		END IF
	     END DO
	     STHI(STH_PLN_I)=4				!# OF POLARISATIONS
	     CALL WNGMV(STH_FIELD_N,IHL(IHL_FIELD_1),STH(STH_FIELD_1)) !FIELD NAME
	     STHD(STH_RA_D)=IHLD(IHL_RA1_D)/360. 	!OBS. RA 
	     STHD(STH_DEC_D)=IHLD(IHL_DEC1_D)/360. 	!Obs. DEC 
	     STHD(STH_RAE_D)=IHLD(IHL_RA1_D)/360. 	!RA EPOCH
	     STHD(STH_DECE_D)=IHLD(IHL_DEC1_D)/360. 	!DEC EPOCH
	     STHE(STH_BAND_E)=IHLD(IHL_BAND_D) 		!BANDWIDTH
	     STHE(STH_EPO_E)=1950. 			!EPOCH
	     STHD(STH_UTST_D)=1.002737909265		!CONVERSION UT/ST DAY LENGTH
	     SYY=INT(IHLJ(IHL_SDAY_J)/1000)		!YEAR
	     STDAY=IHLJ(IHL_SDAY_J)-(SYY*1000)		!DAYNR
	     SYY=SYY+1900
	     ST=IHLD(IHL_STIM_D)/86400.			!TIME in fractions
	     CALL WNGU2S (-1,SYY,UTDAY,UT,STDAY,ST)	!ST to UT
	     STHI(STH_OBS_I+1)=SYY-1900			!YEAR
	     STHI(STH_OBS_I)=UTDAY			!DAY
	     STHD(STH_MJD_D)=INT(STHI(STH_OBS_I+1)*365.25+0.1)+
	1	  STHI(STH_OBS_I)+24150.		!MJD AT 0HR UT
	     STHE(STH_OEP_E)=(STHD(STH_MJD_D)-24150.)/365.25+1900. !OBS. DATE IN JUL.
	     STHD(STH_FRQ_D)=IHLD(IHL_FREQ_D) 		!APP. FREQUENCY
	     STHD(STH_FRQE_D)=STHD(STH_FRQ_D) 		!LSR. FREQUENCY
	     STHD(STH_FRQC_D)=STHD(STH_FRQ_D) 		!REF. FREQUENCY
	     STHJ(STH_SCN_J)=IHLI(IHL_NDATP_I)		!# OF SCANS
	     STHE(STH_HAB_E)=IHLE(IHL_HAB_E)/360.	!START HA
	     STHE(STH_HAI_E)=IHLE(IHL_DHA_E)/360.	!HA-INCR.
	     CALL WNGJUL (1,SYY,UTDAY,UT,JD)		!UT to JD
	     MJDHA0=JD-2415020D0-0.5D0			!MJD MIDDLE OBS.
	     D0=IHLD(IHL_STIM_D)/360.D0/24D0		!START TIME
	     IF (D0.GT.MOD(MJDHA0,1D0))			!PREVIOUS DAY
	1	  MJDHA0=MJDHA0-1D0
	     MJDHA0=MJDHA0-MOD(MJDHA0,1D0)+D0		!MJD START TIME
	     MJDHA0=MJDHA0-(STHE(STH_HAB_E)-5D0/3600D0/24D0) !MJD AT HA0
	     UT=UT*86400.				!UT IN SEC.
	     SHR=INT(UT/(60.*60.))
	     SMIN=INT((UT-(SHR*(60.*60.)))/60.)
	     SSEC=UT-(SHR*(60.*60.))-(SMIN*60.)
	     IF (SYY.EQ.1936) SYY=1973
	     IF (SYY.LT.1980) THEN
		STHJ(STH_VNR_J)=-(((SYY-1970)*1000000)+
	1	     (STHI(STH_OBS_I)*24*60)+(SHR*60)+SMIN)
	     ELSE
C For observation from 1980 until max. 1984 we will split the seq.number
C The numbers will put in the free sections for the 1970-1979 area.
C (E.g 1971 only uses -1000000 to -1530000,
C so part of 1981 will use -1600000 to -1999999 from the 1971 part
C and -6600000 to -6999999 from the 1976-part)
		I2=SYY-1980
		I3=(STHI(STH_OBS_I)*24*60)+(SHR*60)+SMIN
		IF (I3.LT.250000) THEN
		   STHJ(STH_VNR_J)=-(((SYY-1980)*1000000)+600000+I3)
		ELSE
		   STHJ(STH_VNR_J)=-(((SYY-1980)*1000000)+5350000+I3)
		END IF
	     END IF		   
	  END IF
	  IPOL=MOD(I,4)
	  OTEL=INT(I/40)+10
	  WTEL=INT((I-INT(I/40*40))/4)
	  HABOFF=(IHLE(IHL_HAB_E)/IHLE(IHL_DHA_E))*240. !HA-START IN SEC
	  BINT=IHLE(IHL_DHA_E)*240.		!INTEGRATION TIME IN SEC
C
C DETERMINE STEPS
C
	  NS(-3)=0				!START INTEGRATION OFFSET
	  NS(0)=1				!INPUT INTEGRATION POINTS
	  NS(-1)=IHLI(IHL_NDATP_I)		!INPUT DATA POINTS
	  NS(1)=1				!OUTPUT INTEGRATION POINTS
	  NS(-2)=NS(-1)*NS(0)
	  NS(3)=NS(-2)
	  IF (NS(-2)-NS(-3).LT.NS(1)) THEN	!INTEGRATION TOO LONG
	    CALL WNCTXT(F_TP,'Dwell time (!UJ s) less than '//
	1		'integration time (!UJ s)',
	2		(NS(-2)-NS(-3))*BINT,NS(1)*BINT)
	    GOTO 900
	  END IF
	  NS(2)=NS(-1)/(NS(-2)/NS(0))		!# OF SUBSETS
	  NS(4)=(NS(-2)-NS(-3))/NS(1)		!# OUTPUT DWELL POINTS
	  NS(5)=NS(2)*NS(4)			!# OUTPUT DATAPOINTS
	  NS(6)=0				!TMP DISK POINTER
	  HAB=IHLE(IHL_HAB_E)			!START HA
C
C READ/CHECK DATA
C
	  IF (.NOT.WNFRD(INFCA,NS(-1)*4,DBUF,J+160)) THEN !READ DB BLOCK
	    CALL WNCTXT(F_TP,'!/Read error DB block INTF. #!UJ (!XJ)',
	1			I,E_C)
	    GOTO 10				!NEXT
	  END IF
	  DBH_T(2,1)=NS(-1)*2			!# OF POINTS TO CONVERT
	  IF (IBMSW) CALL WNTTIL(NS(-1)*4,DBUF,DBH_T) !TRANSLATE
	  IF (DECSW) CALL WNTTDL(NS(-1)*4,DBUF,DBH_T)
	  IF (ONS(1).LT.0) THEN			!NEW CHANNEL
	    DO I1=1,6
	      ONS(I1)=NS(I1)			!SAVE DATE
	    END DO
	    OHAB=HAB
	  ELSE
	    DO I1=1,5
	      IF (ONS(I1).NE.NS(I1)) THEN	!FORMAT ERROR
		IF (I1.EQ.3 .AND. NS(2).EQ.1) THEN !ACCEPT WRONG OBS. LENGTH
		ELSE
CC 20	          CALL WNCTXT(F_TP,
CC	1	'!/Format error DB block #!UJ, interferometer !1$XJ!1$XJ',
CC	1		J,WTEL,OTEL)
	          GOTO 10			!NEXT
		END IF
	      END IF
	    END DO
C Check for correct HAB; a margin of .1 sec is accepted to account for precision
C  effects on different machines; the corresponding rotation of 1.15E-6 circles
C  is acceptable (Email WNB to JPH, 931214)
C	    IF (ABS(OHAB-HAB).GE.0.1E0/24./3600.) GOTO 20
	  END IF
C
C MAKE entry for this polarisation and ifr in temporary IFR TABLE
C
	  DO I1=0,NIFR-1			!CHECK PRESENCE
	    IF (IFRT(1,I1).EQ.WTEL .AND.
	1		IFRT(2,I1).EQ.OTEL) THEN !FOUND
	      IFRT(3+IPOL,I1)=ONS(6)/NS(5)/6	!TMP LINE #
	      GOTO 30
	    END IF
	  END DO
	  IFRT(1,NIFR)=WTEL			!WEST TEL.
	  IFRT(2,NIFR)=OTEL			!EAST TEL.
	  IF (IFRT(1,NIFR).GT.IFRT(2,NIFR)) GOTO 10 !FORGET INVERTED IFR
	  IF (IFRT(2,NIFR).GE.STHTEL) GOTO 10	!FORGET DUMMY INTERFEROMETERS
	  DO I2=3,6				!SET NO POL.
	    IFRT(I2,NIFR)=-1
	  END DO
	  IFRT(3+IPOL,NIFR)=ONS(6)/NS(5)/6	!TMP LINE #
	  IFRT(7,NIFR)=NINT(IHLE(IHL_DRT_E))	!BASELINE
	  NIFR=NIFR+1				!COUNT # IFRS
	  RTPARR(WTEL,OTEL-10)=IHLE(IHL_DRT_E)	!BASELINE
 30	  CONTINUE
C
C MAKE OUTPUT BUFFER
C
	  R0=R0/4./NS(1)			!FIT SCALE
	  DO I1=0,NS(2)-1			!SUBSETS
	    J1=I1*NS(-2)+NS(-3)			!INPUT DATA PTR
	    J2=I1*NS(4)				!OUTPUT BUF PTR
	    DO I2=0,NS(4)-1			!OUTPUT POINTS PER DWELL
	      N=0
	      SUMC=0.0
	      SUMS=0.0
C
	      DO I3=0,NS(1)-1			!# OF 10 SEC OUTPUT INTEGRAT.
	        J3=J1/NS(0)			!DATA POINT
	        IF (DBUF(1,J3).NE.IUND .AND. DBUF(2,J3).NE.IUND) THEN
		  SUMC=SUMC+DBUF(1,J3)		!ADD
		  SUMS=SUMS+DBUF(2,J3)
		  N=N+1
		END IF
	        J1=J1+1				!NEXT 10 SEC
	      END DO
	      IF (N.EQ.NS(1)) THEN		!OK POINT
		TMPBUF(2,J2)=NINT(SUMC/N)	!OUTPUT DATA
		TMPBUF(3,J2)=NINT(SUMS/N)
		TMPBUF(1,J2)=1			!ZERO WEIGHT
		FWGT=1.				!MAX. WEIGTH
	      ELSE
		DO I3=1,3
		  TMPBUF(I3,J2)=0		!ZERO WEIGHT
		END DO
	      END IF
	      J2=J2+1				!NEXT OUTPUT PTR
	    END DO
	  END DO
	  IF (.NOT.WNFWR(FCAT,NS(5)*6,TMPBUF,ONS(6))) THEN !WRITE TO TMP
	    CALL WNCTXT(F_TP,
	1	'!/Write error TMP file, IH block #!UJ (Intf. #!UJ) (!XJ)',
	1	J,I,E_C)
	    GOTO 10				!NEXT
	  END IF
	  ONS(6)=ONS(6)+NS(5)*6			!NEXT OUTPUT PTR
 10	  CONTINUE
	END DO
C
C CALCULATE TELESCOPE POSITIONS,
C USING THE BASELINE-LENGTH SAVED IN RTPARR
C
	STHE(STH_RTP_E)=0.0			!ASSUME TEL 0 AT POSITION 0
	DO I1=0,3				!EAST TEL. A - B
	  STHE(STH_RTP_E+I1+10)=RTPARR(0,I1)
	  DO I2=1,9				!WEST TEL. 0 - 9
	    IF (RTPARR(I2,I1).NE.0.0) THEN	!PRESENT
	      IF (STHE(STH_RTP_E+I2).EQ.0.0) THEN	!EMPTY
		STHE(STH_RTP_E+I2)=RTPARR(0,I1)-RTPARR(I2,I1)
	      ELSE				!TEST IF ALMOST SAME POS.
		IF ((ABS(STHE(STH_RTP_E+I2)-(RTPARR(0,I1)-RTPARR(I2,I1))))
	1	      .GT.1.) THEN
		  CALL WNCTXT(F_TP,
	1	    '!/Telescope position !UJ differs from previous one',
	2	    I2)
		END IF
	      END IF
	    END IF
	  END DO
	END DO
C
	RETURN					!READY
C
C ERROR FINISH
C
 900	CONTINUE
	NLEIRD=.FALSE.
C
	RETURN
C
C
	END

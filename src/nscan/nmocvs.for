C+ NMOCVS.FOR
C  WNB 900827
C
C  Revisions:
C	WNB 911014	Change sign rotation
C	WNB 920118	Change precision rotation
C	WNB 920626	Change sign Rot. measure
C	HjV 930423	Change name of some keywords
C	WNB 930928	Add instrument
C	WNB 931005	Change RM conversion; copy instrument
C	WNB 931008	Cater for EDIT; remove CV1; add BEAMing
C	WNB 931119	Change 	CVT definition; add REDIT, FEDIT
C
	LOGICAL FUNCTION NMOCVS(SDES,ODES,PHI,CVT)
C
C  Read a source model
C
C  Result:
C
C	NMOCVS_L = NMOCVS( SDES_B(0:*):I, ODES_B(0:*):I, PHI_E:I, CVT_I:I)
C				Convert the source list described by SDES to
C				ODES format. CVT indicates convert (0)
C				or edit(1), REDIT(2), FEDIT(3).
C				Phi is the field rotation for
C				apparent <-> epoch; only used for edit.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMO_DEF'
	INCLUDE 'MDH_O_DEF'			!MODEL HEADER
	INCLUDE 'MDL_O_DEF'			!MODEL LINE
	INCLUDE 'STH_O_DEF'			!SET HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	BYTE SDES(0:*)		!LIST TO CONVERT
	BYTE ODES(0:*)		!CONVERSION TYPE
	REAL PHI		!ROTATION ANGLE
	INTEGER CVT		!CONVERT/EDIT INDICATOR
C
C  Function references:
C
	INTEGER WNGGJ		!GET J VALUE
	REAL WNGGE		!GET E VALUE
	DOUBLE PRECISION WNGGD	!GET D VALUE
	LOGICAL NMOBMF		!GET BEAM RANGE
	DOUBLE PRECISION NMOBMV	!BEAM VALUES
C
C  Data declarations:
C
	DOUBLE PRECISION RA1,DEC1 !CONVERTED RA,DEC
	REAL R2,R3
C-
C
C INIT
C
	NMOCVS=.TRUE.					!ASSUME OK
C
C CONVERT
C
	IF (WNGGJ(SDES(MDH_TYP_1)).EQ.0) THEN		!LIST=LOCAL
	  CALL WNGMV(MDH_FRQ_1-MDH_TYP_1+LB_D,
	1		ODES(MDH_TYP_1),SDES(MDH_TYP_1)) !COPY TYPE AND ..
	  CALL WNGMV(LB_J,ODES(MDH_BITS_1),SDES(MDH_BITS_1))
	ELSE IF (WNGGJ(ODES(MDH_TYP_1)).EQ.0) THEN	!SET LOCAL
	  CALL WNGMVZ(MDH_FRQ_1-MDH_TYP_1+LB_D,
	1		SDES(MDH_TYP_1))		!COPY TYPE AND ..
	  CALL WNGMVZ(LB_J,SDES(MDH_BITS_1))
	ELSE IF (WNGGJ(SDES(MDH_TYP_1)).EQ.
	1		WNGGJ(ODES(MDH_TYP_1))) THEN	!CONVERT
	  IF (CVT.NE.1) THEN				!CONVERSION WANTED
	    IF (CVT.NE.2) THEN				!CONVERT, FEDIT
	      J0=WNGGJ(SDES(MDH_MODP_1))-A_OB		!OFFSET LIST
	      DO I=0,WNGGJ(SDES(MDH_NSRC_1))-1		!ALL SOURCES
	        J1=J0/LB_E				!E OFFSET
	        I4=A_B(J0+MDL_TP_B)			!TYPE
	        IF (IAND(I4,MDLBEM_M).EQ.0) THEN	!SHOULD BEAM FIRST
		  IF (.NOT.NMOBMF(IAND(MDHINS_M,
	1		WNGGJ(SDES(MDH_BITS_1))),
	1		SDES(MDH_FRQ_1))) THEN		!GET BEAM RANGE
		    CALL WNCTXT(F_TP,'!/No beam data available')
		    GOTO 900
		  END IF
		  D0=NMOBMV(SDES(MDH_FRQ_1),A_B(J0+MDL_L_1),
	1		A_B(J0+MDL_M_1),BEMLIM,.FALSE.)	!GET FACTOR
		  A_E(J1+MDL_I_E)=D0*A_E(J1+MDL_I_E)	!CORRECT INTENSITY
	        END IF
	        J0=J0+MDL__L				!NEXT SOURCE
	      END DO
	    END IF
	    J0=WNGGJ(SDES(MDH_MODP_1))-A_OB		!OFFSET LIST
	    DO I=0,WNGGJ(SDES(MDH_NSRC_1))-1		!ALL SOURCES
	      J1=J0/LB_E				!E OFFSET
	      I4=A_B(J0+MDL_TP_B)			!TYPE
	      IF (CVT.EQ.3 .AND. IAND(I4,MDLBEM_M).EQ.0) THEN !SHOULD DE-BEAM
		IF (.NOT.NMOBMF(IAND(MDHINS_M,
	1		WNGGJ(ODES(MDH_BITS_1))),
	1		ODES(MDH_FRQ_1))) THEN		!GET BEAM RANGE
		  CALL WNCTXT(F_TP,'!/No beam data available')
		  GOTO 900
		END IF
		D0=NMOBMV(ODES(MDH_FRQ_1),A_B(J0+MDL_L_1),
	1		A_B(J0+MDL_M_1),BEMLIM,.TRUE.)	!GET FACTOR
		A_E(J1+MDL_I_E)=D0*A_E(J1+MDL_I_E)	!CORRECT INTENSITY
	      END IF
	      CALL WNMCLM(SDES(MDH_RA_1),SDES(MDH_DEC_1), !MAKE RA,DEC
	1		A_B(J0+MDL_L_1),A_B(J0+MDL_M_1),
	1		RA1,DEC1)
	      CALL WNMCRD(ODES(MDH_RA_1),ODES(MDH_DEC_1), !MAKE L,M
	1		A_B(J0+MDL_L_1),A_B(J0+MDL_M_1),
	1		RA1,DEC1)
	      IF (CVT.EQ.0 .AND. IAND(I4,MDLBEM_M).EQ.0) THEN !SHOULD DE-BEAM
		IF (.NOT.NMOBMF(IAND(MDHINS_M,
	1		WNGGJ(ODES(MDH_BITS_1))),
	1		ODES(MDH_FRQ_1))) THEN		!GET BEAM RANGE
		  CALL WNCTXT(F_TP,'!/No beam data available')
		  GOTO 900
		END IF
		D0=NMOBMV(ODES(MDH_FRQ_1),A_B(J0+MDL_L_1),
	1		A_B(J0+MDL_M_1),BEMLIM,.TRUE.)	!GET FACTOR
		A_E(J1+MDL_I_E)=D0*A_E(J1+MDL_I_E)	!CORRECT INTENSITY
	      END IF
	      D0=WNGGD(SDES(MDH_FRQ_1))			!FRQ
	      D1=WNGGD(ODES(MDH_FRQ_1))
	      IF (D0*D1.NE.0) THEN
	        R0=D1/D0				!CONVERT FOR SPECTR.
	        J1=J0/LB_E				!	INDEX
	        A_E(J1+MDL_I_E)=A_E(J1+MDL_I_E)*
	1		(R0**A_E(J1+MDL_SI_E))
	        R0=2*A_E(J1+MDL_RM_E)*(((DCL*1E-6/D0)**2)-
	1		((DCL*1E-6/D1)**2))		!CONVERT FOR ROT. M.
	        R1=SIN(R0)
	        R0=COS(R0)
	        R2=A_E(J1+MDL_Q_E)*R0-A_E(J1+MDL_U_E)*R1
	        A_E(J1+MDL_U_E)=+A_E(J1+MDL_Q_E)*R1+A_E(J1+MDL_U_E)*R0
	        A_E(J1+MDL_Q_E)=R2
	      END IF
	      J0=J0+MDL__L				!NEXT SOURCE
	    END DO
	  END IF
	  CALL WNGMV(MDH_FRQ_1-MDH_TYP_1+LB_D,
	1		ODES(MDH_TYP_1),SDES(MDH_TYP_1)) !COPY TYPE AND ..
	  CALL WNGMV(LB_J,ODES(MDH_BITS_1),SDES(MDH_BITS_1))
	ELSE IF (CVT.NE.1) THEN
	  CALL WNCTXT(F_TP,'Cannot convert for different types, '//
	1		'use CONVERT first')
	  GOTO 900
	ELSE						!USE REFERENCE DATA
	  R0=-PHI*PI2					!ROTATION
	  R1=SIN(R0)					!ROTATIONS
	  R0=COS(R0)
	  J0=WNGGJ(SDES(MDH_MODP_1))-A_OB		!OFFSET LIST
	  DO I=0,WNGGJ(SDES(MDH_NSRC_1))-1		!ALL SOURCES
	    R2=R0*WNGGE(A_B(J0+MDL_L_1))+R1*WNGGE(A_B(J0+MDL_M_1)) !ROTATE
	    R3=-R1*WNGGE(A_B(J0+MDL_L_1))+R0*WNGGE(A_B(J0+MDL_M_1))
	    CALL WNGMV(LB_E,R2,A_B(J0+MDL_L_1))		!SET
	    CALL WNGMV(LB_E,R3,A_B(J0+MDL_M_1))
	    J0=J0+MDL__L				!NEXT SOURCE
	  END DO
	  CALL NMOHMD(ODES,SDES)			!COPY HEAD DATA
	END IF
C
	RETURN
C
C ERRORS
C
 900	CONTINUE
	CALL WNCTXT(F_TP,'!/Error converting source list')
	NMOCVS=.FALSE.					!INDICATE ERROR
C
	RETURN
C
C
	END

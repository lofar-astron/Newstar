C+ NMOFND.FOR
C  WNB 910731
C
C  Revisions:
C	WNB 911106	Correct dl, dm
C	WNB 921104	Cater for J2000
C	WNB 921217	Add NMOFNA
C	WNB 930928	Add instrument
C	WNB 931006	Indicate (de-)beam
C	WNB 931110	Make ABS work
C       WNB 950611	Use WNML for LSQ
C
	SUBROUTINE NMOFND
C
C  Find sources on map
C
C  Result:
C	CALL NMOFND		Find sources on map (pos. only)
C	CALL NMOFNA		Find pos/neg sources
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMO_DEF'
	INCLUDE 'LSQ_O_DEF'
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
	INCLUDE 'MDH_O_DEF'		!MODEL HEADER
	INCLUDE 'MDL_O_DEF'		!MODEL LINE
C
C  Parameters:
C
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNMLGA			!GET LSQ AREA
	LOGICAL WNMLTN			!SOLVE LSQ
	LOGICAL NMOSLI,NMOSLG		!GET SOURCE LIST
	LOGICAL NMASTG			!GET A MAP
C
C  Data declarations:
C
	LOGICAL AFIND			!INDICATE AFIND
	INTEGER LSQ			!LEAST SQUARES AREA
	REAL RS(6)			!LSQ COEFFICIENTS
	REAL SOL(6),MU,SD		!LSQ SOLUTION
	INTEGER LIDX			!SOURCE LIST ID
	INTEGER MDLP,MDLPJ,MDLPE	!POINTER TO MODEL
	INTEGER MDLLE,MDLLJ		!LENGTH MODEL LINE
	REAL LINE(0:4095,3)		!MAP LINES
	INTEGER LINID(3)		!BUFFER POINTERS
	  DATA LINID/1,2,3/
	REAL RM(-1:1,-1:1)		!DATA ARRAY
	INTEGER SNAM(0:7)		!MAP NAME
	INTEGER MPHP			!MAP HEADER POINTER
	BYTE MPH(0:MPHHDL-1)		!MAP HEADER
	  INTEGER*2 MPHI(0:MPHHDL/2-1)
	  INTEGER MPHJ(0:MPHHDL/4-1)
	  REAL MPHE(0:MPHHDL/4-1)
	  DOUBLE PRECISION MPHD(0:MPHHDL/8-1)
	  EQUIVALENCE (MPH,MPHI,MPHJ,MPHE,MPHD)
C-
C
C NMOFND
C
	AFIND=.FALSE.
	GOTO 10
C
C NMOFNA
C
	ENTRY NMOFNA
C
	AFIND=.TRUE.
	GOTO 10
C
C INIT
C
 10	CONTINUE
	IF (.NOT.NMOSLI(1024)) THEN		!MAKE SURE THERE IS A LIST
 900	  CONTINUE
	  CALL WNCTXT(F_TP,'Cannot create source list')
	  CALL WNGEX				!STOP
	END IF
	LIDX=7					!SET SOURCES IN LIST 7
	IF (.NOT.WNMLGA(LSQ,LSQ_T_REAL,6)) THEN	!GET LSQ AREA
	   CALL WNCTXT(F_TP,'ERROR: no work area space available')
	   CALL WNGEX				!STOP
	END IF
C
C DO ALL MAPS
C
 100	CONTINUE
	IF (.NOT.NMASTG(FCAIN,SETS,MPH,MPHP,SNAM)) THEN !NO MORE MAPS
	  CALL WNMLFA(LSQ)			!FREE LSQ ARAE
	  CALL WNFCL(FCAIN)			!CLOSE MAP FILE
	  RETURN				!READY
	END IF
	CALL NMOHZD(GMDH(0,LIDX))		!CLEAR HEADER
	IF (MPHI(MPH_EPT_I).EQ.1) THEN		!1950/2000 COORDINATES
	  GMDHJ(MDH_TYP_J,LIDX)=2		!EPOCH TYPE
	  GMDHE(MDH_EPOCH_E,LIDX)=MPHE(MPH_EPO_E) !EPOCH
	ELSE
	  GMDHJ(MDH_TYP_J,LIDX)=1		!EPOCH TYPE
	  GMDHE(MDH_EPOCH_E,LIDX)=0.		!EPOCH
	END IF
	GMDHJ(MDH_BITS_J,LIDX)=MPHJ(MPH_INST_J)	!INSTRUMENT
	GMDHD(MDH_RA_D,LIDX)=MPHD(MPH_RA_D)	!RA
	GMDHD(MDH_DEC_D,LIDX)=MPHD(MPH_DEC_D)	!DEC
	GMDHD(MDH_FRQ_D,LIDX)=MPHD(MPH_FRQ_D)	!FREQ.
	IF (.NOT.NMOSLG(2*MAXSRN,GMDH(0,LIDX))) GOTO 900 !MAKE SURE SPACE
	MDLP=GMDHJ(MDH_MODP_J,LIDX)-A_OB	!MODEL POINTERS
	MDLPJ=(GMDHJ(MDH_MODP_J,LIDX)-A_OB)/LB_J
	MDLPE=(GMDHJ(MDH_MODP_J,LIDX)-A_OB)/LB_E
	MDLLE=MDLHDL/LB_E			!LENGTH MODEL ENTRY
	MDLLJ=MDLHDL/LB_J
C
C START READ
C
	J0=MPHJ(MPH_MDP_J)			!DISK POINTER
	J1=LB_E*MPHJ(MPH_NRA_J)			!LENGTH LINE
	IF (.NOT.WNFRD(FCAIN,J1,LINE(0,LINID(2)),J0)) THEN !READ LINE 1
 910	  CONTINUE
	  CALL WNCTXT(F_TP,'I/O error map reading')
	  CALL WNGEX				!STOP
	END IF
	J0=J0+J1				!DISK POINTER
	IF (.NOT.WNFRD(FCAIN,J1,LINE(0,LINID(3)),J0)) GOTO 910 !READ LINE 2
	J0=J0+J1				!DISK POINTER
C
C DO ALL LINES
C
	DO I=-MPHJ(MPH_NDEC_J)/2+1,MPHJ(MPH_NDEC_J)/2-2
	  I1=LINID(1)				!SHIFT BUFFERS
	  DO I2=1,2
	    LINID(I2)=LINID(I2+1)
	  END DO
	  LINID(3)=I1
	  IF (.NOT.WNFRD(FCAIN,J1,LINE(0,LINID(3)),J0)) GOTO 910 !READ LINE
	  J0=J0+J1				!DISK POINTER
	  IF (I.LT.TAREA(2,1)) GOTO 33		!SKIP LINE
	  IF (I.GT.TAREA(3,1)) GOTO 40		!READY
C
C DO ALL POINTS
C
	  DO I1=MAX(-MPHJ(MPH_NRA_J)/2+1,TAREA(0,1)),
	1		MIN(MPHJ(MPH_NRA_J)/2-2,TAREA(1,1))
	    J=I1+MPHJ(MPH_NRA_J)/2		!OFFSET
	    R0=LINE(J,LINID(2))			!POINT
	    I0=1				!SIGN
	    IF (AFIND) THEN
	      IF (R0.LT.0) I0=-1		!SIGN
	      R0=ABS(R0)			!POINT
	    END IF
	    IF (R0.LT.ABS(0.8*MAPLIM*MPHE(MPH_MAX_E))) GOTO 30 !FORGET
	    IF (GMDHJ(MDH_NSRC_J,LIDX).GE.MAXSRN) THEN	!MAYBE NOT
	      IF (R0.LT.ABS(0.8*A_E(MDLPE+MDL_I_E+
	1		(GMDHJ(MDH_NSRC_J,LIDX)-1)*MDLLE)))
	1			GOTO 30		!FORGET
	    END IF
	    DO I2=-1,1				!GET DATA MATRIX
	      DO I3=-1,1
		RM(I2,I3)=LINE(J+I2,LINID(2+I3))
		IF (RM(I2,I3).EQ.-1E6) GOTO 30	!FORGET
		RM(I2,I3)=I0*RM(I2,I3)		!MAKE ABS
	      END DO
	    END DO
	    IF (RM(0,0).LE.RM(-1,0) .OR. RM(0,0).LE.RM(1,0) .OR.
	1			RM(0,0).LE.RM(0,-1) .OR.
	1			RM(0,0).LE.RM(0,1)) GOTO 30 !FORGET
	    CALL WNMLIA(LSQ,LSQ_I_ALL)		!ZERO LSQ
	    DO I2=-1,1				!SET DATA
	      DO I3=-1,1
		RS(1)=1				!GENERAL ELLIPSOID
		RS(2)=I2
		RS(3)=I3
		RS(4)=I2*I2
		RS(5)=I3*I3
		RS(6)=I2*I3
		R1=RM(I2,I3)			!DATA
		CALL WNMLMN(LSQ,LSQ_C_REAL,RS,1.-.5*(ABS(I3)+ABS(I2))+
	1			.25*ABS(I2*I3),R1) !MAKE EQUATIONS
	      END DO
	    END DO
	    IF (.NOT.WNMLTN(LSQ)) GOTO 30	!CANNOT SOLVE
	    CALL WNMLSN(LSQ,SOL,MU,SD)		!GET SOLUTION
	    R1=SOL(6)*SOL(6)-4*SOL(4)*SOL(5)	!FIND MAX
	    IF (R1.EQ.0) GOTO 30		!FORGET
	    R0=(2*SOL(3)*SOL(4)-SOL(2)*SOL(6))/R1
	    R1=(2*SOL(2)*SOL(5)-SOL(3)*SOL(6))/R1
	    IF (ABS(R0).GT.1 .OR. ABS(R1).GT.1) GOTO 30 !FORGET
	    SOL(1)=SOL(1)+SOL(2)*R0+SOL(3)*R1+SOL(4)*R0*R0+
	1			SOL(5)*R1*R1+SOL(6)*R0*R1 !AMPLITUDE
	    SOL(2)=R1				!DX
	    SOL(3)=R0				!DY
	    IF (AFIND) THEN
	      R0=ABS(SOL(1))
	      SOL(1)=I0*SOL(1)			!CORRECT SIGN
	    ELSE
	      R0=SOL(1)
	    END IF
	    IF (R0.LT.ABS(0.8*MAPLIM*MPHE(MPH_MAX_E))) GOTO 30 !FORGET
	    DO I2=1,MIN(MAXSRN-1,GMDHJ(MDH_NSRC_J,LIDX)) !SET SRC
	      IF (R0.GT.ABS(A_E(MDLPE+MDL_I_E+(I2-1)*MDLLE))) THEN !INSERT
		DO I3=GMDHJ(MDH_NSRC_J,LIDX),I2,-1
		  CALL WNGMV(MDLHDL,
	1		A_E(MDLPE+(I3-1)*MDLLE),
	1		A_E(MDLPE+(I3)*MDLLE))	!MOVE SOURCE
		END DO
 32	        CALL WNGMVZ(MDLHDL,A_E(MDLPE+(I2-1)*MDLLE)) !CLEAR SOURCE
		A_E(MDLPE+MDL_I_E+(I2-1)*MDLLE)=SOL(1) !FILL SOURCE AMPL
		A_E(MDLPE+MDL_L_E+(I2-1)*MDLLE)=
	1		((I1+SOL(2))*MPHD(MPH_SRA_D)+
	1			MPHD(MPH_SHR_D))*(360.*3600.) !SET L
		A_E(MDLPE+MDL_M_E+(I2-1)*MDLLE)=
	1		((I+SOL(3))*MPHD(MPH_SDEC_D)+
	1			MPHD(MPH_SHD_D))*(360.*3600.) !SET M
		A_J(MDLPJ+MDL_ID_J+(I2-1)*MDLLJ)=IDEN !SET ID
		IF (MPHI(MPH_CD_I+7).GT.0) THEN	!SET BEAM
		  I4=MDLBEM_M
		ELSE
		  I4=0
		END IF
		A_B(MDLP+MDL_TP_B+(I2-1)*MDLHDL)=I4 !SET (DE-)BEAM
		CALL NMOEXF(A_J(MDLPJ+(I2-1)*MDLLJ)) !MAKE CORRECT FORMAT
	        IDEN=MAX(1000,MOD(IDEN+1,10000))
	        GMDHJ(MDH_NSRC_J,LIDX)=
	1		MIN(MAXSRN,GMDHJ(MDH_NSRC_J,LIDX)+1) !COUNT
	        GOTO 31
	      END IF
	    END DO
	    I2=MIN(MAXSRN,GMDHJ(MDH_NSRC_J,LIDX)+1) !FILL SOURCE
	    GOTO 32
 31	    CONTINUE
	    DO I2=-1,1				!SET POINTS DONE
	      DO I3=-1,1
	        LINE(J+I2,LINID(2+I3))=-1E6
	      END DO
	    END DO
 30	    CONTINUE
	  END DO				!NEXT POINT
 33	  CONTINUE
	END DO					!NEXT LINE
C
C FINISH MAP
C
 40	CONTINUE
	CALL NMORDM(LIDX,-1)			!ADD SOURCES TO GENERAL AREA
	GOTO 100				!MORE MAPS
C
C
	END

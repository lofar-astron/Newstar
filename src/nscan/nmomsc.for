C+ NMOMSC.FOR
C  WNB 900903
C
C  Revisions:
C	WNB 910403	Add NMOMSL
C	WNB 910903	Add safety for interrupts
C	WNB 910923	Correct typo in safety
C	WNB 920116	No conversion from scan model to input model type
C	HjV 930311	Change some text
C	WNB 930606	Use LB_ iso L_
C	WNB 930628	Line too long
C	WNB 930819	Always 4 Stokes written
C	WNB 931005	Remove call to CV1; text
C	WNB 931008	Add MINST
C
	LOGICAL FUNCTION NMOMSC(FCA,SETSX)
C
C  Calculate model for scan files
C
C  Result:
C
C	NMOMSC_L = NMOMSC( FCA_J:I, SETSX_J(0:7,0:*):IO)
C				Calculate and save the model data in the
C				FCA scan file at all SETS SETSX for model
C				type TP1=0.
C				The routine assumes that NMOMUI has set
C				the correct data action type, and a
C				model (even if empty) is in GDES, after
C				a call to NMODAX.
C	NMOMSL_L = NMOMSC( FCA_J:I, SETSX_J(0:7,0:*):IO, OFFSET_J(0:7):I)
C				As NMOMSC, but OFFSET specifies set offsets
C				to use.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMO_DEF'
	INCLUDE 'MDH_O_DEF'		!MODEL HEADER
	INCLUDE 'MDL_O_DEF'		!MODEL LINE
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'SCH_O_DEF'		!SCAN HEADER
C
C  Parameters:
C
C
C  Entry points:
C
	LOGICAL NMOMSL
C
C  Arguments:
C
	INTEGER FCA			!FILE DESCRIPTOR
	INTEGER SETSX(0:*)		!SETS TO DO
	INTEGER OFFSET(0:7)		!SET OFFSETS
C
C  Function references:
C
	LOGICAL WNFWR			!WRITE FILE
	LOGICAL WNFRD			!READ FILE
	INTEGER WNFEOF			!EOF FILE
	CHARACTER*32 WNTTSG		!SET NAME
	LOGICAL NSCSTL			!GET A SET
	LOGICAL NMORDX			!READ SOURCE FROM SCAN
	LOGICAL NMORDM			!MERGE SOURCES
	LOGICAL NMORDD			!DIFFER SOURCE LISTS
	LOGICAL NMORDC			!COPY SOURCE LISTS
	LOGICAL NMOWRX			!WRITE SOURCE MODEL
	LOGICAL NMOMUP			!SPLIT DATA INTO TYPES
C
C  Data declarations:
C
	INTEGER IMODP			!INPUT MODEL POINTER
	INTEGER OMODP,XMODP		!OUTPUT MODEL POINTER
	INTEGER XMDD			!OUTPUT MODEL DATA POINTER
	INTEGER STHP			!POINTER TO SET HEADER
	INTEGER SNAM(0:7)		!SET NAME
	INTEGER NPOL			!# OF POLARISATIONS
	INTEGER LOCACT			!ACTION
	INTEGER PE1,PE2,PE3		!POINTERS
	REAL UV0(0:3)			!U,V DATA
	REAL 	TF(0:1)			!BAND/TIME SMEARING
	INTEGER MINST			!INSTRUMENT
	DOUBLE PRECISION FRQ0		!BASIC FREQUENCY
	REAL LM0(0:1)			!L,M OFFSET
	INTEGER*2 IFR(0:STHIFR-1)	!IFR LIST
	COMPLEX CMOD(0:3,0:STHIFR-1)	!MODEL
	INTEGER CHSET(0:7)		!SET OFFSETS
	BYTE STH(0:STH__L-1)		!SET HEADER
	  INTEGER*2 STHI(0:STH__L/LB_I-1)
	  INTEGER STHJ(0:STH__L/LB_J-1)
	  REAL STHE(0:STH__L/LB_E-1)
	  DOUBLE PRECISION STHD(0:STH__L/LB_D-1)
	  EQUIVALENCE (STH,STHI,STHJ,STHE,STHD)
	BYTE SCH(0:SCH__L-1)		!SCAN HEADER
	  INTEGER SCHJ(0:SCH__L/LB_J-1)
	  REAL SCHE(0:SCH__L/LB_E-1)
	  EQUIVALENCE (SCH,SCHJ,SCHE)
C-
C
C INIT
C
	NMOMSC=.TRUE.					!ASSUME OK
	DO I=0,7					!ZERO OFFSETS
	  CHSET(I)=0
	END DO
	GOTO 20
C
C NMOMSL
C
	ENTRY NMOMSL(FCA,SETSX,OFFSET)
C
C INIT
C
	NMOMSL=.TRUE.					!ASSUME OK
	DO I=0,7					!SET OFFSETS
	  CHSET(I)=OFFSET(I)
	END DO
	GOTO 20
C
C GENERAL INIT
C
 20	CONTINUE
	SNAM(0)=0					!INIT. SET NAME
	DO I=1,7
	  SNAM(I)=-1
	END DO
	IF (.NOT.NMOMUP()) THEN
 10	  CONTINUE
	  CALL WNCTXT(F_TP,'!/Error reading model from set !AS',
	1		WNTTSG(SNAM,0))
	  MODACT=IAND(MODACT,NOT(NMO_USAGE))		!CANNOT SPLIT TYPES
	  NMOMSC=.FALSE.				!ERROR
C
	  RETURN
	END IF
	IMODP=-1					!START INPUT MODEL
	OMODP=0						!START OUTPUT MODEL
	LOCACT=MODACT					!ACTION
C
C CHECK IF TO SAVE
C
	IF (IAND(MODACT,NMO_SAV).EQ.0) THEN		!NO SAVE WANTED
	  CALL NMOHZD(GMDH(0,6))			!MAKE SURE TYPE KNOWN
	  CALL NMOHMD(GMDH(0,0),GMDH(0,6))
	  RETURN
	END IF
C
C CHECK IF NO USE
C
	IF (IAND(MODACT,NMO_USE).EQ.0) THEN		!NO USE
	  IF (.NOT.NMORDC(0,6)) GOTO 10			!SET NEW
	END IF
C
C DO ALL SETS
C
	DO WHILE (NSCSTL(FCA,SETSX,STH,STHP,SNAM,CHSET)) !DO ALL SETS
	  NPOL=STHI(STH_PLN_I)				!# OF POLARISATIONS
	  IF (IAND(MODACT,NMO_USE).NE.0) THEN		!USE OLD DATA
C
C READ MODEL
C
	    IF (IMODP.NE.STHJ(STH_MDL_J)) THEN		!NEED NEW MODEL
	      LOCACT=MODACT				!SET ACTION
	      IF (.NOT.NMORDX(FCA,STHJ(STH_MDL_J),7)) GOTO 10 !READ SCAN MODEL
	      CALL NMOSRT(1,GMDH(0,7))			!SORT L,M
	      IMODP=STHJ(STH_MDL_J)			!NEW POINTER
	      OMODP=0					!NEW OUT MODEL
C
C CHECK TYPE
C
	      J=GMDHJ(MDH_ACT_J,7)			!PRESERVE ACTION
	      IF (GMDHJ(MDH_TYP_J,0).NE.GMDHJ(MDH_TYP_J,7)) THEN !CONVERT
		IF (GMDHJ(MDH_TYP_J,0).EQ.0) THEN	!COPY TYPE
		  CALL NMOHMD(GMDH(0,7),GMDH(0,0))
		ELSE IF (GMDHJ(MDH_TYP_J,7).EQ.0) THEN
		  CALL NMOHMD(GMDH(0,0),GMDH(0,7))
		END IF					!DO NOT CONVERT TYPE
	      END IF
	      GMDHJ(MDH_ACT_J,7)=J			!RESTORE ACTION
	      CALL NMOHZD(GMDH(0,6))			!NO SOURCES YET
	      CALL NMOHMD(GMDH(0,0),GMDH(0,6))		!SET TYPE
	      IF (GMDHJ(MDH_TYP_J,0).NE.GMDHJ(MDH_TYP_J,7) .OR.
	1			IAND(NMO_SMEAR,GMDHJ(MDH_ACT_J,7)).NE.
	1			IAND(NMO_SMEAR,MODACT)) THEN !DIFF. SMEARING
		LOCACT=IAND(NOT(NMO_USE+NMO_ADD),LOCACT) !SET NO USE, NEW
		IF (.NOT.NMORDC(0,6)) GOTO 10		!COPY NEW
	        IF (IAND(MODACT,NMO_ADD).NE.0) THEN	!ADD OPTION
		  IF (.NOT.NMORDM(7,6)) GOTO 10		!MAKE NEW
		END IF
		CALL NMOAM1(6)				!MERGE SOURCE PARAM.
		CALL NMOSRT(1,GMDH(0,6))		!SORT LIST
	      END IF
	      IF (IAND(LOCACT,NMO_USE).NE.0) THEN	!STILL USE
C
C ADD OPTION
C
		IF (IAND(MODACT,NMO_ADD).NE.0) THEN	!ADD OPTION
		  IF (.NOT.NMORDC(0,6)) GOTO 10		!SET NEW SOURCES
		  IF (.NOT.NMORDM(7,6)) GOTO 10		!ADD OLD
		  CALL NMOAM1(6)			!MERGE PARAMETERS
		  CALL NMOSRT(1,GMDH(0,6))		!AND SORT
C
C MERGE OPTION
C
	        ELSE					!MERGE OPTION
		  IF (GMDHJ(MDH_NSRC_J,7).LE.0) THEN	!NO OLD DATA
		    IF (.NOT.NMORDC(0,6)) GOTO 10	!ALL NEW
		  ELSE
		    IF (.NOT.NMORDD(7,0,6)) GOTO 10	!SPLIT DATA
		  END IF
		  IF (GMDHJ(MDH_NSRC_J,6).GE.
	1			GMDHJ(MDH_NSRC_J,0)) THEN !BETTER TO DO ALL NEW
		    LOCACT=IAND(NOT(NMO_USE+NMO_MER+NMO_ADD),LOCACT) !SET NO USE
		    IF (.NOT.NMORDC(0,6)) GOTO 10	!SET ALL NEW
		  END IF
	        END IF					!END ADD/MERGE
	      END IF					!END STILL USE
	    END IF					!END NEW MODEL
	  END IF					!END USE OLD
C
C SAVE MODEL
C
	  IF (OMODP.EQ.0) THEN				!NEW MODEL
	    IF (IAND(LOCACT,NMO_USE+NMO_MER).EQ.NMO_USE+NMO_MER) THEN !MERGE
	      IF (GMDHJ(MDH_NSRC_J,6).GT.0) THEN	!NEW MODEL
	        XMODP=WNFEOF(FCA)			!WHERE TO WRITE
	        IF (.NOT.NMOWRX(FCA,GMDH(0,0),XMODP)) GOTO 101 !WRITE
	      ELSE
	        XMODP=STHJ(STH_MDL_J)			!LEAVE OLD
	      END IF
	    ELSE
	      XMODP=WNFEOF(FCA)				!WHERE TO WRITE
	      IF (.NOT.NMOWRX(FCA,GMDH(0,6),XMODP)) GOTO 101 !WRITE
	    END IF
	    OMODP=XMODP					!SET WRITTEN
	  END IF
C
C SAVE DATA
C
	  STHJ(STH_MDL_J)=0				!ASSUME ERROR
	  IF (.NOT.WNFWR(FCA,STH__L,STH,STHP)) GOTO 101	!REWRITE SET HEADER
	  IF (.NOT.WNFRD(FCA,LB_I*STHJ(STH_NIFR_J),IFR,
	1		STHJ(STH_IFRP_J))) GOTO 10	!READ IFRS
	  IF (STHJ(STH_MDD_J).EQ.0) THEN		!NO DATA WRITTEN YET
	    XMDD=WNFEOF(FCA)				!WHERE TO WRITE
	    LOCACT=IAND(LOCACT,NOT(NMO_USE))		!CANNOT USE
	  ELSE
	    XMDD=STHJ(STH_MDD_J)			!OLD POINTER
	  END IF
	  CALL NMOMST(GMDHJ(MDH_TYP_J,6),GMDHD(MDH_RA_D,6),
	1		GMDHD(MDH_DEC_D,6),STH,LM0,FRQ0,
	1		TF,MINST)			!GET SOME DATA
	  J0=XMDD					!WRITE POINTER
	  J1=STHJ(STH_SCNP_J)				!READ POINTER
	  DO I=0,STHJ(STH_SCN_J)-1			!ALL SCANS
	    IF (.NOT.WNFRD(FCA,SCH__L,SCH,J1)) GOTO 10	!READ SCAN HEADER
	    J1=J1+STHJ(STH_SCNL_J)			!NEXT READ
	    CALL NMOMUV(GMDHJ(MDH_TYP_J,6),GMDHD(MDH_RA_D,6),
	1		GMDHD(MDH_DEC_D,6),STH,SCH,UV0)	!GET DATA
	    IF (IAND(LOCACT,NMO_USE).NE.0) THEN		!USE SCAN DATA
	      IF (.NOT.WNFRD(FCA,4*STHJ(STH_NIFR_J)*LB_X,
	1		CMOD,J0)) GOTO 10		!READ SCAN MODEL DATA
	      IF (IAND(LOCACT,NMO_ADD).NE.0) THEN	!ADD
	        CALL NMOMUA(0,UV0,LM0,FRQ0,STHE(STH_RTP_E),
	1		NPOL,STHJ(STH_NIFR_J),IFR,TF,MINST,CMOD)
	      ELSE					!MERGE
	        CALL NMOMUA(6,UV0,LM0,FRQ0,STHE(STH_RTP_E),
	1		NPOL,STHJ(STH_NIFR_J),IFR,TF,MINST,CMOD)
	      END IF
	    ELSE					!NO USE SCAN DATA
	      CALL NMOMUC(6,UV0,LM0,FRQ0,STHE(STH_RTP_E),
	1		NPOL,STHJ(STH_NIFR_J),IFR,TF,MINST,CMOD)
	    END IF
	    IF (.NOT.WNFWR(FCA,4*STHJ(STH_NIFR_J)*LB_X,
	1		CMOD,J0)) GOTO 101		!WRITE SCAN MODEL DATA
	    J0=J0+4*STHJ(STH_NIFR_J)*LB_X
	  END DO					!NEXT SCAN
C
C NEXT SET
C
 100	  CONTINUE
	  STHJ(STH_MDL_J)=OMODP				!EVERYTHING OK
	  STHJ(STH_MDD_J)=XMDD
	  IF (.NOT.WNFWR(FCA,STH__L,STH,STHP)) THEN	!REWRITE SET HEADER
 101	    CONTINUE
	    CALL WNCTXT(F_TP,'!/Error writing source data '//
	1		'to Sector header !AS',
	1		WNTTSG(SNAM,0))
	    NMOMSC=.FALSE.
C
	    RETURN
	  END IF
	END DO						!END SETS
C
	RETURN
C
C
	END

C+ NMOUP0.FOR
C  WNB 910801
C
C  Revisions:
C	WNB 911004	Typo in source selection
C	WNB 911230	Logical error in source update
C	WNB 920320	SUN cannot handle empty argument list
C	HjV 920520	HP does not allow extended source lines
C	WNB 930623	Prepare for Spectral Update; remove UP7,UP8,UP9
C	WNB 930708	Correct m.e. print
C	WNB 930819	Remove NMOMUM reference
C	WNB 930825	Use polarisation codes
C	WNB 931006	Text
C	WNB 931008	Add MINST; limit proximity
C	WNB 931011	Limit proximity (compiler sdw error); add SI; MBAS
C	WNB 940821	Add polarisation update and estimate
C       WNB 950611	Use new LSQ routines
C       WNB 950622	Create options to do more sources together
C       WNB 950630	More options
C       WNB 950705	Average extended, large clusters
C       WNB 950706	Add FIT
C	JEN 960415	Corrected bug in QUV-update
C
	LOGICAL FUNCTION NMOUP0(LEXT)
C
C  Update source parameters help routines
C
C  Result:
C
C	NMOUP0_L = NMOUP0( LEXT_J:I)	Create and init the LSQ areas
C					LEXT is type (see MDU)
C	NMOUP9_L = NMOUP9( LEXT_J:I)	Reset and delete LSQ areas
C	NMOUP1_L = NMOUP1( LEXT_J:I, UV0_E(0:3):I, LM0_E(0:1):I, FRQ0_D:I,
C			RTP_E(0:*), NIFR_J:I, IFR_I(0:*):I.
C			TF_E(0:1):I, MINST_J:I, SCPOL_J:I, BASEL_E(0:*):I,
C			MBAS_E:IO, WGT_E(0:*,0:3):I, DAT_E(0:1,0:3,0:*):I,
C			STH_B(*):I, SCH_B(*):I, ANG_E(*):I)
C				Generate LSQ equations. See NMOMU4 for
C				parameters
C	NMOUP2_L = NMOUP2( LEXT_J:I, DX0_E:I, DY0_E:I, LSQA_J(1:4):I, FIT_E:O)
C				Solve flux and position,
C				using DX0 and DY0 as halfwidth in L and M
C				to correct close sources and make averages.
C       			FIT indicates the non-linear loop FIT if
C       			MDU_M_LOOP set.
C	NMOUP3_L = NMOUP3( LEXT_J:I)	Show result
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'
	INCLUDE 'LSQ_O_DEF'
	INCLUDE 'MDH_O_DEF'		!MODEL HEADER
	INCLUDE 'MDL_O_DEF'		!MODEL LINE
	INCLUDE 'MDU_O_DEF'		!UPDATE AREA
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'NMO_DEF'
C
C  Entry points:
C
	LOGICAL NMOUP1,NMOUP2,NMOUP3,NMOUP9
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER LEXT			!TYPE (0,1,2...)
	REAL UV0(0:3)			!UV COORDINATES
	REAL LM0(0:1)			!LM OFFSETS
	DOUBLE PRECISION FRQ0		!FREQUENCY
	REAL RTP(0:*)			!TEL. POSITIONS
	INTEGER NIFR			!# OF INTERFEROMETERS
	INTEGER*2 IFR(0:*)		!INTERFEROMETERS
	REAL TF(0:1)			!INTEGR. TIME, BANDWIDTH
	INTEGER MINST			!INSTRUMENT
	INTEGER SCPOL			!SELECT POL.
	REAL BASEL(0:STHIFR-1)		!BASELINES
	REAL MBAS			!MAX. BASELINE
	REAL WGT(0:STHIFR-1,0:3)	!WEIGHTS
	REAL DAT(0:1,0:STHIFR-1,0:3)	!DATA
	INTEGER*2 STHI(0:*)		!SET HEADER
	BYTE SCH(0:*)			!SCAN HEADER
	REAL ANG(0:2,0:*)		!DIPOLE POSITIONS
	REAL DX0			!WIDTH L
	REAL DY0			!WIDTH M
	INTEGER LSQA(4)			!AVERAGES LSQ AREA
	REAL FIT			!FIT FOR NON-LINEAR
C	
C  Function references:
C
	LOGICAL WNGGVA			!GET AREA
	LOGICAL WNMLGA			!GET LSQ AREA
	INTEGER WNMLGR			!GET ROW POINTER
C
C  Data declarations:
C
	REAL MYDAT(0:1)			!DATA POINT
	INTEGER DCNT			!DATA COUNT
	INTEGER DWGT(0:STHIFR-1)	!DATA TO IQUV CONVERSION SUCCESS
	COMPLEX CDMOD(0:3,0:STHIFR-1)	!DATA TO IQUV CONVERSION
	  REAL DMOD(0:1,0:3,0:STHIFR-1)
	  EQUIVALENCE (CDMOD,DMOD)
	REAL MU,SD			!SOLUTION
	REAL UW,UW0			!WEIGHTS
	REAL WPROX			!CLOSE SOURCES
	INTEGER RG(0:1)			!PRINT RANGE
	INTEGER JP			!POINTER UPDATE AREA
	INTEGER MP			!POINTER MODEL DATA
	INTEGER SP0,SP1			!OFFSET SOL/ME
	INTEGER JR0,JR1			!OFFSET IN SOURCE CALCULATION LIST
C-
C
C UP0
C
	NMOUP0=.TRUE.				!ASSUME OK
	J0=MDL__L/LB_J				!LENGTH IN J OF MODEL LINE
	J3=(GDESJ(MDH_MODP_J)-A_OB)		!MODEL POINTER
	J2=J3/LB_J
	IF (IAND(LEXT,MDU_T_SILM).NE.0) THEN	!# UNKNOWNS
	   I3=4
	ELSE IF (IAND(LEXT,MDU_T_PEST).NE.0) THEN
	   I3=1
	ELSE IF (IAND(LEXT,MDU_T_LM).NE.0) THEN
	   I3=2
	ELSE IF (IAND(LEXT,MDU_T_I).NE.0) THEN
	   I3=1
	ELSE
	   I3=3
	END IF
	DO I=0,GDESJ(MDH_NSRC_J)-1		!ALL SOURCES
	  J1=J3+I*MDL__L			!MODEL POINTER
	  J=J2+I*J0
	  I4=A_B(J1+MDL_TP_B)
	  IF (A_B(J1+MDL_TP1_B).EQ.0 .AND.	!TYPE ZERO
	1		A_E(J+MDL_I_E).NE.0 .AND. !NOT DELETED
	1		IAND(I4,MDLCLN_M).EQ.0)	!NOT CLEAN
	1				THEN	!SELECT
	     IF (.NOT.WNGGVA(MDU__L,A_J(J+MDL_RS_E))) THEN
		NMOUP0=.FALSE.			!CANNOT OBTAIN AREA
		RETURN
	     END IF
	     A_J(J+MDL_RS_E)=(A_J(J+MDL_RS_E)-A_OB)/LB_J !MAKE A_J OFFSET
	     CALL WNGMVZ(MDU__L,A_J(A_J(J+MDL_RS_E))) !CLEAR AREA
	     A_J(A_J(J+MDL_RS_E)+MDU_NUN_J)=I3 	!# PARAMETERS
	     A_J(A_J(J+MDL_RS_E)+MDU_TYPE_J)=LEXT !TYPE
	  ELSE					!NO SELECT
	    A_J(J+MDL_RS_E)=0			!SET NO SELECT
	  END IF
	END DO
C
C ALL SEPARATE
C
	IF (IAND(LEXT,MDU_M_CLUST).EQ.0) THEN
	   DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	      J=J2+I*J0
	      JP=A_J(J+MDL_RS_E) 		!UPDATE AREA POINTER
	      IF (JP.NE.0) THEN			!SELECTED
		 A_J(JP+MDU_NSRC_J)=1 		!# OF SOURCES FOR THIS ONE
	      END IF
	   END DO
C
C CLUSTERED
C
	ELSE
	   DO I=0,GDESJ(MDH_NSRC_J)-1
	      J=J2+I*J0
	      JP=A_J(J+MDL_RS_E)
	      IF (JP.NE.0) THEN
		 IF (A_J(JP+MDU_RAR_J).EQ.0) THEN
		    I0=JP
		    A_J(JP+MDU_OFF_J)=A_J(I0+MDU_NSRC_J)
		    IF (IAND(A_J(JP+MDU_TYPE_J),MDU_M_CONSTR).NE.0) THEN
		       A_J(JP+MDU_OFFS_J)=A_J(I0+MDU_NSRC_J)
		    END IF
		    A_J(I0+MDU_NSRC_J)=A_J(I0+MDU_NSRC_J)+1
		    DO I1=I+1,GDESJ(MDH_NSRC_J)-1
		       J3=J2+I1*J0
		       JP=A_J(J3+MDL_RS_E)
		       IF (JP.NE.0) THEN
			  IF (((A_E(J3+MDL_L_E)-A_E(J+MDL_L_E))
	1		       /SORRAN(0))**2+
	1		       ((A_E(J3+MDL_M_E)-A_E(J+MDL_M_E))
	1		       /SORRAN(1))**2.LT.1) THEN
			     IF (A_J(JP+MDU_RAR_J).EQ.0) THEN
				A_J(JP+MDU_RAR_J)=I0
				A_J(JP+MDU_OFF_J)=A_J(I0+MDU_NSRC_J)
				IF (IAND(A_J(JP+MDU_TYPE_J),
	1			     MDU_M_CONSTR).NE.0) THEN
				   A_J(JP+MDU_OFFS_J)=A_J(I0+MDU_NSRC_J)
				END IF
				A_J(I0+MDU_NSRC_J)=A_J(I0+MDU_NSRC_J)+1
			     END IF
			  END IF
		       END IF
		    END DO
		 END IF
	      END IF
	   END DO
C
C COMBINED
C
	   IF (IAND(LEXT,MDU_M_COMBI)) THEN
	      I0=0				!NONE YET
	      DO I=0,GDESJ(MDH_NSRC_J)-1 	!ALL SOURCES
		 J=J2+I*J0
		 JP=A_J(J+MDL_RS_E) 		!UPDATE AREA POINTER
		 IF (JP.NE.0) THEN 		!SELECTED
		    IF (I0.EQ.0) THEN 		!FIRST
		       I0=JP
		    ELSE
		       IF (A_J(JP+MDU_RAR_J).EQ.0) THEN !NEW ONE
			  A_J(JP+MDU_RAR_J)=I0 	!REFERENCE AREA
			  A_J(JP+MDU_OFF_J)=A_J(I0+MDU_NSRC_J) !OFFSET
			  A_J(JP+MDU_OFFS_J)=A_J(I0+MDU_NSRC_J) !SOL OFFSET
			  A_J(I0+MDU_NSRC_J)=A_J(I0+MDU_NSRC_J)+
	1		       A_J(JP+MDU_NSRC_J) !TOTAL # SOURCES
			  A_J(JP+MDU_NSRC_J)=0
		       ELSE
			  I1=A_J(JP+MDU_RAR_J) 	!OLD REFERENCE
			  A_J(JP+MDU_RAR_J)=I0 	!REFERENCE AREA
			  A_J(JP+MDU_OFF_J)=A_J(JP+MDU_OFF_J)+
	1		       A_J(I1+MDU_OFF_J) !NEW OFFSET
			  A_J(JP+MDU_OFFS_J)=A_J(I1+MDU_OFFS_J) !SOL OFFSET
		       END IF
		    END IF
		 END IF
	      END DO
	   END IF
	END IF
C
C GET AREAS
C
	DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	   J=J2+I*J0
	   JP=A_J(J+MDL_RS_E)			!UPDATE AREA POINTER
	   IF (JP.NE.0) THEN			!SELECTED
	      IF (.NOT.WNGGVA(4*STHIFR*LB_X,
	1	   A_J(JP+MDU_MOD_J))) THEN 	!GET MODEL DATA
		 NMOUP0=.FALSE.			!CANNOT OBTAIN AREA
		 RETURN
	      END IF
	      A_J(JP+MDU_MOD_J)=(A_J(JP+MDU_MOD_J)-A_OB)/LB_X
	      IF (A_J(JP+MDU_NSRC_J).GT.0) THEN !THIS ONE
		 I0=A_J(JP+MDU_NSRC_J)*A_J(JP+MDU_NUN_J)
		 IF (IAND(A_J(JP+MDU_TYPE_J),MDU_M_CONSTR).EQ.0 .OR.
	1	      A_J(JP+MDU_NSRC_J).EQ.1) THEN
		    IF (.NOT.WNMLGA(A_J(JP+MDU_LAR_J),
	1		 LSQ_T_REAL,I0)) THEN 	!GET LSQ AREA
		       NMOUP0=.FALSE. 		!CANNOT OBTAIN AREA
		       RETURN
		    END IF
		 ELSE				!CONSTRAINTS
		    IF (.NOT.WNMLGA(A_J(JP+MDU_LAR_J),
	1		 LSQ_T_REAL+LSQ_T_CONSTRAINT,I0,1,
	1		 A_J(JP+MDU_NUN_J)*(A_J(JP+MDU_NSRC_J)-1))) THEN
		       NMOUP0=.FALSE. 		!CANNOT OBTAIN AREA
		       RETURN
		    END IF
		 END IF
		 IF (IAND(A_J(JP+MDU_TYPE_J),MDU_M_LOOP).NE.0) THEN
		    A_J(JP+MDU_LEN_J)=5*I0*LB_E	!SOLUTION LENGTH
		 ELSE
		    A_J(JP+MDU_LEN_J)=4*I0*LB_E	!SOLUTION LENGTH
		 END IF
		 IF (.NOT.WNGGVA(A_J(JP+MDU_LEN_J),
	1	      A_J(JP+MDU_CEQ_J))) THEN 	!GET SOL, ME, EQUATIONS
		    NMOUP0=.FALSE.    		!CANNOT OBTAIN AREA
		    RETURN
		 END IF
		 A_J(JP+MDU_CEQ_J)=
	1	      (A_J(JP+MDU_CEQ_J)-A_OB)/LB_E !MAKE A_E OFFSET
		 A_J(JP+MDU_SOL_J)=
	1	      A_J(JP+MDU_CEQ_J)+2*I0 	!MAKE SOL OFFSET
		 CALL WNGMVZ(A_J(JP+MDU_LEN_J),A_E(A_J(JP+MDU_CEQ_J)))
	      END IF
	   END IF
	END DO
C
	RETURN
C
C UP9
C
	ENTRY NMOUP9(LEXT)
C
	NMOUP9=.TRUE.				!ASSUME OK
	J0=MDL__L/LB_J				!LENGTH IN J OF MODEL LINE
	J3=(GDESJ(MDH_MODP_J)-A_OB)		!MODEL POINTER
	J2=J3/LB_J
	DO I=0,GDESJ(MDH_NSRC_J)-1		!ALL SOURCES
	  J=J2+I*J0
	  JP=A_J(J+MDL_RS_E)			!UPDATE AREA
	  IF (JP.NE.0) THEN			!SELECTED
	     IF (A_J(JP+MDU_LAR_J).NE.0) THEN 	!LSQ AREA
		CALL WNMLFA(A_J(JP+MDU_LAR_J)) 	!FREE LSQ
	     END IF
	     IF (A_J(JP+MDU_CEQ_J).NE.0) THEN 	!SOLUTION AREAS
		A_J(JP+MDU_CEQ_J)=A_J(JP+MDU_CEQ_J)*LB_E+A_OB
		CALL WNGFVA(A_J(JP+MDU_LEN_J),
	1	     A_J(JP+MDU_CEQ_J))
	     END IF
	     IF (A_J(JP+MDU_MOD_J).NE.0) THEN 	!MODEL AREAS
		A_J(JP+MDU_MOD_J)=A_J(JP+MDU_MOD_J)*LB_X+A_OB
		CALL WNGFVA(4*STHIFR*LB_X,
	1	     A_J(JP+MDU_MOD_J))
	     END IF
	     A_J(J+MDL_RS_E)=JP*LB_J+A_OB
	     CALL WNGFVA(MDU__L,A_J(J+MDL_RS_E)) !FREE AREA
	  END IF
	END DO
C
	RETURN
C
C UP1
C
	ENTRY NMOUP1(LEXT,UV0,LM0,FRQ0,RTP,NIFR,IFR,
	1		TF,MINST,SCPOL,BASEL,MBAS,WGT,DAT,
	1		STHI,SCH,ANG)
C
	NMOUP1=.TRUE.				!ASSUME OK
	J0=MDL__L/LB_J				!LENGTH IN J OF MODEL LINE
	J3=(GDESJ(MDH_MODP_J)-A_OB)		!MODEL POINTER
	J2=J3/LB_J
	UW0=UV0(0)*UV0(0)+UV0(1)*UV0(1)		!WEIGHT
C
C MAKE CORRECT DATA FOR POL UPDATE
C
	IF (IAND(LEXT,MDU_T_QUV).NE.0) THEN	!POL UPDATE
	   IF (STHI(STH_PLN_I).EQ.2) THEN
	      DO I1=0,NIFR-1			!MAKE SURE Q DONE IF ONLY XX,YY
		 DO I2=P_XY,P_YX,P_YX-P_XY
		    WGT(I1,I2)=1.
		    DAT(0,I1,I2)=0.
		    DAT(1,I1,I2)=0.
		 END DO
	      END DO
	   END IF
	   CALL NMOCXI(STHI,SCH,ANG,WGT,DWGT,DAT,CDMOD) !DATA TO IQUV
	END IF
C
C GET MODEL DATA
C
	DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	   J=J2+I*J0
	   JP=A_J(J+MDL_RS_E)
	   IF (JP.NE.0) THEN			!SELECTED
	      CALL NMOMU1(-1,UV0,LM0,FRQ0,RTP,4,
	1	   NIFR,IFR,TF,MINST,
	1	   A_X(A_J(JP+MDU_MOD_J)),I)	!GET MODEL
	   END IF
	END DO
C       
C MAKE CONDITION EQUATIONS
C
	DO I1=0,NIFR-1				!ALL BASELINES
	   IF (BASEL(I1).GT.0) THEN 		!SELECTED
	      UW=UW0*BASEL(I1)*BASEL(I1) 	!WEIGHT
	      DO I=0,GDESJ(MDH_NSRC_J)-1 	!ALL SOURCES
		 J=J2+I*J0
		 JP=A_J(J+MDL_RS_E)
		 IF (JP.NE.0) THEN 		!SELECTED
		    JR0=A_J(JP+MDU_OFFS_J)*A_J(JP+MDU_NUN_J) !COND. EQU. OFFSET
		    MP=A_J(JP+MDU_MOD_J)	!MODEL OFFSET
		    DO WHILE(A_J(JP+MDU_RAR_J).NE.0)
		       JP=A_J(JP+MDU_RAR_J) 	!FIND CORRECT CALCULATION AREA
		    END DO
		    JR0=JR0+A_J(JP+MDU_CEQ_J) 	!OFFSET COND.EQ. IN LIST
		    JR1=JR0+A_J(JP+MDU_NSRC_J)*A_J(JP+MDU_NUN_J) !OFFSET 2ND
		    IF (IAND(LEXT,MDU_T_ILM+MDU_T_SILM+MDU_T_EXT).NE.0) THEN
		       IF (IAND(LEXT,MDU_T_ILM).NE.0 .OR.
	1		    IAND(LEXT,MDU_T_SILM).NE.0) THEN !NORMAL; SI
			  A_E(JR0+0)=A_E(JR0+0)+
	1		       REAL(A_X(MP+4*I1)) !COSINE COEFF.
			  A_E(JR0+1)=A_E(JR0+1)-
	1		       BASEL(I1)*UV0(0)*AIMAG(A_X(MP+4*I1))
			  A_E(JR0+2)=A_E(JR0+2)-
	1		       BASEL(I1)*UV0(1)*AIMAG(A_X(MP+4*I1))
			  A_E(JR1+0)=A_E(JR1+0)+
	1		       AIMAG(A_X(MP+4*I1)) !SINE COEFF.
			  A_E(JR1+1)=A_E(JR1+1)+
	1		       BASEL(I1)*UV0(0)*REAL(A_X(MP+4*I1))
			  A_E(JR1+2)=A_E(JR1+2)+
	1		       BASEL(I1)*UV0(1)*REAL(A_X(MP+4*I1))
			  IF (IAND(LEXT,MDU_T_SILM).NE.0) THEN
			     IF (GDESJ(MDH_TYP_J).NE.0) THEN !FREQ. GIVEN
				A_E(JR0+3)=A_E(JR0+3)+REAL(A_X(MP+4*I1))*
	1			     LOG(FRQ0/GDESD(MDH_FRQ_D))
				A_E(JR1+3)=A_E(JR1+3)+AIMAG(A_X(MP+4*I1))*
	1			     LOG(FRQ0/GDESD(MDH_FRQ_D))
			     ELSE
				A_E(JR0+3)=A_E(JR0+3)+REAL(A_X(MP+4*I1))
				A_E(JR1+3)=A_E(JR1+0)+AIMAG(A_X(MP+4*I1))
			     END IF
			  END IF
		       ELSE			!EXTEND
			  A_E(JR0+0)=A_E(JR0+0)-REAL(A_X(MP+4*I1))*
	1		       ((BASEL(I1)*UV0(0))**2) !COSINE
			  A_E(JR0+1)=A_E(JR0+1)-REAL(A_X(MP+4*I1))*
	1		       ((BASEL(I1)*UV0(1))**2)
			  A_E(JR0+2)=A_E(JR0+2)-REAL(A_X(MP+4*I1))*
	1		       UV0(0)*UV0(1)*((BASEL(I1))**2)
			  A_E(JR1+0)=A_E(JR1+0)-AIMAG(A_X(MP+4*I1))*
	1		       ((BASEL(I1)*UV0(0))**2) !SINE
			  A_E(JR1+1)=A_E(JR1+1)-AIMAG(A_X(MP+4*I1))*
	1		       ((BASEL(I1)*UV0(1))**2)
			  A_E(JR1+2)=A_E(JR1+2)-
	1		       AIMAG(A_X(MP+4*I1))*UV0(0)*UV0(1)*
	1		       ((BASEL(I1))**2)
		       END IF
		    ELSE IF (IAND(LEXT,MDU_T_I).NE.0) THEN !I
		       A_E(JR0+0)=A_E(JR0+0)+
	1		    REAL(A_X(MP+4*I1)) 	!COSINE COEFF.
		       A_E(JR1+0)=A_E(JR1+0)+
	1		    AIMAG(A_X(MP+4*I1)) !SINE COEFF.
		    ELSE IF (IAND(LEXT,MDU_T_LM).NE.0) THEN !LM
		       A_E(JR0+0)=A_E(JR0+0)-
	1		    BASEL(I1)*UV0(0)*AIMAG(A_X(MP+4*I1))
		       A_E(JR0+1)=A_E(JR0+1)-
	1		    BASEL(I1)*UV0(1)*AIMAG(A_X(MP+4*I1))
		       A_E(JR1+0)=A_E(JR1+0)+
	1		    BASEL(I1)*UV0(0)*REAL(A_X(MP+4*I1))
		       A_E(JR1+1)=A_E(JR1+1)+
	1		    BASEL(I1)*UV0(1)*REAL(A_X(MP+4*I1))
		    ELSE IF (IAND(LEXT,MDU_T_QUV).NE.0) THEN !POL
		       DO I2=0,2 		!Q,U,V
			  A_E(JR0+I2)=A_E(JR0+I2)+REAL(A_X(MP+4*I1)) !I
			  A_E(JR1+I2)=A_E(JR1+I2)+AIMAG(A_X(MP+4*I1))
		       END DO
		    ELSE			!POL ESTIMATE !!!
		    END IF
		 END IF				!SELECTED COMPONENT
	      END DO				!MODELS
C
C DATA
C
	      MYDAT(0)=0			!NO DATA
	      MYDAT(1)=0
	      DCNT=0
	      IF (IAND(LEXT,MDU_T_ILM+MDU_T_EXT+MDU_T_SILM+
	1	   MDU_T_LM+MDU_T_I).NE.0) THEN
		 IF (IAND(SCPOL,XX_P).NE.0 .AND.
	1	      WGT(I1,0).GT.0) THEN 	!USE XX
		    MYDAT(0)=MYDAT(0)+DAT(0,I1,0)
		    MYDAT(1)=MYDAT(1)+DAT(1,I1,0)
		    DCNT=DCNT+1
		 END IF
		 IF (IAND(SCPOL,YY_P).NE.0 .AND.
	1	      WGT(I1,3).GT.0) THEN 	!USE YY
		    MYDAT(0)=MYDAT(0)+DAT(0,I1,3)
		    MYDAT(1)=MYDAT(1)+DAT(1,I1,3)
		    DCNT=DCNT+1
		 END IF
		 IF (DCNT.GT.0) THEN
		    MYDAT(0)=MYDAT(0)/DCNT
		    MYDAT(1)=MYDAT(1)/DCNT
		 END IF
	      END IF
C
C MAKE EQUATIONS
C
	      DO I=0,GDESJ(MDH_NSRC_J)-1	!ALL SOURCES
		 J=J2+I*J0
		 JP=A_J(J+MDL_RS_E)
		 IF (JP.NE.0) THEN
		    IF (A_J(JP+MDU_LAR_J).NE.0) THEN !SOLVE THIS ONE
		       I0=A_J(JP+MDU_NSRC_J)*A_J(JP+MDU_NUN_J)
		       JR0=A_J(JP+MDU_CEQ_J) 	!OFFSET COND.EQ. IN LIST
		       JR1=JR0+I0  	 	!OFFSET 2ND
		       SP0=A_J(JP+MDU_SOL_J) 	!SOL. OFFSET
		       SP1=SP0+I0 	 	!2ND
		       IF (IAND(LEXT,MDU_T_ILM+MDU_T_SILM+MDU_T_EXT+
	1		    MDU_T_LM+MDU_T_I).NE.0) THEN
			  IF (DCNT.GT.0) THEN
			     CALL WNMLMN(A_J(JP+MDU_LAR_J),LSQ_C_REAL,
	1			  A_E(JR0),UW,MYDAT(0)) !COSINE
			     CALL WNMLMN(A_J(JP+MDU_LAR_J),LSQ_C_REAL,
	1			  A_E(JR1),UW,MYDAT(1)) !SINE
			  END IF
		       ELSE IF (IAND(LEXT,MDU_T_QUV).NE.0) THEN !POL
			  DO I2=0,2  	 	!Q,U,V
			     DO I4=0,I0-1
				A_E(SP0+I4)=0
				A_E(SP1+I4)=0
			     END DO
			     DO I4=0,A_J(JP+MDU_NSRC_J)-1
				A_E(SP0+I4*A_J(JP+MDU_NUN_J)+I2)=
	1			     A_E(JR0+I4*A_J(JP+MDU_NUN_J)+I2)
				A_E(SP1+I4*A_J(JP+MDU_NUN_J)+I2)=
	1			     A_E(JR1+I4*A_J(JP+MDU_NUN_J)+I2)
			     END DO
C JEN: Changed I2 (=0-2) to I2+1 (=1-3): because Q=1, U=2, V=3
			     CALL WNMLMN(A_J(JP+MDU_LAR_J),LSQ_C_REAL,
	1			  A_E(SP0),UW,DMOD(0,I2+1,I1)) !COS
			     CALL WNMLMN(A_J(JP+MDU_LAR_J),LSQ_C_REAL,
	1			  A_E(SP1),UW,DMOD(1,I2+1,I1)) !SIN
			  END DO
		       ELSE			!POL ESTIMATE !!	
		       END IF
		       CALL WNGMVZ(2*LB_E*I0,A_E(A_J(JP+MDU_CEQ_J)))
		    END IF	 	 	!SOLVE
		 END IF				!SELECTED
	      END DO				!SOURCES
	   END IF				!SELECTED	
	   MBAS=MAX(MBAS,BASEL(I1))
	END DO					!IFR LOOP
C
	RETURN
C
C UP2
C
	ENTRY NMOUP2(LEXT,DX0,DY0,LSQA,FIT)
C
	NMOUP2=.TRUE.				!ASSUME OK
	FIT=-1					!START FIT
	J0=MDL__L/LB_J				!LENGTH IN J OF MODEL LINE
	J3=(GDESJ(MDH_MODP_J)-A_OB)		!MODEL POINTER
	J2=J3/LB_J
C
C SET CONSTRAINTS
C
	IF (IAND(LEXT,MDU_M_CONSTR).NE.0) THEN
	   DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	      J=J2+I*J0
	      JP=A_J(J+MDL_RS_E) 		!AREA POINTER
	      IF (JP.NE.0) THEN			!SELECTED
		 IF (A_J(JP+MDU_LAR_J).NE.0) THEN !TO SOLVE
		    IF (A_J(JP+MDU_NSRC_J).GT.1) THEN
		       I0=A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J) !# UNKNOWNS
		       DO I2=0,I0-A_J(JP+MDU_NUN_J)-1 !CONSTRAINTS
			  DO I3=0,I0-1 		!TOTAL # UNKNOWNS
			     I4=WNMLGR(A_J(JP+MDU_LAR_J),I3) !ROW POINTER
			     A_D(I4+I0+I2)=0 	!EMPTY
			  END DO
		       END DO
		       DO I2=0,A_J(JP+MDU_NUN_J)-1
			  DO I3=0,A_J(JP+MDU_NSRC_J)-2
			     I4=WNMLGR(A_J(JP+MDU_LAR_J),
	1			  I3*A_J(JP+MDU_NUN_J)+I2) !ROW
			     A_D(I4+I0+I3*A_J(JP+MDU_NUN_J)+I2)=1 !SET
			  END DO
		       END DO
		    END IF
		 END IF
	      END IF
	   END DO
	END IF
C
C SOLVE
C
	DO I=0,GDESJ(MDH_NSRC_J)-1		!ALL SOURCES
	   J=J2+I*J0
	   JP=A_J(J+MDL_RS_E)			!AREA POINTER
	   IF (JP.NE.0) THEN			!SELECTED
	      IF (A_J(JP+MDU_LAR_J).NE.0) THEN	!TO SOLVE
		 I0=A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J) !# OF UNKNOWNS
		 SP0=A_J(JP+MDU_SOL_J)
		 SP1=SP0+I0
		 IF (IAND(LEXT,MDU_M_LOOP+MDU_M_ELOOP).NE.MDU_M_LOOP) THEN
		    CALL WNMLTR(A_J(JP+MDU_LAR_J),I1) !SOLVE
		    IF (IAND(LEXT,MDU_M_ELOOP).EQ.0) THEN
		       CALL WNMLSN(A_J(JP+MDU_LAR_J),
	1		    A_E(SP0),MU,SD) 	!SOLVE
		    END IF
		    CALL WNMLME(A_J(JP+MDU_LAR_J),
	1		 A_E(SP1)) 		!ERRORS
		 ELSE
		    DO I1=0,I0-1		!RESTORE SOL
		       A_E(SP0+I1)=A_E(SP1+I0+I1)
		       A_E(SP1+I1)=1
		    END DO
		    CALL WNMLNR(A_J(JP+MDU_LAR_J),I1,A_E(SP0),MU,SD) !SOLVE
		    FIT=MAX(FIT,SD)		!FITTING PRECISION
		    DO I1=0,I0-1		!RESTORE SOLUTION
		       R0=A_E(SP1+I0+I1)	!OLD SOLUTION
		       A_E(SP1+I0+I1)=A_E(SP0+I1) !NEW SOLUTION
		       A_E(SP0+I1)=A_E(SP0+I1)-R0 !DIFFERENCE SOLUTION
		    END DO
		 END IF
	      END IF
	   END IF
	END DO
C
C GET SOLUTIONS
C
	IF (IAND(LEXT,MDU_M_CONSTR).EQ.0) THEN
	   DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	      J=J2+I*J0
	      JP=A_J(J+MDL_RS_E) 		!AREA POINTER
	      IF (JP.NE.0) THEN			!SELECTED
		 J1=A_J(JP+MDU_OFF_J) 		!OFFSET THIS ONE
		 I1=A_J(JP+MDU_OFFS_J) 		!SOLUTION OFFSET
		 DO WHILE(A_J(JP+MDU_RAR_J).NE.0)
		    JP=A_J(JP+MDU_RAR_J) 	!FIND CORRECT CALCULATION AREA
		 END DO
		 I0=A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J)
		 SP0=A_J(JP+MDU_SOL_J)+J1*A_J(JP+MDU_NUN_J) !SOLUTION POINTERS
		 SP1=SP0+I0
		 I1=A_J(JP+MDU_SOL_J)+I1*A_J(JP+MDU_NUN_J) !SOLUTION POINTERS
		 DO I2=0,A_J(JP+MDU_NUN_J)-1
		    A_E(SP0+I2)=A_E(I1+I2) 		!SET ALL SOLUTIONS
		    A_E(SP1+I2)=A_E(I1+I0+I2)
		 END DO
	      END IF
	   END DO
	END IF
C
C CONVERT SOLUTIONS
C
	DO I=0,GDESJ(MDH_NSRC_J)-1		!ALL SOURCES
	   J=J2+I*J0
	   JP=A_J(J+MDL_RS_E)			!AREA POINTER
	   IF (JP.NE.0) THEN			!SELECTED
	      J1=A_J(JP+MDU_OFF_J)		!OFFSET THIS ONE
	      DO WHILE(A_J(JP+MDU_RAR_J).NE.0)
		 JP=A_J(JP+MDU_RAR_J) 		!FIND CORRECT CALCULATION AREA
	      END DO
	      I0=A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J)
	      SP0=A_J(JP+MDU_SOL_J)+J1*A_J(JP+MDU_NUN_J) !SOLUTION POINTERS
	      SP1=SP0+I0
	      IF (IAND(LEXT,MDU_T_ILM+MDU_T_SILM+MDU_T_I).NE.0) THEN !NORMAL
		 A_E(SP0)=A_E(SP0)*A_E(J+MDL_I_E) !CORRECT AMPLITUDE
		 A_E(SP1)=A_E(SP1)*ABS(A_E(J+MDL_I_E))
	      ELSE IF (IAND(LEXT,MDU_T_EXT).NE.0) THEN !EXTENDED
		 DO I2=0,2
		    A_E(SP0+I2)=A_E(SP0+I2)/3600./DEG/3600./DEG
		    A_E(SP1+I2)=A_E(SP1+I2)/3600./DEG/3600./DEG
		 END DO
	      ELSE IF (IAND(LEXT,MDU_T_QUV).NE.0) THEN !POL
		 DO I2=0,2
		    A_E(SP0+I2)=A_E(SP0+I2)*A_E(J+MDL_I_E)
		    A_E(SP1+I2)=A_E(SP1+I2)*ABS(A_E(J+MDL_I_E))
		 END DO
	      END IF
C
C CLOSE SOURCES
C
	      IF (IAND(LEXT,MDU_M_CLUST).EQ.0) THEN
		 WPROX=0			!DOWN WEIGHT FOR CLOSE SOURCES
		 DO I1=0,GDESJ(MDH_NSRC_J)-1 	!ALL SOURCES
		    I0=J2+I1*J0			!MODEL POINTER
		    IF (A_J(I0+MDL_RS_E).NE.0) THEN !SELECTED
		       R0=-ABS(A_E(I0+MDL_L_E)-A_E(J+MDL_L_E))/DX0 !BEAM OFFS
		       R1=-ABS(A_E(I0+MDL_M_E)-A_E(J+MDL_M_E))/DY0
		       IF (R0.GT.-10 .AND. R1.GT.-10)
	1		    WPROX=WPROX+EXP(R0)*EXP(R1)
		    END IF
		 END DO
		 DO I2=0,2			!DOWN WEIGHT
		    A_E(SP0+I2)=A_E(SP0+I2)/WPROX
		    A_E(SP1+I2)=A_E(SP1+I2)/WPROX
		 END DO
	      END IF
	   END IF
	END DO
C
C APPLY CORRECTIONS
C
	DO I=0,GDESJ(MDH_NSRC_J)-1		!ALL SOURCES
	   J1=J3+I*MDL__L			!MODEL POINTER
	   J=J2+I*J0
	   JP=A_J(J+MDL_RS_E)			!AREA POINTER
	   IF (JP.NE.0) THEN			!SELECTED
	      I0=A_J(JP+MDU_OFF_J)		!OFFSET THIS ONE
	      DO WHILE(A_J(JP+MDU_RAR_J).NE.0)
		 JP=A_J(JP+MDU_RAR_J) 		!FIND CORRECT CALCULATION AREA
	      END DO
	      SP0=A_J(JP+MDU_SOL_J)+I0*A_J(JP+MDU_NUN_J) !SOLUTION POINTERS
	      SP1=SP0+A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J)
	      IF (IAND(LEXT,MDU_T_ILM+MDU_T_SILM).NE.0) THEN !NORMAL
		 R0=A_E(J+MDL_I_E)		!OLD AMPL.
		 A_E(J+MDL_I_E)=A_E(J+MDL_I_E)+A_E(SP0) !AMPL.
		 IF (A_E(J+MDL_I_E).NE.0 .AND. A_E(SP1).NE.0) THEN !AVERAGE
		    R1=(R0/A_E(SP1))**2 	!WEIGHT
		    R0=R0/A_E(J+MDL_I_E)
		    CALL WNMLMN(LSQA(1),LSQ_C_REAL,
	1		 1E0,R1,R0)
		 END IF
		 A_E(J+MDL_L_E)=A_E(J+MDL_L_E)+A_E(SP0+1)/3600./DEG !L
		 IF (A_E(SP1+1).NE.0) THEN	!AVERAGE L
		    CALL WNMLMN(LSQA(2),LSQ_C_REAL,
	1		 1E0,1./(A_E(SP1+1)**2),-A_E(SP0+1))
		 END IF
		 A_E(J+MDL_M_E)=A_E(J+MDL_M_E)+A_E(SP0+2)/3600./DEG !M
		 IF (A_E(SP1+2).NE.0) THEN 	!AVERAGE M
		    CALL WNMLMN(LSQA(3),LSQ_C_REAL,
	1		 1E0,1./(A_E(SP1+2)**2),-A_E(SP0+2))
		 END IF
		 IF (IAND(LEXT,MDU_T_SILM).NE.0) THEN !SI
		    A_E(J+MDL_SI_E)=A_E(J+MDL_SI_E)+A_E(SP0+3) !SI
		    IF (A_E(SP1+3).NE.0) THEN	!AVERAGE SI
		       CALL WNMLMN(LSQA(4),LSQ_C_REAL,
	1		    1E0,1./(A_E(SP1+3)**2),-A_E(SP0+3))
		    END IF
		 END IF
	      ELSE IF (IAND(LEXT,MDU_T_I).NE.0) THEN !I
		 R0=A_E(J+MDL_I_E)		!OLD AMPL.
		 A_E(J+MDL_I_E)=A_E(J+MDL_I_E)+A_E(SP0) !AMPL.
		 IF (A_E(J+MDL_I_E).NE.0 .AND. A_E(SP1).NE.0) THEN !AVERAGE
		    R1=(R0/A_E(SP1))**2 	!WEIGHT
		    R0=R0/A_E(J+MDL_I_E)
		    CALL WNMLMN(LSQA(1),LSQ_C_REAL,
	1		 1E0,R1,R0)
		 END IF
	      ELSE IF (IAND(LEXT,MDU_T_LM).NE.0) THEN !LM
		 A_E(J+MDL_L_E)=A_E(J+MDL_L_E)+A_E(SP0+0)/3600./DEG !L
		 IF (A_E(SP1+0).NE.0) THEN	!AVERAGE L
		    CALL WNMLMN(LSQA(1),LSQ_C_REAL,
	1		 1E0,1./(A_E(SP1+0)**2),-A_E(SP0+0))
		 END IF
		 A_E(J+MDL_M_E)=A_E(J+MDL_M_E)+A_E(SP0+1)/3600./DEG !M
		 IF (A_E(SP1+1).NE.0) THEN 	!AVERAGE M
		    CALL WNMLMN(LSQA(2),LSQ_C_REAL,
	1		 1E0,1./(A_E(SP1+1)**2),-A_E(SP0+1))
		 END IF
	      ELSE IF (IAND(LEXT,MDU_T_EXT).NE.0) THEN !EXTENDED
		 DO I1=0,2
		    A_E(J+MDL_EXT_E+I1)=A_E(J+MDL_EXT_E+I1)+A_E(SP0+I1)
		 END DO
		 DO I1=0,2			!AVERAGES
		    IF (A_E(SP1+I1).NE.0) THEN
		       CALL WNMLMN(LSQA(I1+1),LSQ_C_REAL,
	1		    1E0,1./(A_E(SP1+I1)**2),-A_E(SP0+I1))
		    END IF
		 END DO
		 I2=A_B(J1+MDL_BITS_B)		!BITS
		 I2=IOR(I2,1)			!SET EXTENDED
		 A_B(J1+MDL_BITS_B)=I2
	      ELSE IF (IAND(LEXT,MDU_T_QUV).NE.0) THEN !POL
		 DO I1=0,2
		    R0=A_E(J+MDL_Q_E+I1) 	!OLD AMPL.
		    A_E(J+MDL_Q_E+I1)=A_E(J+MDL_Q_E+I1)+
	1		 A_E(SP0+I1)/A_E(J+MDL_I_E)
		    IF (A_E(J+MDL_Q_E+I1).NE.0 .AND.
	1		 A_E(SP1+I1).NE.0) THEN !AVER
		       R1=(R0/A_E(SP1+I1))**2 	!WEIGHT
		       R0=R0/A_E(J+MDL_Q_E+I1)
		       CALL WNMLMN(LSQA(I1+1),LSQ_C_REAL,
	1		    1E0,R1,R0)
		    END IF
		 END DO
	      ELSE				!POL ESTIMATE !!
	      END IF
	   END IF
	END DO
C
	RETURN
C
C UP3
C
	ENTRY NMOUP3(LEXT)
C
	NMOUP3=.TRUE.				!ASSUME OK
	RG(0)=1					!PRINT RANGE
	RG(1)=GDESJ(MDH_NSRC_J)
	J0=MDL__L/LB_J				!LENGTH IN J OF MODEL LINE
	J3=(GDESJ(MDH_MODP_J)-A_OB)		!MODEL POINTER
	J2=J3/LB_J
	IF (IAND(LEXT,MDU_M_ELOOP).NE.0) THEN	!RESET M.E. IN SOL.
	   DO I=0,GDESJ(MDH_NSRC_J)-1 		!ALL SOURCES
	      J=J2+I*J0
	      JP=A_J(J+MDL_RS_E) 		!AREA POINTER
	      IF (JP.NE.0) THEN			!SELECTED
		 IF (A_J(JP+MDU_LAR_J).NE.0) THEN !TO SOLVE
		    I0=A_J(JP+MDU_NUN_J)*A_J(JP+MDU_NSRC_J) !# OF UNKNOWNS
		    SP0=A_J(JP+MDU_SOL_J)
		    SP1=SP0+I0
		    DO I1=0,I0-1		!COPY M.E.
		       A_E(SP0+I1)=A_E(SP1+I1)
		    END DO
		 END IF
	      END IF
	   END DO
	END IF
	CALL NMOPRU(F_P,RG)			!PRINT
C
	RETURN
C
C
	END





C+ NSCLLI.FOR
C  CMV 941012
C
C  Revisions:
C	CMV 941012	Split off from NSCLOD
C	CMV 941111	Also update MEDIAD
C	CMV 950123	Option to scan the tape on parity errors
C	CMV 950202	Pass calculated size to MEDIAD for ARCHIVE option
C	CMV 950412	Add PUT= command to change status to RCV
C	CMV 950509	Also pass OH-nr, pass position separately
C       HjV 960111	Change CONTLINE in OBSMODE
C	CMV 960311	Account for multiple IF sets
C       HjV 961107	Use original Online Version nr. iso. modified
C			If SFREQ negative, make it zero
C			Change MOSTYP in UNDEFINED iso. UNKNOWN
C
C
	SUBROUTINE NSCLLI(TYP,VOLUME,LABEL,OH_NO,FVERS,ORG_OLSYS,
	1		FDW,FDWI,FDWJ,
	1		STH,STHI,STHJ,STHE,STHD,
	1		OHW,OHWI,OHWJ,OHWE,OHWD,
	1		SCW,SCWI,SCWJ,SCWE,SCWD)
C
C  List header and optionally update the archive
C
C  Result:
C
C	CALL NSCLOD(TYP_J:I, VOLUME_C(80):I,LABEL_J:I, ...)	
C				List WSRT data from headers if TYP is 1, 
C				or list and update Scissor if TYP is 2.
C				VOLUME is the name of the volume or blank
C				LABEL is the label on the input tape
C				FVERS is the tape-format version
C				ORG_OLSYS is original Online Version nr.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NSC_DEF'			!FOR OPTION AND SRTRCL
	INCLUDE 'STH_O_DEF'			!SET HEADER
	INCLUDE 'FDW_O_DEF'			!FD BLOCK
	INCLUDE 'OHW_O_DEF'			!OH BLOCK
	INCLUDE 'SCW_O_DEF'			!SC BLOCK
C
C Needed for DWELT,DRADT
C
	INCLUDE 'SHW_O_DEF'			!SH BLOCK
	INCLUDE 'SHW_T_DEF'
	INCLUDE 'IHW_O_DEF'			!IH BLOCK
	INCLUDE 'IHW_T_DEF'
C
C  Arguments:
C
	INTEGER TYP				! 1:LIST 2:LIST AND ARCHIVE
	CHARACTER VOLUME*(*)			!VOLUME LABEL IF ANY
	INTEGER LABEL				!LABEL NUMBER
	INTEGER OH_NO				!OH-Number
	INTEGER FVERS				!VERSION OF TAPE-FORMAT
	INTEGER ORG_OLSYS			!Original Online Version nr.
C
	BYTE STH(0:STHHDL-1)			!SET HEADER
	  INTEGER*2 STHI(0:STHHDL/2-1)
	  INTEGER   STHJ(0:STHHDL/4-1)
	  REAL STHE(0:STHHDL/4-1)
	  REAL*8 STHD(0:STHHDL/8-1)
	BYTE FDW(0:FDWHDL-1)			!FD
	  INTEGER*2 FDWI(0:FDWHDL/2-1)
	  INTEGER   FDWJ(0:FDWHDL/4-1)
	BYTE OHW(0:OHWHDL-1)			!OH
	  INTEGER*2 OHWI(0:OHWHDL/2-1)
	  INTEGER   OHWJ(0:OHWHDL/4-1)
	  REAL OHWE(0:OHWHDL/4-1)
	  REAL*8 OHWD(0:OHWHDL/8-1)
	BYTE SCW(0:SCWHDL-1)			!SC
	  INTEGER*2 SCWI(0:SCWHDL/2-1)
	  INTEGER   SCWJ(0:SCWHDL/4-1)
	  REAL*4 SCWE(0:SCWHDL/4-1)
	  REAL*8 SCWD(0:SCWHDL/8-1)
C
C  Function references:
C
	LOGICAL WNFRD				!READ FROM FCA
	LOGICAL WNFOPF				!OPEN LABEL
	INTEGER WNCALN				!LENGTH OF STRING
	INTEGER WNFSCI				!CALL DATABASE
C
C  Data declarations:
C
	INTEGER DURATION			!DURATION OF OBS. IN SEC.
	INTEGER WSETS(0:1)			!FIRST, LAST SET
	INTEGER UTD,UTM				!UT START-TIME DAY,MONTH
	INTEGER OBSTIME				!START-TIME OF OBS.
	INTEGER EPO				!EPOCHE OF OBS.
	INTEGER DWELT,DRADT			!TIMING OF MOSAIC
	INTEGER SFREQ				!DELTA FREQ.
	DOUBLE PRECISION RA1,DEC1		!RA AND DEC OF OBS.
	REAL POS9				!POSITION TEL. 9
	CHARACTER*4 BECODE			!BACKEND NAME
	CHARACTER*2 DIPC			!DIPOLE SETTING
	CHARACTER*32 POLC			!POLARISATIONS
	CHARACTER*10 OBSMODE			!OBSERVATION MODE
	CHARACTER*32 ARUSE			!ARRAY USE
	CHARACTER*10 MOSTYP			!MOSAIC TYPE
	CHARACTER*1024 WARC			!BUFFER FOR ARCHIVE
	BYTE RWBUF(SRTRCL)			!I/O BUFFER FOR CHECK
	INTEGER IPROJ				!PROJECT NUMBER
C
	INTEGER DAYS(12)			!DAYS PER MONTH
	   DATA DAYS/31,28,31,30,31,30,31,31,30,31,30,31/
C
	BYTE SHW(0:SHWHDL-1)			!SH RECORD
	  INTEGER*2 SHWI(0:SHWHDL/2-1)
	  INTEGER   SHWJ(0:SHWHDL/4-1)
	  REAL SHWE(0:SHWHDL/4-1)
	  EQUIVALENCE (SHW,SHWI,SHWJ,SHWE)
	BYTE IHW(0:IHWHDL-1)			!IH RECORD
	  INTEGER*2 IHWI(0:IHWHDL/2-1)
	  INTEGER   IHWJ(0:IHWHDL/4-1)
	  REAL IHWE(0:IHWHDL/4-1)
	  EQUIVALENCE (IHW,IHWI,IHWJ,IHWE)
C
	DURATION=(OHWD(OHW_HAEND_D)-OHWD(OHW_HAST_D))*DCRTSC
C
	IPROJ=OHWI(OHW_PROJECT_I)
	IF (OHWI(OHW_ALLOC_I).EQ.971) THEN
	  IPROJ=IPROJ+3000				! 97A
	ELSE IF (OHWI(OHW_ALLOC_I).EQ.972) THEN
	  IPROJ=IPROJ+4000				! 97B
	ELSE IF (OHWI(OHW_ALLOC_I).EQ.981) THEN
	  IPROJ=IPROJ+5000				! 98A
	ELSE IF (OHWI(OHW_ALLOC_I).EQ.982) THEN
	  IPROJ=IPROJ+6000				! 98B
	ELSE IF (OHWI(OHW_ALLOC_I).EQ.991) THEN
	  IPROJ=IPROJ+7000				! 99A
	ELSE IF (OHWI(OHW_ALLOC_I).EQ.992) THEN
	  IPROJ=IPROJ+8000				! 99B
	ENDIF
C
	CALL WNCTXT(F_TP,
	1	   '!4$UJ: !7$UJ !-12$AD !6$UI '//
	1	   '!2$ZJ!2$ZJ !2$AF !2$AF '//
	1	   '!2$ZI!2$ZI!2$ZI !2$ZI!2$ZI '//
	1	   '!10$DPF15.5 !10$DAF15.5',
	1		LABEL,
	1		OHWJ(OHW_VOLGNR_J),
	1		OHW(OHW_FIELD_1),OHW_FIELD_N,
	1		IPROJ,
	1		(DURATION/3600),MOD(DURATION/60,60),
	1		OHW(OHW_TYPE_1),OHW_TYPE_N,
	1		OHW(OHW_SPEFU_1),OHW_SPEFU_N,
	1		OHWI(OHW_DATE_I+1),OHWI(OHW_DATE_I+2),
	1		OHWI(OHW_DATE_I+3),
	1		OHWI(OHW_DATE_I+4),OHWI(OHW_DATE_I+5),
	1		OHWD(OHW_RA1_D),OHWD(OHW_DEC1_D))
C
C  TYP will be 2 if the WARC option had been choosen.
C  There are two suboptions now: CHECK or ARCHIVE.
C
C  With CHECK we scan the whole observation on tape to catch parity 
C  errors, with ARCHIVE the Observation and Mediad views in Scissor
C  are informed of the label through WNFSCI.
C
	IF (TYP.EQ.2.AND.OPTION(4:4).EQ.'C') THEN	!Read all blocks
	   J=FDWJ(FDW_NBL_J)*FDWI(FDW_PHBLL_I)		!Number of blocks
	   J1=FDWI(FDW_LRCRD_I)				!Blocksize
	   IF (J1.NE.SRTRCL) THEN
	      CALL WNCTXT(F_TP,'Invalid blocksize for label !UJ',LABEL)
	   END IF
C
C  For tapes, reopen (some units are slow in rewinding)
C
	   IF (UNIT.EQ.'D') THEN			!No check for Disks
	   ELSE IF (.NOT.WNFOPF(IMCA,' ','R',0,0,0,LABEL)) THEN
	      CALL WNCTXT(F_TP,'Cannot re-open label !UJ',LABEL)
	   ELSE
	      I1=0					!No bad records yet
	      DO J2=0,J-1
	        IF (.NOT.WNFRD(IMCA,SRTRCL,RWBUF,J2*J1)) THEN	!Error
	          I1=I1+1
	          IF (I1.LT.3) THEN
		    CALL WNCTXT(F_TP,
	1	      'Cannot read record !UJ for label !UJ',J2,LABEL)
	          END IF
	        END IF
	      END DO
	      IF (I1.GE.3) THEN
	         CALL WNCTXT(F_TP,
	1	   'Cannot read !UJ records for label !UJ',I1,LABEL) 
	      ELSE IF (I1.EQ.0) THEN
	         CALL WNCTXT(F_TP,
	1	   'Total of !UJ records (!UJ bytes) checked for label !UJ',
	1		J,J*SRTRCL,LABEL)
	      END IF
	   END IF
C
	ELSE IF (TYP.EQ.2.AND.OPTION(4:4).EQ.'A') THEN	!Inform Scissor
C
	   IF (MOD(OHWI(OHW_PRFLG_I),2).EQ.1) THEN
	      OBSMODE='LINE'
	   ELSE
	      OBSMODE='CONTINUUM'
	   END IF
C
	   EPO=OHWI(OHW_DATE_I)
	   IF (EPO.LT.1900) EPO=EPO+1900
C
	   RA1=OHWD(OHW_RA1_D)*360.D0
	   IF (RA1.LT.0) RA1=RA1+360.D0		!BETWEEN 0..360
	   DEC1=OHWD(OHW_DEC1_D)*360.D0
C
	   CALL WNGMTS(OHW_BECODE_N,OHW(OHW_BECODE_1),BECODE) !BE CODE
C
	   IF (MOD(INT(OHWI(OHW_POLC_I)/4),2).EQ.0) THEN
	      DIPC(1:1)='+'
	   ELSE 
	      DIPC(1:1)='X'
	   END IF
	   IF (MOD(OHWI(OHW_POLC_I),2).EQ.0) THEN
	      DIPC(2:2)='+'
	   ELSE 
	      DIPC(2:2)='X'
	   END IF
C
	   OBSTIME=OHWI(OHW_DATE_I+4)*3600+OHWI(OHW_DATE_I+5)*60
C
	   UTD=OHWI(OHW_SDAY_I)
	   UTM=1
	   IF (MOD(OHWI(OHW_DATE_I+1),4).EQ.0) DAYS(2)=DAYS(2)+1
	   DO WHILE (UTD.GT.DAYS(UTM))
	     UTD=UTD-DAYS(UTM)
	     UTM=UTM+1
	   END DO
	   IF (MOD(OHWI(OHW_DATE_I+1),4).EQ.0) DAYS(2)=DAYS(2)-1
C
	   ARUSE='X0123456789ABCD_Y0123456789ABCD '
	   DO I1=0,1					!X, Y
	     DO I2=0,13					!0...D
	        IF ((OHWI(OHW_TELWD_I+I1).AND.2**I2).EQ.0) 
	1		ARUSE(I2+I1*16+2:I2+I1*16+2)='.'
	     END DO
	   END DO
C
	   POS9= -1.*OHWJ(OHW_POST_J+9)*2.**(-16)
C
	   IF (OHWI(OHW_SET_I+SET_BANDNR_I).EQ.0.AND.
	1	OHWI(OHW_SET_I+SET_BANDNR_I+
	1		OHWI(OHW_LENT_I)/LB_I).GT.1) THEN !SELECT FIRST SET
	     I=1
	   ELSE
	     I=0
	   END IF
	   WSETS(0)=OHWI(OHW_SET_I+SET_BANDNR_I+
	1		I*OHWI(OHW_LENT_I)/LB_I)		 !FIRST SET
	   WSETS(1)=OHWI(OHW_SET_I+SET_BANDNR_I+
	1	(OHWI(OHW_NRSTS_I)-1)*OHWI(OHW_LENT_I)/LB_I) !LAST SET
C
	   J=0					 	!INIT POL.STRING
	   POLC=' '
	   DO WHILE (I.LT.OHWI(OHW_NRSTS_I).AND.
	1	OHWI(OHW_SET_I+SET_BANDNR_I+
	1		I*OHWI(OHW_LENT_I)/LB_I).EQ.WSETS(0))
	     IF (J.GT.0) POLC(J:)=','
	     CALL WNGMTS(2,OHW(OHW_SET_1+SET_DATYP_1+
	1		I*OHWI(OHW_LENT_I)),POLC(J+1:))
	     J=J+3
	     I=I+1
	   END DO
	   IF (POLC.EQ.'IF,IF,IF,IF,IF,IF,IF,IF,IF,XX,YY') THEN
	      CALL WNCTXT(F_T,'Both DXB/DCB IF-sets present')
	      POLC='IF9,XX,YY'
	   ENDIF
C
	   IF (OHWI(OHW_MSPAT_I).EQ.0.OR.FVERS.LT.6) THEN
	     MOSTYP='UNDEFINED'
	     DWELT=0
	     DRADT=0
	   ELSE 
	     IF (FVERS.EQ.6.OR.
	1	 (OHWI(OHW_OLSYS_I).GE.62.AND.
	1	  OHWI(OHW_MSPAT_I).LE.0) ) THEN
	        MOSTYP='UNSPLITTED'
	     ELSE
	        MOSTYP='SPLITTED'
	     END IF
C
	     I1=OHWI(OHW_OLSYS_I)
	     I2=OHWI(OHW_SFREQ_I)
	     CALL NSCLR2(IMCA,OHWJ(OHW_SET_J+SET_NSH_J+
	1			WSETS(0)*OHWI(OHW_LENT_I)/LB_J),
	1	I1,FVERS,BECODE,I2,DWELT,DRADT)
C
	   END IF 	
C
C Test if SFREQ (DELTA_FREQ) not negative.
C If so, set to zero
	   SFREQ=OHWI(OHW_SFREQ_I)*0.1
	   IF (SFREQ.LT.0) SFREQ=0
C
	   CALL WNCTXS(WARC,
	1	'CHECK=OBSERVATION '//
	1	'SEQNUMBER=!UJ PROJECT=!UI SOURCE=!AD '//
	1	'EPOCHE=!UJ ',
	1	OHWJ(OHW_VOLGNR_J),OHWI(OHW_PROJECT_I),
	1	OHW(OHW_FIELD_1),OHW_FIELD_N,
	1	EPO)
C
	   CALL WNCTXS(WARC(WNCALN(WARC)+1:),
	1	' SETS_START=!UJ SETS_END=!UJ '//
	1	'TAPE_VERSION=!UJ ONLINE_VERSION=!UJ '//
	1	'OBS_DATE=!2$ZI/!2$ZI/!4$ZJ OBS_TIME=!UJ '//
	1	'UT_DATE=!2$ZJ/!2$ZJ/!4$ZJ '//
	1	'UT_START=!UJ UT_END=!UJ '//
	1	'HA_START=!D HA_END=!D ',
	1	WSETS(0),WSETS(1),
	1	FVERS,ORG_OLSYS,
	1	OHWI(OHW_DATE_I+3),OHWI(OHW_DATE_I+2),
	1	1900+OHWI(OHW_DATE_I+1),OBSTIME,
	1	UTD,UTM,1900+OHWI(OHW_DATE_I+1),
	1	10*OHWI(OHW_STIM_I),10*OHWI(OHW_ETIM_I),
	1	OHWD(OHW_HAST_D)*360.D0,OHWD(OHW_HAEND_D)*360.D0)
C
	   CALL WNCTXS(WARC(WNCALN(WARC)+1:),
	1	' NR_SETS=!UI NR_POLARISATION=!UI '//
	1	'NR_INTERFEROM=!UI NR_FREQ=!UI NR_FEQ=!UI '//
	1	'NR_CORRCHAN=!UI '//
	1	'POSA_9=!E POSB_9=!E POSC_9=!E POSD_9=!E '//
	1	'ARRAY_USE=!AS ',
	1	OHWI(OHW_NRSTS_I),OHWI(OHW_NRPOL_I),
	1	OHWI(OHW_NRINT_I),OHWI(OHW_NRFRQ_I),
	1	OHWI(OHW_NFREQ_I),OHWI(OHW_NTOT_I),
	1	POS9-(-1.*OHWJ(OHW_POST_J+10)*2.**(-16)),
	1	POS9-(-1.*OHWJ(OHW_POST_J+11)*2.**(-16)),
	1	POS9-(-1.*OHWJ(OHW_POST_J+12)*2.**(-16)),
	1	POS9-(-1.*OHWJ(OHW_POST_J+13)*2.**(-16)),
	1	ARUSE)
C
	   CALL WNCTXS(WARC(WNCALN(WARC)+1:),
	1	' OBSMODE.DESCRIPTION=!AS '//
	1	'OBS_TYPE.DESCRIPTION=!AD '//
	1	'FREQUENCY=!D '//
	1	'BANDWIDTH=!E DELTA_FREQ=!UJ '//
	1	'VCODE=!UI VELOCITY=!E '//
	1	'BACKEND.DESCRIPTION=!AD '//
	1	'CORR_CONFIG=!UJ CORR_INTEGRAT=!UI CORR_MODE=!UI ',
	1	OBSMODE,OHW(OHW_TYPE_1),OHW_TYPE_N,
	1	OHWD(OHW_FREQ_D),
	1	OHWE(OHW_BAND_E),SFREQ,
	1	OHWI(OHW_VELC_I),OHWE(OHW_VLCTY_E),
	1	OHW(OHW_BECODE_1),OHW_BECODE_N,
	1	OHWJ(OHW_CONFNR_J),OHWI(OHW_BSINT_I),
	1	OHWI(OHW_MODE_I))
C
	   CALL WNCTXS(WARC(WNCALN(WARC)+1:),
	1	' DIPOLE.SYMBOLIC=!AS '//
	1	'POLARISA.DESCRIPTION=!AS '//
	1	'TAPER_CODE=!UJ '//
	1	'MOSAICK.DESCRIPTION=!AS '//
	1	'DWELT=!UJ DRADT=!UJ NR_SIMOBS=!UI ',
	1	DIPC,POLC,1+OHWI(OHW_TAPER_I),
	1	MOSTYP,DWELT,DRADT,FDWI(FDW_NOBS_I))
C
	   J0=WNFSCI(WARC)
 	   IF (MOD(J0,100).NE.0) THEN
	      CALL WNFSCS(WARC)
 	      CALL WNCTXT(F_TP,'Error !UJ updating archive: !AS',
	1		J0,WARC(1:WNCALN(WARC)))
	   ELSE
	      CALL WNFSCS(WARC)
	      CALL WNCTXT(F_TP,'Scissor: !AS',WARC(1:WNCALN(WARC)))
              CALL WNCTXS(WARC,
	1		'PUT=OBSERVATION SEQNUMBER=!UJ STATUS=RCV',
	1		OHWJ(OHW_VOLGNR_J))
              J0=WNFSCI(WARC)
	      CALL WNCTXS(WARC,
	1		'PUT=OBSPOS SEQNUMBER=!UJ OH_NO=!UJ '//
	1		'RA=!D DEC=!D EQUINOX=B1950 SYSTEM=FK5',
	1		OHWJ(OHW_VOLGNR_J),OH_NO,RA1,DEC1)
              J0=WNFSCI(WARC)
	      IF (VOLUME(1:4).EQ.'VOL1') THEN
		R0=FDWJ(FDW_NBL_J)*FDWI(FDW_PHBLL_I)*
	1		FDWI(FDW_LRCRD_I)/1024./1024.
	        CALL WNGMED(VOLUME(5:10),LABEL,R0,OHWJ(OHW_VOLGNR_J))
	      END IF
	   END IF
	END IF
C
	RETURN
	END

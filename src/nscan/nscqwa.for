C+ NSCQWA.FOR
C  WNB 940812
C
C  Revisions:
C
	LOGICAL FUNCTION NSCQWA(QUA,FCA,AX1,AX2,CAP,CDAP)
C
C  Write interferometer errors for Qube
C
C  Result:
C
C	NSCQWA_L = NSCQWA( QUA_J:I, FCA_J:I, AX1_J:I, AX2_J:I,
C				CAP_J:I, CDAP_J:I)
C			Write additive interferometer errors for Qube scn
C			at positions AX1, AX2, using
C			the apply/de-apply bits in CAP/CDAP.
C			The data used should have been put in A_X(POUT)
C			(see NSCQSR)
C	NSCQWM_L = NSCQWM( QUA_J:I, FCA_J:I, AX1_J:I, AX2_J:I,
C				CAP_J:I, CDAP_J:I)
C			Write multiplicative ifr errors
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'             !BIT DEFINITIONS
	INCLUDE 'QUB_O_DEF'		!QUBE DEFINITION
	INCLUDE 'STH_O_DEF'		!SCAN SET HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER QUA			!QUBE CONTROL AREA
	INTEGER FCA			!FILE
	INTEGER AX1,AX2			!AXES TO READ
	INTEGER CAP,CDAP		!APPLY/DE-APPLY BITS
C
C  Entry points:
C
	LOGICAL NSCQWM
C
C  Function references:
C
	LOGICAL WNFWR			!WRITE DATA
	LOGICAL NSCSWI			!WRITE SCAN IFR ERRORS
	LOGICAL NSCQR0			!FIND SET HEADER
	LOGICAL NSCQE0,NSCQE1		!WRITE ERRORS FOR BLOCK
	LOGICAL NSCQWF			!WRITE FORCED ERROR
C
C  Data declarations:
C
	INTEGER CTYP			!TYPE OF ERROR
	INTEGER SCNP			!START SCAN POINTER
	INTEGER LAX1,LAX2,LAX3		!LENGTH AXIS 1,2,3
	INTEGER OFFAX2			!DISK OFFSET AXIS 2
	INTEGER L4DPL			!LENGTH ONE DATA POINT
C-
C
C NSCQWA
C
	CTYP=CAP_AIFR
	GOTO 100
C
C NSCQWM
C
	ENTRY NSCQWM(QUA,FCA,AX1,AX2,CAP,CDAP)
C
	CTYP=CAP_MIFR
	GOTO 100
C
C INIT
C
 100	CONTINUE
	IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_OUT).EQ.0) GOTO 800 !CANNOT OUTPUT
	NSCQWA=.TRUE.				!ASSUME OK
	L4DPL=4*(LB_X)				!TOTAL DATA POINT LENGTH
	LAX3=A_J(QUA+QUA_NDAT_J)		!LENGTH 3RD AXIS
	IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_I).NE.0) THEN !GIVE NORMAL SCAN
	  IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_FTI).NE.0) THEN !FTI
	    I0=AX1				!FREQ POINT
	    I1=AX2				!TIME POINT
	  ELSE					!TFI
	    I0=AX2
	    I1=AX1
	  END IF
	  I2=LAX3-1				!IFR POINTS
	ELSE IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_F).NE.0) THEN !GIVE FREQ SCAN
	  IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_TIF).NE.0) THEN !TIF
	    I1=AX1				!TIME POINT
	    I2=AX2				!IFR POINT
	  ELSE					!ITF
	    I1=AX2
	    I2=AX1
	    LAX1=A_J(QUA+QUA_IIFR_J)
	    LAX2=A_J(QUA+QUA_IHA_J)
	  END IF
	  I0=LAX3-1				!FREQ POINT
	ELSE IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_T).NE.0) THEN !GIVE HA SCAN
	  IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_FIT).NE.0) THEN !FIT
	    I0=AX1				!FREQ POINT
	    I2=AX2				!IFR POINT
	  ELSE					!IFT
	    I0=AX2
	    I2=AX1
	    LAX1=A_J(QUA+QUA_IIFR_J)
	    LAX2=A_J(QUA+QUA_IFRQ_J)
	  END IF
	  I1=LAX3-1				!HA POINT
	ELSE					!UNKNOWN
	  GOTO 800
	END IF
	IF (I0.LT.0 .OR. I0.GE.A_J(QUA+QUA_IFRQ_J) .OR.
	1		I1.LT.0 .OR.
	1		I1.GE.A_J(QUA+QUA_IHA_J) .OR.
	1		I2.LT.0 .OR.
	1		I2.GE.A_J(QUA+QUA_IIFR_J)) GOTO 800 !ILLEGAL
C
C WRITE FOR TFI/FTI SCAN
C
	IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_I).NE.0) THEN !GIVE NORMAL SCAN
	  IF (.NOT.NSCQR0(QUA,FCA,I0,I1,SCNP)) THEN !READ SET HEADER
 10	    CONTINUE
	    CALL WNCTXT(F_TP,'Error writing Qube scan data '//
	1				'F=!UJ, T=!UJ',
	1			I0,I1)
	    GOTO 800
	  END IF
	  IF (.NOT.NSCSWI(FCA,A_B(A_J(QUA+QUA_CSTH_J)),
	1		I1-SCNP,
	1		A_I(A_J(QUA+QUA_PIFR_J)),
	1		A_X(A_J(QUA+QUA_POUT_J)),
	1		CTYP,CAP,CDAP,0)) GOTO 10 !WRITE IFR ERRORS
C
C WRITE TIF/FIT/ITF/IFT
C
	ELSE
	  IF (IAND(A_J(QUA+QUA_ORDER_J),
	1			QUB_TIF+QUB_FIT).NE.0) THEN !TIF/FIT
	    IF (A_J(QUA+QUA_CIMAP_J).NE.AX1 .OR.
	1		A_J(QUA+QUA_CAP_J).NE.CAP .OR.
	1		A_J(QUA+QUA_CDAP_J).NE.CDAP .OR.
	1		A_J(QUA+QUA_TCOR_J).NE.CTYP) THEN !EMPTY FIRST
	      IF (.NOT.NSCQE0(QUA,FCA,
	1		A_J(QUA+QUA_CIMAP_J),
	1		0)) GOTO 10		!WRITE EXISTING ERRORS
	      IF (.NOT.NSCQE1(QUA,FCA,
	1		A_J(QUA+QUA_CIMAP_J),
	1		0)) GOTO 10		!EMPTY CURRENT
	      A_J(QUA+QUA_CIMAP_J)=AX1		!SET CURRENT
	    END IF
	    OFFAX2=0				!CURRENT DISK OFFSET
	  ELSE					!ITF/IFT
	    IF (A_J(QUA+QUA_CAP_J).NE.CAP .OR.
	1		A_J(QUA+QUA_CDAP_J).NE.CDAP .OR.
	1		A_J(QUA+QUA_TCOR_J).NE.CTYP) THEN !WRITE FIRST
	      IF (.NOT.NSCQWF(QUA,FCA)) GOTO 10
	    END IF
	    IF (A_J(A_J(QUA+QUA_CIPMAP_J)+AX2).LE.0) THEN !EMPTY FIRST
	      IF (.NOT.NSCQE1(QUA,FCA,
	1		-1,
	1		A_J(QUA+QUA_CICNT_J))) GOTO 10 !EMPTY FIRST
	      A_J(QUA+QUA_CICNT_J)=A_J(QUA+QUA_CICNT_J)+1 !COUNT BLOCKS
	      A_J(A_J(QUA+QUA_CIPMAP_J)+AX2)=
	1		A_J(QUA+QUA_CICNT_J)	!SAVE POINTER
	    END IF
	    OFFAX2=A_J(QUA+QUA_CICNT_J)-1	!FILE OFFSET
	  END IF
	  IF (.NOT.WNFWR(A_J(QUA+QUA_IFCA_J),
	1		L4DPL*LAX3,
	1		A_X(A_J(QUA+QUA_POUT_J)),
	1		L4DPL*OFFAX2*LAX3*LAX1+
	1		L4DPL*LAX3*I2)) GOTO 10	!WRITE ERRORS
	END IF
	A_J(QUA+QUA_CAP_J)=CAP			!SAVE CURRENT TYPES
	A_J(QUA+QUA_CDAP_J)=CDAP
	A_J(QUA+QUA_TCOR_J)=CTYP
C
	RETURN
C
C ERROR
C
 800	CONTINUE
	NSCQWA=.FALSE.				!INDICATE ERROR
C
	RETURN
C
C
	END

C+ NSCSCR.FOR
C  WNB 900306
C
C  Revisions:
C	WNB 910813	Add NSCSCT
C	WNB 910820	Add NSCSCW
C	WNB 910820	Add extinction, refraction, Faraday
C	WNB 910920	Add Model, ifr, mifr
C	WNB 911118	Typo Faraday rotation correction, and change sign
C	WNB 920515	Add use of scale factor
C	WNB 920826	Add NSCSCM
C	WNB 920827	Add NSCSCI
C	WNB 930602/22	Add latitude choice
C	WNB 930608/22	Add new weight/flag
C	WNB 930614/22	Add Shift, clock correction, ionosph. refraction
C	WNB 930623	Interim(?) shift of de-applied model. The proper
C			place for this function is in NGCALC, but no baseline
C			info present as yet.
C	WNB 930630	Slight change of logics at end for VMS compiler bug
C	WNB 930803	CBITS_DEF
C	WNB 930819	Always 4 polarisations in model, AIFR and MIFR
C	JPH 930901	Move NSCSCW to a file of its own
C	JPH 931110	Fix clock correction: sin(HA) --> cos(HA), missing *PI2
C	WNB 931130	Add ACORM=0 option
C			Note: assumed single band Tsys and Aeff=500 m^2 for now
C	CMV 931215	Add entry NSCSCF to get flags and data
C	CMV 931216	Corrected stupid typo
C	CMV 940218	Changed argument sequence in NSCSCF
C	WNB 940227	Correct Faraday rotation and model for all
C			dipole positions
C			Note: polarisation corrections (i.e. dipole angle/
C				ellipticity) still for non-crossed only
C	CMV 940224	Implement differential shifts
C	JEN 940413	Removed bug from NSCSCM (FMOD->XMOD)
C	CMV 940422	Removed bug in Farad. corr (init of LWGT and OWGT)
C	CMV 940429	Use bitmasks everywhere
C	WNB 940811	Change order (de-)apply AIFR
C	WNB 940811	Add NSCSCX
C       HjV 950511	Test also if AOTHUSED is set
C       WNB 950704	Add NSCSCY
C	JPH 960124	Correct description of NSCSCF
C
	LOGICAL FUNCTION NSCSCR(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,WGT,CDAT)
C
C  Read data for a scan
C
C  Result:
C
C	NSCSCR_L = NSCSCR( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			WGT_E(0:*,0:3):O, CDAT_X(0:*,0:3))
C				Read scan number SCN from FCA, using the
C				set header STH with interferometers IFRT.
C				CAP indicates the corrections to be applied,
C				CDAP the corrections to be de-applied, with
C				(see NSCSAD):
C
C		CAP_RED		bit 0 (1)  : redundancy
C		CAP_ALG		    1 (2)  : align
C		CAP_OTH		    2 (4)  : others
C		CAP_XTN		    3 (8)  : extinction
C		CAP_REF		    4 (16) : refraction
C		CAP_IRE		    5 (32) : ionosph. refracton
C		CAP_CLK		    6 (64) : clock correction
C		CAP_POL		    8 (256): polarisation
C		CAP_FAR		    9 (512): Faraday rotation
C		CAP_SHF		   10 (1024): shift
C		CAP_MOD		   12 (4096): model
C		CAP_AIF		   13 (8192): ifr corrections
C		CAP_MIF		   14 (16384): mult. ifr corrections
C
C				The scan header SCH, the data
C				weight WGT and the complex data CDAT are
C				returned for all four polarisations.
C				If unknown scan .FALSE. returned.
C				If data is flagged, CDAT set to zero
C	NSCSCF_L = NSCSCF( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			WGT_E(0:*,0:3), CDAT_X(0:*,0:3), FLG_J(0:*,0:3):O)
C				As NSCSCR, but FLG returns the flag/weight 
C				words, WGT and CDAT the (converted) weights   
C				and data regardless of flag settings.
C				
C	NSCSCH_L = NSCSCH( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O)
C				Read the scan header only. IFRT, CAP and
C				CDAP are not used.
C	NSCSCT_L = NSCSCT( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			TCOR_X(0:*,0:1):O, TMU_E:O)
C				Read scan header and give telescope
C				corrections in TCOR, and the m.e. in TMU
C				(<0 for deleted scan).
C	NSCSCX_L = NSCSCX( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			TCOR_X(0:*,0:1):O, IMCOR_X(0:3,*,0:1):O,
C			FACOR_E(2,2):O, PLCOR_X(0:*,0:1))
C				Read scan header and give telescope
C				corrections in TCOR, multiplicative
C				ifr errors in IMCOR, Faraday corrections in
C				FACOR, pol corrections in PLCOR
C				(<0 for deleted scan).
C	NSCSCY_L = NSCSCY( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			TCOR_X(0:*,0:1):O, IMCOR_X(0:3,*,0:1):O,
C			FACOR_E(2,2):O, PLCOR_X(0:*,0:1). IACOR_X(0:3,*,0:1):O)
C				Read scan header and give telescope
C				corrections in TCOR, multiplicative
C				ifr errors in IMCOR, Faraday corrections in
C				FACOR, pol corrections in PLCOR, additive
C       			ifr corrections in IACOR
C				(<0 for deleted scan).
C	NSCSCM_L = NSCSCM( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			WGT_E(0:*,0:3):O, CDAT_X(0:*,0:3))
C				Read scan header, and give saved model
C				back in CDAT.
C	NSCSCI_L = NSCSCI( FCA_J:I, STH_B(0:*):I, IFRT_I(0:*):I, SCN_J:I,
C			CAP_J:I, CDAP_J:I, SCH_B(0:*):O,
C			WGT_E(0:*,0:3):O, CDAT_X(0:*,0:3))
C				Return all applied/de-applied corrections in
C				CDAT. Basically assuming (I,Q,U,V)=(1,0,0,0).
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'
	INCLUDE 'SCW_O_DEF'		!SC BLOCK
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'SCH_O_DEF'		!SCAN HEADER
C
C  Entry points:
C
	LOGICAL NSCSCF			!READ DATA AND FLAGS
	LOGICAL NSCSCH			!READ SCAN HEADER
	LOGICAL NSCSCW			!WRITE SCAN HEADER
	LOGICAL NSCSCT			!READ SCAN HEADER, TELESCOPE ERRORS
	LOGICAL NSCSCX			!READ SCAN HEADER, ERRORS
	LOGICAL NSCSCY			!READ SCAN HEADER, ERRORS
	LOGICAL NSCSCM			!READ SCAN MODEL
	LOGICAL NSCSCI			!READ IFR BASED CORRECTIONS
C
C  Parameters:
C
	REAL THDR			!2*SCALE HEIGHT/RADIUS EARTH
	  PARAMETER (THDR=8./6378.16)
	REAL RDH			!RADIUS EARTH/SCALE HEIGHT
	  PARAMETER (RDH=2./THDR)
C
C  Arguments:
C
	INTEGER FCA			!FILE CONTROL AREA
	BYTE STH(0:*)			!CURRENT SET HEADER
	INTEGER*2 IFRT(0:*)		!INTERFEROMETER TABLE
	INTEGER SCN			!SCAN TO DO
	INTEGER CAP			!APPLY CORRECTIONS
	INTEGER CDAP			!DE-APPLY CORRECTIONS
	BYTE SCH(0:*)			!SCAN HEADER
	REAL WGT(0:STHIFR-1,0:3)	!DATA WEIGHT IFR XX,XY,YX,YY
	INTEGER FLG(0:STHIFR-1,0:3)	!DATA WEIGHT/FLAGS IFR XX,XY,YX,YY
	COMPLEX CDAT(0:STHIFR-1,0:3)	!DATA C,S IFR XX,XY,YX,YY
	COMPLEX TCOR(0:STHTEL-1,0:1)	!TEL. CORR. TEL X,Y
	COMPLEX IMCOR(0:3,0:STHIFR-1,0:1) !MUL IFR CORR POL, IFR, APPLY/DE-AP
	COMPLEX IACOR(0:3,0:STHIFR-1,0:1) !ADD IFR CORR POL, IFR, APPLY/DE-AP
	REAL FACOR(2,2)			!FARADAY ROTATION
	COMPLEX PLCOR(0:STHTEL-1,0:1)	!POL CORR TEL, X/Y
	REAL TMU			!CORR. M.E. (OR <0)
C
C  Function references:
C
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNFWR			!WRITE DATA
	INTEGER WNGARA			!ADDRESS OF VARIABLE
	LOGICAL NSCSIA			!CALCULATE DIPOLE ANGLE INFO
C
C  Data declarations:
C
	INTEGER STHP,STHPI,STHPJ,STHPE,STHPD !SET HEADER POINTER
	INTEGER SCHP,SCHPJ,SCHPE	!SCAN HEADER POINTER
	INTEGER LCAP,LCDAP		!LOCAL APPLY, DE-APPLY
	INTEGER TW(0:STHIFR-1)		!TELESCOPE INFO
	INTEGER TE(0:STHIFR-1)
	INTEGER IFRA(0:1,0:STHIFR-1)	!ALTERNATE INTERFEROMETER SELECTOR
	REAL ANG(0:2,0:STHIFR-1)	!DIPOLE ANGLE INFO
	REAL LWGT(0:STHIFR-1,0:3)	!LOCAL COPY DATA WEIGHT IFR XX,XY,YX,YY
	INTEGER OWGT(0:STHIFR-1)	!STOKES CONVERSION SUCCESS
	INTEGER NIFR			!FOR COMPILER BUG
	REAL SLAT,CLAT			!SIN, COS OF LAT.
	INTEGER UFL			!UN-FLAG DATA
	REAL RE,RR,RE1,RR1		!EXTINCTION, REFRACTION
	REAL RC,RC1			!CLOCK CORRECTION
	REAL RI,RI1			!IONOSPH. REFRACTION
	REAL RS,RS1			!FIELD SHIFT
	REAL UV0(0:3)			!UV FOR 1M BASELINE
	COMPLEX CI			!DATA POINT I
	COMPLEX CQR
	REAL ROT(2,2)			!ROTATION MATRIX
	COMPLEX XMOD(0:3,0:STHIFR-1)	!MODEL
	COMPLEX FMOD(0:3,0:STHIFR-1)	!MODEL FOR FARADAY ROTATION
	COMPLEX XPOL(0:STHTEL-1,0:1)	!POL.
	COMPLEX XMIFR(0:3,0:STHIFR-1,0:1) !MIFR CORRECTIONS APPLY,DE-APPLY
	COMPLEX XAIFR(0:3,0:STHIFR-1,0:1) !AIFR CORRECTIONS APPLY,DE-APPLY
	COMPLEX CTCOR(0:STHTEL-1,0:1)	!TEL. CORR. TEL X,Y
	COMPLEX SHCOR(0:STHTEL-1)	!TEL. SHIFT CORRECTIONS
	REAL XTMU			!M.E. TEL. CORR.
	INTEGER*2 LDAT(0:2,0:4*STHIFR-1) !DATA BUFFER
	COMPLEX FDAT(0:STHIFR-1,0:3)	!DATA C,S IFR XX,XY,YX,YY FARADAY
	INTEGER PLC(4,0:3)		!POLARISATION OFFSETS INPUT
	  DATA PLC/0,0,0,0,-1,-1,-1,1,-1,-1,-1,2,-1,1,1,3/
	INTEGER CPLC(0:3,0:1)		!X,Y IDENTIFIERS
	  DATA CPLC/0,0,1,1,0,1,0,1/
	LOGICAL DODAT			!SWITCH HEADER OR DATA
	LOGICAL DOFLG			!SWITCH RETURN FLAGS OR NOT
	LOGICAL DOCOR			!SWITCH CORRECTIONS OR NOT
	LOGICAL DOXCOR,DOYCOR		!SWITCH EXTENDED CORRECTIONS OR NOT
	LOGICAL DOMOD			!SWITCH MODEL
	LOGICAL DOIFR			!SWITCH IFR CORRECTIONS
	REAL SCWE(0:2*STHTEL-1)		!TSYS FROM SC BLOCK
	REAL R2
C-
C
C INIT NSCSCR
C
	NSCSCR=.TRUE.				!ASSUME OK
	DODAT=.TRUE.				!READ DATA
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.FALSE.				!NO CORRECTIONS
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=CAP				!APPLY
	LCDAP=CDAP				!DE-APPLY
	GOTO 10
C
C NSCSCF
C
	ENTRY NSCSCF(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,WGT,CDAT,FLG)
C
	NSCSCF=.TRUE.				!ASSUME OK
	DODAT=.TRUE.				!READ DATA
	DOFLG=.TRUE.				!FLAGS RETURNED
	DOCOR=.FALSE.				!NO CORRECTIONS
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=CAP				!APPLY
	LCDAP=CDAP				!DE-APPLY
	GOTO 10	
C
C NSCSCH
C
	ENTRY NSCSCH(FCA,STH,IFRT,SCN,CAP,CDAP,SCH)
C
	NSCSCH=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.FALSE.
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=0					!APPLY
	LCDAP=0					!DE-APPLY
	GOTO 10
C
C NSCSCT
C
	ENTRY NSCSCT(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,TCOR,TMU)
C
	NSCSCT=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.TRUE.
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=IAND(CAP,CAP_RED+CAP_ALG+CAP_OTH)	!APPLY
	LCDAP=IAND(CDAP,CAP_OTH)		!DE-APPLY
	GOTO 10
C
C NSCSCX
C
	ENTRY NSCSCX(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,TCOR,
	1			IMCOR,FACOR,PLCOR)
C
	NSCSCT=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.TRUE.
	DOXCOR=.TRUE.				!EXTENDED CORR
	DOYCOR=.FALSE.
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=CAP				!APPLY
	LCDAP=CDAP				!DE-APPLY
	GOTO 10
C
C NSCSCY
C
	ENTRY NSCSCY(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,TCOR,
	1			IMCOR,FACOR,PLCOR,IACOR)
C
	NSCSCT=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.TRUE.
	DOXCOR=.TRUE.				!EXTENDED CORR
	DOYCOR=.TRUE.
	DOMOD=.FALSE.
	DOIFR=.FALSE.
	LCAP=CAP				!APPLY
	LCDAP=CDAP				!DE-APPLY
	GOTO 10
C
C NSCSCM
C
	ENTRY NSCSCM(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,WGT,CDAT)
C
	NSCSCM=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.FALSE.
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.TRUE.
	DOIFR=.FALSE.
	LCAP=0					!APPLY
	LCDAP=CAP_MOD				!DE-APPLY
	GOTO 10
C
C NSCSCI
C
	ENTRY NSCSCI(FCA,STH,IFRT,SCN,CAP,CDAP,SCH,WGT,CDAT)
C
	NSCSCI=.TRUE.				!ASSUME OK
	DODAT=.FALSE.
	DOFLG=.FALSE.				!NO FLAGS RETURNED
	DOCOR=.FALSE.
	DOXCOR=.FALSE.				!NO EXTENDED COR
	DOMOD=.FALSE.
	DOIFR=.TRUE.
	LCAP=CAP				!APPLY
	LCDAP=CDAP				!DE-APPLY
	GOTO 10
C
C INIT
C
 10	CONTINUE
	STHP=WNGARA(STH(0))			!ADDRESS SET HEADER
	STHPI=(STHP-A_OB)/LB_I
	STHPJ=(STHP-A_OB)/LB_J
	STHPE=(STHP-A_OB)/LB_E
	STHPD=(STHP-A_OB)/LB_D
	NIFR=A_J(STHPJ+STH_NIFR_J)
	SCHP=WNGARA(SCH(0))			!ADDRESS SCAN HEADER
	SCHPJ=(SCHP-A_OB)/LB_J
	SCHPE=(SCHP-A_OB)/LB_E
	IF (SCN.LT.0 .OR. SCN.GE.A_J(STHPJ+STH_SCN_J)) GOTO 900 !UNKNOWN SCAN
	IF (A_J(STHPJ+STH_INST_J).EQ.1) THEN	!AT
	  SLAT=SLATA				!SIN(LAT)
	  CLAT=CLATA
	ELSE					!WSRT
	  SLAT=SLATW
	  CLAT=CLATW
	END IF
	CALL WNDDUF(UFL)			!GET BITS TO UNFLAG
	UFL=IAND(FL_ALL,NOT(UFL))		!SELECT THE BITS
	I=A_J(STHPJ+STH_SCNL_J)			!LENGTH SCAN
	J=A_J(STHPJ+STH_SCNP_J)+SCN*I		!POINTER TO SCAN
C
C READ A SCAN
C
	IF (.NOT.WNFRD(FCA,SCHHDL,SCH,J)) GOTO 900	!READ SCAN HEADER
	IF (IAND(A_J(SCHPJ+SCH_BITS_J),UFL).NE.0 .AND.
	1	.NOT.DOFLG .AND. .NOT.DOMOD) GOTO 910	!SCAN DELETED
C
C READ DATA
C
	I0=A_I(STHPI+STH_PLN_I)				!# OF POL. IN INPUT
	IF (DODAT) THEN
	  IF (.NOT.WNFRD(FCA,I-SCHHDL,LDAT,J+SCHHDL)) GOTO 900 !READ SCAN DATA
	  J0=0						!COUNT DATA POINTS
	  DO I=0,3					!ALL POLARISATIONS
	    I1=PLC(I0,I)				!OFFSET IN INPUT LINE
	    IF (I1.LT.0) THEN				!NOT PRESENT
	      DO I3=0,NIFR-1
	        IF (DOFLG) FLG(I3,I)=0
	        WGT(I3,I)=0
	        CDAT(I3,I)=0
	      END DO
	    ELSE
	      DO I3=0,NIFR-1				!ALL IFRS
	        I4=I0*I3+I1				!POINT TO INPUT
		I5=LDAT(0,I4)				!FLAGS/WEIGHT
	        IF (DOFLG) FLG(I3,I)=I5			!SAVE FLAGS/WEIGHT
	        WGT(I3,I)=IAND(I5,'000000ff'X)*
	1		(1.-A_E(STHPE+STH_WFAC_E))	!WEIGHT
	        IF (.NOT.DOFLG.AND.IAND(I5,UFL).NE.0) THEN	!DELETED
	          WGT(I3,I)=0
	          CDAT(I3,I)=0
	        ELSE
	          CDAT(I3,I)=(A_E(SCHPE+SCH_SCAL_E)+1.)*
	1			CMPLX(LDAT(1,I4),LDAT(2,I4)) !COS, SIN
	  	  IF (ABS(CDAT(I3,I)).EQ.0) THEN	!DELETE 0 DATA
		    WGT(I3,I)=0
		  ELSE
		    J0=J0+1				!COUNT DATA
		  END IF
	        END IF
	      END DO					!END IFRS
	    END IF
	  END DO					!END POL.
C
	  IF (J0.LE.0) GOTO 910				!NO DATA IN SCAN
	END IF
C
	IF (DOIFR) THEN					!SET DUMMY DATA
	  DO I=0,NIFR-1					!ALL IFRS
	    CDAT(I,0)=CMPLX(1.,0.)
	    CDAT(I,1)=CMPLX(0.,0.)
	    CDAT(I,2)=CMPLX(0.,0.)
	    CDAT(I,3)=CMPLX(1.,0.)
	    DO I1=0,3
	      WGT(I,I1)=1
	    END DO
	  END DO
	END IF
C
C GET TELESCOPE DATA
C
	IF (DODAT .OR. DOIFR) THEN
	  DO I=0,NIFR-1					!ALL IFRS
	    TW(I)=MOD(IFRT(I),256)			!TELESCOPES
	    TE(I)=IFRT(I)/256
	  END DO
	END IF
C
C CORRECT ACORM=0 DATA
C
	IF (DODAT) THEN					!DATA ASKED
	  IF (A_J(STHPJ+STH_ACORM_J).EQ.1) THEN		!ACORM=0
	    IF (A_J(STHPJ+STH_SCP_J).NE.0 .AND.
	1		A_J(STHPJ+STH_NSC_J).GE.SCW_RGAINI_1) THEN !SC PRESENT
	      IF (.NOT.WNFRD(FCA,2*STHTEL*LB_E,SCWE,
	1		A_J(STHPJ+STH_SCP_J)+SCW_TSYSI_1)) GOTO 900 !READ SC
	    ELSE
	      DO I=0,2*STHTEL-1				!SET DEFAULT 40K
		SCWE(I)=40.
	      END DO
	    END IF
	    DO I=0,NIFR-1				!ALL IFRS
	      DO I1=0,3					!ALL POLS
	        IF (WGT(I,I1).NE.0) THEN		!DATA PRESENT
		  R0=200.*BKJY/500.*			!K/AEFF (W.U.)
	1		SQRT(SCWE(2*TW(I)+I1/2)*SCWE(2*TE(I)+MOD(I1,2))) !W.U.
		  IF (ABS(REAL(CDAT(I,I1))).LE.32767 .AND.
	1		ABS(AIMAG(CDAT(I,I1))).LE.32767) THEN
		    R1=REAL(CDAT(I,I1))
		    R1=R0*R1/(32768.-ABS(R1))
		    R2=AIMAG(CDAT(I,I1))
		    R2=R0*R2/(32768.-ABS(R2))
		    CDAT(I,I1)=CMPLX(R1,R2)
		  ELSE
		    CDAT(I,I1)=0
		    WGT(I,I1)=0
		  END IF
	        END IF					!DATA PRESENT
	      END DO					!POL
	    END DO					!IFRS
	  END IF					!ACORM=0
	END IF						!DATA ASKED
C
C GET DATA CORRECTIONS
C
	IF (IAND(IOR(LCAP,LCDAP),
	1	CAP_TELMSK+CAP_POLMSK+CAP_IFRMSK).NE.0) THEN !CORRECTIONS ASKED
	  JS=NSCSIA(0,STH,IFRT,IFRA,ANG)		!GET DIPOLE ANGLES
C
C EXTINCTION/REFRACTION CONSTANTS
C
	  IF (IAND(IOR(LCAP,LCDAP),CAP_XTN+CAP_REF).NE.0) THEN
	    R0=SIN(A_D(STHPD+STH_DEC_D)*DPI2)*SLAT+
	1	COS(A_D(STHPD+STH_DEC_D)*DPI2)*CLAT*
	1	COS(A_E(SCHPE+SCH_HA_E)*PI2)	!COS(Z)
	    R1=SQRT(R0*R0+THDR)			!ATMOSPHERE THICKNESS
	    RE=A_E(SCHPE+SCH_EXT_E)*RDH*(R1-R0)	!EXTINCTION CORRECTION
	    RE=.5*LOG(1+RE)
	    RE1=A_E(SCHPE+SCH_AEXT_E)*RDH*(R1-R0) !EXTINCTION DE-CORRECTION
	    RE1=.5*LOG(1+RE1)
	    RR=A_D(STHPD+STH_FRQ_D)*A_E(SCHPE+SCH_REFR_E)*
	1		COS(A_D(STHPD+STH_DEC_D)*DPI2)*
	1		SIN(A_E(SCHPE+SCH_HA_E)*PI2)*
	1		(1-R0/R1)/(CL*1E-6)	!REFRACTION PER METER
	    RR1=A_D(STHPD+STH_FRQ_D)*A_E(SCHPE+SCH_AREFR_E)*
	1		COS(A_D(STHPD+STH_DEC_D)*DPI2)*
	1		SIN(A_E(SCHPE+SCH_HA_E)*PI2)*
	1		(1-R0/R1)/(CL*1E-6)	!DE-REFRACTION PER METER
	  END IF
C
C IONOSPHERIC REFRACTION
C
	  IF (IAND(IOR(LCAP,LCDAP),CAP_IRE).NE.0) THEN
	    RI=PI2*A_E(SCHPE+SCH_IREF_E)/1000	!IONOSPH. REFRACTION PER M
	    RI1=PI2*A_E(SCHPE+SCH_AIREF_E)/1000	!IONOSPH. DE-REFRACTION PER M
	  END IF
C
C CLOCK CORRECTION
C
	  IF (IAND(IOR(LCAP,LCDAP),CAP_CLK).NE.0) THEN
	    RC=-A_E(SCHPE+SCH_CLKC_E)/240/DEG*		!sec --> geom. radians
	1	A_D(STHPD+STH_FRQ_D)/(CL*1E-6)*	! --> lambda or circles
	1	PI2*				! --> electric radians
	1	COS(A_D(STHPD+STH_DEC_D)*DPI2)*
	1	COS(A_E(SCHPE+SCH_HA_E)*PI2) 	!CLOCK CORR. IN rad/M
	    RC1=-A_E(SCHPE+SCH_ACLKC_E)/240/DEG*
	1	PI2*A_D(STHPD+STH_FRQ_D)/(CL*1E-6)*
	1	COS(A_D(STHPD+STH_DEC_D)*DPI2)*
	1	COS(A_E(SCHPE+SCH_HA_E)*PI2) 	!CLOCK DE-CORR.
	  END IF
C
C SHIFT
C
	  IF (IAND(IOR(LCAP,LCDAP),CAP_SHF).NE.0) THEN
	    CALL NMOMUV(0,0D0,0D0,STH,SCH,UV0)	!GET UV COORDINATES
	    DO I=0,1
	      UV0(2+I)=-1./(3600.*DEG)*UV0(I)*
	1	(A_E(STHPE+STH_SHFT_E+I)+
	1	 A_E(STHPE+STH_DSHFT_E+I)*
	1	   (A_E(SCHPE+SCH_HA_E)-A_E(STHPE+STH_HAB_E)))
	    END DO
	    RS1=UV0(2)+UV0(3)			!SHIFT PER M
	    DO I=0,1
	      UV0(2+I)=-1./(3600.*DEG)*
	1		A_E(STHPE+STH_ASHFT_E+I)*UV0(I)
	    END DO
	    RS=UV0(2)+UV0(3)			!SHIFT PER M
	  END IF
C
C FARADAY DATA
C
	  IF ((IAND(IOR(LCAP,LCDAP),CAP_FAR).NE.0) .AND.
	1		(A_E(SCHPE+SCH_FARAD_E).NE.0 .OR.
	1		A_E(SCHPE+SCH_AFARAD_E).NE.0)) THEN !DO
	    ROT(1,1)=COS(2*(A_E(SCHPE+SCH_FARAD_E)-
	1		A_E(SCHPE+SCH_AFARAD_E))) !ROTATION MATRIX
	    ROT(1,2)=-SIN(2*(A_E(SCHPE+SCH_FARAD_E)-
	1		A_E(SCHPE+SCH_AFARAD_E)))
	    ROT(2,1)=-ROT(1,2)
	    ROT(2,2)=ROT(1,1)
	  END IF
C
C POLARISATION DATA
C
	  IF (IAND(LCAP,CAP_POL).NE.0) THEN	 	!CORRECTION ASKED
	    DO I=0,1					!XY/YX
	      DO I1=0,STHTEL-1				!ALL TEL.
		I3=2*STHTEL*I+2*I1
		XPOL(I1,I)=CMPLX(A_E(STHPE+STH_POLC_E+I3),
	1		-A_E(STHPE+STH_POLC_E+I3+1))
	      END DO
	    END DO
	  END IF
C
C GET MODEL DATA
C
	  IF ((DODAT.OR.DOMOD) .AND. IAND(LCDAP,CAP_MOD).NE.0 .AND.
	1		A_J(STHPJ+STH_MDD_J).NE.0) THEN !WANTED AND PRESENT
	    J0=A_J(STHPJ+STH_MDD_J)+SCN*4*LB_X*NIFR	!POINTER
	    IF (.NOT.WNFRD(FCA,4*NIFR*LB_X,
	1		XMOD,J0)) GOTO 900		!READ MODEL DATA
	  END IF
C
C GET MIFR DATA
C
	  DO I1=0,1					!APPLY/DE-APPLY
	    J0=0					!ASSUME NOT
	    IF (I1.EQ.0 .AND. IAND(LCAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_IFRMC_J).NE.0) THEN !WANTED AND PRESENT
	      J0=A_J(SCHPJ+SCH_IFRMC_J)			!POINTER
	    ELSE IF (I1.EQ.1 .AND. IAND(LCDAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_AIFRMC_J).NE.0) THEN !WANTED AND PRESENT
	      J0=A_J(SCHPJ+SCH_AIFRMC_J)		!POINTER
	    END IF
	    IF (J0.NE.0) THEN				!DO
	      IF (.NOT.WNFRD(FCA,4*NIFR*LB_X,
	1		XMIFR(0,0,I1),J0)) GOTO 900	!READ MIFR DATA
	    END IF
	  END DO
C
C GET AIFR DATA
C
	  DO I1=0,1					!APPLY/DE-APPLY
	    J0=0					!ASSUME NOT
	    IF (I1.EQ.0 .AND. IAND(LCAP,CAP_AIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_IFRAC_J).NE.0) THEN !WANTED AND PRESENT
	      J0=A_J(SCHPJ+SCH_IFRAC_J)			!POINTER
	    ELSE IF (I1.EQ.1 .AND. IAND(LCDAP,CAP_AIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_AIFRAC_J).NE.0) THEN !WANTED AND PRESENT
	      J0=A_J(SCHPJ+SCH_AIFRAC_J)		!POINTER
	    END IF
	    IF (J0.NE.0) THEN				!DO
	      IF (.NOT.WNFRD(FCA,4*NIFR*LB_X,
	1		XAIFR(0,0,I1),J0)) GOTO 900	!READ AIFR DATA
	    END IF
	  END DO
C
C TEL. CORRECTIONS
C
	  XTMU=0					!M.E.
	  IF (IAND(IOR(LCAP,LCDAP),CAP_TELMSK).NE.0) THEN !WANTED
	    DO I=0,1					!X,Y
	      DO I1=0,STHTEL-1				!TEL.
	        I3=2*STHTEL*I+2*I1			!CORR. POINTER
	        R0=0					!GAIN
	        R1=0					!PHASE
	        IF (IAND(LCAP,CAP_RED).NE.0) THEN	!REDUNDANCY ASKED
		  R0=R0+A_E(SCHPE+SCH_REDC_E+I3+0)	!GAIN
		  R1=R1+A_E(SCHPE+SCH_REDC_E+I3+1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_ALG).NE.0) THEN	!ALIGN ASKED
		  R0=R0+A_E(SCHPE+SCH_ALGC_E+I3+0)	!GAIN
	 	  R1=R1+A_E(SCHPE+SCH_ALGC_E+I3+1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_OTH).NE.0) THEN	!OTHERS ASKED
		  R0=R0+A_E(SCHPE+SCH_OTHC_E+I3+0)	!GAIN
		  R1=R1+A_E(SCHPE+SCH_OTHC_E+I3+1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_XTN).NE.0) THEN	!EXTINCTION ASKED
		  R0=R0+RE				!GAIN
	        END IF
	        IF (IAND(LCAP,CAP_REF).NE.0) THEN	!REFRACTION ASKED
		  R1=R1-RR*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_IRE).NE.0) THEN	!IONOSPH. REFR. ASKED
		  R1=R1-RI*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_CLK).NE.0) THEN	!CLOCK CORR. ASKED
		  R1=R1-RC*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCAP,CAP_SHF).NE.0) THEN	!ASHIFT ASKED
		  R1=R1-RS*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCDAP,CAP_OTH).NE.0 .OR.
	1	     A_J(SCHPJ+SCH_AOTHUSED_J).EQ.1) THEN	!OTHERS DE-APPLY
		  R0=R0-A_E(SCHPE+SCH_AOTHC_E+I3+0)	!GAIN
	 	  R1=R1-A_E(SCHPE+SCH_AOTHC_E+I3+1)	!PHASE
	        END IF
	        IF (IAND(LCDAP,CAP_XTN).NE.0) THEN	!EXTINCTION DE-APPLY
		  R0=R0-RE1				!GAIN
	        END IF
	        IF (IAND(LCDAP,CAP_REF).NE.0) THEN	!REFRACTION DE-APPLY
		  R1=R1+RR1*A_E(STHPE+STH_RTP_E+I1)
	        END IF
	        IF (IAND(LCDAP,CAP_IRE).NE.0) THEN	!IONOSPH. REFR. DE-APPLY
		  R1=R1+RI1*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCDAP,CAP_CLK).NE.0) THEN	!CLOCK CORR. DE-APPLY
		  R1=R1+RC1*A_E(STHPE+STH_RTP_E+I1)	!PHASE
	        END IF
	        IF (IAND(LCDAP,CAP_SHF).NE.0) THEN	!SHIFT DE-APPLY
		  R1=R1+RS1*A_E(STHPE+STH_RTP_E+I1)	!PHASE
		  SHCOR(I1)=CMPLX(0.,RS1*A_E(STHPE+STH_RTP_E+I1)) !FOR MODEL
	        END IF
	        CTCOR(I1,I)=CMPLX(R0,R1)		!SET GAIN/PHASE ERROR
	      END DO
C
C M.E.
C
	      IF (DOCOR .AND. .NOT.DOXCOR) THEN		!M.E. WANTED
	        IF (IAND(LCAP,CAP_RED).NE.0) THEN
		  XTMU=XTMU+(A_E(SCHPE+SCH_REDNS_E+2*I+0)**2+
	1		A_E(SCHPE+SCH_REDNS_E+2*I+1)**2)/2. !TOTAL M.E.
	        END IF
	        IF (IAND(LCAP,CAP_ALG).NE.0) THEN
		  XTMU=XTMU+(A_E(SCHPE+SCH_ALGNS_E+2*I+0)**2+
	1		A_E(SCHPE+SCH_ALGNS_E+2*I+1)**2)/2. !TOTAL M.E.
	        END IF
	        IF (IAND(LCAP,CAP_OTH).NE.0) THEN
		  XTMU=XTMU+(A_E(SCHPE+SCH_OTHNS_E+2*I+0)**2+
	1		A_E(SCHPE+SCH_OTHNS_E+2*I+1)**2)/2. !TOTAL M.E.
	        END IF
	      END IF
	    END DO
	    XTMU=SQRT(XTMU)				!SET M.E.
	  END IF
C
C END GET CORRECTION DATA
C
	END IF
C
C SAVE CORRECTIONS
C
	IF (IAND(IOR(LCAP,LCDAP),
	1		CAP_TELMSK+CAP_POLMSK+CAP_IFRMSK).NE.0 .AND.
	1		DOCOR) THEN			!CORRECTIONS ASKED
	  DO I=0,1					!X,Y
	    DO I1=0,STHTEL-1				!TEL
	      TCOR(I1,I)=CTCOR(I1,I)			!RETURN CORRECTIONS
	    END DO
	  END DO
	  IF (.NOT.DOXCOR) TMU=XTMU			!SET MEAN ERROR
	ELSE IF (DOCOR .AND. .NOT.DOXCOR) THEN		!RETURN ZERO
	  GOTO 910					!CLEAR
	ELSE IF (DOCOR) THEN
	  DO I=0,1					!X,Y
	    DO I1=0,STHTEL-1				!TEL
	      TCOR(I1,I)=0				!RETURN CORRECTIONS
	    END DO
	  END DO
	END IF
C
	IF (DOCOR .AND. DOXCOR) THEN			!EXTRA CORRECTIONS
	  IF (IAND(LCAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_IFRMC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,NIFR-1
	      DO I1=0,3
		IMCOR(I1,I,0)=XMIFR(I1,I,0)
	      END DO
	    END DO
	  ELSE
	    DO I=0,NIFR-1
	      DO I1=0,3
		IMCOR(I1,I,0)=0
	      END DO
	    END DO
	  END IF
	  IF (IAND(LCDAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_AIFRMC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,NIFR-1
	      DO I1=0,3
		IMCOR(I1,I,1)=XMIFR(I1,I,1)
	      END DO
	    END DO
	  ELSE
	    DO I=0,NIFR-1
	      DO I1=0,3
		IMCOR(I1,I,1)=0
	      END DO
	    END DO
	  END IF
	  IF ((IAND(IOR(LCAP,LCDAP),CAP_FAR).NE.0) .AND.
	1		(A_E(SCHPE+SCH_FARAD_E).NE.0 .OR.
	1		A_E(SCHPE+SCH_AFARAD_E).NE.0)) THEN !DO
	    CALL WNGMV(4*LB_E,ROT,FACOR)
	  ELSE
	    FACOR(1,1)=1
	    FACOR(1,2)=0
	    FACOR(2,1)=0
	    FACOR(2,2)=1
	  END IF
	  IF (IAND(LCAP,CAP_POL).NE.0) THEN	 	!CORRECTION ASKED
	    DO I=0,STHTEL-1
	      DO I1=0,1
		PLCOR(I,I1)=XPOL(I,I1)
	      END DO
	    END DO
	  ELSE
	    DO I=0,STHTEL-1
	      DO I1=0,1
		PLCOR(I,I1)=0
	      END DO
	    END DO
	  END IF
	  IF (DOYCOR) THEN				!AIFR ASKED
	     IF (IAND(LCAP,CAP_AIF).NE.0 .AND.
	1	  A_J(SCHPJ+SCH_IFRAC_J).NE.0) THEN 	!WANTED AND PRESENT
		DO I=0,NIFR-1
		   DO I1=0,3
		      IACOR(I1,I,0)=XAIFR(I1,I,0)
		   END DO
		END DO
	     ELSE
		DO I=0,NIFR-1
		   DO I1=0,3
		      IACOR(I1,I,0)=0
		   END DO
		END DO
	     END IF
	     IF (IAND(LCDAP,CAP_AIF).NE.0 .AND.
	1	  A_J(SCHPJ+SCH_AIFRAC_J).NE.0) THEN !WANTED AND PRESENT
		DO I=0,NIFR-1
		   DO I1=0,3
		      IACOR(I1,I,1)=XAIFR(I1,I,1)
		   END DO
		END DO
	     ELSE
		DO I=0,NIFR-1
		   DO I1=0,3
		      IACOR(I1,I,1)=0
		   END DO
		END DO
	     END IF
	  END IF
	  GOTO 920
	END IF
C
	IF (DOMOD .AND. IAND(LCDAP,CAP_MOD).NE.0 .AND.
	1		A_J(STHPJ+STH_MDD_J).NE.0) THEN !WANTED AND PRESENT
	  CALL NMOCIX(STH,SCH,ANG,FDAT,XMOD)		!CONVERT STOKES TO XYX
	  DO I=0,NIFR-1					!ALL IFRS
	    DO I1=0,3
	      CDAT(I,I1)=-FDAT(I,I1)			!SET MODEL AS XYX
	    END DO
	  END DO
	ELSE IF (DOMOD) THEN				!RETURN ZERO
	  GOTO 910
	END IF
C
C CORRECT DATA
C
	IF (IAND(IOR(LCAP,LCDAP),
	1	CAP_TELMSK+CAP_POLMSK+CAP_IFRMSK).NE.0 .AND.
	1	(DODAT .OR. DOIFR)) THEN		!DATA ASKED
C
C APPLY AIFR
C
	  IF (IAND(LCAP,CAP_AIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_IFRAC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,NIFR-1				!ALL IFRS
	      DO I1=0,3					!ALL POL.
	        IF (WGT(I,I1).NE.0)
	1	CDAT(I,I1)=CDAT(I,I1)-XAIFR(I1,I,0)
	      END DO
	    END DO
	  END IF
C
C CORRECT TEL. FACTORS
C
	  IF (IAND(IOR(LCAP,LCDAP),CAP_TELMSK).NE.0) THEN !WANTED
	    DO I=0,3					!ALL POL.
	      I1=CPLC(I,0)				!X ID
	      I2=CPLC(I,1)				!Y ID
	      DO I3=0,NIFR-1				!ALL IFRS
	        IF (WGT(I3,I).GT.0) THEN		!DO
		  CI=CTCOR(TW(I3),I1)+CONJG(CTCOR(TE(I3),I2)) !TEL. CORRECTION
		  CDAT(I3,I)=CDAT(I3,I)*EXP(-CI)	!CORRECT DATA POINT
	        END IF
	      END DO					!IFRS
	    END DO					!POL.
	  END IF
C
C CORRECT IFR. FACTORS
C
	  IF (IAND(LCAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_IFRMC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,3					!ALL POL.
	      DO I3=0,NIFR-1				!ALL IFRS
	        IF (WGT(I3,I).GT.0) THEN		!DO
		  CI=XMIFR(I,I3,0)			!IFR APPLY
		  CDAT(I3,I)=CDAT(I3,I)*EXP(-CI)	!CORRECT DATA POINT
	        END IF
	      END DO					!IFRS
	    END DO					!POL.
	  END IF
	  IF (IAND(LCDAP,CAP_MIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_AIFRMC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,3					!ALL POL.
	      DO I3=0,NIFR-1				!ALL IFRS
	        IF (WGT(I3,I).GT.0) THEN		!DO
		  CI=-XMIFR(I,I3,1)			!IFR DE-APPLY
		  CDAT(I3,I)=CDAT(I3,I)*EXP(-CI)	!CORRECT DATA POINT
	        END IF
	      END DO					!IFRS
	    END DO					!POL.
	  END IF
C
C DE-APPLY AIFR
C
	  IF (IAND(LCDAP,CAP_AIF).NE.0 .AND.
	1		A_J(SCHPJ+SCH_AIFRAC_J).NE.0) THEN !WANTED AND PRESENT
	    DO I=0,NIFR-1				!ALL IFRS
	      DO I1=0,3					!ALL POL.
	        IF (WGT(I,I1).NE.0)
	1	CDAT(I,I1)=CDAT(I,I1)+XAIFR(I1,I,1)
	      END DO
	    END DO
	  END IF
C
C POLARISATION CORRECTION
C
	  IF (IAND(LCAP,CAP_POL).NE.0) THEN	 	!CORRECTION ASKED
	    DO I=1,2					!XY/YX
	      DO I3=0,NIFR-1				!ALL IFRS
	        IF (WGT(I3,I).GT.0 .AND. WGT(I3,0).GT.0 .AND.
	1		WGT(I3,3).GT.0) THEN		!DO IF XX,YY,XY/YX
		  CI=(CDAT(I3,0)+CDAT(I3,3))/2.		!I
		  CDAT(I3,I)=CDAT(I3,I)-CI*PI2*		!CORRECT FOR POL.
	1		(XPOL(TW(I3),I-1)-CONJG(XPOL(TE(I3),2-I)))
	        END IF
	      END DO					!IFRS
	    END DO					!POL
	  END IF
C
C FARADAY ROTATION
C
	  IF ((IAND(IOR(LCAP,LCDAP),CAP_FAR).NE.0) .AND.
	1		(A_E(SCHPE+SCH_FARAD_E).NE.0 .OR.
	1		A_E(SCHPE+SCH_AFARAD_E).NE.0)) THEN !DO
	    CALL WNGMV(4*LB_E*STHIFR,WGT,LWGT)		!MAKE LOCAL COPY WEIGHTS
	    DO I3=0,NIFR-1				!INITIALISE OWGT
	       OWGT(I3)=1
	    END DO
	    CALL NMOCXI(STH,SCH,ANG,LWGT,OWGT,CDAT,FMOD) !MAKE STOKES
	    DO I3=0,NIFR-1				!ALL IFRS
	      IF (OWGT(I3).NE.0) THEN			!Q,U PRESENT
	        CQR=FMOD(1,I3)*ROT(1,1)+FMOD(2,I3)*ROT(1,2) !ROTATE
	        FMOD(2,I3)=FMOD(1,I3)*ROT(2,1)+FMOD(2,I3)*ROT(2,2)
		FMOD(1,I3)=CQR
	      END IF
	    END DO
	    CALL NMOCIX(STH,SCH,ANG,FDAT,FMOD)		!CONVERT STOKES BACK
	    DO I3=0,NIFR-1				!RESET DATA
	      IF (OWGT(I3).NE.0) THEN			!Q, U WERE MADE
		DO I1=0,3
	          CDAT(I3,I1)=FDAT(I3,I1)		!SET ROTATED DATA
	        END DO
	      END IF
	    END DO
	  END IF
C
C MODEL 
C
	  IF (DODAT .AND. IAND(LCDAP,CAP_MOD).NE.0 .AND.
	1		A_J(STHPJ+STH_MDD_J).NE.0) THEN	!WANTED AND PRESENT
	    CALL NMOCIX(STH,SCH,ANG,FDAT,XMOD)		!CONVERT STOKES TO XYX
	    DO I=0,NIFR-1				!ALL IFRS
	      IF (IAND(LCDAP,CAP_SHF).NE.0) THEN	!SHIFT DE-APPLY
		CI=SHCOR(TW(I))+CONJG(SHCOR(TE(I)))	!SHIFT CORRECTION
		CI=EXP(-CI)				!FACTOR
		DO I1=0,3				!SHIFT MODEL DATA
		  FDAT(I,I1)=FDAT(I,I1)*CI
		END DO
	      END IF
	      DO I1=0,3					!SUBTRACT MODEL
	        IF (WGT(I,I1).NE.0)
	1		CDAT(I,I1)=CDAT(I,I1)-FDAT(I,I1)
	      END DO
	    END DO
	  END IF
C
C END CORRECTIONS
C
	END IF
C
	RETURN
C
C ERROR
C
 900	CONTINUE
	NSCSCR=.FALSE.
 910	CONTINUE
	IF (DODAT .OR. DOMOD) THEN		!CLEAR DATA
	  DO I=0,3				!ALL POLARISATIONS
	    DO I3=0,NIFR-1			!ALL IFRS
	      IF (DODAT) WGT(I3,I)=0		!ZERO WEIGHT
	      CDAT(I3,I)=0
	    END DO
	  END DO
	END IF
	IF (DOCOR) THEN				!CLEAR CORRECTION
	  DO I=0,1				!POL.
	    DO I2=0,STHTEL-1			!TEL.
	      TCOR(I2,I)=0
	    END DO
	  END DO
	  IF (.NOT.DOXCOR) TMU=-1		!SET DELETED
	END IF
 920	CONTINUE
C
	RETURN
C
C
	END

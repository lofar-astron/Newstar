#  ncomp.ssc
# 	WNB 920908
# 
#  Revisions:
#	WNB 920917	Make shells executable
#	WNB 920922	Add l switch to ar
#			Add .fun type
#	WNB 921002	Overhaul
#	JPH 921009	Make $WNG_LINK work. - Remove all target files for .dsc
#			 and .for compilations
#	WNB 921012	Some typo's
#	WNB 921016	Wrong nxup called
#	WNB 921019	Add copy option
#	WNB 921021	Suppress listing message; error for .cee
#	WNB 921104	Error in ppd update
#	WNB 921113	Postpone ar
#			Change rm for ppd
#			Remove empty ngen.ppd, global.ppd
#	WNB 921113	Use newest wntab
#	WNB 921113	Correct back
#	WNB 921122	.err output voor .pin; delete .uin
#	WNB 921130	Change tr for HP
#	WNB 921202	Include .pef
#	WNB 921204	Cater for long HP tlbset
#	WNB 921208	Change update and log
#	WNB 921208	Change .def; include dwarf/.inc; create nxldef.sun
#	WNB 921209	Add -a1, -a2, -a4, -a8
#	WNB 921211	Add .PSC
#	WNB 921215	Typo
#	WNB 921215	Add FSC, CSC
#	WNB 921218	Add SSC; site wn_...__
#	HjV 921221	Delete -f chmod; typo goto ncERR; changed rm ?*
#	WNB 921222	Include nonomatch; typo SSC; streamline psc ssc
#	WNB 921230	Shorter expressions for Alliant; cater NXFOR.SSC
#	WNB 921230	Make SSC; add some messages
#       JPH 930224      Prefix ${cwd}/ to file name in ln -s commands
#	WNB 930303	Change to SYS_BLD (VAX)
#                       Copy NXLDEF to shadow directory at NCDF.
#	WNB 930308	Forgot to delete shadowtest error
#	WNB 930330	Add .A.. and .X..; wn_gipsy__, wn_pgplot__
#	WNB 930402	Make logical link from .inc to .h locally only
#	WNB 930413	Typo NCEXE label
#	WNB 930517	Remove pgplot; put objects in WNG_OLB
#	WNB 930802	Change WNTAB into WNTINC
#	WNB 930803	Add .dsf
#
#			Note: This file contains a series of sed commands. By
#				transferring by mail some characters can be
#				lost. Make especially sure about the [].
#				All "empty" ones contain <space><tab>, i.e.
#				[ 	]
#
# 	Compile routines in nxec system. Use as:
#
#		source $WNG/ncomp.sun		(Unix)
#		@WNG:NCOMP <file>		(VAX)
#
#	This file uses many local variables set in nxec, and the
#	environment variables:
#		WNG, EXEDWARF_UNIX, WNG_OLB, WNG_OLBEXE, WNG_LIS, WNG_ERR
#	and command files nxup, wngfex,
#	and programs wntinc, sys_bldppd
#
#  Compile a file.
#
#ifdef wn_vax__
$	ON ERROR THEN GOTO ERR
$	IF F$SEARCH(P1) .EQS. "" THEN GOTO ERR		!CANNOT DO
$	IF F$PARSE(P1,,,"DEVICE","SYNTAX_ONLY")+ -
		F$PARSE(P1,,,"DIRECTORY","SYNTAX_ONLY") .NES. -
		F$ENVIRONMENT("DEFAULT")		!NOT IN CURRENT DIR.
$	THEN
$	  COPY 'F$EXTRACT(0,F$LOCATE(";",P1),P1)' []	!COPY FILE
$	  IF F$SEARCH("''FNM'''FTP'") .EQS. "" THEN GOTO ERR
$	  MSGT=MSGT+ " copied"
$	ENDIF
$	PURGE/KEEP=2 'FNM''FTP'				!PURGE AS YOU GO
#else
	set msgt="" ; set b1="Done: "			# message text/ok
	if (! -e ${lobh}.$lobe) goto NCERR		# not present
	if ("$lobh:t" != "$lobh") then			# copy first
	  'cp' ${lobh}.$lobe $lobh:t.$lobe
	  set msgt="$msgt copied [$lobh:h]"
	  set lobh=$lobh:t
	endif
#endif
#
#  Change files (-An switch)
#
#ifdef wn_vax__
$	IF CD_A .NES. "-" .AND. CD_A .GT. 0		!SWITCH GIVEN
$	THEN
$	  IF F$LENGTH(FTP) .EQ. 4 .AND. -
		(F$EXTRACT(0,2,FTP) .EQS. ".F" .OR. -
		 FTP .EQS. ".DEF" .OR. (FTP .EQS. ".INC" .AND. -
		  CWDT .EQS. "[DWARF]"))		!FORTRAN
$	  THEN
$	    IF F$SEARCH("''FNM'.TMP") .NES. "" THEN -
			DELETE 'FNM'.TMP;*		!MAKE SURE
$	    CLOSE/ERROR=LB21 AF'PID''DEP'		!OPEN INPUT
$ LB21:	    CLOSE/ERROR=LB20 AT'PID''DEP'		!OPEN OUTPUT
$ LB20:	    OPEN/ERROR=ERR/READ AF'PID''DEP' 'FNM''FTP'
$	    OPEN/ERROR=ERR/WRITE AT'PID''DEP' 'FNM'.TMP
$ LP20:	      READ/ERROR=ERR/END=LP21 AF'PID''DEP' L0	!READ LINE
$	      IF F$EXTRACT(0,1,L0) .NES. " " .AND. -
			F$EXTRACT(0,1,L0) .NES. "	" THEN GOTO LP22 !NO
$	      L1=F$EDIT(L0,"UNCOMMENT,UPCASE,COLLAPSE")	!FOR EASY SEARCH
$	      IF F$EXTRACT(0,8,L1) .NES. "INCLUDE'" THEN GOTO LP23 !NOT INCLUDE
$	      IF 2*(CD_A/2)-CD_A .NE. 0			!LOOK FOR ()
$	      THEN
$	        IF F$EXTRACT(8,1,L1) .EQS. "("		!FOUND
$	        THEN
$		  L2=F$LOCATE(")",L0)
$		  L0=F$EDIT(F$EXTRACT(0,L2,L0),"UPCASE")+ -
			F$EXTRACT(L2,-1,L0)-"("-")"	!MAKE NEW
$	          L1=F$EDIT(L0,"UNCOMMENT,UPCASE,COLLAPSE") !FOR EASY SEARCH
$		ENDIF
$	      ENDIF
$	      IF CD_A-(4*(CD_A/4)) .GT. 1		!CHANGE DEF
$	      THEN
$		IF F$LOCATE(":",F$EXTRACT(8,-1,L1)) .LT. -
			F$LOCATE("'",F$EXTRACT(8,-1,L1)) !FOUND
$		THEN
$		  L2=F$LOCATE(":",L0)+1
$		  L3=F$LOCATE("'",L0)+1
$		  L4=F$LOCATE("'",F$EXTRACT(L2,-1,L0))
$		  L0=F$EDIT(F$EXTRACT(0,L3,L0),"UPCASE")+ -
			F$EDIT(F$EXTRACT(L2,L4,L0),"UPCASE")+ -
			F$EXTRACT(L2+L4,-1,L0)
$	          L1=F$EDIT(L0,"UNCOMMENT,UPCASE,COLLAPSE") !FOR EASY SEARCH
$		ENDIF
$		IF F$LOCATE(".DEF'",F$EXTRACT(8,-1,L1)) .LT. -
			F$LOCATE("'",F$EXTRACT(8,-1,L1)) !FOUND .
$		THEN
$		  L2=F$LOCATE(".",L0)
$		  L3=F$LOCATE("'",F$EXTRACT(L2,-1,L0))
$		  L0=F$EDIT(F$EXTRACT(0,L2,L0)+"_"+ -
			F$EXTRACT(L2+1,L3,L0),"UPCASE")+ -
			F$EXTRACT(L2+L3+1,-1,L0)
$	        ENDIF
$	      ENDIF
$	      GOTO LP22					!READY INCLUDE
$ LP23:	      IF CD_A-(8*(CD_A/8)) .GT. 3		!CHANGE *4 *8
$	      THEN
$		IF F$EXTRACT(0,6,L1) .EQS. "REAL*4" .OR. -
			F$EXTRACT(0,9,L1) .EQS. "INTEGER*4"
$		THEN
$		  L2=F$LOCATE("*",L0)
$		  L3=F$LOCATE("4",L0)
$		  L0=F$EXTRACT(0,L2,L0)+F$EXTRACT(L3+1,-1,L0)
$		ENDIF
$		IF F$EXTRACT(0,6,L1) .EQS. "REAL*8"
$		THEN
$		  L2=F$LOCATE("R",L0)
$		  IF F$LOCATE("r",L0) .LT. L2 THEN L2=F$LOCATE("r",L0)
$		  L3=F$LOCATE("8",L0)
$		  L0=F$EXTRACT(0,L2,L0)+"DOUBLE PRECISION"+ -
			F$EXTRACT(L3+1,-1,L0)
$		ENDIF
$		IF F$EXTRACT(0,9,L1) .EQS. "LOGICAL*1
$		THEN
$		  L2=F$LOCATE("L",L0)
$		  IF F$LOCATE("l",L0) .LT. L2 THEN L2=F$LOCATE("l",L0)
$		  L3=F$LOCATE("1",L0)
$		  L0=F$EXTRACT(0,L2,L0)+"BYTE"+ -
			F$EXTRACT(L3+1,-1,L0)
$		ENDIF
$	      ENDIF
$ LP22:	      WRITE/ERROR=ERR AT'PID''DEP' L0		!COPY
$	      GOTO LP20					!NEXT
$ LP21:	    CLOSE/ERROR=ERR AT'PID''DEP'		!CLOSE OUTPUT
$	    CLOSE/ERROR=ERR AF'PID''DEP'		!CLOSE INPUT
$	    COPY 'FNM'.TMP 'FNM''FTP'			!NEW VERSION
$	    DELETE 'FNM'.TMP;*
$	  ENDIF
$	  IF F$LENGTH(FTP) .EQ. 4 .AND. -
		((F$EXTRACT(0,2,FTP) .EQS. ".C" .AND. -
		 FTP .NES. ".COM") .OR. -
		 (FTP .EQS. ".INC" .AND. CWDT .NES. "[DWARF]")) .AND. -
		CD_A-(4*(CD_A/4)) .GT. 1		!C
$	  THEN
$	    IF F$SEARCH("''FNM'.TMP") .NES. "" THEN -
			DELETE 'FNM'.TMP;*		!MAKE SURE
$	    CLOSE/ERROR=LB31 AF'PID''DEP'		!OPEN INPUT
$ LB31:	    CLOSE/ERROR=LB30 AT'PID''DEP'		!OPEN OUTPUT
$ LB30:	    OPEN/ERROR=ERR/READ AF'PID''DEP' 'FNM''FTP'
$	    OPEN/ERROR=ERR/WRITE AT'PID''DEP' 'FNM'.TMP
$ LP30:	      READ/ERROR=ERR/END=LP31 AF'PID''DEP' L0	!READ LINE
$	      L1=F$EDIT(L0,"UNCOMMENT,COLLAPSE")	!FOR EASY SEARCH
$	      IF F$EXTRACT(0,9,L1) .EQS. "#include""" .AND. -
			F$LOCATE(".inc""",L1) .LT. F$LENGTH(L1) !DO .INC
$	      THEN
$		L2=F$LOCATE(".inc",L0)
$		L0=F$EXTRACT(0,L2,L0)+"_"+F$EXTRACT(L2+1,-1,L0)
$	      ENDIF
$	      WRITE/ERROR=ERR AT'PID''DEP' L0		!COPY
$	      GOTO LP30					!NEXT
$ LP31:	    CLOSE/ERROR=ERR AT'PID''DEP'		!CLOSE OUTPUT
$	    CLOSE/ERROR=ERR AF'PID''DEP'		!CLOSE INPUT
$	    COPY 'FNM'.TMP 'FNM''FTP'			!NEW VERSION
$	    DELETE 'FNM'.TMP;*
$	  ENDIF
$	ENDIF
#else
	if ("$cd_a" != "-" && $cd_a > 0) then		# switch given
	  if ("$lobe" =~ f?? || "$lobe" == "def" || \
		("$lobe" == "inc" && "$cwd:t" == "dwarf")) then # Fortran
	    if (-e ${lobh}.tmp) then
	      'rm' ${lobh}.tmp
	    endif
	    if ($cd_a % 2 == 1) then			# get rid of () (A1)
	      set loa="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loa="${loa}[ 	]*'(/y:${Lowc}:${Upc}:"
	      set lob="s:^[ 	][ 	]*INCLUDE[ 	]*'("
	      set lob="${lob}\([A-Z][A-Z0-9_]*\))':	INCLUDE '\1':"
	      set loc="s:^[ 	][ 	]*PROGRAM[ 	]:	SUBROUTINE :"
	      sed -e  "$loa" -e "$lob" -e "$loc" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	    if ($cd_a % 4 > 1) then			# rid xxx: & . (A2)
	      set loa="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loa="${loa}[ 	]*'[A-Za-z][A-Za-z0-9_]*:/"
	      set loa="${loa}y:${Lowc}:${Upc}:"
	      set lob="s/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set lob="${lob}\([A-Z][A-Z0-9_]*\):/	INCLUDE '/"
	      set loc="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loc="${loc}[ 	]*'[A-Za-z][A-Za-z0-9_]*\./"
	      set loc="${loc}y:${Lowc}:${Upc}:"
	      set loca="/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set loca="${loca}[A-Z][A-Z0-9_]*\.[Dd][Ee][Ff]'/"
	      set loca="${loca}y:${Lowc}:${Upc}:"
	      set lod="s/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set lod="${lod}\([A-Z][A-Z0-9_]*\)\./	INCLUDE '\1_/"
	      sed -e "$loa" -e "$lob" -e "$loc" -e "$loca" -e "$lod" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	    if ($cd_a % 8 > 3) then			# make *4 *8   (A4)
	      set loa="s:^\([ 	][ 	]*[Rr][Ee][Aa][Ll]\)"
	      set loa="${loa}\*4:\1:"
	      set lob="s:^\([ 	][ 	]*\)[Rr][Ee][Aa][Ll]"
	      set lob="${lob}\*8:\1DOUBLE PRECISION:"
	      set loc="s:^\([ 	][ 	]*[Ii][Nn][Tt][Ee][Gg][Ee][Rr]\)"
	      set loc="${loc}\*4:\1:"
	      set lod="s:^\([ 	][ 	]*\)[Ll][Oo][Gg][Ii][Cc][Aa][Ll]"
	      set lod="${lod}\*1:\1BYTE:"
	      sed -e  "$loa" -e "$lob" -e "$loc" -e "$lod" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	  endif
	  if (("$lobe" =~ c?? && "$lobe" != "com") || \
		("$lobe" == "inc" && "$cwd:t" != "dwarf")) then # C
	    if (-e ${lobh}.tmp) then
	      'rm' ${lobh}.tmp
	    endif
	    if ($cd_a % 4 > 1) then			# rid . (A2)
	      set loa="s/^\([ 	]*\#include[ 	][ 	]*"'\"'
	      set loa="${loa}[a-z][a-z0-9_]*\)\.inc/"
	      set loa="${loa}\1_inc/"
	      sed -e  "$loa" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	  endif
	endif
#endif
#
# Compile
#
#ifdef wn_vax__
$	IF CD_C .NES. "-"				!COMPILE
$	THEN
$	  IF IQ_D .NES. "" THEN IQ_D=IQ_D+"+"		!INCLUDE FILES
$	  IF JQ_D .NES. "" THEN JQ_D=JQ_D+"+"		!INCLUDE FILES
$	  IF FTP .EQS. ".FSC" THEN GOSUB FSC		!FSC
$	  IF FTP .EQS. ".FOR" .OR. FTP .EQS. ".FVX" THEN GOSUB FOR !FORTRAN
$	  IF FTP .EQS. ".CSC" THEN GOSUB CSC		!CSC
$	  IF FTP .EQS. ".MVX" THEN GOSUB MAC		!MACRO
$	  IF FTP .EQS. ".SSC" THEN GOSUB SSC		!SSC
$	  IF FTP .EQS. ".HLP" THEN GOSUB HLP		!HELP
$	  IF FTP .EQS. ".DSC" THEN GOSUB DSC		!DSC
$	  IF FTP .EQS. ".DEF" .OR. FTP .EQS. ".PEF" .OR. -
		FTP .EQS. ".DSF" THEN GOSUB DEF		! DEF/PEF/DSF
$	  IF FTP .EQS. ".INC" THEN GOSUB DEF		!INC
$	  IF FTP .EQS. ".PSC" THEN GOSUB PSC		!PSC
$	  IF FTP .EQS. ".PIN" THEN GOSUB PIN		!PIN
$	  IF FTP .EQS. ".AVX" THEN GOSUB ALB		!SPECIAL OLB
$	  IF FTP .EQS. ".XVX" THEN GOSUB XEX		!SPECIAL EXE
$	ENDIF
$	GOSUB OTH					!ALL OTHERS
$	GOTO ERR1
#else
	if ("$cd_c" == "-") goto NCG2			# no compile
	if ($lobe == fsc || $lobe == fun) then
	  goto NCFS					# FSC
	else if ($lobe == for || $lobe == f$ext) then
	  goto NCF					# Fortran
	else if ($lobe == csc || $lobe == cun) then
	  goto NCCS					# CSC
	else if ($lobe == cee || $lobe == c$ext) then
	  goto NCC					# C
	else if ($lobe == m$ext) then
	  goto NCM					# Macro
	else if ($lobe == ssc) then
	  goto NCSS					# SSC
	else if ($lobe == hlp) then
	  goto NCH					# Help
	else if ($lobe == dsc) then
	  goto NCD					# DSC
	else if ($lobe == psc) then
	  goto NCPS					# PSC
	else if ($lobe == pin) then
	  goto NCP					# PIN
	else if ($lobe == def || $lobe == pef  || $lobe == dsf) then
	  goto NCDF					# def, pef, dsf
	else if ($lobe == inc) then
	  goto NCDF					# (dwarf) inc
	else if ($lobe == a$ext) then
	  goto NCALB					# special olb
	else if ($lobe == x$ext) then
	  goto NCXEX					# special exe
	endif
NCG2:							# others
#endif
#
#  Others
#
#ifdef wn_vax__
$ OTH:	IF CD_P .NES. "-" .AND. MSGT-"printed" .EQS. MSGT .AND. -
		F$EXTRACT(1,1,FTP) .NES. "A" .AND. -
		F$EXTRACT(1,1,FTP) .NES. "X"		!PRINT
$	THEN
$	  @WNG:WNGFEX "SP" 'FNM''FTP' 'FNM''FTP'
$	  MSGT=MSGT+" printed"
$	ENDIF
$	IF CD_L .EQS. "0"				!LIBRARY
$	THEN
$	  IF F$EXTRACT(1,1,FTP) .EQS. "A" .OR. -
		F$EXTRACT(1,1,FTP) .EQS. "X"
$	  THEN
$	    LIBRARY/TEXT 'WNG_TLB''L_D'_AX.TLB 'P1'/MODULE='FNM''FTP' !SET LIB.
$	    MSGT=MSGT+" [''F$PARSE(L_D,,,"NAME","SYNTAX_ONLY")'_AX.TLB]"
$	  ELSE
$	    LIBRARY/TEXT 'WNG_TLB''L_D'.TLB 'P1'/MODULE='FNM''FTP' !SET IN LIB.
$	    MSGT=MSGT+" [''F$PARSE(L_D,,,"NAME","SYNTAX_ONLY")'.TLB]"
$	  ENDIF
$	ENDIF
$	RETURN
#else
NCOTH:
	set l00=(`echo "$msgt" | grep printed`)		# see if printed
	if ("$cd_p" != "-" && "$l00" == "" && "$lobe" !~ [ax]??) then
	  $WNG/wngfex.sun sp ${lobh}.$lobe ${lobh}.$lobe # print
	  set msgt="$msgt printed"
	endif
	if ("$cd_l" == "0") then			# library
	  if ("$lobe" =~ [ax]??) then
	    if ($?taxset) then
	      if (`echo $taxset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}_ax.tlb" | tee -a $c_upd
	        ar crl $WNG_TLB/${l_d}_ax.tlb $taxset
	        setenv taxset "${lobh}.$lobe"		# save next for ar
	      else
	        setenv taxset "$taxset ${lobh}.$lobe"	# save for ar
	      endif
	    else
	      setenv taxset "${lobh}.$lobe"		# save for ar
	    endif
	    set l02=$WNG_TLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    set msgt="$msgt [$l00/${l_d}_ax.tlb]"
	  else
	    if ($?tlbset) then
	      if (`echo $tlbset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}.tlb" | tee -a $c_upd
	        ar crl $WNG_TLB/${l_d}.tlb $tlbset
	        setenv tlbset "${lobh}.$lobe"		# save next for ar
	      else
	        setenv tlbset "$tlbset ${lobh}.$lobe"	# save for ar
	      endif
	    else
	      setenv tlbset "${lobh}.$lobe"		# save for ar
	    endif
	    set l02=$WNG_TLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    set msgt="$msgt [$l00/${l_d}.tlb]"
	  endif
	endif
	if ($lobe == sun || $lobe == s$ext) then	# command file
	  chmod +rx ${lobh}.$lobe			# make executable
	endif
	goto NCEX					# ready
#endif
#
# Exit
#
#ifdef wn_vax__
$ ERR:	B1="Not:  "
$	CLOSE/ERROR=ERR6 NXFO'PID''DEP'
$ ERR6:	CLOSE/ERROR=ERR5 NXPO'PID''DEP'
$ ERR5:	CLOSE/ERROR=ERR4 AT'PID''DEP
$ ERR4:	CLOSE/ERROR=ERR3 AF'PID''DEP
$ ERR3:	CLOSE/ERROR=ERR2 NXL1'PID''DEP'
$ ERR2:	CLOSE/ERROR=ERR1 NXL'PID''DEP'			!MAKE SURE
$ ERR1:	TELL B1+FNM+FTP+MSGT
$	UTELL B1+FNM+FTP+MSGT
$ EXIT:	EXIT
#else
NCERR:
	set b1="Not:  "
NCEX:
	echo "$b1 ${lobh}.$lobe $msgt" | tee -a $c_upd
	goto RETURN					# exit
#endif
#
#  Fortran
#
#ifdef wn_vax__
$ FOR:	FORTRAN/LIST='WNG_LIS''FNM'/OBJECT='FNM''FQ_D' 'JQ_D''FNM''FTP'
$ FOR1:	IF $STATUS/%X1000 .EQ. %X38 THEN GOTO ERR	!DCL WARNING
$	IF F$SEARCH("''FNM'.OBJ") .EQS. "" THEN GOTO ERR
$	MSGT=MSGT+" compiled"
$	IF CD_L .NES. "-"				!TO LIB.
$	THEN
$	  LIBRARY 'WNG_OLB''L_D'.OLB 'FNM'.OBJ
$	  MSGT=MSGT+" [''F$PARSE(L_D,,,"NAME","SYNTAX_ONLY")'.OLB]"
$	ENDIF
$	IF CD_L .NES. "-"				!DELETE
$	THEN
$	  DELETE 'FNM'.OBJ;*
$	ELSE
$	  PURGE 'FNM'.OBJ
$	ENDIF
$	PURGE 'WNG_LIS''FNM'.LIS
$	IF CD_P .NES. "-"				!PRINT
$	  THEN
$	  @WNG:WNGFEX "SP" 'WNG_LIS''FNM'.LIS 'FNM''FTP'
$	  MSGT=MSGT+" printed"
$	ENDIF
$	RETURN
#else
NCF:
	set lot=f					# Fortran extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
NCF2:
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	awk '{print NR,"	",$0}' ${lobh}.$lobe > ${lobh}.l # numbers
	$fortran $fq_d $xfort $WNG_LINK/${lobh}.$lot >& \
			$WNG_ERR/${lobh}.err		# compile
	set statx=$status
NCF1:
	if (-e $WNG_ERR/${lobh}.err) then
	  cat $WNG_ERR/${lobh}.err >>! ${lobh}.l
	endif
	if (-e ${lobh}.l ) then				# format
	  pr -f -l60 -h ${lobh}.$lobe ${lobh}.l >! $WNG_LIS/${lobh}.lis
	  'rm' ${lobh}.l
	endif
	if (! -e ${lobh}.o) then			# error
	  'rm' $WNG_LINK/${lobh}.$lot
	  if (-e $WNG_LIS/${lobh}.lis && "$cd_p" != "-") then
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis $lobh:t.$lobe # print
	    set msgt="$msgt printed"
	  endif
	  goto NCERR
	else
	  set msgt="$msgt compiled"
	  if ("$cd_l" != "-") then
	    set l02=$WNG_OLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    if ($?olbset) then
	      if (`echo $olbset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}.olb" | tee -a $c_upd
	        ar crl $WNG_OLB/${l_d}.olb $olbset
		'rm' $olbset >& /dev/null
	        setenv olbset "${lobh}.o"		# save next for ar
	      else
	        setenv olbset "$olbset ${lobh}.o"	# save for ar
	      endif
	    else
	      setenv olbset "${lobh}.o"			# save for ar
	    endif
	    set msgt="$msgt [$l00/${l_d}.olb]"
	  endif
	  echo "" >> $WNG_LIS/${lobh}.lis		# add global names
	  nm ${lobh}.o >> $WNG_LIS/${lobh}.lis
	  if ("$cd_l" == "-") then			# save object
	    'mv' ${lobh}.o $WNG_OLB/${lobh}.o
	  endif
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis ${lobh}.$lobe
	    set msgt="$msgt printed"
	  endif
	endif
	goto NCOTH					# ready
#endif
#
#  Macro
#
#ifdef wn_vax__
$ MAC:	MACRO/LIST='WNG_LIS''FNM'/OBJECT='FNM''MQ_D' 'IQ_D''FNM''FTP'
$	GOTO FOR1
#else
NCM:
	set lot=s					# Macro extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null 	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
	awk '{print NR,"	",$0}' ${lobh}.$lobe >! ${lobh}.l # numbers
	$assem $mq_d $xassem -o ${lobh}.o \
			$WNG_LINK/${lobh}.$lot >&! \
			$WNG_ERR/${lobh}.err		# compile
	goto NCF1					# finish
#endif
#
#  C
#
#ifdef wn_vax__
#else
NCC:
	set lota=""					# for pre-processor
NCC1:
	set lot=c					# C extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
	awk '{print NR,"	",$0}' ${lobh}.$lobe >! ${lobh}.l # numbers
	$cee $lota $cq_d $xcee $WNG_LINK/${lobh}.$lot >&! \
			$WNG_ERR/${lobh}.err		# compile
	set statx=$status
	goto NCF1					# finish
#endif
#
#  Help
#
#ifdef wn_vax__
$ HLP:	IF F$SEARCH("''WNG_TLB'''FNM'.HLB") .EQS. "" THEN -
		LIBRARY/HELP/CREATE 'WNG_TLB''FNM'.HLB	!CREATE HELP LIB
$	IF F$SEARCH("''WNG_TLB'''FNM'.HLB") .EQS. "" THEN GOTO ERR
$	IF CD_L .EQS. "0"
$	THEN
$	  LIBRARY/HELP 'WNG_TLB''FNM'.HLB 'FNM''FTP'	!SET IN LIBRARY
$	  MSGT=MSGT+" [''FNM'.HLB]"
$	ENDIF
$	IF CD_U .NES. "-" .AND. F$TRNLNM("EXEDWARF") .NES. "" .AND. -
			F$TRNLNM("LIBDWARF") .NES. ""	!UPDATE
$	THEN
$	  @WNG:NXUP "15" "''U_D'" "''P1'" "''FNM'" ""	!UPDATE
$	  MSGT=MSGT+" updated(''U_D')"
$	ENDIF
$	RETURN
#else
NCH:
	goto NCOTH					# not yet written###
#endif
#
#  DSC
#
#ifdef wn_vax__
$ DSC:	IF F$SEARCH("WNG:WNTINC.EXE") .EQS. "" THEN GOTO ERR !CANNOT DO
$	WNT="$WNG:WNTINC"				!COMMAND TO DO
$	WNT 'FNM'
$	MSGT=MSGT+" compiled"
$	IF CD_P .NES. "-"				!PRINT
$	THEN
$	  @WNG:WNGFEX "SP" 'FNM'.LIS 'FNM'.LIS
$	  MSGT=MSGT+" printed"
$	ENDIF
$	DIR/VERSION=1/NOHEAD/NOTRAIL/COL=1/OUT='FNM''PID'.TMP -
		'FNM'.DEF,'FNM'_BD.FOR,'FNM'.INC,'FNM'_%.*
$ DSC1:
$	L00=""					!ADD YNZ
$	L01=0
$ LP17:	  IF F$EXTRACT(L01,1,CODES) .EQS. "Y"
$	  THEN
$	    L00=L00+"0"
$	  ELSE
$	    IF F$EXTRACT(L01,1,CODES) .EQS. "Z"
$	    THEN
$	      L00=L00+"-"
$	    ELSE
$	      L00=L00+CD_'F$EXTRACT(L01,1,CODES)'
$	    ENDIF
$	  ENDIF
$	  L01=L01+1
$	  IF L01 .LT. F$LENGTH(CODES) THEN GOTO LP17
$	@WNG:NXEC X2 'PNAM' 'PCOD' 'DEP' "''L00'" "''FG_CX'" -
			'FNM''PID'.TMP			!DO REST
$	IF F$SEARCH("''FNM'''PID'.TMP") .NES. "" THEN -
		DELETE 'FNM''PID'.TMP;*
$	RETURN
#else
NCD:
	if (! -e $WNG_OLBEXE/wng/wntinc.exe) goto NCERR	# cannot do
	'rm' ${lobh}.def >& /dev/null			# .def
	'rm' ${lobh}.inc >& /dev/null			# .inc
	'rm' ${lobh}_bd.for >& /dev/null		# block data
	set nonomatch; 'rm' ${lobh}_?.* >& /dev/null; unset nonomatch # offsets
	$WNG_OLBEXE/wng/wntinc.exe ${lobh}		# compile
	@ statx = $status
	if ($statx != 1) then				# error
	  goto NCERR
	else
	  set msgt="$msgt compiled"
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp ${lobh}.lis ${lobh}.lis
	    set msgt="$msgt printed"
	  endif
	endif
	set findb=""					# for repeat
	if (-e ${lobh}.def) set findb=($findb ${lobh}.def)
	if (-e ${lobh}_bd.for) set findb=($findb ${lobh}_bd.for)
	if (-e ${lobh}.inc) set findb=($findb ${lobh}.inc)
	if (-e ${lobh}_o.def) set findb=($findb `ls ${lobh}_?.*`)
	goto NCOTH					# ready
#endif
#
# CSC
#
#ifdef wn_vax__
$ CSC:
$	L1=""
$	IF F$SEARCH("WNG_OLBEXE:[WNG]GIPLIB.OLB") .NES. "" THEN -
		L1=L1+"/DEF="""wn_gipsy__"""
$	CC/LIST='WNG_LIS''FNM'/OBJECT='FNM''CQ_D'/DIAG='WNG_ERR''FNM'.ERR -
		/DEF="wn_vx__"/DEF="wn_''WNG_SITE'__"'L1' -
		 'FNM''FTP'				!COMP.
$	GOTO FOR1
#else
NCCS:
	set lota="-Dwn_${ext}__ -Dwn_${WNG_SITE}__"	# for pre-processor
	if (-e $WNG_OLBEXE/wng/giplib.olb) \
		set lota="$lota -Dwn_gipsy__"
	goto NCC1
#endif
#
# SSC
#
#ifdef wn_vax__
$ SSC:
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN -
		DELETE 'WNG_ERR''FNM'.ERR;*
$	L01=F$SEARCH("WNG:NXFOR.COM")			!SAVE COMMAND
$	OPEN/ERROR=ERR/WRITE NXFO'PID''DEP' 'FNM'.COM	!CREATE OUTPUT
$	@'L01' 'FNM''FTP' NXFO'PID''DEP' 'WNG_ERR''FNM'.ERR  VAX
$	CLOSE/ERROR=ERR NXFO'PID''DEP'
$	OPEN/ERROR=ERR/WRITE NXFO'PID''DEP' 'FNM'.SUN	!CREATE OUTPUT
$	@'L01' 'FNM''FTP' NXFO'PID''DEP' 'WNG_ERR''FNM'.ERR  UNIX
$	CLOSE/ERROR=ERR NXFO'PID''DEP'
$	IF F$SEARCH("''FNM'.COM") .NES. "" THEN PURGE/KEEP=2 'FNM'.COM
$	IF F$SEARCH("''FNM'.SUN") .NES. "" THEN PURGE 'FNM'.SUN
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN GOTO ERR !ERROR
$	MSGT=MSGT+" compiled"
$	DIR/VERSION=1/NOHEAD/NOTRAIL/COL=1/OUT='FNM''PID'.TMP -
		'FNM'.COM,'FNM'.SUN
$	GOTO DSC1
#else
NCSS:
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	if (-e ${lobh}.sun) then
	  'mv' ${lobh}.sun ${lobh}.sun.old		# make place
	endif
	if (-e ${lobh}.com) then
	  'mv' ${lobh}.com ${lobh}.com.old		# make place
	endif
	if ("$lobh" == "nxfor") then			# cater for itself
	  set lot="sun.old"
	else
	  set lot="sun"
	endif
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.$lot $WNG_ERR/${lobh}.err unix \
			>>! ${lobh}.sun
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.$lot $WNG_ERR/${lobh}.err vax \
			>>! ${lobh}.com
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e ${lobh}.sun) then
	    'rm' ${lobh}.sun				# remove
	  endif
	  if (-e ${lobh}.com) then
	    'rm' ${lobh}.com				# remove
	  endif
	  goto NCERR
	endif
	set msgt="$msgt compiled"
	set findb=(${lobh}.sun ${lobh}.com)		# do sun
	goto NCOTH					# finish
#endif
#
# FSC
#
#ifdef wn_vax__
$ FSC:
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN -
		DELETE 'WNG_ERR''FNM'.ERR;*
$	OPEN/ERROR=ERR/WRITE NXFO'PID''DEP' 'FNM'.FOR	!CREATE OUTPUT
$	@WNG:NXFOR 'FNM''FTP' NXFO'PID''DEP' 'WNG_ERR''FNM'.ERR
$	CLOSE/ERROR=ERR NXFO'PID''DEP'
$	IF F$SEARCH("''FNM'.FOR") .NES. "" THEN PURGE 'FNM'.FOR
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN GOTO ERR !ERROR
$	FORTRAN/LIST='WNG_LIS''FNM'/OBJECT='FNM''FQ_D' 'JQ_D''FNM'.FOR !COMP.
$	GOTO FOR1
#else
NCFS:
	set lot=f					# Fortran extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.sun $WNG_ERR/${lobh}.err \
			>>! $WNG_LINK/${lobh}.$lot
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e $WNG_LINK/{lobh}.$lot) then
	    'rm' $WNG_LINK/${lobh}.$lot			# remove
	  endif
	  goto NCERR
	endif
	goto NCF2					# compile
#endif
#
#  PSC
#
#ifdef wn_vax__
$ PSC:
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN -
		DELETE 'WNG_ERR''FNM'.ERR;*
$	OPEN/ERROR=ERR/WRITE NXPO'PID''DEP' 'FNM'.PIN	!CREATE OUTPUT
$	@WNG:NXPIN 'FNM''FTP' NXPO'PID''DEP' 'WNG_ERR''FNM'.ERR
$	CLOSE/ERROR=ERR NXPO'PID''DEP'
$	IF F$SEARCH("''FNM'.PIN") .NES. "" THEN PURGE 'FNM'.PIN
$	IF F$SEARCH("''WNG_ERR'''FNM'.ERR") .NES. "" THEN GOTO ERR !ERROR
$	MSGT=MSGT+" compiled"
$	DIR/VERSION=1/NOHEAD/NOTRAIL/COL=1/OUT='FNM''PID'.TMP -
		'FNM'.PIN
$	GOTO DSC1
#else
NCPS:
	if (-e $WNG_ERR/${lobh}.err) then		# catch errors
	  'rm' $WNG_ERR/${lobh}.err
	endif
	if (-e ${lobh}.pin) then			# make place
	  'mv' ${lobh}.pin ${lobh}.pin.old
	endif
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxpin.sun $WNG_ERR/${lobh}.err >>! ${lobh}.pin
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e ${lobh}.pin.old) then
	    'mv' ${lobh}.pin.old ${lobh}.pin		# restore
	  endif
	  goto NCERR
	endif
	if (-e ${lobh}.pin.old) then			# do now pin
	  'rm' ${lobh}.pin.old
	endif
	set msgt="$msgt compiled"
	set findb=(${lobh}.pin)				# do PIN
	goto NCOTH
#endif
#
#  PIN
#
#ifdef wn_vax__
$ PIN:	L0="13"						!UPDATE CODE
$	L1="PPD"					!TYPE
$	L2="=(COMP)"					!LIST TYPE
$ PIN2:	L3="$RUNDWARF:SYS_BLD''L1'.EXE"			!PROGRAM
$	ASSIGN/USER 'WNG_ERR''FNM'.ERR SYS$OUTPUT
$	L3 'FNM'/LIST'L2'				!DO
$	IF F$SEARCH("''FNM'.LIS") .EQS. "" .OR. -
		F$SEARCH("''FNM'.''L1'") .EQS. "" THEN GOTO ERR
$	MSGT=MSGT+" compiled"
$	PURGE 'FNM'.LIS,'FNM'.'L1'
$	COPY 'FNM'.LIS 'WNG_LIS''FNM'.LIS
$	PURGE 'WNG_LIS''FNM'.LIS
$	COPY 'FNM'.'L1' 'WNG_EXE'
$	PURGE 'WNG_EXE''FNM'.'L1'
$	IF CD_U .NES. "-" .AND. F$TRNLNM("EXEDWARF") .NES. "" !UPDATE
$	THEN
$	  @WNG:NXUP "''L0'" "''U_D'" "''FNM'.''L1'" "''FNM'" ""
$	  MSGT=MSGT+" updated(''U_D')"
$	ENDIF
$	IF CD_P .NES. "-"				!PRINT
$	THEN
$	  @WNG:WNGFEX "SP" 'WNG_LIS''FNM'.LIS 'FNM''FTP'
$	  MSGT=MSGT+" printed"
$	ENDIF
$	RETURN
#else
NCP:
	set l00="13"					# update code
	set l01="ppd"					# type
NCP1:
 	if (-e ${lobh}.$l01) then
	  'mv' ${lobh}."$l01" ${lobh}."$l01".old	# make place 
	endif
	if (! $?EXEDWARF_UNIX) goto NCERR		# cannot do dwarf
	if ( -e $EXEDWARF_UNIX/sys_bld"$l01".exe) then
	  set lbld="sys_bld"
	else if ( -e $EXEDWARF_UNIX/bld"$l01".exe) then
	  set lbld="bld"
	else
	  goto NCERR					# no dwarf build
	endif
	if (! -e global.ppd) then			# make sure can do
	  touch global.ppd
	endif
	if (! -e ngen.ppd) then				# make sure can do
	  touch ngen.ppd
	endif
	$EXEDWARF_UNIX/${lbld}"$l01".exe ${lobh}/list >! $WNG_ERR/$lobh.err
	set statx=$status
	if (-z global.ppd) then
	  'rm' global.ppd
	endif
	if (-z ngen.ppd) then
	  'rm' ngen.ppd
	endif
	if ( ! -e ${lobh}.$l01 || ! -e ${lobh}.lis) then # error
	  if (-e ${lobh}.$l01) then
	    'rm' ${lobh}.$l01
	  endif
	  if (-e ${lobh}.lis) then
	    'mv' ${lobh}.lis $WNG_LIS >& /dev/null
	  endif
	  goto NCERR
	else
	  'mv' ${lobh}.$l01 $WNG_EXE >& /dev/null	# set in lib. dir.
	  'mv' ${lobh}.lis $WNG_LIS >& /dev/null
	  set msgt="$msgt compiled"
	  if ("$cd_u" != "-") then			# update
	    csh -f $WNG/nxup.sun $l00 "$u_d" \
				"$WNG_EXE/${lobh}.$l01" "$lobh:t"
	    set msgt="$msgt updated($u_d)"
	  endif
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis ${lobh}.$lobe
	    set msgt="$msgt printed"
	  endif
	endif
	goto NCOTH					# ready
#endif
#
#  def
#
#ifdef wn_vax__
$ DEF:
$	LOA=""					!DO NOT
$	IF FTP .EQS. ".INC" .AND. CWDT .EQS. "[DWARF]" THEN -
			LOA="''FNM'"			!WHAT
$	IF FTP .EQS. ".INC" .AND. CWDT .NES. "[DWARF]" THEN -
			LOA="''FNM'_''FTP'"-"."
$	IF FTP .EQS. ".DEF" .OR. FTP .EQS. ".PEF" .OR. FTP .EQS. ".DSF" THEN -
			LOA="''FNM'_''FTP'"-"."
$	IF LOA .NES. ""
$	THEN
$	  IF CD_U .NES. "-"				!UPDATE
$	  THEN
$	    LOB="WNG_DIR:''CWDT'''FNM'''FTP'"		!FILE NAME
$	    ASSIGN/NOLOG "''LOB'" 'LOA'
$	    IF F$SEARCH("WNG:NXLDEF.COM") .EQS. ""
$	    THEN
$	      OPEN/ERROR=ERR/WRITE NXL'PID''DEP' WNG:NXLDEF.COM
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !01 NXLDEF.COM"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !02 WNB ''C_DATE'"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !03"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !04  Revisions: "
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !05	Automatic by NCOMP"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !06"
$	      WRITE/ERROR=ERR NXL'PID''DEP' -
			"$    !07	Logical names for all include files"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$    !08"
$	      WRITE/ERROR=ERR NXL'PID''DEP' "$   ASSIGN/NOLOG QQ WNG_TLD !Test"
$	      CLOSE/ERROR=ERR NXL'PID''DEP'
$	    ENDIF
$	    OPEN/ERROR=ERR/READ NXL'PID''DEP' WNG:NXLDEF.COM !INPUT
$	    OPEN/ERROR=ERR/WRITE NXL1'PID''DEP' NXL'PID''DEP'.TMP !OUTPUT
$ LP19:	      READ/ERROR=ERR/END=LP18 NXL'PID''DEP' L0	!READ LINE
$	      IF F$LOCATE(LOA,L0) .EQS. F$LENGTH(L0) THEN -
			WRITE/ERROR=ERR NXL1'PID''DEP' L0 !COPY
$	      GOTO LP19
$ LP18:     L0="$  ASSIGN/NOLOG "+""""+"''LOB'"+""""+" ''LOA' ! ''C_DATE'"
$	    WRITE/ERROR=ERR NXL1'PID''DEP' L0
$	    CLOSE/ERROR=ERR NXL'PID''DEP'
$	    CLOSE/ERROR=ERR NXL1'PID''DEP'
$	    SORT NXL'PID''DEP'.TMP WNG:NXLDEF.COM
$	    DELETE NXL'PID''DEP'.TMP;*
$	    PURGE WNG:NXLDEF.COM
$	    MSGT=MSGT+" updated(''U_D')"
$	  ELSE
$	    LOB="''FNM'''FTP'"				!FILE NAME
$	    ASSIGN/NOLOG "''LOB'" 'LOA'
$	  ENDIF
$	ENDIF
$	RETURN
#else
NCDF:
	if ($?c_shadow) then
	  set shadowtest
	endif
	set lot=`echo ${lobh}_$lobe | tr $Lowc $Upc`	# make UC
	set lotr=`echo ${lobh} | tr $Lowc $Upc`		# make UC
	foreach i ($c_dir)
	  unset loa
	  if ($lobe == inc && $cwd:t == dwarf) then
	    set loa="$lotr"
	  else if ($lobe == inc) then
	    set loa="${lobh}_$lobe"
	    rm -f ${lobh}.h >& /dev/null		# set locally .h
	    ln -s ${lobh}.$lobe ${lobh}.h
	  else if ($lobe == def || $lobe == pef || $lobe == dsf) then
	    set loa="$lot"
	  endif
	  if ($?loa) then				# to do
	    if ("$cd_u" != "-") then			# update
	      set loa="../$i/$loa"			# what
	      set lob="../$cwd:t/${lobh}.$lobe"		# file name
	      if ($cwd:t == $i) then
		if ($?shadowtest) then			# in shadow system?
                  if (`ls -F $WNG/nxldef.sun` =~ *@) then # link to master?
                    'mv' $WNG/nxldef.sun $WNG/nxldef.tmp  # yes,
                    'cp' $WNG/nxldef.tmp $WNG/nxldef.sun  #  make writable copy
                    'rm' $WNG/nxldef.tmp
                    unset shadowtest                    # only once
                  endif
                endif
	        if (! -e $WNG/nxldef.sun) then
	  	  cat > $WNG/nxldef.sun << EOF
#01 nxldef.sun
#02 WNB $c_date
#03
#04  Revisions:
#05	Automatic by NCOMP
#06
#07	Logical links for all include files
#08
EOF
	        endif
	        'cp' $WNG/nxldef.sun nxl$pid$dep.tmp
	        set loc="    rm -f $loa:t >& /dev/null; ln -s "
	        set loc="$loc"'$WNG/'"$lob $loa:t"
	        set loc='"'"$loc # $c_date"'"'
	        set lod='$0 !~ /'"$loa:t"'/ {print $0} END '"{print $loc}"
	        awk "$lod" nxl$pid$dep.tmp >! nxln$pid$dep.tmp
	        sort -bf +0.1 nxln$pid$dep.tmp > $WNG/nxldef.sun
	        chmod +rx $WNG/nxldef.sun
	        'rm' nxl*$pid$dep.tmp >& /dev/null
	      endif
	    else
	      set lob="${lobh}.$lobe"			# not update
	    endif
	    'rm' $loa >& /dev/null
	    ln -s $lob $loa
	  endif
	end
	if ("$cd_u" != "-") then			# update
	  set msgt="$msgt updated($u_d)"
	endif
	goto NCOTH					# finish
#endif
#
#  Special olb
#
#ifdef wn_vax__
$ ALB:	COPY 'FNM''FTP' 'WNG_OLB''FNM'.OLB		!MAKE PROPER LIBRARY
$	PURGE 'WNG_OLB''FNM'.OLB
$	MSGT=MSGT+" compiled"
$	RETURN
#else
NCALB:
	'cp' ${lobh}.${lobe} $WNG_OLB/${lobh}.olb	# make proper olb
	set msgt="$msgt compiled"
	goto NCOTH					# ready
#endif
#
#  Special exe
#
#ifdef wn_vax__
$ XEX:	COPY 'FNM''FTP' WNG:'FNM'.EXE			!MAKE PROPER EXE
$	PURGE WNG:'FNM'.EXE
$	MSGT=MSGT+" compiled"
$	RETURN
#else
NCXEX:
	'cp' ${lobh}.${lobe} $WNG_OLBEXE/wng/${lobh}.exe # make proper exe
	chmod +xr $WNG_OLBEXE/wng/${lobh}.exe
	set msgt="$msgt compiled"
	goto NCOTH					# ready
#endif
#
# Exit
#
#ifdef wn_vax__
#else
RETURN:
#endif

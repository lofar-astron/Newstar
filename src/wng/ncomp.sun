#  ncomp.ssc
# 	WNB 920908
# 
#  Revisions:
#	WNB 920917	Make shells executable
#	WNB 920922	Add l switch to ar
#			Add .fun type
#	WNB 921002	Overhaul
#	JPH 921009	Make $WNG_LINK work. - Remove all target files for .dsc
#			 and .for compilations
#	WNB 921012	Some typo's
#	WNB 921016	Wrong nxup called
#	WNB 921019	Add copy option
#	WNB 921021	Suppress listing message; error for .cee
#	WNB 921104	Error in ppd update
#	WNB 921113	Postpone ar
#			Change rm for ppd
#			Remove empty ngen.ppd, global.ppd
#	WNB 921113	Use newest wntab
#	WNB 921113	Correct back
#	WNB 921122	.err output voor .pin; delete .uin
#	WNB 921130	Change tr for HP
#	WNB 921202	Include .pef
#	WNB 921204	Cater for long HP tlbset
#	WNB 921208	Change update and log
#	WNB 921208	Change .def; include dwarf/.inc; create nxldef.sun
#	WNB 921209	Add -a1, -a2, -a4, -a8
#	WNB 921211	Add .PSC
#	WNB 921215	Typo
#	WNB 921215	Add FSC, CSC
#	WNB 921218	Add SSC; site wn_...__
#	HjV 921221	Delete -f chmod; typo goto ncERR; changed rm ?*
#	WNB 921222	Include nonomatch; typo SSC; streamline psc ssc
#	WNB 921230	Shorter expressions for Alliant; cater NXFOR.SSC
#	WNB 921230	Make SSC; add some messages
#       JPH 930224      Prefix ${cwd}/ to file name in ln -s commands
#	WNB 930303	Change to SYS_BLD (VAX)
#                       Copy NXLDEF to shadow directory at NCDF.
#	WNB 930308	Forgot to delete shadowtest error
#	WNB 930330	Add .A.. and .X..; wn_gipsy__, wn_pgplot__
#	WNB 930402	Make logical link from .inc to .h locally only
#	WNB 930413	Typo NCEXE label
#	WNB 930517	Remove pgplot; put objects in WNG_OLB
#	WNB 930802	Change WNTAB into WNTINC
#	WNB 930803	Add .dsf
#
#			Note: This file contains a series of sed commands. By
#				transferring by mail some characters can be
#				lost. Make especially sure about the [].
#				All "empty" ones contain <space><tab>, i.e.
#				[ 	]
#
# 	Compile routines in nxec system. Use as:
#
#		source $WNG/ncomp.sun		(Unix)
#		@WNG:NCOMP <file>		(VAX)
#
#	This file uses many local variables set in nxec, and the
#	environment variables:
#		WNG, EXEDWARF_UNIX, WNG_OLB, WNG_OLBEXE, WNG_LIS, WNG_ERR
#	and command files nxup, wngfex,
#	and programs wntinc, sys_bldppd
#
#  Compile a file.
#
	set msgt="" ; set b1="Done: "			# message text/ok
	if (! -e ${lobh}.$lobe) goto NCERR		# not present
	if ("$lobh:t" != "$lobh") then			# copy first
	  'cp' ${lobh}.$lobe $lobh:t.$lobe
	  set msgt="$msgt copied [$lobh:h]"
	  set lobh=$lobh:t
	endif
#
#  Change files (-An switch)
#
	if ("$cd_a" != "-" && $cd_a > 0) then		# switch given
	  if ("$lobe" =~ f?? || "$lobe" == "def" || \
		("$lobe" == "inc" && "$cwd:t" == "dwarf")) then # Fortran
	    if (-e ${lobh}.tmp) then
	      'rm' ${lobh}.tmp
	    endif
	    if ($cd_a % 2 == 1) then			# get rid of () (A1)
	      set loa="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loa="${loa}[ 	]*'(/y:${Lowc}:${Upc}:"
	      set lob="s:^[ 	][ 	]*INCLUDE[ 	]*'("
	      set lob="${lob}\([A-Z][A-Z0-9_]*\))':	INCLUDE '\1':"
	      set loc="s:^[ 	][ 	]*PROGRAM[ 	]:	SUBROUTINE :"
	      sed -e  "$loa" -e "$lob" -e "$loc" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	    if ($cd_a % 4 > 1) then			# rid xxx: & . (A2)
	      set loa="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loa="${loa}[ 	]*'[A-Za-z][A-Za-z0-9_]*:/"
	      set loa="${loa}y:${Lowc}:${Upc}:"
	      set lob="s/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set lob="${lob}\([A-Z][A-Z0-9_]*\):/	INCLUDE '/"
	      set loc="/^[ 	][ 	]*[Ii][Nn][Cc][Ll][Uu][Dd][Ee]"
	      set loc="${loc}[ 	]*'[A-Za-z][A-Za-z0-9_]*\./"
	      set loc="${loc}y:${Lowc}:${Upc}:"
	      set loca="/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set loca="${loca}[A-Z][A-Z0-9_]*\.[Dd][Ee][Ff]'/"
	      set loca="${loca}y:${Lowc}:${Upc}:"
	      set lod="s/^[ 	][ 	]*INCLUDE[ 	]*'"
	      set lod="${lod}\([A-Z][A-Z0-9_]*\)\./	INCLUDE '\1_/"
	      sed -e "$loa" -e "$lob" -e "$loc" -e "$loca" -e "$lod" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	    if ($cd_a % 8 > 3) then			# make *4 *8   (A4)
	      set loa="s:^\([ 	][ 	]*[Rr][Ee][Aa][Ll]\)"
	      set loa="${loa}\*4:\1:"
	      set lob="s:^\([ 	][ 	]*\)[Rr][Ee][Aa][Ll]"
	      set lob="${lob}\*8:\1DOUBLE PRECISION:"
	      set loc="s:^\([ 	][ 	]*[Ii][Nn][Tt][Ee][Gg][Ee][Rr]\)"
	      set loc="${loc}\*4:\1:"
	      set lod="s:^\([ 	][ 	]*\)[Ll][Oo][Gg][Ii][Cc][Aa][Ll]"
	      set lod="${lod}\*1:\1BYTE:"
	      sed -e  "$loa" -e "$lob" -e "$loc" -e "$lod" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	  endif
	  if (("$lobe" =~ c?? && "$lobe" != "com") || \
		("$lobe" == "inc" && "$cwd:t" != "dwarf")) then # C
	    if (-e ${lobh}.tmp) then
	      'rm' ${lobh}.tmp
	    endif
	    if ($cd_a % 4 > 1) then			# rid . (A2)
	      set loa="s/^\([ 	]*\#include[ 	][ 	]*"'\"'
	      set loa="${loa}[a-z][a-z0-9_]*\)\.inc/"
	      set loa="${loa}\1_inc/"
	      sed -e  "$loa" \
			${lobh}.$lobe > ${lobh}.tmp
	      'mv' ${lobh}.tmp ${lobh}.$lobe
	    endif
	  endif
	endif
#
# Compile
#
	if ("$cd_c" == "-") goto NCG2			# no compile
	if ($lobe == fsc || $lobe == fun) then
	  goto NCFS					# FSC
	else if ($lobe == for || $lobe == f$ext) then
	  goto NCF					# Fortran
	else if ($lobe == csc || $lobe == cun) then
	  goto NCCS					# CSC
	else if ($lobe == cee || $lobe == c$ext) then
	  goto NCC					# C
	else if ($lobe == m$ext) then
	  goto NCM					# Macro
	else if ($lobe == ssc) then
	  goto NCSS					# SSC
	else if ($lobe == hlp) then
	  goto NCH					# Help
	else if ($lobe == dsc) then
	  goto NCD					# DSC
	else if ($lobe == psc) then
	  goto NCPS					# PSC
	else if ($lobe == pin) then
	  goto NCP					# PIN
	else if ($lobe == def || $lobe == pef  || $lobe == dsf) then
	  goto NCDF					# def, pef, dsf
	else if ($lobe == inc) then
	  goto NCDF					# (dwarf) inc
	else if ($lobe == a$ext) then
	  goto NCALB					# special olb
	else if ($lobe == x$ext) then
	  goto NCXEX					# special exe
	endif
NCG2:							# others
#
#  Others
#
NCOTH:
	set l00=(`echo "$msgt" | grep printed`)		# see if printed
	if ("$cd_p" != "-" && "$l00" == "" && "$lobe" !~ [ax]??) then
	  $WNG/wngfex.sun sp ${lobh}.$lobe ${lobh}.$lobe # print
	  set msgt="$msgt printed"
	endif
	if ("$cd_l" == "0") then			# library
	  if ("$lobe" =~ [ax]??) then
	    if ($?taxset) then
	      if (`echo $taxset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}_ax.tlb" | tee -a $c_upd
	        ar crl $WNG_TLB/${l_d}_ax.tlb $taxset
	        setenv taxset "${lobh}.$lobe"		# save next for ar
	      else
	        setenv taxset "$taxset ${lobh}.$lobe"	# save for ar
	      endif
	    else
	      setenv taxset "${lobh}.$lobe"		# save for ar
	    endif
	    set l02=$WNG_TLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    set msgt="$msgt [$l00/${l_d}_ax.tlb]"
	  else
	    if ($?tlbset) then
	      if (`echo $tlbset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}.tlb" | tee -a $c_upd
	        ar crl $WNG_TLB/${l_d}.tlb $tlbset
	        setenv tlbset "${lobh}.$lobe"		# save next for ar
	      else
	        setenv tlbset "$tlbset ${lobh}.$lobe"	# save for ar
	      endif
	    else
	      setenv tlbset "${lobh}.$lobe"		# save for ar
	    endif
	    set l02=$WNG_TLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    set msgt="$msgt [$l00/${l_d}.tlb]"
	  endif
	endif
	if ($lobe == sun || $lobe == s$ext) then	# command file
	  chmod +rx ${lobh}.$lobe			# make executable
	endif
	goto NCEX					# ready
#
# Exit
#
NCERR:
	set b1="Not:  "
NCEX:
	echo "$b1 ${lobh}.$lobe $msgt" | tee -a $c_upd
	goto RETURN					# exit
#
#  Fortran
#
NCF:
	set lot=f					# Fortran extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
NCF2:
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	awk '{print NR,"	",$0}' ${lobh}.$lobe > ${lobh}.l # numbers
	$fortran $fq_d $xfort $WNG_LINK/${lobh}.$lot >& \
			$WNG_ERR/${lobh}.err		# compile
	set statx=$status
NCF1:
	if (-e $WNG_ERR/${lobh}.err) then
	  cat $WNG_ERR/${lobh}.err >>! ${lobh}.l
	endif
	if (-e ${lobh}.l ) then				# format
	  pr -f -l60 -h ${lobh}.$lobe ${lobh}.l >! $WNG_LIS/${lobh}.lis
	  'rm' ${lobh}.l
	endif
	if (! -e ${lobh}.o) then			# error
	  'rm' $WNG_LINK/${lobh}.$lot
	  if (-e $WNG_LIS/${lobh}.lis && "$cd_p" != "-") then
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis $lobh:t.$lobe # print
	    set msgt="$msgt printed"
	  endif
	  goto NCERR
	else
	  set msgt="$msgt compiled"
	  if ("$cd_l" != "-") then
	    set l02=$WNG_OLB
	    set l00=$l02:h ; set l01=$l02:t
	    set l00=$l00:t/$l01
	    if ($?olbset) then
	      if (`echo $olbset | wc -c` > 800) then	# limit for HP
	        echo "Update ${l_d}.olb" | tee -a $c_upd
	        ar crl $WNG_OLB/${l_d}.olb $olbset
		'rm' $olbset >& /dev/null
	        setenv olbset "${lobh}.o"		# save next for ar
	      else
	        setenv olbset "$olbset ${lobh}.o"	# save for ar
	      endif
	    else
	      setenv olbset "${lobh}.o"			# save for ar
	    endif
	    set msgt="$msgt [$l00/${l_d}.olb]"
	  endif
	  echo "" >> $WNG_LIS/${lobh}.lis		# add global names
	  nm ${lobh}.o >> $WNG_LIS/${lobh}.lis
	  if ("$cd_l" == "-") then			# save object
	    'mv' ${lobh}.o $WNG_OLB/${lobh}.o
	  endif
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis ${lobh}.$lobe
	    set msgt="$msgt printed"
	  endif
	endif
	goto NCOTH					# ready
#
#  Macro
#
NCM:
	set lot=s					# Macro extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null 	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
	awk '{print NR,"	",$0}' ${lobh}.$lobe >! ${lobh}.l # numbers
	$assem $mq_d $xassem -o ${lobh}.o \
			$WNG_LINK/${lobh}.$lot >&! \
			$WNG_ERR/${lobh}.err		# compile
	goto NCF1					# finish
#
#  C
#
NCC:
	set lota=""					# for pre-processor
NCC1:
	set lot=c					# C extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	'rm' ${lobh}.o >& /dev/null			# object
	'rm' $WNG_OLB/${lobh}.o >& /dev/null
	ln -s ${cwd}/${lobh}.$lobe $WNG_LINK/${lobh}.$lot # set link
	awk '{print NR,"	",$0}' ${lobh}.$lobe >! ${lobh}.l # numbers
	$cee $lota $cq_d $xcee $WNG_LINK/${lobh}.$lot >&! \
			$WNG_ERR/${lobh}.err		# compile
	set statx=$status
	goto NCF1					# finish
#
#  Help
#
NCH:
	goto NCOTH					# not yet written###
#
#  DSC
#
NCD:
	if (! -e $WNG_OLBEXE/wng/wntinc.exe) goto NCERR	# cannot do
	'rm' ${lobh}.def >& /dev/null			# .def
	'rm' ${lobh}.inc >& /dev/null			# .inc
	'rm' ${lobh}_bd.for >& /dev/null		# block data
	set nonomatch; 'rm' ${lobh}_?.* >& /dev/null; unset nonomatch # offsets
	$WNG_OLBEXE/wng/wntinc.exe ${lobh}		# compile
	@ statx = $status
	if ($statx != 1) then				# error
	  goto NCERR
	else
	  set msgt="$msgt compiled"
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp ${lobh}.lis ${lobh}.lis
	    set msgt="$msgt printed"
	  endif
	endif
	set findb=""					# for repeat
	if (-e ${lobh}.def) set findb=($findb ${lobh}.def)
	if (-e ${lobh}_bd.for) set findb=($findb ${lobh}_bd.for)
	if (-e ${lobh}.inc) set findb=($findb ${lobh}.inc)
	if (-e ${lobh}_o.def) set findb=($findb `ls ${lobh}_?.*`)
	goto NCOTH					# ready
#
# CSC
#
NCCS:
	set lota="-Dwn_${ext}__ -Dwn_${WNG_SITE}__"	# for pre-processor
	if (-e $WNG_OLBEXE/wng/giplib.olb) \
		set lota="$lota -Dwn_gipsy__"
	goto NCC1
#
# SSC
#
NCSS:
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	if (-e ${lobh}.sun) then
	  'mv' ${lobh}.sun ${lobh}.sun.old		# make place
	endif
	if (-e ${lobh}.com) then
	  'mv' ${lobh}.com ${lobh}.com.old		# make place
	endif
	if ("$lobh" == "nxfor") then			# cater for itself
	  set lot="sun.old"
	else
	  set lot="sun"
	endif
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.$lot $WNG_ERR/${lobh}.err unix \
			>>! ${lobh}.sun
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.$lot $WNG_ERR/${lobh}.err vax \
			>>! ${lobh}.com
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e ${lobh}.sun) then
	    'rm' ${lobh}.sun				# remove
	  endif
	  if (-e ${lobh}.com) then
	    'rm' ${lobh}.com				# remove
	  endif
	  goto NCERR
	endif
	set msgt="$msgt compiled"
	set findb=(${lobh}.sun ${lobh}.com)		# do sun
	goto NCOTH					# finish
#
# FSC
#
NCFS:
	set lot=f					# Fortran extension
	'rm' $WNG_LINK/${lobh}.$lot >& /dev/null	# link
	'rm' ${lobh}.l >& /dev/null			# listing
	'rm' $WNG_ERR/${lobh}.err >& /dev/null		# error list
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxfor.sun $WNG_ERR/${lobh}.err \
			>>! $WNG_LINK/${lobh}.$lot
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e $WNG_LINK/{lobh}.$lot) then
	    'rm' $WNG_LINK/${lobh}.$lot			# remove
	  endif
	  goto NCERR
	endif
	goto NCF2					# compile
#
#  PSC
#
NCPS:
	if (-e $WNG_ERR/${lobh}.err) then		# catch errors
	  'rm' $WNG_ERR/${lobh}.err
	endif
	if (-e ${lobh}.pin) then			# make place
	  'mv' ${lobh}.pin ${lobh}.pin.old
	endif
	awk '{print $0} END {print "endend"}' ${lobh}.$lobe \
		| csh -f $WNG/nxpin.sun $WNG_ERR/${lobh}.err >>! ${lobh}.pin
	if (-e $WNG_ERR/${lobh}.err) then
	  if (-e ${lobh}.pin.old) then
	    'mv' ${lobh}.pin.old ${lobh}.pin		# restore
	  endif
	  goto NCERR
	endif
	if (-e ${lobh}.pin.old) then			# do now pin
	  'rm' ${lobh}.pin.old
	endif
	set msgt="$msgt compiled"
	set findb=(${lobh}.pin)				# do PIN
	goto NCOTH
#
#  PIN
#
NCP:
	set l00="13"					# update code
	set l01="ppd"					# type
NCP1:
 	if (-e ${lobh}.$l01) then
	  'mv' ${lobh}."$l01" ${lobh}."$l01".old	# make place 
	endif
	if (! $?EXEDWARF_UNIX) goto NCERR		# cannot do dwarf
	if ( -e $EXEDWARF_UNIX/sys_bld"$l01".exe) then
	  set lbld="sys_bld"
	else if ( -e $EXEDWARF_UNIX/bld"$l01".exe) then
	  set lbld="bld"
	else
	  goto NCERR					# no dwarf build
	endif
	if (! -e global.ppd) then			# make sure can do
	  touch global.ppd
	endif
	if (! -e ngen.ppd) then				# make sure can do
	  touch ngen.ppd
	endif
	$EXEDWARF_UNIX/${lbld}"$l01".exe ${lobh}/list >! $WNG_ERR/$lobh.err
	set statx=$status
	if (-z global.ppd) then
	  'rm' global.ppd
	endif
	if (-z ngen.ppd) then
	  'rm' ngen.ppd
	endif
	if ( ! -e ${lobh}.$l01 || ! -e ${lobh}.lis) then # error
	  if (-e ${lobh}.$l01) then
	    'rm' ${lobh}.$l01
	  endif
	  if (-e ${lobh}.lis) then
	    'mv' ${lobh}.lis $WNG_LIS >& /dev/null
	  endif
	  goto NCERR
	else
	  'mv' ${lobh}.$l01 $WNG_EXE >& /dev/null	# set in lib. dir.
	  'mv' ${lobh}.lis $WNG_LIS >& /dev/null
	  set msgt="$msgt compiled"
	  if ("$cd_u" != "-") then			# update
	    csh -f $WNG/nxup.sun $l00 "$u_d" \
				"$WNG_EXE/${lobh}.$l01" "$lobh:t"
	    set msgt="$msgt updated($u_d)"
	  endif
	  if ("$cd_p" != "-") then			# print
	    $WNG/wngfex.sun sp $WNG_LIS/${lobh}.lis ${lobh}.$lobe
	    set msgt="$msgt printed"
	  endif
	endif
	goto NCOTH					# ready
#
#  def
#
NCDF:
	if ($?c_shadow) then
	  set shadowtest
	endif
	set lot=`echo ${lobh}_$lobe | tr $Lowc $Upc`	# make UC
	set lotr=`echo ${lobh} | tr $Lowc $Upc`		# make UC
	foreach i ($c_dir)
	  unset loa
	  if ($lobe == inc && $cwd:t == dwarf) then
	    set loa="$lotr"
	  else if ($lobe == inc) then
	    set loa="${lobh}_$lobe"
	    rm -f ${lobh}.h >& /dev/null		# set locally .h
	    ln -s ${lobh}.$lobe ${lobh}.h
	  else if ($lobe == def || $lobe == pef || $lobe == dsf) then
	    set loa="$lot"
	  endif
	  if ($?loa) then				# to do
	    if ("$cd_u" != "-") then			# update
	      set loa="../$i/$loa"			# what
	      set lob="../$cwd:t/${lobh}.$lobe"		# file name
	      if ($cwd:t == $i) then
		if ($?shadowtest) then			# in shadow system?
                  if (`ls -F $WNG/nxldef.sun` =~ *@) then # link to master?
                    'mv' $WNG/nxldef.sun $WNG/nxldef.tmp  # yes,
                    'cp' $WNG/nxldef.tmp $WNG/nxldef.sun  #  make writable copy
                    'rm' $WNG/nxldef.tmp
                    unset shadowtest                    # only once
                  endif
                endif
	        if (! -e $WNG/nxldef.sun) then
	  	  cat > $WNG/nxldef.sun << EOF
#01 nxldef.sun
#02 WNB $c_date
#03
#04  Revisions:
#05	Automatic by NCOMP
#06
#07	Logical links for all include files
#08
EOF
	        endif
	        'cp' $WNG/nxldef.sun nxl$pid$dep.tmp
	        set loc="    rm -f $loa:t >& /dev/null; ln -s "
	        set loc="$loc"'$WNG/'"$lob $loa:t"
	        set loc='"'"$loc # $c_date"'"'
	        set lod='$0 !~ /'"$loa:t"'/ {print $0} END '"{print $loc}"
	        awk "$lod" nxl$pid$dep.tmp >! nxln$pid$dep.tmp
	        sort -bf +0.1 nxln$pid$dep.tmp > $WNG/nxldef.sun
	        chmod +rx $WNG/nxldef.sun
	        'rm' nxl*$pid$dep.tmp >& /dev/null
	      endif
	    else
	      set lob="${lobh}.$lobe"			# not update
	    endif
	    'rm' $loa >& /dev/null
	    ln -s $lob $loa
	  endif
	end
	if ("$cd_u" != "-") then			# update
	  set msgt="$msgt updated($u_d)"
	endif
	goto NCOTH					# finish
#
#  Special olb
#
NCALB:
	'cp' ${lobh}.${lobe} $WNG_OLB/${lobh}.olb	# make proper olb
	set msgt="$msgt compiled"
	goto NCOTH					# ready
#
#  Special exe
#
NCXEX:
	'cp' ${lobh}.${lobe} $WNG_OLBEXE/wng/${lobh}.exe # make proper exe
	chmod +xr $WNG_OLBEXE/wng/${lobh}.exe
	set msgt="$msgt compiled"
	goto NCOTH					# ready
#
# Exit
#
RETURN:

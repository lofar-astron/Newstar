C+ WNCACD.FOR
C  WNB 910211
C
C  Revisions:
C	WNB 930713	Correct error for numbers starting with .
C
	LOGICAL FUNCTION WNCACD(TXT,PT,BAS,DVAL)
C
C  Convert a text to a value
C
C  Result:
C
C	WNCACD_L = WNCACD( TXT_C*:I, PT_J:IO, BAS_J:I, DVAL_D:O)
C				Convert the string TXT
C				starting at PT to a value VAL. Interprete
C				the string as a value of base
C				BAS (1, 2, ...., 16).
C				PT will be updated to beyond last character
C				read.
C				Possible numbers:
C				[sign][i][.i] [e|E|d|D|x|X[sign]i]
C				[sign][i].[i].[i[.i]]
C				[sign][i]:[i[:[i[.[i]]]]]
C				WNCACD will be .false. if no digit present.
C				Then: VAL=0, VC=1
C	WNCACE_L = WNCACE( TXT_C*:I, PT_J:IO, BAS_J:I, EVAL_E:O)
C	WNCACJ_L = WNCACJ( TXT_C*:I, PT_J:IO, BAS_J:I, JVAL_J:O)
C	WNCACI_L = WNCACI( TXT_C*:I, PT_J:IO, BAS_J:I, IVAL_I:O)
C	WNCACB_L = WNCACB( TXT_C*:I, PT_J:IO, BAS_J:I, BVAL_B:O)
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Entry points:
C
	LOGICAL WNCACE,WNCACJ,WNCACI,WNCACB
C
C  Arguments:
C
	CHARACTER*(*) TXT		!INPUT STRING
	INTEGER PT			!STRING POINTER
	INTEGER BAS			!VALUE BASE
	DOUBLE PRECISION DVAL		!OUTPUT VALUE
	REAL EVAL
	INTEGER JVAL
	INTEGER*2 IVAL
	BYTE BVAL
C
C  Function references:
C
	LOGICAL WNCASC,WNCASM		!SKIP CHARACTER
	LOGICAL WNCATM			!TEST CHARACTER
	CHARACTER*1 WNCAUP		!MAKE UC
	LOGICAL WNCACU			!GET UNSIGNED INTEGER
	DOUBLE PRECISION WNGDND		!MAKE NORM. ANGLE
C
C  Data declarations:
C
	INTEGER TP			!VALUE TYPE
	INTEGER LT			!LENGTH OF STRING
	DOUBLE PRECISION VAL		!VALUE
	CHARACTER*4 MODF		!BASE MODIFIERS
	  DATA MODF/'BODX'/
	INTEGER MODI(4)
	  DATA MODI/2,8,10,16/
	DOUBLE PRECISION MODD(16)
	  DATA MODD/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16/
C
C  Equivalences:
C
C
C  Commons:
C
C-
C
C INIT
C
	WNCACD=.FALSE.					!ASSUME NO DIGIT
	TP=1						!D
	GOTO 100
C
C WNCACE
C
	ENTRY WNCACE(TXT,PT,BAS,EVAL)
C
	WNCACE=.FALSE.
	TP=2						!E
	GOTO 100
C
C WNCACJ
C
	ENTRY WNCACJ(TXT,PT,BAS,JVAL)
C
	WNCACJ=.FALSE.
	TP=3						!J
	GOTO 100
C
C WNCACI
C
	ENTRY WNCACI(TXT,PT,BAS,IVAL)
C
	WNCACI=.FALSE.
	TP=4						!I
	GOTO 100
C
C WNCACB
C
	ENTRY WNCACB(TXT,PT,BAS,BVAL)
C
	WNCACB=.FALSE.
	TP=5						!B
	GOTO 100
C
C INIT
C
 100	CONTINUE
	J=MIN(16,MAX(1,BAS))				!LIMIT MODE
	VAL=0						!OUTPUT VALUE
	J0=1						!SIGN
	LT=LEN(TXT)					!STRING LENGTH
	CALL WNCASB(TXT,PT)				!SKIP SPACES
C
C GET MODE
C
	IF (WNCASC(TXT,PT,'%')) THEN			!BASE MODIFIER
	  IF (PT.LE.LT) THEN
	    I1=INDEX(MODF,WNCAUP(TXT(PT:PT)))
	    IF (I1.GT.0) THEN				!MODIFY
	      J=MODI(I1)
	      PT=PT+1
	    ELSE
	      GOTO 10					!READY
	    END IF
	  ELSE
	    GOTO 10
	  END IF
	END IF
C
C GET SIGN
C
 20	CONTINUE
	CALL WNCASB(TXT,PT)				!SKIP SPACES
	IF (WNCASC(TXT,PT,'+')) GOTO 20			!+
	IF (WNCASC(TXT,PT,'-')) THEN			!-
	  J0=-J0
	  GOTO 20
	END IF
C
C INTEGER PART
C
	IF (.NOT.WNCACU(TXT,PT,J,VAL,D1)) THEN		!NO DIGITS
	  IF (.NOT.WNCATM(TXT,PT,'.,:')) GOTO 10	!AND NO .,:
	END IF
	WNCACD=.TRUE.					!DIGIT SEEN
C
C ::
C
	IF (WNCASC(TXT,PT,':')) THEN			!H:M:S
	  J1=15						!INDICATE H
	  L1=WNCACU(TXT,PT,J,D0,D1)			!GET M
	  VAL=VAL+D0/60
	  IF (WNCASC(TXT,PT,':')) THEN
 30	    CONTINUE
	    L1=WNCACU(TXT,PT,J,D0,D1)			!GET S
	    VAL=VAL+D0/3600
	    IF (WNCASC(TXT,PT,'.')) THEN
	      L1=WNCACU(TXT,PT,J,D0,D1)			!FRACTION OF SECONDS
	      VAL=VAL+D0/D1/3600
	    END IF
	  END IF
	  VAL=WNGDND(VAL*J1)				!MAKE NORMALISED DEGREES
C
C FRACTION/..
C
	ELSE IF (WNCASC(TXT,PT,'.')) THEN		!FRACTION
	  L1=WNCACU(TXT,PT,J,D0,D1)			!GET IT
	  IF (WNCASC(TXT,PT,'.')) THEN			!D.M.S
	    J1=1					!INDICATE DEGREES
	    VAL=VAL+D0/60
	    GOTO 30
	  END IF
	  VAL=VAL+D0/D1					!ADD FRACTION
C
C EXPONENT
C
	  IF (WNCASM(TXT,PT,'EDXedx')) THEN		!EXPONENT
 41	    CONTINUE
	    J1=1					!SIGN
 40	    CONTINUE
	    IF (WNCASC(TXT,PT,'+')) GOTO 40		!+
	    IF (WNCASC(TXT,PT,'-')) THEN		!-
	      J1=-J1
	      GOTO 40
	    END IF
	    L1=WNCACU(TXT,PT,J,D0,D1)			!EXPONENT
	    IF (D0*LOG(MODD(J)).LT.LOG(1D37)) THEN	!LIMIT
	      I2=NINT(D0)
	      D0=MODD(J)**I2
	      IF (J1.LT.0) D0=1/D0			!SIGN
	    ELSE
	      IF (J1.LT.0) THEN
	        D0=0					!ZERO
	      ELSE
	        D0=1D37					!MAX
	      END IF
	    END IF
	    VAL=VAL*D0					!APPLY EXPONENT
	  END IF
C
C EXPONENT
C
	ELSE IF (WNCASM(TXT,PT,'EDXedx')) THEN		!EXPONENT
	  GOTO 41
	END IF
C
C OUTPUT
C
 10	CONTINUE
	VAL=VAL*J0					!SIGN
	IF (TP.EQ.1) THEN				!D
	  DVAL=VAL
	ELSE IF (TP.EQ.2) THEN				!E
	  EVAL=VAL
	ELSE
	  VAL=ANINT(VAL)				!MAKE INTEGER
	  IF (TP.EQ.3) THEN				!J
	    JVAL=NINT(MOD(VAL,2D0**L_J))
	  ELSE IF (TP.EQ.4) THEN			!I
	    IVAL=NINT(MOD(VAL,2D0**L_I))
	  ELSE IF (TP.EQ.5) THEN			!B
	    BVAL=NINT(MOD(VAL,2D0**L_B))
	  END IF
	END IF
C
	RETURN
C
C
	END

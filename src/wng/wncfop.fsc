C+ WNCFOP.FOR
C  WNB 890111
C
C  Revisions:
C	WNB 920120	Make unformatted output for DW
C	GvD 920513	Initialize J2 before opening file
C	CMV 940117	Allow user to get a "free COD"
C	ACX 010628	linux port
C
	SUBROUTINE WNCFOP(COD,NAM)
C
C  Open print file
C
C  Result:
C
C	CALL WNCFOP ( COD_J:I, NAM_C*:I)
C				Open print file specified by COD with name
C				NAM. If NAM=empty string, generate name.
C				If COD<0, the list F_0 ... F_15 will be 
C				scanned until a free printfile is found; 
C				the code will be returned in COD.
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WNC_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER COD				!OPEN CODE
	CHARACTER*(*) NAM			!FILE NAME
C
C  Function references:
C
	CHARACTER*80 WNFFNM			!UNIQUE FILE NAME
	INTEGER WNCALN				!STRING LENGTH
C
C  Data declarations:
C
	EXTERNAL WNCEXH				!EXIT HANDLER ROUTINE
C
C  Equivalences:
C
C
C  Commons:
C
C-
C
C	Find free printfile
C
	IF (COD.LT.0) THEN
	   I=1
	   DO WHILE (I.LE.15.AND.CLUN(I).NE.0)
	      I=I+1
	   END DO
	   IF (CLUN(I).EQ.0) THEN
	      COD=ISHFT(F_0,I-1)
	   ELSE
	      CALL WNCTXT(F_TP,'No free printfile...')
	   END IF
	END IF
C
C	Scan all codes in COD and open the file(s)
C
	J=COD					!COPY CODE
	I=-1					!FILE COUNT
	DO WHILE (IAND(J,F_ALL).NE.0)		!ALL FILES
	  IF (I.EQ.-1) THEN			!SELECT CODE
	    J1=F_T
	  ELSE IF (I.EQ.0) THEN
	    J1=F_P
	  ELSE
	    J1=ISHFT(F_0,I-1)
	  END IF
	  IF (IAND(J,J1).NE.0) THEN		!TO DO
	    IF (CLUN(I).EQ.0) THEN		!AND NOT OPEN
	      CLC(I)=0				!INIT LINE COUNT
	      CPC(I)=0				!PAGE COUNT
	      CLL(I)=CDLL			!LINE LENGTH
	      IF (I.EQ.-1) THEN
		CLL(I)=80			!FOR SCREEN
	      ELSE IF (I.EQ.0) THEN
		CLL(I)=CLL(I)-1			!FOR LOG
	      END IF
	      CPL(I)=CDPL			!PAGE LENGTH
	      IF (I.EQ.-1 .OR. (I.LE.F_FILN/2 .AND. I.GT.0))
	1			CPL(I)=0	!FOR SCREEN/NO PAGING
	      CDIS(I)=F_YES			!DEFAULT DISPOSITION
	      CHPH(I)=0				!HIGHEST HEADER SET
	      DO I1=1,CMPH			!PAGE HEADERS
		CPH(I1,I)=' '
		CSPH(I1,I)='0'			!NOT SET
	      END DO
	      IF (I.EQ.-1) THEN			!LUN
		CLUN(I)=-1
	      ELSE
		CALL WNGLUN(CLUN(I))		!GET LUN
	      END IF
	      IF (I.EQ.-1) THEN			!SCREEN
	      ELSE IF (I.EQ.0) THEN		!LOG
		CFN(I)=WNFFNM(PRGNAM(1:3),'LOG') !SET LOG NAME
	      ELSE
		CFN(I)=WNFFNM(PRGNAM(1:3),'TMP') !SET FILE NAME
	      END IF
	      CFFN(I)=NAM			!FINAL NAME
	      IF (NAM.EQ.' ') THEN
		IF (I.EQ.-1) THEN		!SCREEN
		ELSE IF (I.EQ.0) THEN		!LOG
		  CFFN(I)=PRGNAM(1:WNCALN(PRGNAM))//'.LOG'
		ELSE				!FILE
		  CFFN(I)=CFN(I)
		END IF
	      END IF
	      J2=0				!INITIALIZE STATUS
	      IF (CLUN(I).NE.0 .AND. I.NE.-1) THEN !CAN OPEN
C
C	This forces uniqueness of the file: on Unix, the open with 'NEW'
C	will fail if the file does already exist (may use 'UNKNOWN' instead)
		OPEN(UNIT=CLUN(I),FILE=CFN(I),STATUS='NEW',
	1			FORM='FORMATTED',IOSTAT=J2)
	      END IF
	      IF (J2.NE.0) THEN			!ERROR
		CALL WNGLUF(CLUN(I))		!FREE LUN
	      ELSE
		IF (CEXH(1).EQ.0) CALL WNGSXH(CEXH,WNCEXH) !DECLARE EXIT HANDLER
	      END IF
	    END IF
	  END IF
C
	  J=IAND(J,NOT(J1))			!DELETE BIT
	  I=I+1					!COUNT
	END DO
C
	RETURN
C
C
	END

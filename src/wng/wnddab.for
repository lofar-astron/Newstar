C+ WNDDAB.FOR
C  WNB 900130
C
C  Revisions:
C	WNB 910909	Add reading of DATAB, INFIX and RUN
C	WNB 910913	Add reading of DE_APPLY, APPLY
C	WNB 920303	SUN problems ()
C	HjV 920520	HP does not allow extended source lines
C	WNB 921124	Make sure lc Database
C	WNB 930602	Add IREF, CLK
C	WNB 930607	Add UFLAG
C	WNB 930610	Add WNDDA1,2,3
C	JPH 930615	CBITS_O_DEF
C	WNB 930803	Make CBITS_DEF
C	JPH 930826	WNDDA0
C	CMV 930909	Make NOISE equivalent to NOIS, correct WNDDA0
C	JEN 931130	WNDDA3: Use input YUFLAG for default string.
C	CMV 931215	If default FL_MAN, do not show OLD in string.
C	WNB 940215	Add reading of MEMORY
C	CMV 940224	Add reading of MODELB
C	WNB 940305	Add reading of X_ keywords
C	CMV 940224	Also check environment for MODELB and DATAB
C
	LOGICAL FUNCTION WNDDAB()
C
C  Get Database, Infix and Run indicator and corrections
C
C  Result:
C
C	WNDDAB_L = WNDDAB()
C			Get start database, infix and run code, flags to
C			discard and corrections to apply; memory usage
C	WNDDA0_L = WNDDA0()
C			Get start database, infix and run code and memory only
C	WNDDA1_L = WNDDA1( KW_C*:I, BITS_J:O)
C			Get apply BITS from user with keyword KW
C	WNDDA2_L = WNDDA2( KW_C*:I, BITS_J:O)
C			Get de-apply BITS from user with keyword KW
C	WNDDA3_L = WNDDA3( KW_C*:I, BITS_J:IO)
C			Get flag BITS from user with keyword KW
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WND_DEF'
	INCLUDE 'CBITS_DEF'
C
C  PIN references:
C
C	X_DATAB
C	DATAB
C	X_MODELB
C	MODELB
C	X_INFIX
C	INFIX
C	X_RUN
C	RUN
C	X_APPLY
C	APPLY
C	X_DE_APPLY
C	DE_APPLY
C	X_UFLAG
C	UFLAG
C	KW
C	X_MEMORY
C	MEMORY
C
C  Entry points:
C
	LOGICAL WNDDA0,WNDDA1,WNDDA2,WNDDA3
C
C  Parameters:
C
	INTEGER TXTL			!LENGTH INPUT DATA
	  PARAMETER (TXTL=16)
	INTEGER MAXDEF			!# OF INPUTS
	  PARAMETER (MAXDEF=16)
	INTEGER MXNAPP			!KNOWN APPLIED
	  PARAMETER (MXNAPP=11)
	INTEGER MXNDAP			!KNOWN DE-APPLIED
	  PARAMETER (MXNDAP=10)
	INTEGER MXNUFL			!KNOWN UFLAG KEYS
	  PARAMETER (MXNUFL=9)
C
C  Arguments:
C
	CHARACTER*(*) KW	!USER KEYWORD
	INTEGER BITS		!BITS MADE
C
C  Function references:
C
	LOGICAL WNDPAR		!GET USER PARAMETER
	LOGICAL WNDPAP		!SET USER PARAMETER
C
C  Data declarations:
C
	INTEGER TP			!TYPE OF CALL
	INTEGER YCAP,YCDAP,YUFLAG	!LOCAL DATA BITS
	CHARACTER*(TXTL) TXT(MAXDEF)	!INPUT DATA
	CHARACTER*80 DFLTXT		!DEFAULT STRING

	CHARACTER*4 TAPP(MXNAPP)	!APPLIED
	  DATA TAPP/'RED','ALG','OTH','EXT','REF','IREF',
	1	'CLK','POL','FAR','IFR','MIFR'/
	INTEGER SAPP(MXNAPP)
	  DATA SAPP/CAP_RED, CAP_ALG, CAP_OTH, CAP_XTNC, CAP_REFR, CAP_IREF,
	1	CAP_CLK, CAP_POL, CAP_FAR, CAP_AIFR, CAP_MIFR/ 

	CHARACTER*4 TDAP(MXNDAP)	!DE-APPLIED
	  DATA TDAP /'OTH','EXT','REF','IREF','CLK',
	1		'FAR','MOD','IFR','MIFR','SHFT'/
	INTEGER SDAP(MXNDAP)
	  DATA SDAP /CAP_OTH, CAP_XTNC, CAP_REFR, CAP_IREF, CAP_CLK,
	1		CAP_FAR, CAP_MOD, CAP_AIFR, CAP_MIFR, CAP_SHFT/

	CHARACTER*4 TUFL(MXNUFL)	!UFLAG
	  DATA TUFL /'OLD','MAN','CLIP','NOIS','SHAD','ADD',
	1		'U1','U2','U3'/
	INTEGER SUFL(MXNUFL)
	  DATA SUFL/FL_OLD, FL_MAN, FL_CLIP, FL_NOIS, FL_SHAD, FL_ADD,
	1		FL_1, FL_2, FL_3/

	LOGICAL*1 BB1
C-
C
C WNDDAB
C
	TP=0					!GET ALL
	GOTO 10
C
C WNDDA0
C
	ENTRY WNDDA0()
C
	TP=4
	GOTO 10
C
C WNDDA1
C
	ENTRY WNDDA1(KW,BITS)
C
	TP=1
	GOTO 10
C
C WNDDA2
C
	ENTRY WNDDA2(KW,BITS)
C
	TP=2
	GOTO 10
C
C WNDDA3
C
	ENTRY WNDDA3(KW,BITS)
C
	TP=3
	YUFLAG = BITS                           !USE INPUT AS DEFAULT
	GOTO 10
C
C INIT
C
 10	CONTINUE
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN		!DAB or DA0
	  DATAB=' '				!ASSUME EMPTY FOR NOW
	  MODELB=' '				!DIRECTORY FOR MODELS
	  PREFIX=' '				!USER PREFIX
	  RUNCD=.TRUE.				!RUN PROGRAM
	END IF
	WNDDAB=.TRUE.				!ASSUME OK
	YCAP=-1					!APPLY ALL
	YCDAP=0					!DE-APPLY NONE
	IF (TP.NE.3) YUFLAG = 0                 !......
C
C DATABASE
C
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN
	  JS=WNDPAR('X_DATAB',DATAB,LEN(DATAB),J0)
	  IF (JS) THEN				!RESET SWITCH VALUE
	    JS=WNDPAP('X_DATAB','# /NOASK')
	  ELSE
	    JS=WNDPAR('DATAB',DATAB,LEN(DATAB),J0,'""')
	  END IF
	  IF (.NOT.JS) THEN
	    DATAB=' '				!ASSUME NOT GIVEN
	  ELSE
	    IF (J0.LE.0) THEN			!ASSUME NOT GIVEN
	      DATAB=' '
	    END IF
	  END IF
	  IF (DATAB.EQ.' '.OR.DATAB.EQ.'*') THEN
	     CALL WNGSEG('DATAB',DATAB)
	  END IF
	  CALL WNCALC(DATAB)			!MAKE SURE LC
	END IF
C
C MODEL DIRECTORY
C
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN
	  JS=WNDPAR('X_MODELB',MODELB,LEN(MODELB),J0)
	  IF (JS) THEN				!RESET SWITCH VALUE
	    JS=WNDPAP('X_MODELB','# /NOASK')
	  ELSE
	    JS=WNDPAR('MODELB',MODELB,LEN(MODELB),J0,'""')
	  END IF
	  IF (.NOT.JS) THEN
	    MODELB=' '				!ASSUME NOT GIVEN
	  ELSE
	    IF (J0.LE.0) THEN			!ASSUME NOT GIVEN
	      MODELB=' '
	    END IF
	  END IF
	  IF (MODELB.EQ.' '.OR.MODELB.EQ.'*') THEN
	     CALL WNGSEG('MODELB',MODELB)
	  END IF
	  CALL WNCALC(MODELB)			!MAKE SURE LC
	END IF
C
C INFIX
C
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN
	  JS=WNDPAR('X_INFIX',PREFIX,LEN(PREFIX),J0)
	  IF (JS) THEN				!RESET SWITCH VALUE
	    JS=WNDPAP('X_INFIX','# /NOASK')
	  ELSE
	    JS=WNDPAR('INFIX',PREFIX,LEN(PREFIX),J0,'""')
	  END IF
	  IF (.NOT.JS) THEN
	    PREFIX=' '				!ASSUME NOT GIVEN
	  ELSE
	    IF (J0.LE.0) THEN			!ASSUME NOT GIVEN
	      PREFIX=' '
	    END IF
	  END IF
	END IF
C
C MEMORY
C
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN
	  JS=WNDPAR('X_MEMORY',XMEM,LB_J,J0)
	  IF (JS) THEN				!RESET SWITCH VALUE
	    JS=WNDPAP('X_MEMORY','# /NOASK')
	  ELSE
	    JS=WNDPAR('MEMORY',XMEM,LB_J,J0)
	  END IF
	  IF (.NOT.JS) THEN
	    XMEM=100000				!ASSUME NOT GIVEN
	  ELSE
	    IF (J0.LE.0) THEN			!ASSUME NOT GIVEN
	      XMEM=100000
	    END IF
	  END IF
	END IF
C
C RUN CODE
C
	IF (TP.EQ.0 .OR. TP.EQ.4) THEN
	  JS=WNDPAR('X_RUN',BB1,LB_B,J0)
	  IF (JS) THEN				!RESET SWITCH VALUE
	    JS=WNDPAP('X_RUN','# /NOASK')
	  ELSE
	    JS=WNDPAR('RUN',BB1,LB_B,J0,'YES')
	    IF (JS .AND. J0.GT.0 .AND. .NOT.BB1) !RESET RUNNING
	1		JS=WNDPAP('RUN','YES')
	  END IF
	  IF (.NOT.JS) THEN
	    RUNCD=.TRUE.			!ASSUME RUN
	  ELSE
	    RUNCD=.TRUE.			!ASSUME RUN
	    IF (J0.GT.0) THEN
	      IF (.NOT.BB1) THEN		!NO RUN
	        RUNCD=.FALSE.
	      END IF
	    END IF
	  END IF
	END IF
C
C GET APPLY
C
	IF (TP.EQ.0 .OR. TP.EQ.1) THEN
	  IF (TP.EQ.0) THEN
	    JS=WNDPAR('X_APPLY',TXT,MAXDEF*TXTL,J0)
	    IF (JS) THEN			!RESET SWITCH VALUE
	      JS=WNDPAP('X_APPLY','# /NOASK')
	    ELSE
	      JS=WNDPAR('APPLY',TXT,MAXDEF*TXTL,J0,'*')
	    END IF
	  ELSE
	    JS=WNDPAR(KW,TXT,MAXDEF*TXTL,J0,'*')
	  END IF
	  IF (.NOT.JS) THEN			!GET INFO
	    YCAP=-1				!ASSUME ALL
	  ELSE
	    IF (J0.EQ.0) THEN
	      YCAP=0				!ASSUME NONE
	    ELSE IF (J0.LT.0) THEN		!ALL
	      YCAP=-1
	    ELSE
	      YCAP=0
	      DO I=1,J0				!ALL INPUTS
	        IF (TXT(I).EQ.'NONE') THEN
	          YCAP=0
	        ELSE IF (TXT(I).EQ.'ALL') THEN
	          YCAP=-1
	        ELSE
	  	  DO I1=1,MXNAPP
		    IF (TXT(I).EQ.TAPP(I1)) THEN !FOUND
		      YCAP=IOR(YCAP,SAPP(I1))	!SET
		    ELSE IF (TXT(I).EQ.'NO'//TAPP(I1)) THEN
		      YCAP=IAND(YCAP,IEOR(SAPP(I1),CAP_ALLMSK))
		    END IF
	          END DO
	        END IF
	      END DO
	    END IF
	  END IF
	END IF
C
C GET DE-APPLY
C
	IF (TP.EQ.0 .OR.TP.EQ.2) THEN
	  IF (TP.EQ.0) THEN
	    JS=WNDPAR('X_DE_APPLY',TXT,MAXDEF*TXTL,J0)
	    IF (JS) THEN				!RESET SWITCH VALUE
	      JS=WNDPAP('X_DE_APPLY','# /NOASK')
	    ELSE
	      JS=WNDPAR('DE_APPLY',TXT,MAXDEF*TXTL,J0,'NONE')
	    END IF
	  ELSE
	    JS=WNDPAR(KW,TXT,MAXDEF*TXTL,J0,'NONE')
	  END IF
	  IF (.NOT.JS) THEN			!GET INFO
	    YCDAP=0				!ASSUME NONE
	  ELSE
	    IF (J0.EQ.0) THEN
	      YCDAP=0				!ASSUME NONE
	    ELSE IF (J0.LT.0) THEN		!ALL
	      YCDAP=-1
	    ELSE
	      YCDAP=0
	      DO I=1,J0				!ALL INPUTS
	        IF (TXT(I).EQ.'NONE') THEN
	          YCDAP=0
	        ELSE IF (TXT(I).EQ.'ALL') THEN
	          YCDAP=-1
	        ELSE
		  DO I1=1,MXNDAP
		    IF (TXT(I).EQ.TDAP(I1)) THEN !FOUND
		      YCDAP=IOR(YCDAP,SDAP(I1))	!SET
		    ELSE IF (TXT(I).EQ.'NO'//TDAP(I1)) THEN
		      YCDAP=IAND(YCDAP,IEOR(SDAP(I1),CAP_ALLMSK))
		    END IF
	          END DO
	        END IF
	      END DO
	    END IF
	  END IF
	END IF
C
C GET UFLAG
C
	IF (TP.EQ.0 .OR. TP.EQ.3) THEN
	  IF (TP.EQ.0) THEN
	    JS=WNDPAR('X_UFLAG',TXT,MAXDEF*TXTL,J0)
	    IF (JS) THEN			!RESET SWITCH VALUE
	      JS=WNDPAP('X_UFLAG','# /NOASK')
	    ELSE
	      JS=WNDPAR('UFLAG',TXT,MAXDEF*TXTL,J0,'NONE')
	    END IF
	  ELSE
            DFLTXT = 'NONE'                     !DEFAULT
            I = 1
	    DO I1=1,MXNUFL
	      IF (SUFL(I1).NE.FL_OLD.AND.	!Ignore OLD (=MAN)
	1	  IAND(YUFLAG,SUFL(I1)).NE.0) THEN   !DEFAULT FLAG TYPE
		DFLTXT(I:) = TUFL(I1)(:4)//','  !ADD TO DEFAULT STRING
                I = I+5                         !INCREMENT POINTER
              END IF
	    END DO
            IF (I.GT.1) DFLTXT(I-1:) = ' '      !REMOVE CLOSING COMMA
            IF (YUFLAG.EQ.FL_ALL) DFLTXT = 'ALL'
            IF (YUFLAG.EQ.0) DFLTXT = 'NONE'    !DEFAULT
	    JS=WNDPAR(KW,TXT,MAXDEF*TXTL,J0,DFLTXT)
	  END IF
	  IF (.NOT.JS) THEN			!GET INFO
	    YUFLAG=0				!ASSUME NONE
	  ELSE
	    IF (J0.EQ.0) THEN
	      YUFLAG=0				!ASSUME NONE
	    ELSE IF (J0.LT.0) THEN		!ALL
	      YUFLAG=FL_ALL
	    ELSE
	      YUFLAG=0
	      DO I=1,J0				!ALL INPUTS
	        IF (TXT(I).EQ.'NONE') THEN
	          YUFLAG=0
	        ELSE IF (TXT(I).EQ.'ALL') THEN
	          YUFLAG=FL_ALL
	        ELSE
		  IF (TXT(I).EQ.'NOISE') TXT(I)='NOIS' 
	  	  DO I1=1,MXNUFL
		    IF (TXT(I).EQ.TUFL(I1)) THEN !FOUND
		      YUFLAG=IOR(YUFLAG,SUFL(I1)) !SET
		    END IF
	          END DO
	        END IF
	      END DO
	    END IF
	  END IF
	END IF
C
C READY
C
	IF (TP.EQ.0) THEN			!SET GLOBAL
	  XCAP=YCAP
	  XCDAP=YCDAP
	  XUFLAG=YUFLAG
	ELSE IF (TP.EQ.1) THEN			!RETURN APPLY
	  BITS=YCAP
	ELSE IF (TP.EQ.2) THEN			!RETURN DE-APPLY
	  BITS=YCDAP
	ELSE IF (TP.EQ.3) THEN			!RETURN UFLAG
	  BITS=YUFLAG
	END IF
C
	RETURN					!READY
C
C
	END

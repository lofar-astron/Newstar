/* wndpar.cun
.  WNB 920122
.
.   Revisions:
.	WNB 921216	Make cun
.	CMV 940111	Changed for alpha, call get_parm_n and _c
.			directly without 4 for/c interfaces
.	JPH 940921	Abort program on PPD_KEYNOTFND status
	JPH 950116	Call wndpohc_
	JPH 960622	Save/restore control-C status xhcc[0:1]
	HjV 970723	Remove control-C stuff (commented out)
	CMV 031205	Changed for stdarg
...									*/
/*
.   Include files:
...									*/
#include <stddef.h>
/*#include <varargs.h>*/
#include <stdarg.h>
/*
.  Get user parameter
...									*/
#ifdef wn_al__
				long wndpd1_(va_alist)
#else
				int wndpar_(char* kw_in,...)
#endif
/*
.   Result:
.
.	WNDPAR_L = WNDPAR( KW_C*:I, VALUE, SIZE, NR ,'default',defarr,ndef)
.				Get DWARF user parameter.
.				Default arguments may be omitted
...									*/
/*
.   Arguments:
...									*/
/*		va_dcl	*/			/* address list to get	*/
{
#include "wng_inc"
#include "wxh_inc"
#define ppd_keynotfnd 0x080280da		/* see PPDMSG_DEF	*/
/*
.   Parameters:
...									*/
/*
.   Function references:
...									*/
	int get_parm_n_();			/* routines to call	*/
	int get_parm_c_();
	void wndpohc_();
/*
.   Data declarations:
...									*/
	static int  undefj=-2147483648;		/* Default: undef_j     */
	static char undefb=-128;		/* Default: undef_b	*/
	static char *blank=" ";			/* Default: blank	*/

	va_list ap;				/* list argument ptr	*/
	int iarg = 0;				/* argument count	*/
	int istr = 0;				/* string counts	*/
	char *p=NULL;				/* pointer to argument  */

	char *kw=NULL;				/* name of keyword      */
	char *value=NULL;			/* pointer to value     */
	int  *size=NULL;			/* size of value        */
	int  *nr=&undefj;			/* number returned      */
	char *defstr=blank;			/* default string	*/
	char *defval=&undefb;			/* default array        */
	int  *ndef=&undefj;			/* number of elements   */

	int  flags=0;				/* flags		*/
	char string[256];			/* return value         */
	int  out;				/* output files         */

	int  lkw=0;				/* length of keyword    */
	int  la1=-1;				/* length of value      */
	int  la2=-1;				/* length of defstr     */
	int  la3=0;				/* length of defval     */
	int  ldef=1;				/* length of defstr     */
	int  lstr=256;				/* length of string     */
/*	int  lxhcc[2];	*/			/* save xhcc		*/

	static char *fmt_err="Error in argument list of WNDPAR";
	static char *fmt_out="!AS = !AS";
	static char *abort=
	  "EXITING ON FATAL PROGRAMMING ERROR - report to NEWSTAR manager";
/*-									*/
/*
. Get argument list
...									*/
	va_start(ap,kw_in);
        kw=kw_in;
        iarg=1;

	while (iarg <= 7) {
	  p = va_arg(ap, char *);
	  if (p > 0 && p < 65536) break;	/* found string	length  */
	  if (iarg==0)      kw=p;		/* found keyword        */
 	  else if (iarg==1) value=p;		/* found value          */
 	  else if (iarg==2) size=(int *)p;	/* found size           */
 	  else if (iarg==3) nr=(int *)p;	/* found return nr      */
 	  else if (iarg==4) defstr=p;		/* found default string */
 	  else if (iarg==5) defval=p;		/* found default array  */
 	  else if (iarg==6) ndef=(int *)p;	/* found default array  */
	  iarg++;
	}

/*
. Get string lengths
...									*/
	while (istr < iarg && p > 0 && p < 65536) {
	  if (istr==0)      lkw=(int )p;	/* length keyword       */
 	  else if (istr==1) la1=(int )p;	/* length value/defstr  */
 	  else if (istr==2) la2=(int )p;	/* length defstr/defval */
 	  else if (istr==3) la3=(int )p;	/* length defval        */
	  istr++;
	  p = va_arg(ap, char *);
        }
        va_end(ap);
/*
   If string undefined, point it to blank
*/
	if (
#ifdef wn_da__
           defstr==0x100000000  || 
#endif
           defstr==NULL || defstr<0) defstr=blank;
/*
   Catch errors: we need at least 3, at most 7 arguments,
   at least the keyword should be char * (defstr can be passed as A_B(-A_OB),
   at most keyword, value, defstr and defval are char *, but we do not test
   on too many char *.
*/
        if (iarg==8 || iarg<3 || lkw==0) {
	   out=F_TP;
	   wnctxt_(&out,fmt_err,strlen(fmt_err));
	   return(0);
        }

/*
    Switch off interrupts
*/
/*	Remove Control-c stuff
	lxhcc[0]=wxh_com_.xhcc[0];
	lxhcc[1]=wxh_com_.xhcc[1];
        wxh_com_.xhcc[0]=1;
        wxh_com_.xhcc[1]=0;
*/
        wxh_com_.xhcc[0]=1;
/*
   Call get_parm_n first, this works unless datatype is C
   If it fails, we try get_parm_c (since defstr may have been 
   passed as an undefined (A_B(-A_OB)) we set la3 to la2 if it is empty.
   Print whatever we found...
*/
	if (defstr==blank) ldef=1; else ldef=la1;
	wng_com_.e_c = 
           get_parm_n_(kw,value,size,nr,defstr,defval,ndef,&flags,string,
	               lkw,             ldef,                      lstr);
	if (wng_com_.e_c==0) {
	   if (defstr==blank) ldef=1; else ldef=la2;
           if (la3==0) la3=la2;
	   wng_com_.e_c =
	      get_parm_c_(kw,value,size,nr,defstr,defval,ndef,&flags,string,
	                  lkw, la1,        ldef,  la3,               lstr);
	}
/*
   If the keyword is not found, this is a programming error and we abort the
   program immediately
*/
	if (wng_com_.e_c ==ppd_keynotfnd) {
	   out=F_TP;
	   wnctxt_(&out,abort,strlen(abort));
	   wngex_();
	}

        out=F_P+F_P1;
	wnctxt_(&out,fmt_out,kw,string,strlen(fmt_out),lkw,lstr);
/*
    Switch interrupts back on, exit if ^C seen
*/
/*	Remove Control-c stuff
        wxh_com_.xhcc[0]=lxhcc[0];
	if (wxh_com_.xhcc[1]!=0) {
	   wxh_com_.xhcc[1]=0;
	   wngex_();
	}else{
	   wxh_com_.xhcc[1]=lxhcc[1];
	}
*/
        wxh_com_.xhcc[0]=0;
        if (wxh_com_.xhcc[1]!=0) {
           wxh_com_.xhcc[1]=0;
           wngex_();
        }


/*
    Clear dynamic prompt and Return
*/
	if (! wng_com_.a_y.a_j[0]) wndpohc_(); 
	return( (wng_com_.e_c&1) );
}
/*
.
...									*/

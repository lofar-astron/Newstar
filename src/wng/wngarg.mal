|+ WNGARG.MAL
|  WNB 890308
|
|  Revisions:
|
|	.TITLE	WNGARG	ARGUMENT MANIPULATION
|	.IDENT	/WNB.01/
|
|  Argument list manipulation
|
|  Result:
|
|	J = WNGARG()			Address of argument list (point at
|					# of arguments) of containing routine
|	L = WNGART( N_J:I)		Test if argument N was present in
|					argument list of containing routine.
|	J = WNGARN()			Returns the number of arguments in the
|					containing routine's argument list.
|	CALL WNGARQ( ENTRY_ENT:O, ARGL(0:*)_J:I) Transfer to routine ENTRY
|					with ARGL argument list
|	or: VAL=WNGARQ(...)		with VAL depending on ROUT
|	J = WNGARA( VAR_J:I)		get address of VAR
|
|  Symbol definition:
|
|
|  Program section:
|
	.text
|
|  Global references:
|
	.globl	_wngarg_,_wngart_,_wngarn_,_wngarq_
	.globl	_wngara_
|
|  Commons:
|
|-
|
| WNGARG
|
_wngarg_:
	linkw	a6,#-8				|stack frame
	movl	a0,a6@(-4)			|save argument pointer
	movl	a6@,a1				|old frame pointer
	movl	a1@(-4),a1			|embracing arg pointer
	tstl	a1
	beq	A1				|not present
	movl	a1,d0				|return address
A2:	unlk	a6				|restore frame
	rts					|ready
A1:	movl	#V1,d0				|return dummy address
	bra	A2
|
| WNGART
|
_wngart_:
	linkw	a6,#-8			|stack frame
	clrl	d0			|assume error
	movl	a0,a6@(-4)		|save argument pointer
	beq	B1			|no argument specified
	movl	a6@,a1			|old frame pointer
	movl	a1@(-4),a1		|embracing argument pointer
	tstl	a1
	beq	B1			|no embracing arguments
	movl	a0@@,d1			|N to test
	ble	B1			|illegal
	cmpw	a1@(-2),d1		|present?
	bgt	B1			|no
	tstl	a1@(-4:W)[d1:W:L]	|address zero?
	beq	B1			|yes, omitted
	subql	#1,d0			|set .true.
B1:	unlk	a6			|restore frame
	rts				|return
|
| WNGARN
|
_wngarn_:
	linkw	a6,#-8			|stack frame
	clrl	d0			|assume error
	movl	a0,a6@(-4)		|save argument pointer
	movl	a6@,a1			|old frame pointer
	movl	a1@(-4),a1		|embracing argument pointer
	tstl	a1
	beq	C1			|no embracing arguments
	movw	a1@(-2),d0		|# of arg
C1:	unlk	a6			|restore frame
	rts				|return
|
| WNGARQ
|
_wngarq_:
	linkw	a6,#-8			|stack frame
	movl	a0,a6@(-4)		|save arg pointer
	movl	a0@,a2			|routine address
	movl	a0@(4),a0		|argument list address
	jsr	a2@			|do routine
	unlk	a6			|restore frame
	rts				|return
|
| WNGARA
|
_wngara_:
	movl	a0@,d0			|variable address
	rts				|return
|
|  Data section:
|
	.even
|
	.data
|
V2:	.long	0
V1:	.long	0
|
	.even
|

C+ WNGMED.FSC
C  HjV 941107	Created
C
C  Revisions:
C	CMV 941111	Do not pass size if zero, option to override owner
C	CMV 940120	Defensive rounding of size in Mbyte
C	CMV 940125	More digits for size
C	CMV 950127	Changed to logical function, test on NotFound
C	HjV 961112	Close connection first
C
	LOGICAL FUNCTION WNGMED(VOLUME,LABEL,SIZE,SEQNR)
C
C  Add LABEL to VOLUME. If VOLUME does not exist, add VOLUME
C
C  This routine will call lower level routines only for Unix systems at NFRA
C
C  Result:
C
C	J0=WNGMED( VOLUME_C*:I, LABEL_J:I, SIZE_R:I, SEQNR_J:I)
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	CHARACTER*6 VOLUME			!Volume to add label to
	INTEGER     LABEL			!Label to add
	REAL        SIZE			!Size of label in Mbytes
	INTEGER     SEQNR			!Sequencenr. of label
C
C  Entry points:
C
C
C  Function references:
C
	LOGICAL WNDPAR				!Get DWARF parameter
	INTEGER WNFSCI				!Talk to Scissor qed deqmon
	INTEGER WNFSCO				!Open connection
	INTEGER WNFSCC				!Close connection
C
C  Data declarations
C
	CHARACTER*4    TYPE			!Medium type
	CHARACTER*8    OWNER			!Username
	CHARACTER*1024 COMMAND			!Command to send
C
C-
	WNGMED=.FALSE.				!Assume failure
#ifdef wn_un__
#ifdef wn_nfra__
C
C  Close connection first to prevent time-outs
C  Begin November 1996 we suddently had problems and got
C  messages like: broken pipe
C
	J0=WNFSCC()				!Close connection
C
C  Open connection
C
	J0=WNFSCO()				!Open connection
	IF (MOD(J0,100).NE.0) THEN
	   CALL WNCTXT(F_TP,'Could not connect to Scissor')
	   RETURN				!Failed
	END IF
C
C  Send command to MEDIAD
C
	CALL WNGSEG('SCIOWNER',OWNER)
	IF (OWNER.EQ.' ') CALL WNGSGU(OWNER)	!Get username
 100	CONTINUE
	IF (SIZE.LE.0) THEN
	  CALL WNCTXS (COMMAND,
     1		'PUT=MEDIAD LABEL=!UJ VOLUME=!AS '//
     1		'SEQNUMBER=!UJ CREATOR=!AS',
     1		LABEL,VOLUME,SEQNR,OWNER)
	ELSE
	  SIZE=SIZE+0.00005
	  CALL WNCTXS (COMMAND,
     1		'PUT=MEDIAD LABEL=!UJ VOLUME=!AS '//
     1		'SIZE=!F10.4 SEQNUMBER=!UJ CREATOR=!AS',
     1		LABEL,VOLUME,SIZE,SEQNR,OWNER)
	END IF
	J0=WNFSCI(COMMAND)			!Send command
C
C  If "Not Found": Send command to VOLUMES and retry
C
	IF (J0.EQ.205) THEN
 200	  CONTINUE
	  IF (.NOT.WNDPAR('VOLUME_TYPE',TYPE,LEN(TYPE),J0,'DOD')) THEN
	    GOTO 200				!Repeat
	  ELSE IF (J0.LE.0) THEN
	    GOTO 200				!Must specify
	  END IF
	  CALL WNCTXS (COMMAND,
     1		'PUT=VOLUMES VOLUME=!AS TYPE=!AS OWNER=!AS',
     1		VOLUME,TYPE,OWNER)		!Try to add new VOLUME
	  J0=WNFSCI(COMMAND)			!Send command
	  IF (MOD(J0,100).NE.0) THEN		!Failed
	    CALL WNCTXT(F_TP,'Error !UJ updating VOLUMES',J0)
	  ELSE
	    CALL WNCTXT(F_TP,'Added volume !AS on VOLUMES',VOLUME)
	    GOTO 100				!Now try label again
	  END IF
C
C  If other failure, just notify
C
	ELSE IF (MOD(J0,100).NE.0) THEN
	  CALL WNCTXT(F_TP,'Error !UJ updating MEDIAD',J0)
C
C  If no error, return success
C
	ELSE
	  CALL WNCTXT(F_TP,'Added label !UJ to volume !AS on MEDIAD',
     1		LABEL,VOLUME)
	  WNGMED=.TRUE.
	END IF
C
C  Close connection to prevent time-outs
C
	J0=WNFSCC()				!Close connection
C
#endif
#endif
	RETURN
C
	END

/* wngsdi.cun
.  HjV 920702
.
.   Revisions:
.	WNB 930331	Collect all system dummy interface C routines in
.			this module (wngexi.chp wngsig.chp wngqsr.chp
.			wngtim.chp wngsys.chp).
.			Add setenv, getenv, unsetenv
.	WNB 930413	Add gethost
.	WNB 930416	Typos in HP getenv
.	WNB 930427	Layout; make setenv/unsetenv for HP
.	WNB 930429	SUN must use putenv i.s.o (un)setenv
.	HjV 930503	eqs undefined (for SUN), so add it
.	WNB 930526	Add getlogin
.	CMV 940125	Add tflush
.	CMV 940504	Add find_node
.	CMV 940513	Find_node also recognises lower case
.	CMV 940628	Add qsort for Alpha, remove some comments
.	CMV 940628	Correct match_filtyp
.	CMV 940628	Add DO_SYSTEM for all machines
.	CMV 940629	Trap getlogin error
.	CMV 940926	Changes for solaris
.	HjV 960613	Typo (Include was missing > )
.	HjV 970408	For Solaris use special 'struct dirent'
...									*/
#include <string.h>			/* for strcpy 			*/

#ifdef wn_hp__
	char eqs[] = "=";		/* for setenv			*/
#endif
#ifdef wn_sw__
	char eqs[] = "=";		/* for setenv			*/
#endif
/*........................................................................
.	FTN_EXIT
........................................................................*/
#ifdef wn_hp__
				void FTN_EXIT (stat)
/*
.  Provide FTN_EXIT for HP to exit image with specified status
.
.   Result:
.
.	CALL FTN_EXIT( STAT_J:I)
.					Exit image
...									*/
/*
.   Arguments:
...									*/
		int  *stat;		/* 	exit status of image	*/
{
/*  Exit image
.									*/
	exit (*stat);
}
/*
.
...									*/
#endif
/*........................................................................
.	signal_
........................................................................*/
#ifdef wn_hp__
				long signal_(signum,proc,flag)
/*
.  Set signal trap routine for HP
.  This implementation is only a subset of the standard SUN (and other Unix)
.  Fortran routine signal. It does not use the flag-argument.
.  It only sets the trap-routine proc.
.
.   Result:
.
.	SIGNAL_J = signal_J( SIGNUM_J:I, PROC_J:I, FLAG_J:I))
.					Set signal trap routine
...									*/
/*
.   Arguments:
...									*/
		long *signum;		/* signal number 		*/
		long *proc;		/* address of trap routine 	*/
		long *flag;		/* NOT USED 			*/
{
/*
.   Function references:
	long signal();
...									*/
/*  Set trap routine
.									*/
	return signal(*signum,proc);
}
/*
.
...									*/
#endif
/*........................................................................
.	FTN_SYSTEM
........................................................................*/
#ifdef wn_hp__
				int FTN_SYSTEM (comm)
/*
.  To provide FTN_SYSTEM for HP to execute shell command
.
.   Result:
.
.	FTN_SYSTEM_J = FTN_SYSTEM( COMM_C*:I) Execute command COMM
.					
...									*/
/*
.   Arguments:
...									*/
		char  *comm;		/* command to be executed 	*/
{
/* Start subroutine 
.									*/
	return system(comm);
}
/*
.
...									*/
#endif
/*........................................................................
.	ctime_
........................................................................*/
#ifdef wn_hp__
				ctime_ (strtim,leng,time)
/*
.  Convert time and date to string
.
.   Result:
.
.	 CALL CTIME( STRTIM_C:O, LENG_J:I, TIME_J:I)
.					
...									*/
/*
.   Arguments:
...									*/
		char  strtim[];		/* time and date in string 	*/
		int   leng;		/* max. length of STRTIM   	*/
		int   *time;		/* time/date		   	*/
{
/*
.   Function references:
...									*/
	char *ctime();
/*
.   Data declarations:
...									*/
	char *cp;
/*-									*/
/*  Convert date and time to string
.  Copy to string argument and append with blanks
.									*/
	cp = ctime (time);
	if (leng>24) {
	    memcpy (strtim, cp, 24);
	    memset (&strtim[24], ' ', leng-24);	/* fill with blanks */
	} else {
	    memcpy (strtim, cp, leng);
	}
}
/*
.
...									*/
#endif
#ifdef wn_hp__
/*........................................................................
.	time_
........................................................................*/
/*
.
.   Revisions:
...									*/
				int time_ ()
/*
.  Get time
.
.   Result:
.
.	wngtim = time_()
.					
...									*/
/*
.   Arguments:
...									*/
{
/*
.   Function references:
...									*/
	int time();
/*-									*/
/*  Get time
.									*/
	return time(0);
}
/*
.
...									*/
#endif
/*........................................................................
.	qsort_
........................................................................*/
#ifdef wn_hp__
				void qsort_(base,nel,width,compar)
/*
.  Start quicker-sort algorithm routine.
.  This implementation is only a subset of the standard Unix Fortran
.  routine qsort. 
.
.   Result:
.
.	call qsort_( BASE_C:I, NEL_J:I, WIDTH_J:I, COMPAR_J:I)
.					Start quicker-sort routine.
...									*/
/*
.   Arguments:
...									*/
		char *base;		/* pointer to base of table 	*/
		int *nel;		/* Nr. of elements in table 	*/
		int *width;		/* size, in bytes, of each 
					   element in the table  	*/
		int (*compar)();	/* comparision function 	*/
{
/*  Set trap routine
.									*/
	qsort(base,*nel,*width,compar);
}
/*
.
...									*/
#endif
#ifdef wn_da__
				void qsort_(base,nel,width,compar)
/*
.   Arguments:
...									*/
		char *base;		/* pointer to base of table 	*/
		int *nel;		/* Nr. of elements in table 	*/
		int *width;		/* size, in bytes, of each 
					   element in the table  	*/
		int (*compar)();	/* comparision function 	*/
{
/*  Set trap routine
.									*/
	qsort(base,*nel,*width,compar);
}
/*
.
...									*/
#endif
#ifdef wn_li__
				void qsort_(base,nel,width,compar)
/*
.   Arguments:
...									*/
		char *base;		/* pointer to base of table 	*/
		int *nel;		/* Nr. of elements in table 	*/
		int *width;		/* size, in bytes, of each 
					   element in the table  	*/
		int (*compar)();	/* comparision function 	*/
{
/*  Set trap routine
.									*/
	qsort(base,*nel,*width,compar);
}
/*
.
...									*/
#endif
/*........................................................................
.	getenv_
........................................................................*/
#ifdef wn_hp__
				void getenv_(name,val,lenv)
/*
.  To provide Get environment for HP
.
.   Result:
.
.	CALL GETENV(NAME_C*:I, VAL_C*:O, LENV_J:I) Get env. NAME in VAL
.					
...									*/
/*
.   Arguments:
...									*/
		char *name;		/* environment name		*/
		char *val;		/* returned value		*/
		int *lenv;		/* length value string  	*/
{
/*
.   Function references:
...									*/
		char *getenv();
/*
.   Data declarations:
...									*/
	char *cp;
	int len;
/*-									*/
	cp = getenv(name);
	if (cp != 0) {
	  len = strlen(cp);			/* length result	*/
	  if (*lenv <= len) memcpy (val, cp, *lenv);
	  else {
	    memcpy (val, cp, len);
	    memset (&val[len], ' ', *lenv - len); /* fill with blanks	*/
	  }
	} else {
	    memset (val, ' ', *lenv);
	}
}
/*
.
...									*/
#endif
/*........................................................................
.	setenv_
........................................................................*/
				void setenv_(name,val)
/*
.  To provide Set environment for Unix
.
.   Result:
.
.	CALL SETENV(NAME_C*:I, VAL_C*:O)	Set env. NAME to VAL
.					
...									*/
/*
.   Arguments:
...									*/
		char *name;		/* environment name		*/
		char *val;		/* value to set			*/
{
/*
.   Function references:
...									*/
#ifdef wn_hp__
		char *malloc();
		int putenv();
#else
# ifdef wn_sw__
		char *malloc();
		int putenv();
# else
		int setenv();
# endif
#endif
/*
.   Data declarations:
...									*/
	int i;
#ifdef wn_hp__
	char *estr;
	char *rstr;
#endif
#ifdef wn_sw__
	char *estr;
	char *rstr;
#endif
/*-									*/
#ifndef wn_hp__
# ifdef wn_sw__
	i = strlen(name) + strlen(val) + 4;	/* length environment	*/
	estr = malloc((unsigned) i);		/* get environment area	*/
	rstr = strcpy(estr, name);		/* set name		*/
	rstr = strcat(estr, eqs);		/* set =		*/
	rstr = strcat(estr, val);		/* set value		*/
	i = putenv(estr);			/* set environment	*/
# else
	i = setenv(name, val, 1);		/* set env. value	*/
# endif
#else
	i = strlen(name) + strlen(val) + 4;	/* length environment	*/
	estr = malloc((unsigned) i);		/* get environment area	*/
	rstr = strcpy(estr, name);		/* set name		*/
	rstr = strcat(estr, eqs);		/* set =		*/
	rstr = strcat(estr, val);		/* set value		*/
	i = putenv(estr);			/* set environment	*/
#endif
}
/*
.
...									*/
/*........................................................................
.	unsetenv_
........................................................................*/
				void unsetenv_(name)
/*
.  To provide Unset environment for Unix
.
.   Result:
.
.	CALL UNSETENV(NAME_C*:I)		Unset env. NAME
.					
...									*/
/*
.   Arguments:
...									*/
		char *name;		/* environment name		*/
{
/*
.   Function references:
...									*/
#ifdef wn_hp__
		char *malloc();
		int putenv();
#else
# ifdef wn_sw__
		char *malloc();
		int putenv();
# else
		void unsetenv();
# endif
#endif
/*
.   Data declarations:
...									*/
#ifdef wn_hp__
	int i;
	char *estr;
	char *rstr;
#endif
#ifdef wn_sw__
	int i;
	char *estr;
	char *rstr;
#endif
/*-									*/
#ifndef wn_hp__
# ifdef wn_sw__
	i = strlen(name) + 4;			/* length environment	*/
	estr = malloc((unsigned) i);		/* get environment area	*/
	rstr = strcpy(estr, name);		/* set name		*/
	rstr = strcat(estr, eqs);		/* set =		*/
	i = putenv(estr);			/* set environment	*/
# else
	unsetenv(name);				/* unset env. value	*/
# endif
#else
	i = strlen(name) + 4;			/* length environment	*/
	estr = malloc((unsigned) i);		/* get environment area	*/
	rstr = strcpy(estr, name);		/* set name		*/
	rstr = strcat(estr, eqs);		/* set =		*/
	i = putenv(estr);			/* set environment	*/
#endif
}
/*
.
...									*/
/*........................................................................
.	gethost_
........................................................................*/
				void gethost_(val,lval)
/*
.  To provide gethostname for Unix
.
.   Result:
.
.	CALL GETHOST(VAL_C*:O, LVAL_J:I)	Set HOSTNAME in VAL
.					
...									*/
/*
.   Arguments:
...									*/
		char *val;		/* host name			*/
		int *lval;		/* length to set		*/
{
/*
.   Function references:
...									*/
		void gethostname();
/*
.   Data declarations:
...									*/
/*-									*/
	int i;
	for (i=0; i<*lval; i++) val[i]=0;
	gethostname(val, *lval);		/* set host name	*/
}
/*
.
...									*/
#include <stdio.h>

/*........................................................................
.	getlogin_
........................................................................*/
				void getlogin_(val,lval)
/*
.  To provide getlogin for Unix
.
.   Result:
.
.	CALL GETLOGIN(VAL_C*:O, LVAL_J:I)	Set USERNAME in VAL
.					
...									*/
/*
.   Arguments:
...									*/
		char *val;		/* user name			*/
		int *lval;		/* length to set		*/
{
/*
.   Function references:
...									*/
		char *getlogin();
/*
.   Data declarations:
...									*/
	        char *cp;
		char *rstr;
/*-									*/
	cp = getlogin();			/* get user name	*/
        if (cp == NULL) cp="Unknown";		/* trap error		*/
	rstr = strcpy (val, cp);		/* return user name	*/
}
/*
.
...									*/

/*........................................................................
.	tflush_
........................................................................*/
				void tflush_()
/*
.  Flush the standard output (needed on some hp's when redirecting,
.  otherwise exit will close the file without flushing
.
.   Result:
.
.	CALL TFLUSH()
.					
...									*/
/*
.   Arguments:
...									*/
{
/*-									*/
	fflush(stdout);
}
/*........................................................................
.	do_system_
........................................................................*/
				int do_system_(comm)
/*
.  Spawn a sub-shell and execute a command. Use this interface since
.  the Fortran library call will always go through .cshrc 
.
.   Result:
.
.	STATUS_J = DO_SYSTEM(COMM_C*:I)
.					
...									*/
/*
.   Arguments:
...									*/
	char *comm; 		/* Command to be executed 		*/
{
/*-									*/
	return(system(comm));
}
/*
.
...									*/

/*........................................................................
.	find_node_
........................................................................*/
#include <sys/types.h>
int alphasort();
#ifdef wn_ucb__
#include </usr/ucbinclude/sys/dir.h>
#else
#ifdef wn_so__
struct  dirent {
        off_t           d_off;          /* offset of next disk dir entry */
        unsigned short  d_reclen;       /* length of this record */
        unsigned short  d_namlen;       /* length of string in d_name */
        char            d_name[255+1];  /* name (up to MAXNAMLEN + 1) */
};
#else
#include <dirent.h>
#endif
#endif

/*

  Auxilary function to match a given directory entry with a certain 
  filetype. 

*/

#define MAXFILTYP 10

static struct dirent **namelist=NULL;
static char filtyp_u[MAXFILTYP+1],filtyp_l[MAXFILTYP+1];
static int  filtyp_n=0;
static int  nmatch=0,imatch=0;


static int  match_filtyp(d1)

struct dirent *d1;

{
   int len=strlen(d1->d_name);
   if (len <= filtyp_n) {   /* Too short, sure no match */
     return(0);
   } else {
     return( !strncmp(d1->d_name+(len-filtyp_n),filtyp_u,filtyp_n) ||
             !strncmp(d1->d_name+(len-filtyp_n),filtyp_l,filtyp_n) );
   }
}



	int find_node_(name,dirnam_i,filtyp,flag,lname,ldirnam,lfiltyp)
/*
.
.  Return the name of the next directory entry of type filtyp.
.  If flag is 1, the directory list will be initiated, flag will
.  be set to 0 in the first call. Returns 1 if valid name returned.
.
.   Use:
.
.	FLAG=1
.	DO WHILE (FIND_NODE(NAME,'.','WMP',FLAG).NE.0) 
.	   CALL WNCTXT(F_T,'!AS',NAME)
.	END DO
.					
...									*/
/*
.   Arguments:
...									*/
	char *name,*dirnam_i,*filtyp;
	int  *flag,lname,ldirnam,lfiltyp;
{
/*
.   Include files:
...									*/
/*
.   Parameters:
...									*/
/*
.   Function references:
...									*/
/*
.   Data declarations:
...									*/
  int len=ldirnam;
  char *dirnam;
/*-									*/
  
  if (*flag) {					/* Initialise		*/

     dirnam=malloc((len+1)*sizeof(char));
     strncpy(dirnam,dirnam_i,len);
     while (len>0 && 
            (dirnam[len-1]==' ' || 
             dirnam[len-1]=='\0')) len--;	/* Strip trailing blanks*/
     dirnam[len]='\0';				/* Properly terminate	*/

     filtyp_n=lfiltyp;				/* Save length          */
     if (filtyp_n>MAXFILTYP) filtyp_n=MAXFILTYP; /* Truncate            */
     strncpy(filtyp_u,filtyp+lfiltyp-filtyp_n,filtyp_n); /* Copy type   */
     filtyp_u[filtyp_n]='\0';			/* Properly terminate	*/
     strcpy(filtyp_l,filtyp_u);
     for (imatch=0; imatch<filtyp_n; imatch++) 
        filtyp_l[imatch]=tolower(filtyp_l[imatch]);	/* Lowercase	*/

     *flag=0;					/* Set done		*/
     imatch=0;					/* No name returned yet */
     nmatch=scandir(dirnam,&namelist,match_filtyp,alphasort); 
     						/* Get list		*/
     free(dirnam);
     if (nmatch<=0) return(0); 			/* Return if empty	*/
  } 

  if (imatch<nmatch) {
     strncpy(name,namelist[imatch]->d_name,lname);/* Return next name	*/
     imatch++;					/* Increase counter	*/
     if (imatch==nmatch) free(namelist);	/* All done, free array	*/
     return(1);					/* Valid name		*/
  } else {
     return(0);					/* No more names	*/
  }
}

/*
.
...									*/

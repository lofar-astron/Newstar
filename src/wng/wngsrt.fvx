C+ WNGSRT.FVX
C  WNB 900327
C
C  Revisions:
C
	LOGICAL FUNCTION WNGSRT(AREA,NREC,RECL,ROUT)
C
C  Sort a buffer in memory
C
C  Result:
C
C	WNGSRT_L = WNGSRT ( AREA_B(*):IO, NREC_J:I, RECL_J:I, ROUT_EXT:I)
C				Sort the AREA with NREC records of length
C				RECL using the routine ROUT. ROUT is
C				a function with at least 2 arguments,
C				the records to be compared. It returns
C				a J value:	 0: equal value
C						-1: 1st before 2nd
C						+1: 2nd before first
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	BYTE AREA(*)				!AREA TO SORT
	INTEGER NREC				!# OF RECORDS TO SORT
	INTEGER RECL				!LENGTH ONE RECORD
	EXTERNAL ROUT				!COMPARISON ROUTINE
C
C  Entry points:
C
C
C  Function references:
C
	INTEGER SOR$BEGIN_SORT			!START SORT
	INTEGER SOR$RELEASE_REC			!MOVE RECORD
	INTEGER SOR$RETURN_REC			!GET A DORTED RECORD
	INTEGER SOR$SORT_MERGE			!SORT
	INTEGER WNGARA				!GET ADDRESS VARIABLE
C
C  Data declarations:
C
	INTEGER RECD(2)				!RECORD DESCRIPTOR
C-
	WNGSRT=.TRUE.					!ASSUME OK
	IF (.NOT.SOR$BEGIN_SORT(,RECL,,(NREC*RECL+511)/512,
	1		ROUT)) GOTO 900			!START SORT
	RECD(1)=RECL					!MAKE DESCRIPTOR
	RECD(2)=WNGARA(AREA)				!ADDRESS RECORD
	DO I=0,NREC-1					!MOVE RECORDS
	  IF (.NOT.SOR$RELEASE_REC(RECD)) GOTO 901	!SET A RECORD
	  RECD(2)=RECD(2)+RECL				!POINT TO NEXT RECORD
	END DO
	IF (.NOT.SOR$SORT_MERGE()) GOTO 901		!DO SORT
	RECD(1)=RECL					!MAKE DESCRIPTOR
	RECD(2)=WNGARA(AREA)				!ADDRESS RECORD
	DO I=0,NREC-1					!MOVE RECORDS BACK
	  IF (.NOT.SOR$RETURN_REC(RECD)) GOTO 901	!GET A RECORD
	  RECD(2)=RECD(2)+RECL				!POINT TO NEXT RECORD
	END DO
	CALL SOR$END_SORT				!CLEAN UP
C
	RETURN
C
C ERROR
C
 901	CONTINUE
	CALL SOR$END_SORT				!CLEAN UP
 900	CONTINUE
	WNGSRT=.FALSE.
C
	RETURN
C
C
C
	END

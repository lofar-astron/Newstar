C+ WNGSXH.FSC
C  WNB 890202
C
C  Revisions:
C	WNB 910828	Add ^C handler
C	WNB 921215	Make FSC
C	JPH 960621	Entry WNGSC0
C
C
	SUBROUTINE WNGSXH(AREA,ROUT)
C
C  Set/free exit handler
C
C  Result:
C
C	CALL WNGSXH ( AREA_J(6):IO, ROUT_EXT:I)
C				Specify ROUT as an exit handler. AREA is
C				a six INTEGER*4 block. The first is used
C				to indicate if handler set (0=not), the
C				other 5 are control area.
C	CALL WNGSXF ( AREA_J(6):IO)
C				Delete exit handler, if set, and set free.
C	CALL WNGSXX		Do exit handlers (dummy for VAX)
C	CALL WNGSCC		Set ^C handler (dummy if VAX)
C	CALL WNGSC0		Same but leave inhibit status and count
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WXH_DEF'
#ifdef wn_al__
	INCLUDE '/usr/include/fortran/signal.h'
#endif
C
C  Parameters:
C
#ifndef wn_vx__
  #ifdef wn_al__
  #else
	INTEGER SIGINT				!INTERRUPT SIGNAL
	  PARAMETER (SIGINT=2)
  #endif
#endif
C
C  Arguments:
C
	INTEGER AREA(6)				!CONTROL AREA
	EXTERNAL ROUT
C
C  Entry points:
C
C
C  Function references:
C
#ifdef wn_vx__
	INTEGER SYS$DCLEXH			!DECLARE AN EXIT HANDLER
#else
	INTEGER WNGARA				!ARG. ADDRESS
	EXTERNAL WNGEX0				!^C HANDLER
#endif
C
C  Data declarations:
C
#ifndef wn_vx__
	INTEGER ALIST(-1:1)		!DUMMY ARGUMENT LIST
	  DATA ALIST/0,1,0/
#endif
C-
	IF (AREA(1).EQ.0) THEN				!STILL TO SET
#ifdef wn_vx__
	  AREA(3)=%LOC(ROUT)				!ROUTINE TO CALL
	  AREA(4)=1					!NUMBER OF ARG.
	  AREA(5)=%LOC(AREA(6))				!STATUS WORD ADDRESS
	  IF (SYS$DCLEXH(AREA(2))) AREA(1)=1		!SET DECLARED
#else
	  AREA(3)=WNGARA(ROUT)				!ROUTINE TO CALL
	  AREA(4)=1					!NUMBER OF ARG.
	  AREA(5)=WNGARA(AREA(6))			!STATUS WORD ADDRESS
	  AREA(2)=XHED					!LINK
	  XHED=WNGARA(AREA(2))
	  AREA(1)=1					!SET DECLARED
#endif
	END IF
C
	RETURN
C
C FREE EXIT HANDLER
C
	ENTRY WNGSXF(AREA)
C
#ifdef wn_vx__
	IF (AREA(1).NE.0) CALL SYS$CANEXH(AREA(2))
#else
	IF (AREA(1).NE.0) THEN
	  J=WNGARA(AREA(2))				!LINKED ADDRESS
	  J1=XHED					!FIND IT
	  J2=WNGARA(XHED)				!PREVIOUS
 10	  CONTINUE
	  IF (J1.EQ.0) THEN				!EOL, NOT FOUND
	  ELSE IF (J.EQ.J1) THEN			!FOUND
	    CALL WNGMV(LB_J,AREA(2),A_B(J2-A_OB))	!DELETE FROM LIST
	  ELSE
	    J2=J1					!FOLLOW LIST
	    CALL WNGMV(LB_J,A_B(J2-A_OB),J1)
	    GOTO 10
	  END IF
	END IF
#endif
	AREA(1)=0
C
	RETURN
C
C DO EXIT HANDLERS
C
	ENTRY WNGSXX
C
#ifndef wn_vx__
	J=XHED						!FIRST TO DO
	DO WHILE (J.NE.0)				!MORE
	  CALL WNGMV(LB_J,A_B(J-A_OB+LB_J),J1)		!ROUTINE ADDRESS
	  CALL WNGARX(A_B(J1-A_OB),ALIST(0))		!DO ROUTINE
	  CALL WNGMV(LB_J,A_B(J-A_OB),J)		!NEXT POINTER
	END DO
C
	IF (IAND(E_C,1).EQ.1) E_C=1
	CALL EXIT(E_C)					!EXIT
#endif
	RETURN						!DUMMY
C
C SET ^C HANDLER
C
	ENTRY WNGSCC
C
cc	print*, 'SCC'
#ifndef wn_vx__
 	XHCC(0)=0					!DO NOT INHIBIT
	XHCC(1)=0					!SET NOT SEEN
	GOTO 20
C
	ENTRY WNGSC0
C
cc	print*, 'SC0'
 20	CONTINUE
  #ifdef wn_al__
	CALL SIGVEC(SIGINT,SIG_CALL,WNGEX0,I,I1)
  #else
	CALL SIGNAL(SIGINT,WNGEX0)
  #endif
#endif
	RETURN						!DUMMY
C
C
C
	END








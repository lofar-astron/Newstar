C+ WNMHIS.FOR
C  WNB 910325
C
C  Revisions:
C	WNB 911008	Clearing typo
C	WNB 920103	Add HS7
C	WNB 920131	Typo in HS7 name, add HS6
C	WNB 920825	Typo in HS4 offset
C	WNB 920825	ZN iso NZ call in HS4
C	JPH 940224	Comments
C
	SUBROUTINE WNMHS0(HISBAD,TP)
C
C  Histogram handling
C
C  Result:
C
C	CALL WNMHS0( HISBAD_J:O, TP_J:I)
C				Get histogram buffer, and return the control
C				area address in HISBAD.
C				Current max. set to 1/65536.
C				TP can be:
C				+1: histogram for absolute values
C				-1: histogram for values
C	CALL WNMHS8( HISBAD_J:I, TP_J:I, HMAX_E:I)
C				As HS0, but set the current maximum value to
C				the maximum of 1/65536. and HMAX.
C	CALL WNMHS9( HISBAD_J:I)
C				Release histogram buffer
C	CALL WNMHS1( HISBAD_J:I, N_J:I, BUF_E(0:N-1))
C				Set BUF values in histogram.
C	CALL WNMHS2( HISBF_J(0:*):I, N_J:I, OTP_J:I)
C				Type/print histogram data for N histograms
C				on OTP
C	CALL WNMHS3( HISBF_J(0:*):I, N_J:I, OTP_J:I)
C				Type/print histogram data for N histograms
C				on OTP in logarithmic form, including
C				accumulation
C	CALL WNMHS4( HISBAD_J:I, NOIS_E(0:*):O, OTP_J:I)
C				Determine, output and return noise in NOIS(0)
C				for type 1, and noise and offset in (0) and (1)
C				for type -1.
C	CALL WNMHS6( HISBAD_J:I, N_J:O, OTP_J:O, MPMXP_E:O, MPMAX_E:O)
C				Make accumulated, return histo size N, buffer
C				pointer OTP, maximum present MPMXP and
C				max. value to fit MPMAX.
C	CALL WNMHS7( HISBAD_J:I, N_J:O, OTP_J:O, MPMXP_E:O, MPMAX_E:O)
C				Return histo size N, buffer
C				pointer OTP, maximum present MPMXP and
C				max. value to fit MPMAX.
C
C	HISBAD layout:
C		A_J(HISBAD+0)	type (J, 1,-1)
C		A_E(HISBAD+1)	current max. for histo (E, >0)
C		A_E(HISBAD+2)	current largest value for histo (E, >=0)
C		A_J(HISBAD+3)	index in A_J for histogram (J)
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
	INTEGER MHSIZ,MHSZ2		!# OF ENTRIES IN HISTO'S
	  PARAMETER (MHSIZ=1000)	!MUST BE POWER OF 10, AND >=100
	  PARAMETER (MHSZ2=MHSIZ/2)
	INTEGER SCAL			!SCALE FOR LINE PRINT
	  PARAMETER (SCAL=MHSIZ/100)
	INTEGER MAXLIN			!NUMBER OF PRINT LINES
	  PARAMETER (MAXLIN=35)		!I.E. 10**7 * 5
	INTEGER NMAX			!NUMBER OF SIMULTANEOUS
	  PARAMETER (NMAX=8)
C
C  Arguments:
C
	INTEGER TP			!HISTOGRAM TYPE (1,-1)
	INTEGER HISBAD			!index of histogram header in A_J, A_E
	INTEGER HISBF(0:*)		!AREAS
	REAL HMAX			!MAXIMUM VALUE TO INIT.
	INTEGER OTP			!OUTPUT TYPE FOR PRINT
	INTEGER N			!LENGTH INPUT BUFFER
	REAL BUF(0:*)			!INPUT BUFFER
	REAL NOIS(0:*)			!CALCULATED NOISE
	REAL MPMXP			!MAX. PRESENT
	REAL MPMAX			!MAX. VALUE TO FIT
C
C  Function references:
C
	LOGICAL WNGGVM			!GET VIRTUAL MEMORY
	INTEGER WNMEJF			!FLOOR(X)
	LOGICAL WNMITN			!SOLVE EQUATIONS
C
C  Data declarations:
C
	CHARACTER*120 TXT(0:MAXLIN)	!PRINT LINES
	REAL NSCAL(0:NMAX-1)		!DATA SCALES
	CHARACTER*(NMAX) NTXT		!CODES
	  DATA NTXT/'+*ox#@%&'/
	INTEGER MAR			!LSQ AREA
	REAL CD(2)			!LSQ FACTORS
	REAL SOL(2),ME(2),MU		!LSQ SOLUTION
	REAL R2,R3
C-
C
C INIT AREA (HS0)
C
	R0=1./65536.				!MAX. VALUE
	GOTO 10
C
C INIT AREA (HS8)
C
	ENTRY WNMHS8(HISBAD,TP,HMAX)
C
	R0=MAX(ABS(HMAX),1./65536.)
	GOTO 10
C
C GET BUFFERS AND AREA
C
 10	CONTINUE
	HISBAD=0				!ASSUME ERROR
	IF (ABS(TP).EQ.1) THEN			!CORRECT TYPE
	  IF (WNGGVM(LB_J*4,J)) THEN		!AREA
	    J=(J-A_OB)/LB_J			!AREA POINTER
	    A_J(J)=TP				!TYPE
	    IF (WNGGVM(LB_J*(MHSIZ+1),J1)) THEN	!BUFFER
	      A_E(J+1)=R0			!MAX. IN HISTO
	      A_E(J+2)=0E0			!MAX. VALUE SEEN
	      A_J(J+3)=(J1-A_OB)/LB_J		!BUFFER POINTER
	      CALL WNGMVZ(LB_J*(MHSIZ+1),A_B(J1-A_OB)) !EMPTY BUF
	      HISBAD=J				!SAVE AREA
	    END IF
	  END IF
	END IF
C
	RETURN
C
C RELEASE HISTOGRAM BUFFER (HS9)
C
	ENTRY WNMHS9(HISBAD)
C
	IF (HISBAD.NE.0) THEN
	  CALL WNGFVM(LB_J*(MHSIZ+1),A_J(HISBAD+3)*LB_J+A_OB) !BUFFER
	  CALL WNGFVM(LB_J*4,HISBAD*LB_J+A_OB)	!FREE AREA
	END IF
	HISBAD=0				!RESET AREA
C
	RETURN
C
C SET VALUES (HS1)
C
	ENTRY WNMHS1(HISBAD,N,BUF)
C
	IF (HISBAD.NE.0) THEN			!CAN DO
	  IF (A_J(HISBAD).EQ.1) THEN		!ABSOLUTE
	    J0=A_J(HISBAD+3)			!BUFFER POINTER
	    DO I1=0,N-1				!DO ALL POINTS
	      R0=ABS(BUF(I1))			!DATA POINT
	      DO WHILE (R0.GT.A_E(HISBAD+1))	!SCALE HISTOGRAM IF NECESSARY
	        A_E(HISBAD+1)=2*A_E(HISBAD+1)	!DOUBLE CONTENTS
		DO I2=0,MHSIZ/2-1
		  I3=2*I2
		  A_J(J0+I2)=A_J(J0+I3)+A_J(J0+I3+1) !ADD
		END DO
		A_J(J0+MHSIZ/2)=A_J(J0+MHSIZ)
		CALL WNGMVZ(LB_J*MHSIZ/2,A_J(J0+MHSIZ/2+1)) !EMPTY LAST PART
	      END DO
	      A_E(HISBAD+2)=MAX(R0,A_E(HISBAD+2)) !SET MAXIMUM PRESENT
	      I2=INT((R0/A_E(HISBAD+1))*MHSIZ)	!HISTOGRAM POINTER
	      A_J(J0+I2)=A_J(J0+I2)+1		!SET HISTOGRAM COUNT
	    END DO
	  ELSE IF (A_J(HISBAD).EQ.-1) THEN	!VALUE TYPE
	    J0=A_J(HISBAD+3)+MHSZ2		!BUFFER POINTER
	    DO I1=0,N-1				!DO ALL POINTS
	      R0=ABS(BUF(I1))			!DATA POINT
	      DO WHILE (R0.GT.A_E(HISBAD+1))	!SCALE HISTOGRAM IF NECESSARY
	        A_E(HISBAD+1)=2*A_E(HISBAD+1)	!DOUBLE CONTENTS
		DO I2=0,MHSZ2/2-1		!COMBINE
		  I3=2*I2
		  A_J(J0+I2)=A_J(J0+I3)+A_J(J0+I3+1) !ADD
		END DO
		A_J(J0+MHSZ2/2)=A_J(J0+MHSZ2)
		CALL WNGMVZ(LB_J*MHSZ2/2,A_J(J0+MHSZ2/2+1)) !EMPTY LAST PART
		DO I2=-1,-(MHSZ2/2)+1,-1
		  I3=2*I2
		  A_J(J0+I2)=A_J(J0+I3)+A_J(J0+I3+1) !ADD
		END DO
		A_J(J0-MHSZ2/2)=A_J(J0-MHSZ2)
		CALL WNGMVZ(LB_J*MHSZ2/2,A_J(J0-MHSZ2)) !EMPTY LAST PART
	      END DO
	      A_E(HISBAD+2)=MAX(R0,A_E(HISBAD+2)) !SET MAXIMUM PRESENT
	      I2=WNMEJF((BUF(I1)/A_E(HISBAD+1))*MHSZ2) !HISTOGRAM POINTER
	      A_J(J0+I2)=A_J(J0+I2)+1		!SET HISTOGRAM COUNT
	    END DO
	  END IF
	END IF
C
	RETURN
C
C PRINT HISTOGRAM (HS2)
C
	ENTRY WNMHS2(HISBF,N,OTP)
C
C INIT
C
	IF (IAND(OTP,F_P).NE.0) CALL WNCTXT(F_P,'!^') !FORMFEED
	CALL WNCTXT(OTP,'!2/!48CHistogram!2/')
C
C SCALE DATA
C
	DO I=0,MIN(NMAX,N)-1			!ALL AREAS
	  NSCAL(I)=1				!SCALE PER AREA
	  IF (HISBF(I).NE.0) THEN
	    J0=A_J(HISBF(I)+3)			!BUFFER
	    DO I1=MHSIZ,0,-SCAL			!GET DATA
	      J1=0				!COUNT
	      DO I3=0,MIN(SCAL-1,MHSIZ-I1)	!ADD GROUP
	        J1=J1+A_J(J0+I1+I3)
	      END DO
	      NSCAL(I)=MAX(NSCAL(I),FLOAT(J1))	!GET MAX.
	    END DO
	    NSCAL(I)=NSCAL(I)/MAXLIN		!STEP IN N
	    I1=0				!FACTORS OF 10
	    DO WHILE (NSCAL(I).GE.10.)
	      I1=I1+1
	      NSCAL(I)=NSCAL(I)/10.
	    END DO
	    IF (NSCAL(I).LE.1.) THEN		!PROPER SCALE
	      NSCAL(I)=1.
	    ELSE IF (NSCAL(I).LE.2.) THEN
	      NSCAL(I)=2.
	    ELSE IF (NSCAL(I).LE.5.) THEN
	      NSCAL(I)=5.
	    ELSE
	      NSCAL(I)=10.
	    END IF
	    NSCAL(I)=NSCAL(I)*(10.**I1)
	  END IF
	END DO
C
C INIT TEXT
C
	DO I=MAXLIN,0,-1			!INIT TEXT BUFFER
	  IF (I.EQ.0) THEN
	    DO I1=1,MIN(LEN(TXT(0)),MHSIZ/SCAL+6)
	      IF (MOD(I1-6,10).EQ.0) THEN
	        TXT(I)(I1:I1)='|'
	      ELSE
	        TXT(I)(I1:I1)='-'
	      END IF
	    END DO
	  ELSE
	    TXT(I)=' '
	  END IF
	  IF (MOD(I,5).EQ.0) THEN
	    CALL WNCTXS(TXT(I)(1:5),'!5$UJ',I)
	  END IF
	  TXT(I)(6:6)='|'
	END DO
C
C SET DATA
C
	DO I=0,MIN(NMAX,N)-1			!ALL AREAS
	  IF (HISBF(I).NE.0) THEN
	    J0=A_J(HISBF(I)+3)			!BUFFER
	    DO I1=MHSIZ,0,-SCAL			!GET DATA
	      J1=0				!COUNT
	      DO I3=0,MIN(SCAL-1,MHSIZ-I1)	!ADD GROUP
	        J1=J1+A_J(J0+I1+I3)
	      END DO
	      IF (J1.GT.0) THEN
	        I3=MIN(MAXLIN,NINT(J1/NSCAL(I))) !LINE #
	        I2=I1/SCAL+6			!POS IN LINE
	        IF (I2.LE.LEN(TXT(0))) TXT(I3)(I2:I2)=NTXT(I+1:I+1)
	      END IF
	    END DO
	  END IF
	END DO
C
C PRINT LINES
C
	DO I=MAXLIN,0,-1			!PRINT LINES
	  CALL WNCTXT(OTP,TXT(I))
	END DO
C
C BOTTOM LINES
C
	TXT(0)='     0%'			!BOTTOM LINE
	DO I=1,MIN(LEN(TXT(0))-4,MHSIZ/SCAL)/10
	  CALL WNCTXS(TXT(0)(10*I+3:10*I+7),'!4$UJ\%',10*I)
	END DO
	CALL WNCTXT(OTP,TXT(0))
C
C ANNOTATION
C
	CALL WNCTXT(OTP,' ')
	DO I=0,MIN(NMAX,N)-1			!ALL AREAS
	  IF (HISBF(I).NE.0) THEN
	    IF (A_J(HISBF(I)).EQ.1) THEN
	      CALL WNCTXT(OTP,'!AS\!10C\100%= !10$E13.3 W.U.'//
	1		'!40CMax. value= !10$E13.3 W.U.'//
	1		'!75CN scale= !6$UJ',
	1		NTXT(I+1:I+1),A_E(HISBF(I)+1),
	1		A_E(HISBF(I)+2),NINT(NSCAL(I)))
	    ELSE
	      CALL WNCTXT(OTP,'!AS\=Individual!76C\100%= !E13.3 W.U.'//
	1		'!/!70CMax. value= !E13.3 W.U.',
	1		NTXT(2*I+1:2*I+1),A_E(HISBF(I)+1),
	1		A_E(HISBF(I)+2))
	    END IF
	  END IF
	END DO
	CALL WNCTXT(OTP,'!1/')
C
	RETURN
C
C PRINT HISTOGRAM LOGARITHMIC (HS3)
C
	ENTRY WNMHS3(HISBF,N,OTP)
C
C INIT
C
	IF (IAND(OTP,F_P).NE.0) CALL WNCTXT(F_P,'!^') !FORMFEED
	CALL WNCTXT(OTP,'!2/!48CHistogram!2/')
C
	DO I=MAXLIN,0,-1			!INIT TEXT BUFFER
	  IF (I.EQ.0) THEN
	    DO I1=1,MIN(LEN(TXT(0)),MHSIZ/SCAL+4)
	      IF (MOD(I1-4,10).EQ.0) THEN
	        TXT(I)(I1:I1)='|'
	      ELSE
	        TXT(I)(I1:I1)='-'
	      END IF
	    END DO
	  ELSE
	    TXT(I)=' '
	  END IF
	  IF (MOD(I,5).EQ.0) THEN
	    CALL WNCTXS(TXT(I)(1:3),'1E!UJ',I/5)
	  END IF
	  TXT(I)(4:4)='|'
	END DO
C
C SET DATA
C
	DO I=0,MIN(NMAX/2,N)-1			!ALL AREAS
	  IF (HISBF(I).NE.0) THEN
	    J0=A_J(HISBF(I)+3)			!BUFFER
	    J2=0				!TOTAL COUNT
	    DO I1=MHSIZ,0,-SCAL			!GET DATA
	      J1=0				!COUNT
	      DO I3=0,MIN(SCAL-1,MHSIZ-I1)	!ADD GROUP
	        J1=J1+A_J(J0+I1+I3)
	      END DO
	      J2=J2+J1				!TOTAL COUNT
	      IF (J1.GT.0) THEN
	        I3=MIN(MAXLIN,NINT(LOG10(FLOAT(J1))*5)) !LINE #
	        I2=I1/SCAL+4			!POS IN LINE
	        IF (I2.LE.LEN(TXT(0))) TXT(I3)(I2:I2)=NTXT(2*I+1:2*I+1)
	      END IF
	      IF (J2.GT.0 .AND. A_J(HISBF(I)).EQ.1) THEN
	        I3=MIN(MAXLIN,NINT(LOG10(FLOAT(J2))*5)) !LINE #
	        I2=(MHSIZ-I1)/SCAL+4		!POS IN LINE
	        IF (I2.LE.LEN(TXT(0))) TXT(I3)(I2:I2)=NTXT(2*I+2:2*I+2)
	      END IF
	    END DO
	  END IF
	END DO
C
C PRINT LINES
C
	DO I=MAXLIN,0,-1			!PRINT LINES
	  CALL WNCTXT(OTP,TXT(I))
	END DO
C
C BOTTOM LINES
C
	TXT(0)='+ =0%'				!BOTTOM LINE
	DO I=1,MIN(LEN(TXT(0))-4,MHSIZ/SCAL)/10
	  CALL WNCTXS(TXT(0)(10*I+1:10*I+5),'!4$UJ\%',10*I)
	END DO
	CALL WNCTXT(OTP,TXT(0))
	TXT(0)='*100%'				!BOTTOM LINE
	DO I=1,MIN(LEN(TXT(0))-4,MHSIZ/SCAL)/10
	  CALL WNCTXS(TXT(0)(10*I+1:10*I+5),'!4$UJ\%',10*(10-I))
	END DO
	CALL WNCTXT(OTP,TXT(0))
C
C ANNOTATION
C
	CALL WNCTXT(OTP,' ')
	DO I=0,MIN(NMAX/2,N)-1			!ALL AREAS
	  IF (HISBF(I).NE.0) THEN
	    IF (A_J(HISBF(I)).EQ.1) THEN
	      CALL WNCTXT(OTP,'!AS\=Individual!76C\100%= !E13.3 W.U.'//
	1		'!/!AS\=Accumulated!70CMax. value= !E13.3 W.U.',
	1		NTXT(2*I+1:2*I+1),A_E(HISBF(I)+1),
	1		NTXT(2*I+2:2*I+2),A_E(HISBF(I)+2))
	    ELSE
	      CALL WNCTXT(OTP,'!AS\=Individual!76C\100%= !E13.3 W.U.'//
	1		'!/!70CMax. value= !E13.3 W.U.',
	1		NTXT(2*I+1:2*I+1),A_E(HISBF(I)+1),
	1		A_E(HISBF(I)+2))
	    END IF
	  END IF
	END DO
	CALL WNCTXT(OTP,'!1/')
C
	RETURN
C
C CALCULATE NOISE
C
	ENTRY WNMHS4(HISBAD,NOIS,OTP)
C
C INIT
C
	IF (HISBAD.EQ.0) RETURN			!CANNOT DO
C
C NOISE ONLY
C
	IF (A_J(HISBAD).EQ.1) THEN
	  J0=A_J(HISBAD+3)			!BUFFER POINTER
	  NOIS(0)=0				!SET NO SOLUTION
	  CALL WNMIGN(MAR,2,1)			!GET LSQ AREA
	  CD(1)=1E0				!LSQ CONSTANT
	  DO I=0,NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSIZ/8)) !USE 12% OF DATA
	    IF (A_J(J0+I).GT.0) THEN		!CAN DO
	      IF (I.EQ.0) THEN			!COORDINATE
		R0=0.
	      ELSE
		R0=I+.5
	      END IF
	      CD(2)=-(R0**2)			!LSQ CONSTANT
	      R1=MHSIZ/8.-I			!WEIGHT
	      CALL WNMIMC(MAR,CD,R1,LOG(FLOAT(A_J(J0+I)))) !MAKE EQUATIONS
	    END IF
	  END DO
	  IF (.NOT.WNMITN(MAR)) GOTO 20		!CANNOT SOLVE
	  CALL WNMISN(MAR,SOL,MU,ME)
	  IF (SOL(2).LE.0) GOTO 20		!WRONG SOLUTION
C
	  CALL WNMIZN(MAR)			!RE-ZERO AREA
	  CD(1)=1E0				!LSQ CONSTANT
	  DO I=0,MIN(NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSIZ/8)),
	1		INT(SQRT(1./SOL(2))))
	    IF (A_J(J0+I).GT.0) THEN		!CAN DO
	      IF (I.EQ.0) THEN			!COORDINATE
		R0=0.
	      ELSE
		R0=I+.5
	      END IF
	      CD(2)=-(R0**2)			!LSQ CONSTANT
	      R1=MHSIZ/8.-I			!WEIGHT
	      CALL WNMIMC(MAR,CD,R1,LOG(FLOAT(A_J(J0+I)))) !MAKE EQUATIONS
	    END IF
	  END DO
	  IF (.NOT.WNMITN(MAR)) GOTO 20		!CANNOT SOLVE
	  CALL WNMISN(MAR,SOL,MU,ME)
	  IF (SOL(2).LE.0) GOTO 20		!WRONG SOLUTION
	  NOIS(0)=SQRT(0.5/SOL(2))*A_E(HISBAD+1)/MHSIZ !NOISE
	  CALL WNCTXT(OTP,'!/Noise= !E13.4 W.U.!/',NOIS(0))
C
C NOISE AND OFFSET
C
	ELSE
	  J0=A_J(HISBAD+3)+MHSZ2		!BUFFER POINTER
	  NOIS(0)=0				!SET NO SOLUTION
	  NOIS(1)=0
	  CALL WNMIGN(MAR,2,1)			!GET LSQ AREA
	  CD(1)=1E0				!LSQ CONSTANT
	  DO I=-NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)),
	1		NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)) !USE 12%
	    IF (A_J(J0+I).GT.0) THEN		!CAN DO
	      R0=I+.5
	      CD(2)=-(R0**2)			!LSQ CONSTANT
	      R1=MHSZ2/8.-ABS(I)			!WEIGHT
	      CALL WNMIMC(MAR,CD,R1,LOG(FLOAT(A_J(J0+I)))) !MAKE EQUATIONS
	    END IF
	  END DO
	  IF (.NOT.WNMITN(MAR)) GOTO 20		!CANNOT SOLVE
	  CALL WNMISN(MAR,SOL,MU,ME)
	  IF (SOL(2).LE.0) GOTO 20		!WRONG SOLUTION
C
	  R2=0					!START OFFSET
	  R3=SOL(2)				!SOLUTION LIMIT
	  DO I2=1,4				!ITERATE
	    CALL WNMIZN(MAR)			!RE-ZERO AREA
	    CD(1)=1E0				!LSQ CONSTANT
	    DO I=-MIN(NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)),
	1			INT(SQRT(1./R3))),
	1		MIN(NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)),
	1			INT(SQRT(1./R3)))
	      IF (A_J(J0+I).GT.0) THEN		!CAN DO
	        R0=I+.5
	        CD(2)=-((R0-R2)**2)		!LSQ CONSTANT
	        R1=MHSZ2/8.-ABS(I)		!WEIGHT
	        CALL WNMIMC(MAR,CD,R1,LOG(FLOAT(A_J(J0+I)))) !MAKE EQUATIONS
	      END IF
	    END DO
	    IF (.NOT.WNMITN(MAR)) GOTO 20	!CANNOT SOLVE
	    CALL WNMISN(MAR,SOL,MU,ME)
	    IF (SOL(2).LE.0) GOTO 20		!WRONG SOLUTION
	    NOIS(0)=SQRT(0.5/SOL(2))*A_E(HISBAD+1)/MHSZ2 !NOISE
C
	    CALL WNMIZN(MAR)			!RE-ZERO AREA
	    CD(2)=0E0				!LSQ CONSTANT
	    DO I=-MIN(NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)),
	1			INT(SQRT(1./R3))),
	1		MIN(NINT((A_E(HISBAD+2)/A_E(HISBAD+1))*(MHSZ2/8)),
	1			INT(SQRT(1./R3)))
	      IF (A_J(J0+I).GT.0) THEN		!CAN DO
	        R0=I+.5
	        CD(1)=2*SOL(2)*(R0-R2)
	        R1=MHSZ2/8.-ABS(I)		!WEIGHT
	        CALL WNMIMC(MAR,CD,R1,LOG(FLOAT(A_J(J0+I)))-
	1		SOL(1)+SOL(2)*((R0-R2)**2)) !MAKE EQUATIONS
	      END IF
	    END DO
	    CALL WNMINZ(MAR)			!NON-ZERO DIAGONAL
	    IF (.NOT.WNMITN(MAR)) GOTO 20	!CANNOT SOLVE
	    CALL WNMISN(MAR,SOL,MU,ME)
	    R2=R2+SOL(1)			!NEXT ITERATION
	    NOIS(1)=R2*A_E(HISBAD+1)/MHSZ2	!OFFSET
	    ME(2)=ME(1)*A_E(HISBAD+1)/MHSZ2	!M.E.
	  END DO				!NEXT ITERATION
	  CALL WNCTXT(OTP,'!/Noise= !E13.4 W.U.'//
	1		', Offset= !E13.4 (!E13.4) W.U.!/',
	1		NOIS(0),NOIS(1),ME(2))
	END IF
C
	GOTO 21
C
C ERROR
C
 20	CONTINUE
	CALL WNCTXT(OTP,'Cannot solve for noise')
 21	CONTINUE
	CALL WNMIFN(MAR)			!FREE AREA
C
	RETURN
C
C HS6
C
	ENTRY WNMHS6(HISBAD,N,OTP,MPMXP,MPMAX)
C
	N=MHSIZ					!RETURN SIZE
	OTP=A_J(HISBAD+3)			!BUFFER POINTER
	MPMXP=A_E(HISBAD+2)			!MAX. PRESENT
	MPMAX=A_E(HISBAD+1)			!VALUE FULL SIZE
	DO I=N-1,0,-1				!MAKE ACCUMULATED
	  A_J(OTP+I)=A_J(OTP+I)+A_J(OTP+I+1)
	END DO
C
	RETURN
C
C HS7
C
	ENTRY WNMHS7(HISBAD,N,OTP,MPMXP,MPMAX)
C
	N=MHSIZ					!RETURN SIZE
	OTP=A_J(HISBAD+3)			!BUFFER POINTER
	MPMXP=A_E(HISBAD+2)			!MAX. PRESENT
	MPMAX=A_E(HISBAD+1)			!VALUE FULL SIZE
C
	RETURN
C
C
	END

C+ WNPTWO.FOR
C  WNB 911211
C
C  Revisions:
C	HjV 930513	Increase piece buffer
C	WNB 930517	Decrease piece buffer
C	CMV 941214	Pol.vectors were double sized
C
C  Two-dimensional plot routines
C
	LOGICAL FUNCTION WQ_CONX(CID)
C
C  Result:
C
C	WQ_CONI( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			NC_J:I, CONT_E(0:*):I)
C				Initialise contouring for area with ident CID.
C				Area has lines with N points, the first point
C				at POS, the next point at +DPOS(*,0). The
C				next line is at +DPOS(*,1). There are NC
C				contours given in CONT.
C	WQ_CONJ( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			NC_J:I, CONT_E(0:*):I, DEL_E:I, LIX_J:I)
C				Same, but also specify a value DEL indicating
C				values to be discarded (or 0 if not), and a
C				line type LIX.
C	WQ_CONT( CID_J:I, LIST_E(0:*))
C				Give all N intensities in LIST on a line in
C				in area CID
C	WQ_CONX( CID_J:I)	Finish contouring.
C
C	WQ_SHADI( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			TYP_J:I, RANGE_E(0:1), DEL_E:I)
C				Initialise halftone for area with ident CID.
C				Area has lines with N points, the first point
C				at POS, the next point at +DPOS(*,0). The
C				next line is at +DPOS(*,1). Shading TYP to be
C				used for the given RANGE. DEL indicates (or 0)
C				points to delete.
C	WQ_SHADJ( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			NC_J:I, CONT_E(0:*):I, DEL_E:I, LIX_J:I)
C				Initialise halftone for area with ident CID.
C				Area has lines with N points, the first point
C				at POS, the next point at +DPOS(*,0). The
C				next line is at +DPOS(*,1). Shading LIX to be
C				used. NC and CONT specify a list of contour 
C				values to separate shadings.
C	WQ_SHADE( CID_J:I, LIST_E(0:*))
C				Give all N intensities in LIST on a line in
C				in area CID.
C	WQ_SHADX( CID_J:I)	Finish halftone
C	WQ_POLI( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			SCAL_E:I, RANGE_E(0:1), DEL_E:I)
C				Initialise polarisation vectors for area with
C				ident CID. Area has lines withN points, the first
C				point at POS, the next at +DPOS(*,0). The
C				next line is at +DPOS(*,1).
C				RANGE let only plot if value > low, and limit
C				length to high. SCAL gives scale in x, y coord.
C				of amplitude.
C	WQ_POLT( CID_J:I, LIST_E(0:*), LISTA_E(0:*))
C				Draw vectors for line with intensities LIST and
C				angles (radians) in LISTA
C	WQ_POLX( CID_J:I)	Finish polarisation
C	WQ_RULI( CID_J:O, N_J:I, POS_E(0:1):I, DPOS_E(0:1,0:1):I,
C			SCAL_E:I, RANGE_E(0:1), DEL_E:I, TYP_J:I)
C				Initialise ruled surface for area with
C				ident CID. Area has lines with N points, the first
C				point at POS, the next at +DPOS(*,0). The
C				next line is at +DPOS(*,1).
C				RANGE cut-off of plot.
C				SCAL gives scale in x, y coord.
C				of amplitude.
C				TYP (0: hide, 1: full, 2: dot)
C	WQ_RULE( CID_J:I, LIST_E(0:*))
C				Draw ruled surface for data in LIST.
C	WQ_RULX( CID_J:I)	Finish polarisation
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WQG_DEF'		!GENERAL AREA
	INCLUDE 'WQI_O_DEF'		!CONTROL AREA
C
C  Entry points:
C
	LOGICAL WQ_CONI, WQ_CONJ, WQ_CONT !CONTOURING
	LOGICAL WQ_SHADX, WQ_SHADI, WQ_SHADJ, WQ_SHADE !SHADING
	LOGICAL WQ_POLX, WQ_POLI, WQ_POLT !POL. VECTORS
	LOGICAL WQ_RULX, WQ_RULI, WQ_RULE !RULED SURFACE
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER CID			!AREA INDEX
	INTEGER N			!# OF POINTS/LINE
	REAL POS(0:1)			!START POSITION FIRST POINT, LINE
	REAL DPOS(0:3)			!INCREMENT NEXT POINT, NEXT LINE
	INTEGER NC			!# OF CONTOURS
	REAL CONT(0:*)			!CONTOUR VALUES
	REAL DEL			!DELETE VALUE
	INTEGER LIX			!LINE INDEX
	INTEGER TYP			!SHADING TYPE
	REAL SCAL			!SCALE
	REAL RANGE(0:1)			!SHADING RANGE
	REAL LIST(0:*)			!DATA LINE
	REAL LISTA(0:1)			!POL. ANGLES
C
C  Function references:
C
	LOGICAL WNGGVM			!GET MEMORY
C
C  Data declarations:
C
	REAL LDEL			!DELETE VALUE
	INTEGER LLIX			!LINE INDEX
	INTEGER LNC			!# OF CONTOURS
	INTEGER PCE,PCJ			!CONTOUR POINTERS
	INTEGER PDE,PDXE		!DATA POINTER
	INTEGER P1E,P1J			!CROSSPOINT BUFFER
	INTEGER P2E			!PIECE BUFFER
	REAL POSO(0:3)			!OLD POS.
	REAL POSN(0:3)			!NEW POS.
	REAL POSC(0:1)			!CENTRE POS.
	REAL IC				!INTENSITY
	INTEGER CIND			!CONTOURS FOUND
	REAL IV(0:1)			!INTENSITY FOR CROSS
	REAL PS(0:3)			!POSITIONS CROSS PTS
	INTEGER CTP(0:7)		!CONTOUR TYPE SWITCH
	  DATA CTP/9,3,6,12,1,2,4,8/
	REAL W1(0:1)			!CONTOUR INTENSITIES
	REAL R2,R3
C-
C
C CONX
C
	GOTO 100
C
C SHADX
C
	ENTRY WQ_SHADX(CID)
C
	GOTO 100
C
C POLX
C
	ENTRY WQ_POLX(CID)
C
	GOTO 100
C
C RULX
C
	ENTRY WQ_RULX(CID)
C
	GOTO 100
C
C EXIT PLOTTING
C
 100	CONTINUE
	J=A_J(CID+WQI_LEN_J)				!LENGTH AREA
	CALL WNGFVM(J,CID*LB_E+A_OB)			!FREE AREA
	CID=0						!SET FREE
	WQ_CONX=.TRUE.					!OK
C
	RETURN
C
C CONI
C
	ENTRY WQ_CONI(CID,N,POS,DPOS,NC,CONT)
C
	LDEL=0						!NO DELETE
	LLIX=0						!NO LINE INDEX
	GOTO 200
C
C CONJ
C
	ENTRY WQ_CONJ(CID,N,POS,DPOS,NC,CONT,DEL,LIX)
C
	LDEL=DEL					!DELETE VALUE
	LLIX=LIX					!LINE INDEX
	GOTO 200
C
C CONTOURING INIT
C
 200	CONTINUE
	WQ_CONI=.FALSE.					!ASSUME ERROR
	CID=0
	J=WQIHDL+LB_E*(2*NC+N)				!AREA LENGTH
	J=J+2*6*(LB_E+LB_J)*NC				!CROSSPOINT BUFFER
	J=J+(1+2*(2*3+1))*LB_E*NC			!PIECE BUFFER
	IF (.NOT.WNGGVM(J,J0)) RETURN			!GET AREA
	CALL WNGMVZ(WQIHDL,A_B(J0-A_OB))		!CLEAR AREA
	WQ_CONI=.TRUE.					!OK
	CID=(J0-A_OB)/LB_E				!AREA POINTER
	A_J(CID+WQI_LEN_J)=J				!AREA LENGTH
C
C FILL
C
	A_J(CID+WQI_NC_J)=NC				!# OF CONTOURS
	A_J(CID+WQI_CAE_J)=CID+WQIHDL/LB_E		!CONTOUR LIST POINTER
	A_J(CID+WQI_CAJ_J)=A_J(CID+WQI_CAE_J)+NC	!CONTOUR LINK POINTER
	A_J(CID+WQI_N_J)=N				!LINE LENGTH
	A_J(CID+WQI_PAD_J)=A_J(CID+WQI_CAJ_J)+NC	!LINE BUFFER
	A_J(CID+WQI_NE1_J)=2*6*NC			!CROSSPOINT BUF. LENGTH
	A_J(CID+WQI_BAE1_J)=A_J(CID+WQI_PAD_J)+N	!CROSSPOINT BUFFER
	A_J(CID+WQI_NJ1_J)=2*6*NC			!CROSSPOINT BUF. LENGTH
	A_J(CID+WQI_BAJ1_J)=A_J(CID+WQI_BAE1_J)+2*6*NC	!CROSSPOINT BUFFER
	A_J(CID+WQI_NE2_J)=(1+2*(2*3+1))*NC		!PIECE BUF. LENGTH
	A_J(CID+WQI_BAE2_J)=A_J(CID+WQI_BAJ1_J)+2*6*NC	!PIECE BUFFER
	DO I=0,3
	  A_E(CID+WQI_DPOS_E+I)=DPOS(I)			!INCREMENT POSITION
	END DO
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=POS(I)-DPOS(2+I)		!FIRST POSITION
	END DO
	A_E(CID+WQI_DEL_E)=LDEL				!DELETE VALUE
	A_J(CID+WQI_LIX_J)=LLIX				!LINE INDEX
	DO I=0,1					!CENTRE POSITION
	  A_E(CID+WQI_POSC_E+I)=POS(I)-
	1		0.5*(DPOS(I)+DPOS(2+I))
	END DO
	PCE=A_J(CID+WQI_CAE_J)				!CONTOUR LIST POINTER
	PCJ=A_J(CID+WQI_CAJ_J)				!CONTOUR LINK POINTER
	DO I=0,NC-1					!SET CONTOURS
	  A_E(PCE+I)=CONT(I)
	  A_J(PCJ+I)=0					!LINK
	END DO
	DO I=0,NC-2					!SORT CONTOURS
	  DO I1=0,NC-2-I
	    IF (A_E(PCE+I1).GT.A_E(PCE+I1+1)) THEN	!REVERSE
	      R0=A_E(PCE+I1)
	      A_E(PCE+I1)=A_E(PCE+I1+1)
	      A_E(PCE+I1+1)=R0
	    END IF
	  END DO
	END DO
C
	RETURN
C
C SHADI
C
	ENTRY WQ_SHADI(CID,N,POS,DPOS,TYP,RANGE,DEL)
C
	LLIX=TYP					!TYPE
	LNC=0						!# OF CONTOURS
	GOTO 300
C
C SHADJ
C
	ENTRY WQ_SHADJ(CID,N,POS,DPOS,NC,CONT,DEL,LIX)
C
	LLIX=LIX					!TYPE
	LNC=NC						!# OF CONTOURS
	GOTO 300
C
C SHADING INIT
C
 300	CONTINUE
	WQ_SHADI=.FALSE.				!ASSUME ERROR
	CID=0
	J=WQIHDL+LB_E*(2*LNC+2*N)			!AREA LENGTH
	IF (.NOT.WNGGVM(J,J0)) RETURN			!GET AREA
	CALL WNGMVZ(WQIHDL,A_B(J0-A_OB))		!CLEAR AREA
	WQ_SHADI=.TRUE.					!OK
	CID=(J0-A_OB)/LB_E				!AREA POINTER
	A_J(CID+WQI_LEN_J)=J				!AREA LENGTH
C
C FILL
C
	A_J(CID+WQI_NC_J)=LNC				!# OF CONTOURS
	A_J(CID+WQI_CAE_J)=CID+WQIHDL/LB_E		!CONTOUR LIST POINTER
	A_J(CID+WQI_CAJ_J)=A_J(CID+WQI_CAE_J)+LNC	!CONTOUR LINK POINTER
	A_J(CID+WQI_N_J)=N				!LINE LENGTH
	A_J(CID+WQI_PAD_J)=A_J(CID+WQI_CAJ_J)+LNC	!LINE BUFFER
	A_J(CID+WQI_PADX_J)=A_J(CID+WQI_CAJ_J)+N	!CENTRE INT. BUFFER
	DO I=0,3
	  A_E(CID+WQI_DPOS_E+I)=DPOS(I)			!INCREMENT POSITION
	END DO
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=POS(I)-DPOS(2+I)		!POSITION
	END DO
	A_E(CID+WQI_DEL_E)=DEL				!DELETE VALUE
	A_J(CID+WQI_LIX_J)=LLIX				!TYPE
	IF (LNC.EQ.0) THEN				!SET RANGE
	  A_E(CID+WQI_MXMN_E)=RANGE(1)-RANGE(0)
	  IF (A_E(CID+WQI_MXMN_E).EQ.0) A_E(CID+WQI_MXMN_E)=1.
	  A_E(CID+WQI_MXMN_E)=1./A_E(CID+WQI_MXMN_E)	!A
	  A_E(CID+WQI_MXMN_E+1)=-RANGE(0)*A_E(CID+WQI_MXMN_E)
	END IF
	PCE=A_J(CID+WQI_CAE_J)				!CONTOUR LIST POINTER
	PCJ=A_J(CID+WQI_CAJ_J)				!CONTOUR LINK POINTER
	DO I=0,LNC-1					!SET CONTOURS
	  A_E(PCE+I)=CONT(I)
	  A_J(PCJ+I)=0					!LINK
	END DO
	DO I=0,LNC-2					!SORT CONTOURS
	  DO I1=0,LNC-2-I
	    IF (A_E(PCE+I1).GT.A_E(PCE+I1+1)) THEN	!REVERSE
	      R0=A_E(PCE+I1)
	      A_E(PCE+I1)=A_E(PCE+I1+1)
	      A_E(PCE+I1+1)=R0
	    END IF
	  END DO
	END DO
C
	RETURN
C
C POLI
C
	ENTRY WQ_POLI(CID,N,POS,DPOS,SCAL,RANGE,DEL)
C
C POL. INIT
C
	WQ_POLI=.FALSE.					!ASSUME ERROR
	CID=0
	J=WQIHDL					!AREA LENGTH
	IF (.NOT.WNGGVM(J,J0)) RETURN			!GET AREA
	CALL WNGMVZ(WQIHDL,A_B(J0-A_OB))		!CLEAR AREA
	WQ_POLI=.TRUE.					!OK
	CID=(J0-A_OB)/LB_E				!AREA POINTER
	A_J(CID+WQI_LEN_J)=J				!AREA LENGTH
C
C FILL
C
	DO I=0,1
	  A_E(CID+WQI_MXMN_E+I)=RANGE(I)		!RANGE
	END DO
	A_E(CID+WQI_USE_E+0)=SCAL			!SCALE
	A_J(CID+WQI_N_J)=N				!LINE LENGTH
	DO I=0,3
	  A_E(CID+WQI_DPOS_E+I)=DPOS(I)			!INCREMENT POSITION
	END DO
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=POS(I)			!POSITION
	END DO
	A_E(CID+WQI_DEL_E)=DEL				!DELETE VALUE
C
	RETURN
C
C RULI
C
	ENTRY WQ_RULI(CID,N,POS,DPOS,SCAL,RANGE,DEL,LIX)
C
C RULED INIT
C
	WQ_RULI=.FALSE.					!ASSUME ERROR
	CID=0
	J=WQIHDL+LB_E*(4*(N+2))				!AREA LENGTH
	IF (.NOT.WNGGVM(J,J0)) RETURN			!GET AREA
	CALL WNGMVZ(WQIHDL,A_B(J0-A_OB))		!CLEAR AREA
	WQ_RULI=.TRUE.					!OK
	CID=(J0-A_OB)/LB_E				!AREA POINTER
	A_J(CID+WQI_LEN_J)=J				!AREA LENGTH
C
C FILL
C
	DO I=0,1
	  A_E(CID+WQI_MXMN_E+I)=RANGE(I)		!RANGE
	END DO
	A_E(CID+WQI_USE_E+0)=SCAL			!SCALE
	A_J(CID+WQI_N_J)=N				!LINE LENGTH
	A_J(CID+WQI_PAD_J)=CID+WQIHDL/LB_E		!LINE BUFFER
	A_J(CID+WQI_PADX_J)=A_J(CID+WQI_PAD_J)+N+2	!LINE BUFFER
	A_J(CID+WQI_NE1_J)=N+2				!HIDDEN LINES
	A_J(CID+WQI_BAE1_J)=A_J(CID+WQI_PADX_J)+N+2
	A_J(CID+WQI_NE2_J)=N+2				!HIDDEN LINES Y
	A_J(CID+WQI_BAE2_J)=A_J(CID+WQI_BAE1_J)+N+2
	DO I=0,3
	  A_E(CID+WQI_DPOS_E+I)=DPOS(I)			!INCREMENT POSITION
	END DO
	A_E(CID+WQI_USE_E+1)=SQRT(DPOS(0)**2+DPOS(1)**2) !MAKE INT. INCREMENT
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=POS(I)-DPOS(2+I)		!FIRST POSITION
	END DO
	A_E(CID+WQI_DEL_E)=LDEL				!DELETE VALUE
	A_J(CID+WQI_LIX_J)=LLIX				!TYPE
C
	RETURN
C
C CONT
C
	ENTRY WQ_CONT(CID,LIST)
C
	WQ_CONT=.TRUE.
C
C START
C
	PCE=A_J(CID+WQI_CAE_J)				!CONTOUR POINTER
	PCJ=A_J(CID+WQI_CAJ_J)				!CONTOUR LINK POINTER
	PDE=A_J(CID+WQI_PAD_J)				!DATA POINTER
	P1E=A_J(CID+WQI_BAE1_J)				!CROSSPOINT BUFFER
	P1J=A_J(CID+WQI_BAJ1_J)				!CROSSPOINT BUFFER
	P2E=A_J(CID+WQI_BAE2_J)				!PIECE BUFFER
	IF (A_J(CID+WQI_IND_J).EQ.0) GOTO 330		!NO DATA YET
C
C SET LINE TYPE
C
	IF (A_J(CID+WQI_LIX_J).NE.0) THEN
	  CALL WQSPLI(A_J(CID+WQI_LIX_J))		!SET CORRECT LINE TYPE
	END IF
C
C GET COUNTOUR CROSS POINTS
C
	DO I1=0,1
	  POSO(2+I1)=A_E(CID+WQI_POS_E+I1)		!INIT OLD LINE
	  POSN(2+I1)=POSO(2+I1)+A_E(CID+WQI_DPOS_E+2+I1) !INIT NEW LINE
	  POSC(I1)=A_E(CID+WQI_POSC_E+I1)		!INIT CENTRE LINE
	END DO
C
C ALL SQUARES
C
	DO I=0,A_J(CID+WQI_N_J)-2			!ALL SQUARES
	  J1=0						!INIT WORK AREA
	  DO I1=0,1
	    POSO(I1)=POSO(2+I1)				!NEW OLD LINE POS
	    POSO(2+I1)=POSO(2+I1)+A_E(CID+WQI_DPOS_E+I1)
	    POSN(I1)=POSN(2+I1)				!NEW NEW LINE POS
	    POSN(2+I1)=POSN(2+I1)+A_E(CID+WQI_DPOS_E+I1)
	    POSC(I1)=POSC(I1)+A_E(CID+WQI_DPOS_E+I1)	!NEW CENTRE POS
	  END DO
	  IF (A_E(CID+WQI_DEL_E).EQ.0 .OR.
	1		(LIST(I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		LIST(I+1).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I+1).NE.A_E(CID+WQI_DEL_E))) THEN
	    IC=(A_E(PDE+I)+A_E(PDE+I+1)+LIST(I)+LIST(I+1))/4 !CENTRE INTENSITY
	    DO I1=0,A_J(CID+WQI_NC_J)-1			!CLEAR LINKS
	      A_J(PCJ+I1)=0
	    END DO
	    CIND=0					!NO CROSS POINTS
C
C CHECK ALL SIDES
C
	    DO I1=0,7					!ALL SIDES
	      I2=CTP(I1)				!CONTOUR TYPE
	      IF (I2.EQ.9) THEN
	        IV(0)=IC				!INT 1 AND INT 2
	        IV(1)=A_E(PDE+I)
	        PS(0)=POSC(0)				!POS. 1 AND 2
	        PS(1)=POSC(1)
	        PS(2)=POSO(0)
	        PS(3)=POSO(1)
	      ELSE IF (I2.EQ.3) THEN
		IV(1)=LIST(I)
		PS(2)=POSN(0)
		PS(3)=POSN(1)
	      ELSE IF (I2.EQ.6) THEN
		IV(1)=LIST(I+1)
		PS(2)=POSN(2)
		PS(3)=POSN(3)
	      ELSE IF (I2.EQ.12) THEN
		IV(1)=A_E(PDE+I+1)
		PS(2)=POSO(2)
		PS(3)=POSO(3)
	      ELSE IF (I2.EQ.1) THEN
		IF (CIND.EQ.0) GOTO 310			!NO CROSS FOUND
		IV(0)=LIST(I)
		IV(1)=A_E(PDE+I)
		PS(0)=POSN(0)
		PS(1)=POSN(1)
		PS(2)=POSO(0)
		PS(3)=POSO(1)
	      ELSE IF (I2.EQ.2) THEN
		IV(1)=LIST(I+1)
		PS(2)=POSN(2)
		PS(3)=POSN(3)
	      ELSE IF (I2.EQ.4) THEN
		IV(0)=A_E(PDE+I+1)
		PS(0)=POSO(2)
		PS(1)=POSO(3)
	      ELSE IF (I2.EQ.8) THEN
		IV(1)=A_E(PDE+I)
		PS(2)=POSO(0)
		PS(3)=POSO(1)
	      END IF
C
C FIND CONTOUR
C
	      IF (IV(0).EQ.IV(1)) THEN			!READY WITH CHECK
	      ELSE IF (IV(0).LT.IV(1)) THEN
		W1(0)=(PS(2)-PS(0))/(IV(1)-IV(0))
		W1(1)=(PS(3)-PS(1))/(IV(1)-IV(0))
		DO I3=0,A_J(CID+WQI_NC_J)-1		!FIND CONTOUR
		  IF (IV(0).GT.A_E(PCE+I3)) THEN	!NEXT CONTOUR
		  ELSE IF (IV(1).LE.A_E(PCE+I3)) THEN	!NO CROSS POINT
		    GOTO 311
		  ELSE
		    R0=A_E(PCE+I3)-IV(0)
		    A_E(P1E+2*J1+0)=W1(0)*R0+PS(0)	!X
		    A_E(P1E+2*J1+1)=W1(1)*R0+PS(1)	!Y
		    A_J(P1J+2*J1+1)=CTP(I1)		!TYPE
		    A_J(P1J+2*J1+0)=A_J(PCJ+I3)		!LINK
		    J1=J1+1
		    A_J(PCJ+I3)=J1
		    CIND=1				!FOUND
		  END IF
	        END DO
 311	        CONTINUE
	      ELSE
		W1(0)=(PS(2)-PS(0))/(IV(1)-IV(0))
		W1(1)=(PS(3)-PS(1))/(IV(1)-IV(0))
		DO I3=0,A_J(CID+WQI_NC_J)-1
		  IF (IV(1).GT.A_E(PCE+I3)) THEN	!NEXT CONTOUR
		  ELSE IF (IV(0).LE.A_E(PCE+I3)) THEN	!NO CROSS POINT
		    GOTO 312
		  ELSE
		    R0=A_E(PCE+I3)-IV(0)
		    A_E(P1E+2*J1+0)=W1(0)*R0+PS(0)	!X
		    A_E(P1E+2*J1+1)=W1(1)*R0+PS(1)	!Y
		    A_J(P1J+2*J1+1)=CTP(I1)		!TYPE
		    A_J(P1J+2*J1+0)=A_J(PCJ+I3)		!LINK
		    J1=J1+1
		    A_J(PCJ+I3)=J1
		    CIND=1				!FOUND
		  END IF
		END DO
 312		CONTINUE
	      END IF					!END SINGLE CROSS POINT
	    END DO					!END ALL CROSS POINTS
C
C PLOT CONTOUR PIECE
C
	    J1=0					!OUTPUT PTR
	    J2=0
	    DO I1=0,A_J(CID+WQI_NC_J)-1			!ALL CONTOURS
	      J2=J1					!CNT TO SET
	      A_J(P2E+J2)=0				!INIT CNT
	      J=A_J(PCJ+I1)				!START LINK
	      DO WHILE (J.NE.0)
		J=J-1					!CORRECT
		IF (A_J(P1J+2*J+1).EQ.0) THEN		!ALREADY USED
		  J=A_J(P1J+2*J+0)			!NEXT LINK
		ELSE
		  J1=J1+1
		  A_E(P2E+J1)=A_E(P1E+2*J+0)		!X
		  J1=J1+1
		  A_E(P2E+J1)=A_E(P1E+2*J+1)		!Y
		  J3=A_J(P1J+2*J+1)			!TEST TYPE
		  A_J(P2E+J2)=1				!CNT PIECE
 320		  CONTINUE
		  J0=A_J(P1J+2*J)			!LINK
		  DO WHILE (J0.NE.0)			!LOOK AT REMAINING
		    J0=J0-1
		    IF (IAND(J3,A_J(P1J+2*J0+1)).EQ.0) THEN !WRONG TYPE
		      J0=A_J(P1J+2*J0)			!LINK
		    ELSE
		      J3=A_J(P1J+2*J0+1)		!CONTINUE SRCH
		      A_J(P1J+2*J0+1)=0 		!SET USED
		      J1=J1+1
		      A_E(P2E+J1)=A_E(P1E+2*J0+0)	!X
		      J1=J1+1
		      A_E(P2E+J1)=A_E(P1E+2*J0+1)	!Y
		      A_J(P2E+J2)=A_J(P2E+J2)+1		!CNT PIECE
		      GOTO 320				!MORE TO SEARCH
		    END IF
		  END DO
		  J=A_J(P1J+2*J)			!NEXT LINK
		END IF
		IF (A_J(P2E+J2).NE.0) THEN		!PIECE PRESENT
		  J2=J2+2*A_J(P2E+J2)+1			!UPDATE PIECE POINTER
		  J1=J2
		  A_J(P2E+J2)=0				!NEXT PIECE
		ELSE
		  J1=J2
		END IF
	      END DO					!END CONTOUR LINK
	    END DO					!END ALL CONTOURS
	    A_J(P2E+J2)=0				!END PIECE LIST
	    CALL WQPOLL_LIST(A_J(P2E))			!PLOT
	  END IF					!END SQUARE
 310	  CONTINUE
	END DO						!END ALL SQUARES
C
C DATA SAVE
C
 330	CONTINUE
	DO I=0,A_J(CID+WQI_N_J)-1
	  A_E(PDE+I)=LIST(I)				!SET DATA
	END DO
	A_J(CID+WQI_IND_J)=1				!DATA SEEN
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=A_E(CID+WQI_POS_E+I)+
	1		A_E(CID+WQI_DPOS_E+2+I)		!UPDATE POS
	  A_E(CID+WQI_POSC_E+I)=A_E(CID+WQI_POSC_E+I)+
	1		A_E(CID+WQI_DPOS_E+2+I)		!UPDATE CENTRE POS.
	END DO
C
	RETURN
C
C SHADE
C
	ENTRY WQ_SHADE(CID,LIST)
C
	WQ_SHADE=.TRUE.
C
C START
C
	PCE=A_J(CID+WQI_CAE_J)				!CONTOUR POINTER
	PCJ=A_J(CID+WQI_CAJ_J)				!CONTOUR LINK POINTER
	PDE=A_J(CID+WQI_PAD_J)				!DATA POINTER
	PDXE=A_J(CID+WQI_PADX_J)			!CENTRE INT. BUFFER
	IF (A_J(CID+WQI_IND_J).EQ.0) GOTO 430		!NO DATA YET
C
C SET INTENSITIES
C
	DO I=0,A_J(CID+WQI_N_J)-2
	  IF (A_E(CID+WQI_DEL_E).EQ.0 .OR.
	1		(LIST(I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		LIST(I+1).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I+1).NE.A_E(CID+WQI_DEL_E))) THEN
	    IC=(A_E(PDE+I)+A_E(PDE+I+1)+LIST(I)+LIST(I+1))/4 !CENTRE INTENSITY
	    IF (A_J(CID+WQI_NC_J).EQ.0) THEN		!CONVERT
	      IC=A_E(CID+WQI_MXMN_E+0)*IC+A_E(CID+WQI_MXMN_E+1)
	    ELSE
	      DO I1=0,A_J(CID+WQI_NC_J)-1		!FIND CONTOUR
		IF (IC.LT.A_E(PCE+I1)) THEN		!FOUND
		  IC=I1					!SET CONTOUR NUMBER
		  GOTO 410
		END IF
	      END DO
	      IC=A_J(CID+WQI_NC_J)			!MAX. CONTOUR
 410	      CONTINUE
	      IC=IC/A_J(CID+WQI_NC_J)			!NORMALISE VALUE
	    END IF
	  ELSE
	    IC=-1.					!DELETE VALUE
	  END IF
	  A_E(PDXE+I)=IC				!SAVE CENTRE INTENSITY
	END DO
	CALL WQ_BOX(A_J(CID+WQI_N_J),A_E(CID+WQI_POS_E),
	1		A_E(CID+WQI_DPOS_E),A_E(PDXE),
	1		A_J(CID+WQI_LIX_J))		!PLOT
	GOTO 430
C
C DATA SAVE
C
 430	CONTINUE
	DO I=0,A_J(CID+WQI_N_J)-1
	  A_E(PDE+I)=LIST(I)				!SET DATA
	END DO
	A_J(CID+WQI_IND_J)=1				!DATA SEEN
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=A_E(CID+WQI_POS_E+I)+
	1		A_E(CID+WQI_DPOS_E+2+I)		!UPDATE POS
	END DO
C
	RETURN
C
C POLT
C
	ENTRY WQ_POLT(CID,LIST,LISTA)
C
	WQ_POLT=.TRUE.
C
C START
C
C DRAW LINES
C
	DO I=0,A_J(CID+WQI_N_J)-1			!ALL POINTS
	  IF (A_E(CID+WQI_DEL_E).EQ.0 .OR.
	1		(LIST(I).NE.A_E(CID+WQI_DEL_E))) THEN !NOT DELETED
	    IF (ABS(LIST(I)).GT.A_E(CID+WQI_MXMN_E+0)) THEN !TO DO
	      IF (ABS(LIST(I)).GE.A_E(CID+WQI_MXMN_E+1)) THEN !LIMIT VALUE
		IC=A_E(CID+WQI_MXMN_E+1)
	      ELSE
		IC=LIST(I)
	      END IF
C
C Each vector is centered on the corresponding point, and the total
C length of the vector should be the scaled amplitude. So each half
C of the vector has to be twice as small.
C
	      IC=0.5*IC*A_E(CID+WQI_USE_E+0)		!SCALE LENGTH
	      POSO(0)=A_E(CID+WQI_POS_E+0)+I*A_E(CID+WQI_DPOS_E+0)-
	1		IC*SIN(LISTA(I))		!X HIGH
	      POSO(2)=A_E(CID+WQI_POS_E+0)+I*A_E(CID+WQI_DPOS_E+0)+
	1		IC*SIN(LISTA(I))		!X LOW
	      POSO(1)=A_E(CID+WQI_POS_E+1)+I*A_E(CID+WQI_DPOS_E+1)+
	1		IC*COS(LISTA(I))		!Y HIGH
	      POSO(3)=A_E(CID+WQI_POS_E+1)+I*A_E(CID+WQI_DPOS_E+1)-
	1		IC*COS(LISTA(I))		!Y LOW
	      CALL WQPOLL(2,POSO)			!DRAW
	    END IF
	  END IF
	END DO
C
C DATA SAVE
C
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=A_E(CID+WQI_POS_E+I)+
	1		A_E(CID+WQI_DPOS_E+2+I)		!UPDATE POS
	END DO
C
	RETURN
C
C RULE
C
	ENTRY WQ_RULE(CID,LIST)
C
	WQ_RULE=.TRUE.
C
C START
C
	PDE=A_J(CID+WQI_PAD_J)				!OLD DATA POINTER
	PDXE=A_J(CID+WQI_PADX_J)			!NEW DATA POINTER
	PCE=A_J(CID+WQI_BAE1_J)				!HIDDEN LIST POINTER
	P1E=A_J(CID+WQI_BAE2_J)				!HIDDEN LIST Y
	A_J(CID+WQI_USJ_J)=1				!HIDDEN BUFFER LENGTH
	A_E(PCE+0)=A_E(CID+WQI_MXMN_E+0)		!INIT HIDDEN VALUE
	A_E(PCE+1)=A_E(CID+WQI_MXMN_E+0)
	A_E(P1E+0)=0.					!Y HIDDEN VALUES
	A_E(P1E+1)=1.
	DO I=0,A_J(CID+WQI_N_J)-1
	  IF (A_E(CID+WQI_DEL_E).NE.0 .AND.
	1		LIST(I).EQ.A_E(CID+WQI_DEL_E)) THEN !DELETED
	    IC=LIST(I)
	  ELSE
	    IC=MIN(A_E(CID+WQI_MXMN_E+1),
	1		MAX(A_E(CID+WQI_MXMN_E+0),LIST(I)))*
	1		A_E(CID+WQI_USE_E+0)+		!INT.
	1		I*A_E(CID+WQI_USE_E+1)		!+ OFFSET
	  END IF
	  A_E(PDXE+I)=IC				!SET DATA
	END DO
	IF (A_J(CID+WQI_IND_J).EQ.0) GOTO 530		!NO DATA YET
C
C DRAW INTENSITIES
C
	CALL WQSPLI(1)					!FULL DRAWN
	R0=A_E(CID+WQI_DPOS_E+0)/A_E(CID+WQI_USE_E+1)	!SCALE X
	R1=A_E(CID+WQI_DPOS_E+1)/A_E(CID+WQI_USE_E+1)	!SCALE Y
	DO I=0,A_J(CID+WQI_N_J)-1			!ALL POINTS
	  IF (A_E(CID+WQI_DEL_E).EQ.0 .OR.
	1		(A_E(PDXE+I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDXE+I+1).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I).NE.A_E(CID+WQI_DEL_E) .AND.
	1		A_E(PDE+I+1).NE.A_E(CID+WQI_DEL_E))) THEN !TO DRAW
	    IF (A_J(CID+WQI_LIX_J).EQ.1) THEN		!FULL
	      POSO(0)=A_E(CID+WQI_POS_E+0)+
	1		A_E(PDE+I)*R0			!POS
	      POSO(2)=A_E(CID+WQI_POS_E+0)+A_E(CID+WQI_DPOS_E+2)+
	1		A_E(PDXE+I)*R0
	      POSO(1)=A_E(CID+WQI_POS_E+1)+
	1		A_E(PDE+I)*R1
	      POSO(3)=A_E(CID+WQI_POS_E+1)+A_E(CID+WQI_DPOS_E+3)+
	1		A_E(PDXE+I)*R1
	      CALL WQPOLL(2,POSO)			!DRAW
	    ELSE					!HIDE
	      I1=0					!START HIDE LIST
	      POSO(0)=A_E(PDE+I)			!OLD INT
	      POSO(1)=0.				!OLD Y
	      POSN(0)=POSO(0)				!PREVIOUS INT.
	      IF (POSO(0).GE.A_E(PCE+I1)) THEN		!START NOT HIDDEN
 520		CONTINUE
	        I2=I1					!START THIS CHECK
	        DO WHILE(I1.LT.A_J(CID+WQI_USJ_J))	!CHECK HIDE LIST
		  I1=I1+1				!NEXT TEST
		  POSO(3)=A_E(P1E+I1)			!NEXT Y
		  POSO(2)=A_E(PDE+I)+POSO(3)*
	1		(A_E(PDXE+I)-A_E(PDE+I))	!NEW INT
		  IF (POSO(2).GE.A_E(PCE+I1)) THEN	!END NOT HIDDEN
		    A_E(PCE+I1-1)=POSN(0)		!NEW TEST VALUE
		    POSN(0)=POSO(2)			!PREVIOUS INT
		  ELSE
		    IF (A_E(P1E+I1).EQ.A_E(P1E+I1-1)) THEN !SIMPLE
		      POSO(3)=A_E(P1E+I1)		!Y CROSS
		    ELSE
		      R3=(A_E(PCE+I1)-A_E(PCE+I1-1))/
	1			(A_E(P1E+I1)-A_E(P1E+I1-1)) !(I1-I0)/(Y1-Y0) (B)
		      R2=A_E(PCE+I1-1)-A_E(P1E+I1-1)*R3	!I0-Y0*R3 (A)
		      R3=R3-A_E(PDXE+I)+A_E(PDE+I)	!B-D
		      IF (R3.NE.0) THEN
		        POSO(3)=(A_E(PDE+I)-R2)/R3	!NEW Y = (C-A)/(B-D)
		      ELSE
			POSO(3)=1.
		      END IF
		    END IF
		    POSO(2)=A_E(PDE+I)+POSO(3)*
	1		(A_E(PDXE+I)-A_E(PDE+I))	!CROSS INT
		    A_E(PCE+I1-1)=POSN(0)		!NEW TEST VALUE
		    DO I3=A_J(CID+WQI_USJ_J),I1,-1	!MAKE PLACE NEW CROSS
		      A_E(P1E+I3+1)=A_E(P1E+I3)		!MOVE Y
		      A_E(PCE+I3+1)=A_E(PCE+I3)		!MOVE CHECK INT
		    END DO
		    A_J(CID+WQI_USJ_J)=A_J(CID+WQI_USJ_J)+1 !COUNT IT
		    A_E(PCE+I1)=POSO(2)			!NEW ADDED INT
		    A_E(P1E+I1)=POSO(3)			!NEW CROSS Y
		    GOTO 511				!CONTINUE HIDDEN
		  END IF
	        END DO
 511		CONTINUE
		POSN(0)=A_E(CID+WQI_POS_E+0)+POSO(0)*R0+
	1			POSO(1)*A_E(CID+WQI_DPOS_E+2) !DRAW
		POSN(2)=A_E(CID+WQI_POS_E+0)+POSO(2)*R0+
	1			POSO(3)*A_E(CID+WQI_DPOS_E+2)
		POSN(1)=A_E(CID+WQI_POS_E+1)+POSO(0)*R1+
	1			POSO(1)*A_E(CID+WQI_DPOS_E+3)
		POSN(3)=A_E(CID+WQI_POS_E+1)+POSO(2)*R1+
	1			POSO(3)*A_E(CID+WQI_DPOS_E+3)
		CALL WQPOLL(2,POSN)			!DRAW PIECE
		A_E(PCE+I1)=POSO(2)			!NEW CHECK INT
		IF (I1-I2.GT.1) THEN			!DELETE CROSS POINTS
		  DO I3=I1,A_J(CID+WQI_USJ_J)
		    A_E(P1E+I2+1+I3-I1)=A_E(P1E+I3)
		    A_E(PCE+I2+1+I3-I1)=A_E(PCE+I3)
		  END DO
		  A_J(CID+WQI_USJ_J)=A_J(CID+WQI_USJ_J)-(I1-I2-1) !NEW LENGTH
		  I1=I2+1				!NEW CHECK POSITION
		END IF
		IF (I1.LT.A_J(CID+WQI_USJ_J)) THEN	!CONTINUE HIDDEN
	          POSO(0)=A_E(PCE+I1)			!OLD INT
	          POSO(1)=A_E(P1E+I1)			!OLD Y
	          POSN(0)=POSO(0)			!PREVIOUS INT.
		  GOTO 510
		END IF
	      ELSE					!START HIDDEN
 510		CONTINUE
	        I2=I1					!START THIS CHECK
	        DO WHILE(I1.LT.A_J(CID+WQI_USJ_J))	!CHECK HIDE LIST
		  I1=I1+1				!NEXT TEST
		  POSO(3)=A_E(P1E+I1)			!NEXT Y
		  POSO(2)=A_E(PDE+I)+POSO(3)*
	1		(A_E(PDXE+I)-A_E(PDE+I))	!NEW INT
		  IF (POSO(2).LT.A_E(PCE+I1)) THEN	!END HIDDEN
		  ELSE					!END NOT HIDDEN
		    IF (A_E(P1E+I1).EQ.A_E(P1E+I1-1)) THEN !SIMPLE
		      POSO(3)=A_E(P1E+I1)		!Y CROSS
		    ELSE
		      R3=(A_E(PCE+I1)-A_E(PCE+I1-1))/
	1			(A_E(P1E+I1)-A_E(P1E+I1-1)) !(I1-I0)/(Y1-Y0) (B)
		      R2=A_E(PCE+I1-1)-A_E(P1E+I1-1)*R3	!I0-Y0*R3 (A)
		      R3=R3-A_E(PDXE+I)+A_E(PDE+I)	!B-D
		      IF (R3.NE.0) THEN
		        POSO(3)=(A_E(PDE+I)-R2)/R3	!NEW Y = (C-A)/(B-D)
		      ELSE
			POSO(3)=1.
		      END IF
		    END IF
		    POSO(2)=A_E(PDE+I)+POSO(3)*
	1		(A_E(PDXE+I)-A_E(PDE+I))	!CROSS INT
		    DO I3=A_J(CID+WQI_USJ_J),I1,-1	!MAKE PLACE NEW CROSS
		      A_E(P1E+I3+1)=A_E(P1E+I3)		!MOVE Y
		      A_E(PCE+I3+1)=A_E(PCE+I3)		!MOVE CHECK INT
		    END DO
		    A_J(CID+WQI_USJ_J)=A_J(CID+WQI_USJ_J)+1 !COUNT IT
		    A_E(PCE+I1)=POSO(2)			!NEW ADDED INT
		    A_E(P1E+I1)=POSO(3)			!NEW CROSS Y
		    GOTO 521				!CONTINUE NOT HIDDEN
		  END IF
		END DO
 521		CONTINUE
		IF (A_J(CID+WQI_LIX_J).EQ.2) THEN	!WANT TO DOT
		  CALL WQSPLI(3)			!SELECT DOT
		  POSN(0)=A_E(CID+WQI_POS_E+0)+POSO(0)*R0+
	1			POSO(1)*A_E(CID+WQI_DPOS_E+2) !DRAW
	  	  POSN(2)=A_E(CID+WQI_POS_E+0)+POSO(2)*R0+
	1			POSO(3)*A_E(CID+WQI_DPOS_E+2)
		  POSN(1)=A_E(CID+WQI_POS_E+1)+POSO(0)*R1+
	1			POSO(1)*A_E(CID+WQI_DPOS_E+3)
		  POSN(3)=A_E(CID+WQI_POS_E+1)+POSO(2)*R1+
	1			POSO(3)*A_E(CID+WQI_DPOS_E+3)
		  CALL WQPOLL(2,POSN)			!DRAW PIECE
		  CALL WQSPLI(1)			!SELECT FULL
		END IF
		IF (I1.LT.A_J(CID+WQI_USJ_J)) THEN	!CONTINUE NOT HIDDEN
	          POSO(0)=A_E(PCE+I1)			!OLD INT
	          POSO(1)=A_E(P1E+I1)			!OLD Y
	          POSN(0)=POSO(0)			!PREVIOUS INT.
		  GOTO 520
		END IF
	      END IF
	    END IF
	  END IF
	END DO
	GOTO 530
C
C DATA SAVE
C
 530	CONTINUE
	DO I=0,A_J(CID+WQI_N_J)-1
	  A_E(PDE+I)=A_E(PDXE+I)			!SAVE DATA
	END DO
	A_J(CID+WQI_IND_J)=1				!DATA SEEN
	DO I=0,1
	  A_E(CID+WQI_POS_E+I)=A_E(CID+WQI_POS_E+I)+
	1		A_E(CID+WQI_DPOS_E+2+I)		!UPDATE POS
	END DO
C
	RETURN
C
C
	END

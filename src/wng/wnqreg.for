C+ WNQREG.FOR
C  WNB 911217
C
C  Revisions:
C	WNB 920811	Make lowest halftone pure white
C
	SUBROUTINE WNQREG(TYP,ID,VP)
C
C  Do device dependent actions for REGis terminals
C
C  Result:
C
C	CALL WNQREG( TYP_J:I, ID_J:I, VP_J(*):I)	Regis terminal
C	CALL WNQREF( TYP_J:I, ID_J:I, VP_J(*):I)	Regis file
C				Do action specified by TYP, using the
C				area ID, and pointers/values in VP. TYP can be:
C					0:	open device
C						VP: -
C					1:	close device
C						VP: -
C					2:	(header) message
C						VP: 1: ptr msg; 2: length msg
C					3:	polyline
C						VP: 1: poly index; 2: ptr list
C					4:	polyline
C						VP: 2: ptr list; 3: line type
C						    4: line thickness
C					5:	clear screen
C						VP: -
C					6:	shading
C						VP: 1: type; 2: int. list
C						    3: ptr llhc, urhc total
C						    4: N int.
C						    5: dx,dy , box dx,dy, pos.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE	'WQD_O_DEF'	!DEVICE AREA
C
C  Parameters:
C
	CHARACTER*1 CR
C	  PARAMETER (CR=CHAR(13))
	CHARACTER*1 LF
C	  PARAMETER (LF=CHAR(10))
	CHARACTER*2 CRLF
C	  PARAMETER (CRLF=CR//LF)
	CHARACTER*1 ESC
C	  PARAMETER (ESC=CHAR(27))
	INTEGER DEFPL		!DEFAULT POLYLINE IX
	  PARAMETER (DEFPL='0030')
	INTEGER LOPL		!MAX(INIT STRING, END STR, LMG0L+LMG1L+MGL)
	  PARAMETER (LOPL=200)
C
C  Arguments:
C
	INTEGER TYP		!TYPE TO DO
	INTEGER ID		!PTR TO AREA
	INTEGER VP(*)		!DATA LIST
C
C  Function references:
C
	INTEGER WNCALN		!STRING LENGTH
	REAL WNGGE		!GET E VALUE
	LOGICAL WNGGVM		!GET MEMORY
	CHARACTER*20 WNFFNM	!FILE NAME
	LOGICAL WNFOP		!OPEN FILE
	LOGICAL WNFWR		!WRITE FILE
	INTEGER WNMRNJ		!RANDOM J
C
C  Data declarations:
C
	INTEGER PB,PJ,PE	!POINTERS
	INTEGER PATN,PATS	!PATTERN SELECT, START
	INTEGER XB(0:1,0:1)	!SHADING BOX
	REAL XYC(0:1)		!X, Y START
	CHARACTER*(LOPL) LOPC	!OPEN TEXT
	  BYTE LOPB(LOPL)
	  EQUIVALENCE (LOPC,LOPB)
	CHARACTER*20 FNM	!FILE NAME
	INTEGER PLW		!PLOT LINE TYPE
	  BYTE PLW1(4)
	  EQUIVALENCE (PLW,PLW1)
	CHARACTER*64 THLC	!LINE THICKNESS
	  BYTE THL(2,0:31)
	  EQUIVALENCE (THLC,THL)
	  DATA THLC(1:40)/'0101030305050707090911111313151517171919'/
	  DATA THLC(41:64)/'212123232525272729293131'/
	BYTE IXTL(4)		!LINE TYPE INFO
	  DATA IXTL/1,2,3,4/
	CHARACTER*5 LIXTL(4)	!SET LINE TYPES
	  DATA LIXTL/'W(P1)','W(P2)','W(P3)','W(P4)'/
	INTEGER IPLST(0:2,3)	!PATTERN LENGTH, DOWN, UP
	  DATA IPLST	/32,16,16,	!DASH
	1		 16,3,13,	!DOT
	1		 32,24,8/	!LONG DASH
	INTEGER*2 OREV(0:255)		!SHADING REVERSE BIT AND HEXA
	  CHARACTER*512 OREVC
	  EQUIVALENCE (OREV,OREVC)
	  DATA OREVC(001:032) /'008040C020A060E0109050D030B070F0'/
	  DATA OREVC(033:064) /'088848C828A868E8189858D838B878F8'/
	  DATA OREVC(065:096) /'048444C424A464E4149454D434B474F4'/
	  DATA OREVC(097:128) /'0C8C4CCC2CAC6CEC1C9C5CDC3CBC7CFC'/
	  DATA OREVC(129:160) /'028242C222A262E2129252D232B272F2'/
	  DATA OREVC(161:192) /'0A8A4ACA2AAA6AEA1A9A5ADA3ABA7AFA'/
	  DATA OREVC(193:224) /'068646C626A666E6169656D636B676F6'/
	  DATA OREVC(225:256) /'0E8E4ECE2EAE6EEE1E9E5EDE3EBE7EFE'/
	  DATA OREVC(257:288) /'018141C121A161E1119151D131B171F1'/
	  DATA OREVC(289:320) /'098949C929A969E9199959D939B979F9'/
	  DATA OREVC(321:352) /'058545C525A565E5159555D535B575F5'/
	  DATA OREVC(353:384) /'0D8D4DCD2DAD6DED1D9D5DDD3DBD7DFD'/
	  DATA OREVC(385:416) /'038343C323A363E3139353D333B373F3'/
	  DATA OREVC(417:448) /'0B8B4BCB2BAB6BEB1B9B5BDB3BBB7BFB'/
	  DATA OREVC(449:480) /'078747C727A767E7179757D737B777F7'/
	  DATA OREVC(481:512) /'0F8F4FCF2FAF6FEF1F9F5FDF3FBF7FFF'/
	INTEGER RTAB(0:4,0:4)		!REGULAR SHADING
	  DATA RTAB/0,9,17,18,3,5,11,7,14,13,18,2,1,8,17,
	1		17,12,4,10,18,6,15,18,17,16/
	CHARACTER*36 CPAT(0:9)		!PATTERNS
	  DATA CPAT(0) /'100100000000000000100100000000000000'/
	  DATA CPAT(1) /'111000111000111000111000111000111000'/
	  DATA CPAT(2) /'111111111111111111000000000000000000'/
	  DATA CPAT(3) /'110001111000011100001110000111100011'/
	  DATA CPAT(4) /'100011000111001110011100111000110001'/
	  DATA CPAT(5) /'111000111000111000000111000111000111'/
	  DATA CPAT(6) /'100100100100100100100100100100100100'/
	  DATA CPAT(7) /'111111000000000000111111000000000000'/
	  DATA CPAT(8) /'100000010000001000000100000010000001'/
	  DATA CPAT(9) /'000001000010000100001000010000100000'/
C-
C
C REG
C
	GOTO 10
C
C REF
C
	ENTRY WNQREF(TYP,ID,VP)
C
	GOTO 10
C
C INIT
C
 10	CONTINUE
	CR=CHAR(13)
	LF=CHAR(10)
	CRLF=CR//LF
	ESC=CHAR(27)
	PB=ID-A_OB				!BYTE POINTER
	PJ=(ID-A_OB)/LB_J			!J PTR
	PE=(ID-A_OB)/LB_E			!E PTR
C
C DISTRIBUTE
C
	IF (TYP.EQ.0) THEN			!OPEN
	  GOTO 1000
	ELSE IF (TYP.EQ.1) THEN			!CLOSE
	  GOTO 1100
	ELSE IF (TYP.EQ.2) THEN			!MESSAGE
	  GOTO 1200
	ELSE IF (TYP.EQ.3) THEN			!POLY LINE
	  PLW1(1)=IXTL(NINT(A_E(PE+WQD_PLIX_E+3*VP(1)))) !LINE TYPE
	  J=MIN(A_E(PE+WQD_MXPLS_E),A_E(PE+WQD_NMPLS_E)*
	1		A_E(PE+WQD_PLIX_E+3*VP(1)+1)) !THICKNESS
	  GOTO 1300
	ELSE IF (TYP.EQ.4) THEN			!POLY LINE
	  PLW1(1)=IXTL(NINT(WNGGE(VP(3))))	!LINE TYPE
	  J=MIN(A_E(PE+WQD_MXPLS_E),A_E(PE+WQD_NMPLS_E)*
	1		WNGGE(VP(4)))		!THICKNESS
	  GOTO 1300
	ELSE IF (TYP.EQ.5) THEN			!CLEAR SCREEN
	  GOTO 1500
	ELSE IF (TYP.EQ.6) THEN			!SHADING
	  GOTO 1600
	END IF
C
 900	CONTINUE
C
	RETURN					!UNKNOWN
C
C OPEN
C
 1000	CONTINUE
	LOPC=' '//CR//ESC//'[!p'//ESC//'PpS(I0,E,A[0,499][799,0])P[0,0]'
	J=WNCALN(LOPC)				!LENGTH
CC	FNM=WNFFNM('QMS','PLT')			!OUTPUT FILE NAME
CC	IF (.NOT.WNFOP(A_J(PJ+WQD_USE_J+2),FNM,'W')) GOTO 900 !OPEN OUTPUT
CC	CALL WNGMFS(WQD_FILE_N,FNM,A_B(PB+WQD_FILE_1)) !SAVE FILE NAME
CC	IF (.NOT.WNFWR(A_J(PJ+WQD_USE_J+2),J,LOPB,0)) GOTO 900 !WRITE INIT.
	WRITE(*,2000) LOPC(1:J)			!WRITE INIT
 2000	FORMAT ('+',A)
	A_J(PJ+WQD_USE_J+0)=DEFPL		!POLYLINE INDEX
C
	RETURN
C
C CLOSE
C
 1100	CONTINUE
	LOPC=CR//LF//'P[580,499]T(A0,S1)T(W(N1))'''// !END MESSAGE
	1	' Hit RETURN to continue '''//
	1	'P[0,80]'//ESC//CHAR(92)//ESC//'[2A'//CR
	J=WNCALN(LOPC)
CC	IF (.NOT.WNFWR(A_J(PJ+WQD_USE_J+2),J,LOPB,-1)) GOTO 900 !WRITE END
CC	CALL WNFCL(A_J(PJ+WQD_USE_J+2))		!CLOSE FILE
CC	CALL WNGMTS(WQD_FILE_N,A_B(PB+WQD_FILE_1),FNM) !GET FILE NAME
	WRITE(*,2000) LOPC(1:J)			!WRITE END
	READ(*,9030) LOPC			!WAIT
9030	FORMAT (A)
C
	RETURN
C
C MESSAGE
C
 1200	CONTINUE
	LOPC=CR//LF//'P[0,499]T(A0),(S1)'''	!START MESSAGE
	I=WNCALN(LOPC)				!LENGTH FILLED
	DO I1=0,VP(2)-1				!CHECK ' AND SET MESSAGE
	  IF (A_B(VP(1)-A_OB+I1).EQ.ICHAR('''')) THEN
	    I=I+1
	    LOPC(I:I+1)=''''''
	    I=I+1
	  ELSE
	    I=I+1
	    LOPC(I:I)=CHAR(A_B(VP(1)-A_OB+I1))
	  END IF
	END DO
	I=I+1
	LOPC(I:I)=''''
	WRITE(*,2000) LOPC(1:I)			!SET MESSAGE
	A_J(PJ+WQD_USE_J+0)=DEFPL		!POLYLINE INDEX
C
	RETURN
C
C POLYLINE
C
 1300	CONTINUE
	PLW1(2)=THL(1,J)
	PLW1(3)=THL(2,J)
	PLW1(4)=0
	IF (PLW.NE.A_J(PJ+WQD_USE_J+0)) THEN	!CHANGED
	  A_J(PJ+WQD_USE_J+0)=PLW		!SAVE NEW
	  WRITE(*,2000) LIXTL(PLW1(1))		!SET LINE TYPE
	END IF
C
C DRAW LINES
C
	J2=1					!OUTPUT POINTER
	J=(VP(2)-A_OB)/LB_J			!J/E INPUT PTR
 20	CONTINUE				!DO PIECE
	J1=A_J(J)				!# OF POINTS
	J=J+1					!INPUT POINTER
	IF (J1.GT.0) THEN			!MORE
	  LOPC(1:1)='P'				!POSITION FIRST
	  LOPC(11:13)='V[]'
	  DO WHILE (J1.GT.0)			!ALL SEGMENTS
	    I1=A_E(J)				!X
	    I2=A_E(J+1)				!Y
	    J=J+2				!NEXT POINT
	    WRITE (UNIT=LOPC(2:10),FMT=9000,ERR=21) I1,I2
 9000	    FORMAT('[',I3.3,',',I3.3,']')
 21	    CONTINUE
	    IF (LOPC(1:1).EQ.'P') THEN		!DRAW
	      WRITE(*,2000) LOPC(1:13)
	    ELSE
	      WRITE(*,2000) LOPC(2:10)
	    END IF
	    LOPC(1:1)='V'			!DRAW
	    J1=J1-1				!COUNT
	  END DO
	  GOTO 20				!NEXT PIECE
	END IF
C
	RETURN
C
C CLEAR SCREEN
C
 1500	CONTINUE
	LOPC='S(I0,E,A[0,499][799,0])P[0,0]'
	J=WNCALN(LOPC)
	WRITE(*,2000) LOPC(1:J)
C
	RETURN
C
C SHADING
C
 1600	CONTINUE
	J=(VP(3)-A_OB)/LB_E			!TOTAL BOX POINTER
	J4=(VP(5)-A_OB)/LB_E			!SINGLE BOX POINTER
	XB(0,0)=MAX(0.,A_E(J+0))		!BOX LIMITS
	XB(1,0)=MAX(0.,A_E(J+1))
	XB(0,1)=MIN(A_E(PE+WQD_XHI_E),A_E(J+2))
	XB(1,1)=MIN(A_E(PE+WQD_YHI_E),A_E(J+3))
	LOPC(1:1)='P'				!POSITION
	LOPC(11:13)='V[]'			!SET POINT
C
C ALL SQUARES
C
	J0=(VP(2)-A_OB)/LB_E			!INT POINTER
	DO I=0,VP(4)-1				!ALL SQUARES
	  IF (A_E(J0+I).GE.0.) THEN		!NOT DELETED
	    DO I1=0,1				!GET X,Y START
	      XYC(I1)=A_E(J4+4+I1)+I*A_E(J4+I1)
	    END DO
	    DO I1=INT(XYC(1)),INT(XYC(1)+A_E(J4+3))-1 !ALL LINES
	      IF (I1.GE.XB(1,0) .AND. I1.LT.XB(1,1)) THEN !IN MAP
	        DO I2=INT(XYC(0)),INT(XYC(0)+A_E(J4+2))-1 !ALL POINTS
	          IF (I2.GE.XB(0,0) .AND. I2.LT.XB(0,1)) THEN !IN MAP
		    R0=MIN(1.,A_E(J0+I))	!INT.
		    IF (VP(1).EQ.1) THEN	!REGULAR
		      IF (INT(R0*20.).GT.RTAB(MOD(I2,5),MOD(I1,5))) THEN !SET
	    		WRITE (UNIT=LOPC(2:10),FMT=9000,ERR=21) I2,I1
			WRITE(*,2000) LOPC(1:13)
		      END IF
		    ELSE IF (VP(1).EQ.2) THEN	!PATTERN
		      PATN=MIN(9,INT(10.*R0))	!PATTERN NUMBER
		      PATS=MOD(I1,6)*6+MOD(I2,6)+1 !PATTERN POINTER
		      IF (CPAT(PATN)(PATS:PATS).NE.'0') THEN !SET
	    		WRITE (UNIT=LOPC(2:10),FMT=9000,ERR=21) I2,I1
			WRITE(*,2000) LOPC(1:13)
		      END IF
		    ELSE			!RANDOM
		      R1=IAND(WNMRNJ()/8,255)/256. !RANDOM TEST
		      IF (R1.LT.R0) THEN	!SET
	    		WRITE (UNIT=LOPC(2:10),FMT=9000,ERR=21) I2,I1
			WRITE(*,2000) LOPC(1:13)
		      END IF
		    END IF
		  END IF
	        END DO
	      END IF
	    END DO
	  END IF
	END DO
C
C READY
C
 910	CONTINUE
C
	RETURN
C
C
	END

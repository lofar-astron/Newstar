C+ WNTIAF.FOR
C  WNB 930501
C
C  Revisions:
C	WNB 930803	Change WNTIA0 call
C	WNB 930902	Add __L, __H, __I; AR: MR: NR: [A|M|N][R][F][*]:
C			make all : parameters local variables
C
	LOGICAL FUNCTION WNTIAF(TLIN,PT,NAM,NENT,IENTRY,FENTRY,CFLIN)
C
C  Analyse a format line
C
C  Result:
C
C	WNTIAF_L = WNTIAF( TLIN_C*:I, PT_J:IO, NAM_C*:O, NENT_J:I,
C			IENTRY_J(0:*):IO, FENTRY_J(0:*):IO)
C				Analyse a line given in TLIN at PT for
C				format statement NAM returns a name found,
C				and data in IENTRY and FENTRY structure.
C				NENT is the current line number, and CFLIN
C				the current comment pointer
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WNT_O_DEF'
	INCLUDE 'WNT_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	CHARACTER*(*) TLIN		!LINE TO DO
	INTEGER PT			!POINTER INTO LINE
	CHARACTER*(*) NAM		!% NAME FOUND
	INTEGER NENT			!CURRENT LINE NUMBER
	INTEGER IENTRY(0:*)		!LINE STRUCTURE
	INTEGER FENTRY(0:*)		!DATA FORMAT STRUCTURE
	INTEGER CFLIN			!COMMENT LINE POINTER
C
C  Function references:
C
	LOGICAL WNCASM,WNCATM		!TEST MULTIPLE CHARACTER
	LOGICAL WNCASC,WNCATC		!TEST CHARACTER
	LOGICAL WNCAFN			!GET NAME
	LOGICAL WNCAFT			!GET FIELD
	INTEGER WNCALN			!STRING LENGTH
	LOGICAL WNTIVG			!GET VALUE
	LOGICAL WNTIA0			!GET ARRAY INDICES
	INTEGER WNTIBP			!WRITE NEW AREA ENTRY
	INTEGER WNTIBW			!WRITE AREA ENTRY
	INTEGER WNTIBR			!READ AREA ENTRY
	LOGICAL WNTIVS			!SET VARAIABLE
C
C  Data declarations:
C
	LOGICAL EQSEEN			!= FORMAT SEEN
	LOGICAL EBSEEN			!EBG SEEN
	INTEGER EQREF			!REFERENCE OF = NAME
	INTEGER EBREF			!REFERENCE OF S: NAME
	INTEGER NSEEN			!NUMERATOR SEEN (0=NOT)
	LOGICAL RSEEN			!REVERSED NUMERATOR SEEN
	LOGICAL FSEEN			!FULL NUMERATOR NAME SEEN
	LOGICAL STSEEN			!* NUMERATOR SEEN
	INTEGER NFAC(0:MXNARR-1)	!FACTORS NUMERATE
	CHARACTER*(MXLNAM) LNAM,LNAM1	!LOCAL NAME STRING
	BYTE DFENTB(0:WNTDHDL-1)	!DATA INIT ENTRY
	  INTEGER DFENTJ(0:WNTDHDL/LB_J-1)
	  CHARACTER*(WNTDHDL) DFENTC
	  EQUIVALENCE (DFENTB,DFENTJ,DFENTC)
	BYTE EFENTB(0:WNTEHDL-1)	!EDIT ENTRY
	  INTEGER EFENTJ(0:WNTEHDL/LB_J-1)
	  EQUIVALENCE (EFENTB,EFENTJ)
	BYTE LFENTB(0:WNTFHDL-1)	!LOCAL FORMAT ENTRY
	  INTEGER LFENTJ(0:WNTFHDL/LB_J-1)
	  CHARACTER*(WNTFHDL) LFENTC
	  EQUIVALENCE (LFENTB,LFENTJ,LFENTC)
C-
C
C INIT
C
	WNTIAF=.TRUE.				!ASSUME OK
	NAM=' '					!FOR ERROR MESSAGES
	FENTRY(WNTF_BTYP_J)=CBTP		!SET BLOCK TYPE
	IENTRY(WNTI_FTYP_J)=FT_DAT		!SET FORMAT TYPE
C
C NAME
C
	CALL WNCASB(TLIN,PT)			!SKIP BLANK
	IF (WNCASC(TLIN,PT,'-')) THEN		!NO NAME
	  CALL WNCTXS(NAM,'-__!4$ZJ',UNID)
	  UNID=UNID+1				!COUNT DUMMY NAME
	ELSE
	  IF (.NOT.WNCAFN(TLIN,PT,NAM)) GOTO 900 !IMPROPER NAME
	END IF
	CALL WNGMFS(WNTF_NAM_N,NAM,FENTRY(WNTF_NAM_1/LB_J)) !SET NAME
C
C = FORMAT
C
	IF (WNCASC(TLIN,PT,'=')) THEN		!EQUIVALENCE
	  IF ((CBTP.NE.BT_DAT .AND. CBTP.NE.BT_SDA .AND.
	1		CBTP.NE.BT_COM) .OR. NAM(1:1).EQ.'-')
	1			GOTO 900	!NOT ALLOWED
	  IF (.NOT.WNCAFN(TLIN,PT,LNAM)) GOTO 900 !EQUIV. NAME
	  DO I1=XFDES_J(WNTB_CNT_J)-1,0,-1	!CHECK OLD NAMES
	    I2=WNTIBR(XFDES,LFENTB,I1)		!READ OLD FORMAT ENTRY
	    IF (LFENTJ(WNTF_BTYP_J).NE.CBTP) THEN !CANNOT FIND NAME
 11	      CONTINUE
	      CALL WNCTXT(F_TP,'Illegal = format reference')
	      GOTO 900
	    END IF
	    CALL WNGMTS(WNTF_NAM_N,LFENTB(WNTF_NAM_1),LNAM1)
	    IF (LNAM.EQ.LNAM1) THEN		!FOUND NAME
	      EQSEEN=.TRUE.			!SET CORRECT = FORMAT SEEN
	      EQREF=I1				!WHERE SEEN
	      GOTO 10
	    END IF
	  END DO
	  GOTO 11				!COULD NOT FIND NAME
	ELSE
	  EQSEEN=.FALSE.			!NOT = FORMAT
	END IF
 10	CONTINUE
C
C TYPE
C
	CALL WNCASB(TLIN,PT)			!SKIP BLANKS
	I2=0					!ASSUME NON-CHAR
	I3=1					!ALIGNMENT
	NSEEN=0					!ASSUME NON-NUMERATE
	RSEEN=.FALSE.				!AND NOT R-NUMERATE
	FSEEN=.FALSE.				!AND NOT F-NUMERATE
	STSEEN=.FALSE.				!AND NOT *-NUMERATE
	IF (WNCASM(TLIN,PT,'-Bb')) THEN		!B
	  I0=T_B
	  I1=LB_B
	ELSE IF (WNCASM(TLIN,PT,'Ii')) THEN	!I
	  I0=T_I
	  I1=LB_I
	  I3=LB_I
	  IF (WNCASC(TLIN,PT,'1')) THEN		!I1
	    I0=T_B
	    I1=LB_B
	    I3=LB_B
	  ELSE IF (WNCASC(TLIN,PT,'2')) THEN	!I2
	  ELSE IF (WNCASC(TLIN,PT,'4')) THEN	!I4
	    I0=T_J
	    I1=LB_J
	    I3=LB_J
	  END IF
	ELSE IF (WNCASM(TLIN,PT,'Jj')) THEN	!J
	  I0=T_J
	  I1=LB_J
	  I3=LB_J
	ELSE IF (WNCASM(TLIN,PT,'Kk')) THEN	!K
	  I0=T_K
	  I1=LB_K
	  I3=LB_K
	ELSE IF (WNCASM(TLIN,PT,'Ee')) THEN	!E
	  I0=T_E
	  I1=LB_E
	  I3=LB_E
	ELSE IF (WNCASM(TLIN,PT,'Dd')) THEN	!D
	  I0=T_D
	  I1=LB_D
	  I3=LB_D
	ELSE IF (WNCASM(TLIN,PT,'Xx')) THEN	!X
	  I0=T_X
	  I1=LB_X
	  I3=LB_E
	ELSE IF (WNCASM(TLIN,PT,'Yy')) THEN	!Y
	  I0=T_Y
	  I1=LB_Y
	  I3=LB_D
	ELSE IF (WNCASM(TLIN,PT,'Ll')) THEN	!L
	  I0=T_L
	  I1=LB_L
	  I3=LB_L
	ELSE IF (WNCASM(TLIN,PT,'Rr')) THEN	!R
	  I0=T_E
	  I1=LB_E
	  I3=LB_E
	  IF (WNCASC(TLIN,PT,'4')) THEN		!R4
	  ELSE IF (WNCASC(TLIN,PT,'8')) THEN	!R8
	    I0=T_D
	    I1=LB_D
	    I3=LB_D
	  END IF
	ELSE IF (WNCASM(TLIN,PT,'Cc')) THEN	!C
	  I0=T_C
	  I1=LB_C
	  IF (WNCASC(TLIN,PT,'*')) THEN		!IMPLIED LENGTH
	    I2=-1
	  ELSE
	    IF (.NOT.WNTIVG(TLIN,PT,JS,I2,LNAM)) GOTO 900 !LENGTH
	    IF (.NOT.JS) GOTO 900		!NOT VALUE
	  END IF
	ELSE IF (WNCASM(TLIN,PT,'Aa')) THEN	!A
	  IF (WNCASM(TLIN,PT,'Rr')) THEN	!AR:
	    CALL WNCASB(TLIN,PT)
	    IF (.NOT.WNCATM(TLIN,PT,'Ff*:')) GOTO 900 !ILLEGAL
	    RSEEN=.TRUE.			!SET R-NUMERATE
	  END IF
	  IF (WNCASM(TLIN,PT,'Ff')) THEN	!AF:
	    CALL WNCASB(TLIN,PT)
	    IF (.NOT.WNCATM(TLIN,PT,'*:')) GOTO 900 !ILLEGAL
	    FSEEN=.TRUE.			!SET F-NUMERATE
	  END IF
	  IF (WNCASC(TLIN,PT,'*')) THEN		!A*:
	    CALL WNCASB(TLIN,PT)
	    IF (.NOT.WNCATC(TLIN,PT,':')) GOTO 900 !ILLEGAL
	    STSEEN=.TRUE.
	  END IF
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCASC(TLIN,PT,':')) THEN
	    I0=T_C
	    I1=LB_A
	    IF (WNCASC(TLIN,PT,'*')) THEN	!IMPLIED LENGTH
	      I2=-1
	    ELSE
	      IF (.NOT.WNTIVG(TLIN,PT,JS,I2,LNAM)) GOTO 900 !LENGTH
	      IF (.NOT.JS) GOTO 900		!NOT VALUE
	    END IF
	  ELSE					!A:
	    IF (EQSEEN) GOTO 900		!NO = ALLOWED
	    NSEEN=1				!INDICATE A:
	    I0=T_C				!ASSUME FOR NOW C
	    I1=LB_C
	    I2=-1
	  END IF
	ELSE IF (WNCASM(TLIN,PT,'Mm')) THEN	!M:
	  IF (WNCASM(TLIN,PT,'Rr')) RSEEN=.TRUE. !MR:
	  IF (WNCASM(TLIN,PT,'Ff')) FSEEN=.TRUE. !MF:
	  IF (WNCASC(TLIN,PT,'*')) STSEEN=.TRUE. !M*:
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCASC(TLIN,PT,':')) GOTO 900 !UNKNOWN
	  IF (EQSEEN) GOTO 900			!NO = ALLOWED
	  NSEEN=2				!INDICATE M:
	  I0=T_C				!ASSUME FOR NOW C
	  I1=LB_C
	  I2=-1
	ELSE IF (WNCASM(TLIN,PT,'Nn')) THEN	!N:
	  IF (WNCASM(TLIN,PT,'Rr')) RSEEN=.TRUE. !NR:
	  IF (WNCASM(TLIN,PT,'Ff')) FSEEN=.TRUE. !NF:
	  IF (WNCASC(TLIN,PT,'*')) STSEEN=.TRUE. !N*:
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCASC(TLIN,PT,':')) GOTO 900 !UNKNOWN
	  IF (EQSEEN) GOTO 900			!NO = ALLOWED
	  NSEEN=3				!INDICATE N:
	  I0=T_C				!ASSUME FOR NOW C
	  I1=LB_C
	  I2=-1
	ELSE IF (WNCASM(TLIN,PT,'Ss')) THEN	!S
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCASC(TLIN,PT,':')) GOTO 900 !NOT S:
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCAFN(TLIN,PT,LNAM)) GOTO 900 !REFERENCE NAME
	  EBSEEN=.FALSE.			!TO CHECK INFINITE LOOP
	  DO I1=XFDES_J(WNTB_CNT_J)-1,0,-1	!CHECK OLD NAMES
	    I4=WNTIBR(XFDES,LFENTB,I1)		!READ OLD FORMAT ENTRY
	    IF (LFENTJ(WNTF_BTYP_J).EQ.BT_EBG) THEN
	      EBSEEN=.TRUE.			!FOUND END STRUCTURE
	    ELSE IF (LFENTJ(WNTF_BTYP_J).EQ.BT_BEG .AND. EBSEEN) THEN !MAYBE
	      CALL WNGMTS(WNTF_NAM_N,LFENTB(WNTF_NAM_1),LNAM1)
	      IF (LNAM.EQ.LNAM1) THEN		!FOUND NAME
	        EBREF=I1			!WHERE SEEN
	        GOTO 30
	      END IF
	    END IF
	  END DO
 31	  CONTINUE
	  CALL WNCTXT(F_TP,'Illegal S: name reference')
	  GOTO 900
 30	  CONTINUE				!FOUND REFERENCE
	  I0=T_S				!RECORD TYPE
	  I1=LFENTJ(WNTF_TLEN_J)		!LENGTH
	  I3=LFENTJ(WNTF_ALEN_J)		!ALIGN LENGTH
	  FENTRY(WNTF_SREF_J)=EBREF		!SAVE REFERENCE PTR
	ELSE					!UNKNOWN
	  GOTO 900
	END IF
	FENTRY(WNTF_DTP_J)=I0			!SAVE DATA TYPE
	FENTRY(WNTF_ULEN_J)=I1			!UNIT LENGTH
	FENTRY(WNTF_SLEN_J)=I2			!STRING LENGTH
	FENTRY(WNTF_ALEN_J)=I3			!ALIGN LENGTH
	CALEN=MAX(CALEN,I3)			!STRUCTURE ALIGN LENGTH
C
C ARRAY TYPE
C
	IF (.NOT.WNTIA0(NSEEN.NE.0,TLIN,PT,FENTRY(WNTF_DIM_J),
	1		FENTRY(WNTF_TLEN_J),
	1		FENTRY(WNTF_IND_J))) GOTO 900 !GET INDICES
	IF (NSEEN.NE.0) THEN			!NUMERATE TYPE
	  DO I=0,MXNARR-1			!FILL DEFAULTS
	    NFAC(I)=I+1
	  END DO
	  IF (NSEEN.EQ.1) NFAC(1)=1		!IF A:
	  DO I=0,FENTRY(WNTF_DIM_J)-1		!FILL GIVEN
	    NFAC(I)=FENTRY(WNTF_IND_J+2*I+1)
	  END DO
	END IF
C
C // INITIALISATION
C
	CALL WNCASB(TLIN,PT)			!SKIP BLANK
	IF (WNCASC(TLIN,PT,'/')) THEN		!INIT.
	  IF (CBTP.EQ.BT_SDA .OR. EQSEEN) GOTO 900 !NOT ALLOWED
	  I0=0					!# OF INIT
	  I2=1					!MAX. STRING LENGTH
 20	  CONTINUE
	  CALL WNCASB(TLIN,PT)
	  I=1					!REPEAT FACTOR
	  IF (WNCATC(TLIN,PT,'(')) THEN		!REPEAT PRESENT
	    IF (NSEEN.NE.0) GOTO 900		!NOT ALLOWED
	    IF (.NOT.WNTIVG(TLIN,PT,JS,I,LNAM)) GOTO 900 !GET IT
	    IF (.NOT.JS) GOTO 900		!NOT VALUE
	    IF (I.LE.0) GOTO 900		!ILLEGAL VALUE
	  END IF
	  J=PT					!SAVE POINTER
	  IF (.NOT.WNTIVG(TLIN,PT,JS,I1,LNAM)) THEN !GET INIT VALUE
	    JS=WNCAFT(TLIN,PT,LNAM,',/')	!PATTERN
	  ELSE
	    CALL WNCASB(TLIN,PT)
	    IF (.NOT.WNCATM(TLIN,PT,',/')) THEN !SET FIELD
	      PT=J				!RESET POINTER
	      JS=WNCAFT(TLIN,PT,LNAM,',/')	!PATTERN
	    END IF
	  END IF
	  I0=I0+I				!COUNT
	  I2=MAX(WNCALN(LNAM),I2)		!STRING LENGTH
	  DFENTJ(WNTD_REP_J)=I			!SET REPEAT FACTOR
	  CALL WNGMFS(WNTD_STR_N,LNAM,DFENTB(WNTD_STR_1)) !SET PATTERN
	  I3=WNTIBP(DFDES,DFENTB)		!SAVE DATA INIT DATA
	  IF (FENTRY(WNTF_NINI_J).EQ.0) FENTRY(WNTF_INIP_J)=I3 !WHERE
	  FENTRY(WNTF_NINI_J)=FENTRY(WNTF_NINI_J)+1 !COUNT
	  CALL WNCASB(TLIN,PT)
	  IF (WNCASC(TLIN,PT,',')) GOTO 20	!MORE
	  IF (.NOT.WNCASC(TLIN,PT,'/')) GOTO 900 !ERROR
	  IF (FENTRY(WNTF_DTP_J).EQ.T_C .AND.
	1	FENTRY(WNTF_SLEN_J).EQ.-1) THEN	!IMPLIED LENGTH
	    FENTRY(WNTF_SLEN_J)=I2+1		!SET PROPER LENGTH
	  END IF
	  IF (FENTRY(WNTF_TLEN_J).LT.0) THEN	!IMPLIED SIZE
	    I=ABS(I0/FENTRY(WNTF_TLEN_J))	!LAST INDEX LENGTH
	    FENTRY(WNTF_IND_J+2*FENTRY(WNTF_DIM_J)-1)=I !SET LAST INDEX
	    FENTRY(WNTF_TLEN_J)=ABS(FENTRY(WNTF_TLEN_J)*I) !SET TOTAL LENGTH
	  END IF
	  IF (NSEEN.EQ.0 .AND. I0.NE.FENTRY(WNTF_TLEN_J)) GOTO 900 !INIT. ERROR
	  IF (CBTP.EQ.BT_COM) CINSN=.TRUE.	!SET COMMON INIT SEEN
	END IF
C
C <> EDIT
C
	CALL WNCASB(TLIN,PT)			!SKIP BLANK
	IF (WNCASC(TLIN,PT,'<')) THEN		!EDIT
	  IF (CBTP.NE.BT_SDA) GOTO 900		!NOT ALLOWED
	  IF (NSEEN.NE.0) GOTO 900		!NOT ALLOWED
	  I1=0					!EDIT CODE
	  CALL WNGMVB(WNTEHDL,EFENTB)		!ALL SPACES
	  EFENTJ(WNTE_EDIT_J)=0			!ALLOW EDIT
	  CALL WNCASB(TLIN,PT)
	  JS=WNCAFT(TLIN,PT,LNAM,',>')		!PATTERN
	  CALL WNGMFS(WNTE_PAT_N,LNAM,EFENTB(WNTE_PAT_1)) !SAVE IT
	  CALL WNCASB(TLIN,PT)
	  IF (.NOT.WNCASC(TLIN,PT,'>')) THEN	!CODE
	    IF (.NOT.WNCASC(TLIN,PT,',')) GOTO 900
	    IF (.NOT.WNTIVG(TLIN,PT,JS,I1,LNAM)) THEN !GET EDIT CODE
	      I1=0
	    ELSE
	      IF (.NOT.JS) GOTO 900		!NOT VALUE
	    END IF
	    EFENTJ(WNTE_EDIT_J)=I1		!SET CODE
	    CALL WNCASB(TLIN,PT)
	    IF (.NOT.WNCASC(TLIN,PT,'>')) THEN	!UNITS
	      IF (.NOT.WNCASC(TLIN,PT,',')) GOTO 900 !ERROR
	      JS=WNCAFT(TLIN,PT,LNAM,',>')	!GET UNITS
	      CALL WNGMFS(WNTE_UNIT_N,LNAM,EFENTB(WNTE_UNIT_1)) !SAVE IT
	      CALL WNCASB(TLIN,PT)
	      IF (.NOT.WNCASC(TLIN,PT,'>')) THEN !SPECIAL
	        IF (.NOT.WNCASC(TLIN,PT,',')) GOTO 900
		JS=WNCAFT(TLIN,PT,LNAM,',>')	!GET SPECIAL
	        CALL WNGMFS(WNTE_SPEC_N,LNAM,EFENTB(WNTE_SPEC_1)) !SAVE IT
		CALL WNCASB(TLIN,PT)
		IF (.NOT.WNCASC(TLIN,PT,'>')) GOTO 900 !ERROR
	      END IF
	    END IF
	  END IF
	  FENTRY(WNTF_EDIP_J)=WNTIBP(EFDES,EFENTB) !SAVE EDIT INFO
	END IF
C
C NUMERATE
C
	IF (NSEEN.NE.0) THEN
	  DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N)=' ' !ADD LAST ENTRY
	  DFENTJ(WNTD_REP_J)=1
	  I2=WNTIBP(DFDES,DFENTB)
	  IF (NSEEN.EQ.3 .AND. FENTRY(WNTF_NINI_J).GT.MXNARR)
	1		GOTO 900		!NOT ALLOWED
	  DO I=0,FENTRY(WNTF_NINI_J)-1		!MAKE ALL NAMES
	    CALL WNGMVZ(WNTFHDL,LFENTB)		!CLEAR ENTRY
	    I2=WNTIBR(DFDES,DFENTB,FENTRY(WNTF_INIP_J)+I) !READ INIT
	    LFENTJ(WNTF_BTYP_J)=BT_PAR		!PARAMETER
	    LFENTJ(WNTF_ALEN_J)=LB_J		!ALIGNMENT
	    LFENTJ(WNTF_DTP_J)=T_J		!DATA TYPE
	    LFENTJ(WNTF_ULEN_J)=LB_J		!UNIT LENGTH
	    LFENTJ(WNTF_TLEN_J)=1		!LENGTH
	    IF (DFENTC(WNTD_STR_1+1:
	1		WNTD_STR_1+WNTD_STR_N).NE.' ') THEN !CAN DO
	      IF (FSEEN) THEN			!FULL NAME
		J0=WNTD_STR_N
	      ELSE				!PART NAME
		J0=MIN(3,WNTD_STR_N)
	      END IF
	      IF (RSEEN) THEN
	        CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AD_!AS',
	1		DFENTB(WNTD_STR_1),J0,NAM) !NAME
	      ELSE
	        CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AS_!AD',NAM,
	1		DFENTB(WNTD_STR_1),J0)	!NAME
	      END IF
	      DFENTJ(WNTD_REP_J)=1		!SET VALUE
	      IF (NSEEN.EQ.1) THEN		!A:
	        J=NFAC(0)+I*NFAC(1)
	      ELSE IF (NSEEN.EQ.2) THEN		!M:
	        J=NFAC(0)*(NFAC(1)**I)
	      ELSE				!N:
	        J=NFAC(I)
	      END IF
	      CALL WNCTXS(DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N),
	1		'!SJ',J)		!VALUE
	      LFENTJ(WNTF_NINI_J)=1		!# VALUES
	      LFENTJ(WNTF_INIP_J)=WNTIBP(DFDES,DFENTB) !SET VALUE
	      IF (I.EQ.0) LFENTJ(WNTF_ENT_J)=CFLIN !SAVE COMMENT POINTER
	      I2=WNTIBP(XFDES,LFENTB)		!SET FORMAT
	      IF (.NOT.WNTIVS(J,
	1		LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		.FALSE.)) GOTO 900	!SET AS LOCAL VARIABLE
	    END IF
	  END DO				!ALL NAMES
	  FENTRY(WNTF_NINI_J)=FENTRY(WNTF_NINI_J)+1 !COUNT LAST ENTRY
	  CALL WNGMVZ(WNTFHDL,LFENTB)		!CLEAR ENTRY
	  IF (.NOT.STSEEN) THEN			!GIVE SPECIAL NAMES
	    LFENTJ(WNTF_BTYP_J)=BT_PAR		!PARAMETER
	    LFENTJ(WNTF_ALEN_J)=LB_J		!ALIGNMENT
	    LFENTJ(WNTF_DTP_J)=T_J		!DATA TYPE
	    LFENTJ(WNTF_ULEN_J)=LB_J		!UNIT LENGTH
	    LFENTJ(WNTF_TLEN_J)=1		!LENGTH
	    DFENTJ(WNTD_REP_J)=1		!SET VALUE
	    LFENTJ(WNTF_NINI_J)=1		!# VALUES
	    CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AS__N',NAM)		!NAME __N
	    CALL WNCTXS(DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N),
	1		'!UJ',
	1		FENTRY(WNTF_NINI_J))	!VALUE
	    LFENTJ(WNTF_INIP_J)=WNTIBP(DFDES,DFENTB) !SET VALUE
	    I2=WNTIBP(XFDES,LFENTB)		!SET FORMAT
	    IF (.NOT.WNTIVS(FENTRY(WNTF_NINI_J),
	1		LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		.FALSE.)) GOTO 900	!SET __N AS LOCAL VARIABLE
	    IF (NSEEN.NE.3) THEN		!A: OR M:
	      CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AS__L',NAM)		!NAME __L
	      CALL WNCTXS(DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N),
	1		'!SJ',
	1		NFAC(0))		!VALUE
	      LFENTJ(WNTF_INIP_J)=WNTIBP(DFDES,DFENTB) !SET VALUE
	      I2=WNTIBP(XFDES,LFENTB)		!SET FORMAT
	      IF (.NOT.WNTIVS(NFAC(0),
	1		LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		.FALSE.)) GOTO 900	!SET __L AS LOCAL VARIABLE
	      CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AS__H',NAM)		!NAME __H
	      CALL WNCTXS(DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N),
	1		'!SJ',
	1		J)			!VALUE
	      LFENTJ(WNTF_INIP_J)=WNTIBP(DFDES,DFENTB) !SET VALUE
	      I2=WNTIBP(XFDES,LFENTB)		!SET FORMAT
	      IF (.NOT.WNTIVS(J,
	1		LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		.FALSE.)) GOTO 900	!SET __H AS LOCAL VARIABLE
	      CALL WNCTXS(LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		'!AS__I',NAM)		!NAME __I
	      CALL WNCTXS(DFENTC(WNTD_STR_1+1:WNTD_STR_1+WNTD_STR_N),
	1		'!SJ',
	1		NFAC(1))		!VALUE
	      LFENTJ(WNTF_INIP_J)=WNTIBP(DFDES,DFENTB) !SET VALUE
	      I2=WNTIBP(XFDES,LFENTB)		!SET FORMAT
	      IF (.NOT.WNTIVS(NFAC(1),
	1		LFENTC(WNTF_NAM_1+1:WNTF_NAM_1+WNTF_NAM_N),
	1		.FALSE.)) GOTO 900	!SET __I AS LOCAL VARIABLE
	    END IF				!A: OR M:
	  END IF				!NO * SEEN NUMERATE
	  IF (CATP.EQ.AT_DEF .AND. CBTP.NE.BT_PAR .AND.
	1		.NOT.STSEEN) THEN	!NEED STRING
	    FENTRY(WNTF_DIM_J)=1		!SET STRING
	    FENTRY(WNTF_IND_J+0)=1
	    FENTRY(WNTF_IND_J+1)=FENTRY(WNTF_NINI_J)
	    FENTRY(WNTF_TLEN_J)=FENTRY(WNTF_NINI_J)
	    CALL WNCTXS(LNAM1,'!AS__TXT',NAM)
	    CALL WNGMFS(WNTF_NAM_N,LNAM1,FENTRY(WNTF_NAM_1/LB_J)) !SET NAME
	  ELSE
	    CALL WNGMVZ(WNTFHDL,FENTRY)		!CLEAR ENTRY
	    GOTO 800				!READY
	  END IF
	END IF					!NUMERATE
C
C FINAL
C
	IF (FENTRY(WNTF_TLEN_J).LE.0) GOTO 900	!STILL IMPLIED SIZE
	IF (FENTRY(WNTF_DTP_J).EQ.T_C .AND.
	1	FENTRY(WNTF_SLEN_J).LE.0) GOTO 900 !STILL IMPLIED LENGTH
	CALL WNCASB(TLIN,PT)
	IF (PT.LE.LEN(TLIN)) GOTO 900		!FORMAT ERROR
	IF (CBTP.EQ.BT_PAR .AND. FENTRY(WNTF_TLEN_J).NE.1 .AND.
	1		FENTRY(WNTF_NINI_J).NE.1) GOTO 900
	IF (EQSEEN) THEN			!CHECK LENGTH, SET OFFSET
	  I2=WNTIBR(XFDES,LFENTB,EQREF)		!READ REF. ENTRY
	  IF (FENTRY(WNTF_ALEN_J).GT.LFENTJ(WNTF_ALEN_J) .AND.
	1		ALGON) GOTO 11		!WRONG ALIGN
	  I1=FENTRY(WNTF_TLEN_J)*FENTRY(WNTF_ULEN_J) !NEW LENGTH
	  IF (FENTRY(WNTF_DTP_J).EQ.T_C) I1=I1*FENTRY(WNTF_SLEN_J)
	  I2=LFENTJ(WNTF_TLEN_J)*LFENTJ(WNTF_ULEN_J) !OLD LENGTH
	  IF (LFENTJ(WNTF_DTP_J).EQ.T_C) I2=I2*LFENTJ(WNTF_SLEN_J)
	  IF (I1.GT.I2) GOTO 11			!WRONG LENGTH
	  FENTRY(WNTF_OFF_J)=LFENTJ(WNTF_OFF_J)	!COPY OFFSET
	  FENTRY(WNTF_REFP_J)=EQREF		!SET REFERENCE
	  LFENTJ(WNTF_REFP_J)=XFDES_J(WNTB_CNT_J) !SET WHERE LAST = FORMAT SEEN
	  I2=WNTIBW(XFDES,LFENTB,EQREF)		!REWRITE OLD ENTRY
	ELSE
	  IF (CBTP.NE.BT_PAR) THEN		!OFFSET NEEDED
	    IF (.NOT.ALGON) THEN		!UNALIGNED
	      FENTRY(WNTF_OFF_J)=COFF		!SET CURRENT OFFSET
	    ELSE				!ALIGNED
	      FENTRY(WNTF_OFF_J)=
	1	((COFF+FENTRY(WNTF_ALEN_J)-1)/FENTRY(WNTF_ALEN_J))*
	1		FENTRY(WNTF_ALEN_J)
	      IF (CBTP.NE.BT_DAT)
	1		CALL WNTIA1(FENTRY(WNTF_OFF_J)-COFF) !CREATE DUMMY
	    END IF
	    IF (FENTRY(WNTF_DTP_J).EQ.T_C) THEN	!STRING
	      COFF=FENTRY(WNTF_OFF_J)+
	1		FENTRY(WNTF_TLEN_J)*FENTRY(WNTF_ULEN_J)*
	1		FENTRY(WNTF_SLEN_J)
	    ELSE
	      COFF=FENTRY(WNTF_OFF_J)+
	1		FENTRY(WNTF_TLEN_J)*FENTRY(WNTF_ULEN_J)
	    END IF
	  END IF
	END IF
C
C FINISH
C
 800	CONTINUE
C
	RETURN
C
C ERROR
C
 900	CONTINUE
	WNTIAF=.FALSE.
	GOTO 800
C
C
	END

C+ WNTIOS.FOR
C  WNB 930501
C
C  Revisions:
C	WNB 930818	Edit incorrect for <,1>; no edit length
C	WNB 931123	Incorrect _T for multiple sub-structures
C	WNB 940223	Convex COMMON block reference
C	JPH 941010	EC length 10 --> 12 in output to F(I)
C
	SUBROUTINE WNTIOS
C
C  Output .DSC structure files
C
C  Result:
C
C	CALL WNTIOS	outputs all the structure files (.DEF, .INC, _BD.FOR,
C			_BD.CEE, _O.DEF/INC, _E.DEF/INC, _T.DEF/INC).
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WNT_O_DEF'
	INCLUDE 'WNT_DEF'
C
C  Parameters:
C
	INTEGER NFILE			!#OF OUTPUT TYPES
	  PARAMETER (NFILE=5)
C
C  Arguments:
C
C
C  Function references:
C
	INTEGER WNCALN			!STRING LENGTH
	INTEGER WNTIBR			!READ DATA AREA
	INTEGER WNTIBW			!WRITE DATA AREA
C
C  Data declarations:
C
	LOGICAL DOPAR			!OUTPUT PARAMETERS
	LOGICAL CSEEN			!COMMON DATA SEEN
	INTEGER USEEN			!= REFERENCE SEEN
	LOGICAL TSEEN			!TRANSLATION SEEN
	INTEGER IF			!FILE LOOP
	INTEGER NCOM			!COMMENT LINE COUNT
	INTEGER TTCNT,TRCNT		!TOTAL TRANSLATION COUNT
	INTEGER FDEF(0:1)		!DEFAULT FILE CODE
	  DATA FDEF/F_0,F_1/
	INTEGER F(0:1)			!CURRENT FILE CODE
	CHARACTER*(MXLNAM) FNAM(0:1) 	!OUTPUT FILE NAME
	CHARACTER*(MXLNAM) LNAM,LNAM1,LNAM2 !LOCAL DATA
	CHARACTER*(MXLNAM) LCNAM,LCNAM2	!LC NAME
	CHARACTER*(MXLNAM) CNAM		!COMMON NAME
	CHARACTER*80 LIN1		!OUTPUT LINE
        CHARACTER*60 CSTR
	INTEGER TCOD(0:4)		!TRANSLATION CHECK DATA
	CHARACTER*8 FTXT(0:1,NFILE) 	!FILE EXTENSIONS
	  DATA FTXT/'.def','.inc','_bd.for',' ','_o.def','_o.inc',
	1		'_t.def','_t.inc','_e.def','_e.inc'/
	CHARACTER*2 CTXT(0:1,0:1,0:1) 	!COMMENT TEXT
	  DATA CTXT/'C',' ','/*','*/',
	1		'C',' ','..',' '/
	BYTE FENTB(0:WNTFHDL-1)		!DATA ENTRY
	  INTEGER FENTJ(0:WNTFHDL/LB_J-1)
	  EQUIVALENCE (FENTB,FENTJ)
	BYTE LFENTB(0:WNTFHDL-1)	!DATA ENTRY
	  INTEGER LFENTJ(0:WNTFHDL/LB_J-1)
	  EQUIVALENCE (LFENTB,LFENTJ)
	BYTE EENTB(0:WNTEHDL-1)		!EDIT ENTRY
	  CHARACTER*(WNTEHDL) EENTC
	  INTEGER EENTJ(0:WNTEHDL/LB_J-1)
	  EQUIVALENCE (EENTB,EENTC,EENTJ)
	BYTE DENTB(0:WNTDHDL-1)		!DATA INIT ENTRY
	  INTEGER DENTJ(0:WNTDHDL/LB_J-1)
	  EQUIVALENCE (DENTB,DENTJ)
	BYTE IENTB(0:WNTIHDL-1)		!LINE ENTRY
	  INTEGER IENTJ(0:WNTIHDL-1)
	  EQUIVALENCE (IENTB,IENTJ)
	BYTE FMENTB(0:MXSLIN-1)		!FORTRAN/C LINE
	  CHARACTER*(MXSLIN) LCENTC	!COMMENT LINE
	  EQUIVALENCE (FMENTB,LCENTC)
C-
C
C INIT
C
	CALL WNCTXT(F_P,'!2/')				!LOG SPACE
C
C OUTPUT
C
	DO IF=1,NFILE					!.DEF, _BD, _O, _T, _E
	  DOPAR=.FALSE.					!NO PARAMETERS NOW
	  IF (IF.EQ.1) THEN
	    IF (.NOT.DEFSN) THEN
	      IF (.NOT.(PARSN .AND. .NOT.BEGSN)) GOTO 100 !NO .DEF
	      DOPAR=.TRUE.
	    ELSE
	      IF (.NOT.BEGSN) DOPAR=.TRUE.
	    END IF
	  ELSE IF (IF.EQ.2) THEN
	    IF (.NOT.CINSN) GOTO 100			!NO _BD
	    DOPAR=.TRUE.				!OUTPUT PARAMETERS
	  ELSE IF (IF.EQ.3) THEN
	    IF (.NOT.BEGSN) GOTO 100			!NO _O
	    DOPAR=.TRUE.
	  ELSE
	    IF (.NOT.BEGSN) GOTO 100			!NO _T, _E
	  END IF
C
C OPEN FILES
C
	  LNAM=PARM(P_NAM)				!FILE NAME HEADER
	  CALL WNCALC(LNAM)				!MAKE LC
	  DO I=0,1					!FOR/C
	    IF (FTXT(I,IF).NE.' ') THEN			!MUST DO
	      F(I)=FDEF(I)				!CORRECT FILE #
	    ELSE
	      F(I)=0					!NO FILE #
	    END IF
	    FNAM(I)=LNAM(1:WNCALN(LNAM))//FTXT(I,IF) 	!FORTRAN FILE NAME
	    CALL WNCFOP(F(I),FNAM(I)(1:WNCALN(FNAM(I)))) !OPEN OUTPUT
	    CALL WNCAUC(FNAM(I))			!MAKE UC
	  END DO
C
C HEADERS
C
	  CALL WNGSGH(LNAM)				!HOST NAME
	  DO I=0,1
	    CALL WNCTXT(F(I),'!AS+ Created from !AS\.dsc on !%DN '//
	1		'at !%T at !AS',CTXT(0,I,0),
	1		OINFIL,LNAM)
	    CALL WNCTXT(F(I),'!AS  !AS',CTXT(0,I,1),	!FILE NAME
	1		FNAM(I))
	    CALL WNCTXT(F(I),'!AS  !AS !AS',CTXT(0,I,1), !USER/DATE
	1		PARM(P_USE),PARM(P_DAT))
	    CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
C
C REVISIONS
C
	    CALL WNCTXT(F(I),'!AS  Revisions:',CTXT(0,I,1))
	    CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
	    DO I1=0,RBDES_J(WNTB_CNT_J)-1		!REVISIONS
	      I2=RBDES_J(WNTB_BPTR_J)+I1*RBDES_J(WNTB_ELEN_J) !POINTER
	      CALL WNCTXT(F(I),'!AS!_!AD !AD!_!AD',CTXT(0,I,1),
	1		A_B(I2),MXLPAR,A_B(I2+MXLPAR),MXLPAR,
	1		A_B(I2+2*MXLPAR),RBDES_J(WNTB_ELEN_J)-2*MXLPAR)
	    END DO
	    CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	  END DO					!FORTRAN/C
C
C FORTRAN/CEE START
C
	  IF (IF.EQ.2) THEN				!_BD
	    LNAM=PARM(P_NAM)
	    CALL WNCAUC(LNAM)
	    CALL WNCTXT(F(0),'      BLOCK DATA !AS_BD',LNAM)
	  END IF
	  IF ((IF.EQ.1 .OR. IF.EQ.3) .AND. DOPAR) THEN	!FORTRAN START
	    DO I=0,1					!FORTRAN/C
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS  Given statements:',CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	      IF (I.EQ.0) THEN				!FORTRAN
	        DO I1=0,FMDES_J(WNTB_CNT_J)-1		!ALL LINES
		  I2=WNTIBR(FMDES,FMENTB,I1)		!READ LINE
		  CALL WNCTXT(F(I),'      !AD',
	1		FMENTB,MXSLIN)
		END DO
	      ELSE					!C
	        DO I1=0,CCDES_J(WNTB_CNT_J)-1		!ALL LINES
		  I2=WNTIBR(CCDES,FMENTB,I1)		!READ LINE
		  CALL WNCTXT(F(I),'      !AD',
	1		FMENTB,MXSLIN)
		END DO
	      END IF
	    END DO					!FORTRAN/C
	  END IF
C
C COMMENTS
C
	  DO I=0,1					!FORTRAN/C
	    CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	    CALL WNCTXT(F(I),'!AS  Result:',CTXT(0,I,1))
	    CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
	    IF (IF.EQ.2) THEN				!_BD
	      CALL WNCTXT(F(I),'!AS!_Initialisation of !AS!AS',CTXT(0,I,1),
	1		OINFIL,FTXT(I,1))
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
	    END IF
	    DO I1=0,CMDES_J(WNTB_CNT_J)-1		!COMMENTS
	      I2=CMDES_J(WNTB_BPTR_J)+I1*CMDES_J(WNTB_ELEN_J) !POINTER
	      CALL WNCTXT(F(I),'!AS  !AD',CTXT(0,I,1),
	1		A_B(I2),CMDES_J(WNTB_ELEN_J))
	    END DO
	    CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
C
C TRANSLATION HEADER
C
	    IF (IF.EQ.4) THEN
              CSTR='!AS'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,0))
              CSTR='!AS!_Specification of translation tables:'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
              CSTR='!AS!_\ 0= end of table!40C\ 1= character'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\ 2= 16 bits integer!40C\ 3= 32 bits integer'
 	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\ 4= 32 bits real!40C\ 5= 64 bits real'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\ 6= repeat!40C\ 7= end repeat'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\ 8= undefined!40C\ 9= byte'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\10= external repeat!40C\11= start union'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\12= start map!40C\13= end union'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!_\14= 64 bits complex!40C\15= 128 bits complex'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
              CSTR='!AS!79C!AS'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1),CTXT(1,I,0))
	    END IF
C
C EDIT HEADER
C
	    IF (IF.EQ.5) THEN
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS!_Specification of edit tables:',
	1		CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS The character (_EC) table contains:',
	1		CTXT(0,I,1))
              CSTR='!AS!_\fieldname, pattern, units, special code'
	      CALL WNCTXT(F(I),CSTR,CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS The integer (_EJ) table contains:',
	1		CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!_\offset, #of values, '//
	1		'edit (0=allowed), unit length',
	1		CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	    END IF
	  END DO					!FORTRAN/C
C
C PARAMETERS
C
	  IF (DOPAR) THEN				!PARAMETERS
	    DO I=0,1
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS  Parameters:',CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	      DO I1=0,XFDES_J(WNTB_CNT_J)-1
	        I2=WNTIBR(XFDES,FENTB,I1)		!READ ENTRY
		NCOM=0					!COMMENT LINES
		IF (FENTJ(WNTF_BTYP_J).EQ.BT_PAR) THEN	!PARAMETER
		  IF (FENTJ(WNTF_DTP_J).NE.0) THEN	!NOT COMMENT
	      	    I2=DFDES_J(WNTB_BPTR_J)+
	1		FENTJ(WNTF_INIP_J)*DFDES_J(WNTB_ELEN_J) !POINTER INIT
		  END IF
		  IF (FENTJ(WNTF_DTP_J).EQ.0) THEN
		    CALL WNTIO4(I,F,FENTB,FENTJ,CNAM)	!COMMENT LINE
		  ELSE IF (FENTJ(WNTF_DTP_J).NE.T_C) THEN !NUMERIC
		    IF (I.EQ.0) THEN			!FORTRAN
		      CALL WNTIO2(I,F,FENTB,FENTJ,CNAM)	!DATA LINE
		      CALL WNCTXT(F(I),'        PARAMETER ( !AD=!AD )',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			A_B(I2+WNTD_STR_1),WNTD_STR_N)
		    ELSE				!C
		      CALL WNCTXS(LCENTC,'#define !AD !AD',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			A_B(I2+WNTD_STR_1),WNTD_STR_N)
		      CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
		      CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		    END IF
		  ELSE					!ALPHA
		    IF (I.EQ.0) THEN			!FORTRAN
		      CALL WNTIO2(I,F,FENTB,FENTJ,CNAM)	!DATA LINE
		      CALL WNCTXT(F(I),
        1	         '        PARAMETER ( !AD=''!AD'' )',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			A_B(I2+WNTD_STR_1),WNTD_STR_N)
		    ELSE				!C
		      CALL WNCTXS(LCENTC,'#define !AD !AD',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			A_B(I2+WNTD_STR_1),WNTD_STR_N)
		      CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
		      CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		    END IF
		  END IF
		END IF
	      END DO
	    END DO
	  END IF
C
C LENGTH, VERSION, SYSTEM, OFFSETS
C
	  IF (IF.EQ.3) THEN				!_O
	    USEEN=-1					!NO UNION
	    CNAM=' '					!NO NAME
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_BEG) THEN	!NEW STRUCTURE
		CALL WNTIO1(0,FENTB,CNAM,LNAM1,LCNAM)	!NAME
		CNAM=LNAM1
	        DO I=0,1				!FORTRAN/CEE
		  NCOM=0				!COMMENT COUNT
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS structure definitions:',
	1		CTXT(0,I,1),LNAM1)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	          IF (I.EQ.0) THEN			!FORTRAN
	            CALL WNCTXT(F(I),
     1		       '      INTEGER !AS\HDL,!AS\HDV,!AS\HDS',
	1			LNAM1,LNAM1,LNAM1)
		    CALL WNCTXT(F(I),'	  PARAMETER (!_!AS\HDL=!UJ,'//
	1			'!#C!! Length!/	1!2_!AS\HDV=!AS,'//
	1			'!#C!! Version!/	1!2_!AS\HDS=!AS)'//
	1			'!#C!! System',
	1			LNAM1,FENTJ(WNTF_TLEN_J),COMPOS,
	1			LNAM1,PARM(P_VER),COMPOS,
	1			LNAM1,PARM(P_SYS),COMPOS)
	            CALL WNCTXT(F(I),'	INTEGER !AS__L,!AS__V,!AS__S',
	1			LNAM1,LNAM1,LNAM1)
		    CALL WNCTXT(F(I),'	  PARAMETER (!_!AS__L=!UJ,'//
	1			'!#C!! Length!/	1!2_!AS__V=!AS,'//
	1			'!#C!! Version!/	1!2_!AS__S=!AS)'//
	1			'!#C!! System',
	1			LNAM1,FENTJ(WNTF_TLEN_J),COMPOS,
	1			LNAM1,PARM(P_VER),COMPOS,
	1			LNAM1,PARM(P_SYS),COMPOS)
	          ELSE					!C
		    CALL WNCTXT(F(I),'#define !AS\HDL !UJ'//
	1			'!#C/* Length */',
	1			LNAM1,FENTJ(WNTF_TLEN_J),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS\HDV !AS'//
	1			'!#C/* Version */',
	1			LNAM1,PARM(P_VER),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS\HDS !AS'//
	1			'!#C/* System */',
	1			LNAM1,PARM(P_SYS),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS__L !UJ'//
	1			'!#C/* Length */',
	1			LNAM1,FENTJ(WNTF_TLEN_J),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS__V !AS'//
	1			'!#C/* Version */',
	1			LNAM1,PARM(P_VER),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS__S !AS'//
	1			'!#C/* System */',
	1			LNAM1,PARM(P_SYS),COMPOS+7)
	          END IF
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS Offsets:',
	1			CTXT(0,I,1),LNAM1)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
		  IF (I.EQ.1) THEN
		    CALL WNCTXS(LCENTC,'struct !AS {',LCNAM) !STRUCTURE NAME
		    CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
		  END IF
		  CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
	        END DO					!FORTRAN/CEE
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG) THEN !END DEFINITION
	        NCOM=0					!COMMENT COUNT
	        IF (USEEN.GE.0) THEN			!END UNION
	          I2=WNTIBR(XFDES,LFENTB,USEEN)		!READ REF. NAME
	          CALL WNTIO1(I,LFENTB,CNAM,LNAM2,LCNAM2) !GET NAME
	          CALL WNCTXT(F(1),'  } !AS;',LCNAM2)	!UNION NAME
	          USEEN=-1				!READY
	        END IF
		CALL WNCTXS(LCENTC,'};')		!END STRUCTURE
		CALL WNTIO6(F,1,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
		CALL WNTIO7(F,0,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		CALL WNTIO7(F,1,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA) THEN !OFFSET
		IF ((FENTJ(WNTF_REFP_J).LE.0 .OR.
	1		FENTJ(WNTF_REFP_J).GT.I1) .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		USEEN.GE.0) THEN		!END UNION
		  I2=WNTIBR(XFDES,LFENTB,USEEN)		!READ REF. NAME
		  CALL WNTIO1(I,LFENTB,CNAM,LNAM2,LCNAM2) !GET NAME
		  CALL WNCTXT(F(1),'  } !AS;',LCNAM2)	!UNION NAME
		  USEEN=-1				!READY
		END IF
		IF (FENTJ(WNTF_REFP_J).GT.I1 .AND.
	1		FENTJ(WNTF_DTP_J).NE.0) THEN	!START = GREFERENCE
		  CALL WNCTXT(F(1),'  union {')
		  USEEN=I1				!SAVE WHERE
		END IF
		DO I=0,1				!FORTRAN/C
		  IF (I.EQ.1 .OR. FENTB(WNTF_NAM_1).NE.ICHAR('-')) THEN !NAME
		    NCOM=0				!COMMENT COUNT
		    IF (FENTJ(WNTF_DTP_J).EQ.0) THEN	!COMMENT
		      CALL WNTIO4(I,F,FENTB,FENTJ,CNAM)
		    ELSE IF (FENTJ(WNTF_DTP_J).EQ.T_S) THEN !STRUCTURE
		      I2=WNTIBR(XFDES,LFENTB,FENTJ(WNTF_SREF_J)) !REF. DATA
		      IF (I.EQ.0) THEN			!FORTRAN
			CALL WNCTXS(LCENTC,'	INTEGER !AS_!AD_1,'//
	1			'!AS_!AD_N',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N)
		        CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			CALL WNCTXS(LCENTC,'	  PARAMETER (!AS_!AD_1=!UJ,'//
	1			'!AS_!AD_N=!UJ)',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			FENTJ(WNTF_OFF_J),
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LFENTJ(WNTF_TLEN_J))
		        CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			IF (MOD(FENTJ(WNTF_OFF_J),
	1			LFENTJ(WNTF_TLEN_J)).EQ.0) THEN !CORRECT OFFSET
			  CALL WNCTXS(LCENTC,'	INTEGER !AS_!AD_!AS',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)))
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			  CALL WNCTXS(LCENTC,'	  PARAMETER (!AS_!AD_!AS=!UJ)',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)),
	1			FENTJ(WNTF_OFF_J)/FENTJ(WNTF_ULEN_J))
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			END IF
			DO I3=1,T__N-1			!ALL OFFSETS
			 IF (CD1(I3).NE.'S' .AND. CD2(I3).NE.0) THEN
			  IF (MOD(FENTJ(WNTF_OFF_J),CD2(I3)).EQ.0) THEN
			    CALL WNCTXS(LCENTC,'	  INTEGER !AS_!AD_!AS',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(I3))
		            CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM)
			    CALL WNCTXS(LCENTC,'	    PARAMETER '//
	1			'(!AS_!AD_!AS=!UJ)',
	1			LNAM1,FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(I3),FENTJ(WNTF_OFF_J)/CD2(I3))
		           CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM)
			  END IF
			 END IF
			END DO
		        CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		      ELSE				!C
		        CALL WNTIO2(I,F,FENTB,FENTJ,CNAM) !SHOW LINE NO INIT
		      END IF				!FORTRAN/C
		    ELSE IF (FENTJ(WNTF_DTP_J).NE.T_C) THEN !NUMERIC
		      IF (I.EQ.0) THEN			!FORTRAN
			IF (MOD(FENTJ(WNTF_OFF_J),
	1			FENTJ(WNTF_ULEN_J)).EQ.0) THEN !CORRECT OFFSET
			  CALL WNCTXS(LCENTC,'	INTEGER !AS_!AD_1,'//
	1			'!AS_!AD_!AS',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)))
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			  CALL WNCTXS(LCENTC,'	  PARAMETER (!AS_!AD_1=!UJ,'//
	1			'!AS_!AD_!AS=!UJ)',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			FENTJ(WNTF_OFF_J),
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)),
	1			FENTJ(WNTF_OFF_J)/FENTJ(WNTF_ULEN_J))
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			ELSE				!INCORRECT OFFSET
			  CALL WNCTXS(LCENTC,'	INTEGER !AS_!AD_1',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N)
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			  CALL WNCTXS(LCENTC,'	  PARAMETER (!AS_!AD_1=!UJ)',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			FENTJ(WNTF_OFF_J))
		          CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			END IF
		        CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		      ELSE				!C
		        CALL WNTIO2(I,F,FENTB,FENTJ,CNAM) !SHOW LINE NO INIT
		      END IF
		    ELSE				!CHARACTER
		      IF (I.EQ.0) THEN			!FORTRAN
			CALL WNCTXS(LCENTC,'	INTEGER !AS_!AD_1,'//
	1			'!AS_!AD_!AS,!AS_!AD_N',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)),
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N)
		        CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
			CALL WNCTXS(LCENTC,'	  PARAMETER (!AS_!AD_1=!UJ,'//
	1			'!AS_!AD_!AS=!UJ,!AS_!AD_N=!UJ)',
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			FENTJ(WNTF_OFF_J),
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			CD1(FENTJ(WNTF_DTP_J)),
	1			FENTJ(WNTF_OFF_J)/FENTJ(WNTF_ULEN_J),
	1			LNAM1,
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			FENTJ(WNTF_SLEN_J))
		        CALL WNTIO6(F,I,LCENTC,FENTJ,IENTJ,NCOM) !SHOW COMMENT
		        CALL WNTIO7(F,I,LCENTC,FENTJ,IENTJ,NCOM) !FINAL COMMENTS
		      ELSE				!C
		        CALL WNTIO2(I,F,FENTB,FENTJ,CNAM) !SHOW LINE NO INIT
		      END IF
		    END IF				!NUMERIC/CHARACTER
		  END IF				!NAME GIVEN
		END DO					!FORTRAN/C
	      END IF					!OFFSET
	    END DO					!ALL ENTRIES
	  END IF					!OFFSETS
C
C TRANSLATION DATA
C
	  IF (IF.EQ.4) THEN				!_T
	    CNAM=' '					!NO COMMON
	    TTCNT=0					!TOTAL TRANSLATION COUNT
	    LNAM2=PARM(P_NAM)				!FILE NAME
	    CALL WNCAUC(LNAM2)
	    CALL WNCTXT(F(1),'	static struct {')
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_BEG) THEN	!NEW STRUCTURE
		CALL WNTIO1(0,FENTB,CNAM,LNAM1,LCNAM)	!GET NAME
	        DO I=0,1				!FORTRAN/CEE
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS translation definitions:',
	1		CTXT(0,I,1),LNAM1)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	        END DO					!FORTRAN/CEE
		TCOD(0)=-1				!CHECK CODE
		TCOD(1)=0				!COUNT LINES
		TCOD(2)=0				!ITEM COUNT
		TCOD(3)=I1				!CURRENT POINTER
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		.NOT.(FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I1)) THEN	!OFFSET
		IF ((FENTJ(WNTF_DTP_J).NE.TCOD(0) .OR.
	1		FENTJ(WNTF_DTP_J).EQ.T_S).AND.
	1		TCOD(2).GT.0) THEN		!NEW LINE
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
		  IF (TCOD(0).EQ.T_S) TCOD(1)=TCOD(1)+1
		  TCOD(2)=0				!ITEM LENGTH
		END IF
		I3=FENTJ(WNTF_TLEN_J)			!ITEM LENGTH
		IF (FENTJ(WNTF_DTP_J).EQ.T_C)
	1		I3=I3*FENTJ(WNTF_SLEN_J)
		TCOD(2)=TCOD(2)+I3
		DO WHILE (TCOD(2).GT.32760)
		  TCOD(2)=TCOD(2)-32760
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
		  IF (TCOD(0).EQ.T_S) TCOD(1)=TCOD(1)+1
		END DO
		TCOD(0)=FENTJ(WNTF_DTP_J)
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG .AND.
	1		TCOD(1)+TCOD(2).NE.0) THEN	!HAVE SEEN TRANSLATION
		IF (TCOD(2).NE.0) THEN
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
		  IF (TCOD(0).EQ.T_S) TCOD(1)=TCOD(1)+1
		END IF
		DO I=0,1				!FORTRAN/C
		  IF (I.EQ.0) THEN
		    CALL WNCTXT(F(I),'	INTEGER*2 !AS_T(2,!UJ)',
	1			LNAM1,TCOD(1)+1)
		    CALL WNCTXT(F(I),'	  EQUIVALENCE (!AS_T,!AS__T(1,!UJ))',
	1			LNAM1,LNAM2,TTCNT+1)
		  ELSE					!C
		    CALL WNCTXT(F(I),'	short !AS_t [!UJ][2] ;',
	1			LCNAM,TCOD(1)+1)
		  END IF
		END DO					!FORTRAN/C
	        I2=WNTIBR(XFDES,FENTB,TCOD(3))		!READ START ENTRY
		FENTJ(WNTF_IND_J+MXNARR*2-1)=TTCNT	!SAVE START IN HEADER
	        I2=WNTIBW(XFDES,FENTB,TCOD(3))		!REWRITE START ENTRY
		TRCNT=TTCNT				!SAVE CURRENT
		TTCNT=TTCNT+TCOD(1)+1			!NEW TOTAL LENGTH
		TCOD(0)=-1				!CHECK CODE
		TCOD(1)=0				!COUNT LINES
		TCOD(2)=0				!ITEM COUNT
	        DO I3=TCOD(3)+1,I1			!ALL ENTRIES
	          I2=WNTIBR(XFDES,FENTB,I3)		!READ ENTRY
	          IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		.NOT.(FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I3)) THEN	!OFFSET
		    IF ((TCOD(0).NE.FENTJ(WNTF_DTP_J) .OR.
	1		FENTJ(WNTF_DTP_J).EQ.T_S).AND.
	1			TCOD(2).GT.0) THEN	!OUTPUT LINE
		      TCOD(1)=TCOD(1)+1			!COUNT LINE
		      DO I=0,0				!FORTRAN/C
			CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!UJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			TCD(TCOD(0)),TCOD(2))
		      END DO				!FORTRAN/C
		      IF (TCOD(0).EQ.T_S) THEN
			TCOD(1)=TCOD(1)+1		!COUNT LINES
			I2=WNTIBR(XFDES,LFENTB,TCOD(4)) !REFERENCE
			J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
		        DO I=0,0			!FORTRAN/C
			  CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!SJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			J,1)
		        END DO				!FORTRAN/C
		      END IF
		      TCOD(2)=0				!NEW ITEM
		    END IF
		    I4=FENTJ(WNTF_TLEN_J)		!ITEM LENGTH
		    IF (FENTJ(WNTF_DTP_J).EQ.T_C)
	1	    		I4=I4*FENTJ(WNTF_SLEN_J)
		    IF (FENTJ(WNTF_DTP_J).EQ.T_S)
	1			TCOD(4)=FENTJ(WNTF_SREF_J) !SAVE REFERENCE
		    TCOD(2)=TCOD(2)+I4
		    DO WHILE (TCOD(2).GT.32760)
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      DO I=0,0				!FORTRAN/C
			CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!UJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			TCD(TCOD(0)),32760)
		      END DO				!FORTRAN/C
		      IF (TCOD(0).EQ.T_S) THEN
			TCOD(1)=TCOD(1)+1		!COUNT LINES
			I2=WNTIBR(XFDES,LFENTB,TCOD(4)) !REFERENCE
			J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
		        DO I=0,0			!FORTRAN/C
			  CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!SJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			J,1)
		        END DO				!FORTRAN/C
		      END IF
		      TCOD(2)=TCOD(2)-32760
		    END DO
		    TCOD(0)=FENTJ(WNTF_DTP_J)
		  ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG) THEN !READY
		    IF (TCOD(2).NE.0) THEN
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      DO I=0,0				!FORTRAN/C
			CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!UJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			TCD(TCOD(0)),TCOD(2))
		      END DO				!FORTRAN/C
		    END IF
		    IF (TCOD(0).EQ.T_S) THEN
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      I2=WNTIBR(XFDES,LFENTB,TCOD(4))	!REFERENCE
		      J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
		      DO I=0,0				!FORTRAN/C
			CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!SJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			J,1)
		      END DO				!FORTRAN/C
		    END IF
		    TCOD(1)=TCOD(1)+1
		    DO I=0,0				!FORTRAN/C
		      CALL WNCTXT(F(I),'	  DATA !AS_T(1,!UJ),'//
	1			'!AS_T(2,!UJ) /!UJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			0,1)
		    END DO				!FORTRAN/C
		  END IF				!OFFSET
		END DO					!ENTRIES
	      END IF					!OFFSET
	    END DO					!ALL ENTRIES
	    DO I=0,1					!FORTRAN/C
	      IF (I.EQ.0) THEN
		CALL WNCTXT(F(I),'	INTEGER*2 !AS__T(2,!UJ)',
	1			LNAM2,TTCNT)
	      ELSE					!C
		CALL WNCALC(LNAM2)
		CALL WNCTXT(F(I),'	} !AS__t = {',
	1			LNAM2)
	      END IF
	    END DO					!FORTRAN/C
	    CNAM=' '					!NO COMMON
	    TTCNT=0					!TOTAL TRANSLATION COUNT
	    TSEEN=.FALSE.				!NON YET
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_BEG) THEN	!NEW STRUCTURE
		CALL WNTIO1(0,FENTB,CNAM,LNAM1,LCNAM)	!GET NAME
		TCOD(0)=-1				!CHECK CODE
		TCOD(1)=0				!COUNT LINES
		TCOD(2)=0				!ITEM COUNT
		TCOD(3)=I1				!CURRENT POINTER
		IF (TSEEN) THEN
		  CALL WNCTXT(F(1),'!2_!UJ, !UJ,',
	1			0,1)
	        END IF
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		.NOT.(FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I1)) THEN	!OFFSET
		IF ((FENTJ(WNTF_DTP_J).NE.TCOD(0) .OR.
	1		FENTJ(WNTF_DTP_J).EQ.T_S).AND.
	1		TCOD(2).GT.0) THEN		!NEW LINE
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
		  IF (TCOD(0).EQ.T_S) TCOD(1)=TCOD(1)+1
		  TCOD(2)=0				!ITEM LENGTH
		END IF
		I3=FENTJ(WNTF_TLEN_J)			!ITEM LENGTH
		IF (FENTJ(WNTF_DTP_J).EQ.T_C)
	1		I3=I3*FENTJ(WNTF_SLEN_J)
		TCOD(2)=TCOD(2)+I3
		DO WHILE (TCOD(2).GT.32760)
		  TCOD(2)=TCOD(2)-32760
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
		  IF (TCOD(0).EQ.T_S) TCOD(1)=TCOD(1)+1
		END DO
		TCOD(0)=FENTJ(WNTF_DTP_J)
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG .AND.
	1		TCOD(1)+TCOD(2).NE.0) THEN	!HAVE SEEN TRANSLATION
		IF (TCOD(2).NE.0) TCOD(1)=TCOD(1)+1	!COUNT LINES
	        I2=WNTIBR(XFDES,FENTB,TCOD(3))		!READ START ENTRY
		FENTJ(WNTF_IND_J+MXNARR*2-1)=TTCNT	!SAVE START IN HEADER
	        I2=WNTIBW(XFDES,FENTB,TCOD(3))		!REWRITE START ENTRY
		TRCNT=TTCNT				!SAVE CURRENT
		TTCNT=TTCNT+TCOD(1)+1			!NEW TOTAL LENGTH
		TCOD(0)=-1				!CHECK CODE
		TCOD(1)=0				!COUNT LINES
		TCOD(2)=0				!ITEM COUNT
	        DO I3=TCOD(3)+1,I1			!ALL ENTRIES
	          I2=WNTIBR(XFDES,FENTB,I3)		!READ ENTRY
	          IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		.NOT.(FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I3)) THEN	!OFFSET
		    IF ((TCOD(0).NE.FENTJ(WNTF_DTP_J) .OR.
	1		FENTJ(WNTF_DTP_J).EQ.T_S).AND.
	1			TCOD(2).GT.0) THEN	!OUTPUT LINE
		      TCOD(1)=TCOD(1)+1			!COUNT LINE
		      CALL WNCTXT(F(1),'!2_!UJ, !UJ,',
	1			TCD(TCOD(0)),TCOD(2))
		      IF (TCOD(0).EQ.T_S) THEN
			TCOD(1)=TCOD(1)+1		!COUNT LINES
			I2=WNTIBR(XFDES,LFENTB,TCOD(4)) !REFERENCE
			J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
			CALL WNCTXT(F(1),'!2_!SJ, !UJ,',
	1			J,1)
		      END IF
		      TCOD(2)=0				!NEW ITEM
		    END IF
		    I4=FENTJ(WNTF_TLEN_J)		!ITEM LENGTH
		    IF (FENTJ(WNTF_DTP_J).EQ.T_C)
	1	    		I4=I4*FENTJ(WNTF_SLEN_J)
		    IF (FENTJ(WNTF_DTP_J).EQ.T_S)
	1			TCOD(4)=FENTJ(WNTF_SREF_J) !SAVE REFERENCE
		    TCOD(2)=TCOD(2)+I4
		    DO WHILE (TCOD(2).GT.32760)
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      CALL WNCTXT(F(1),'!2_!UJ, !UJ,',
	1			TCD(TCOD(0)),32760)
		      IF (TCOD(0).EQ.T_S) THEN
			TCOD(1)=TCOD(1)+1		!COUNT LINES
			I2=WNTIBR(XFDES,LFENTB,TCOD(4)) !REFERENCE
			J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
			CALL WNCTXT(F(1),'!2_!SJ, !UJ,',
	1			J,1)
		      END IF
		      TCOD(2)=TCOD(2)-32760
		    END DO
		    TCOD(0)=FENTJ(WNTF_DTP_J)
		  ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG) THEN !READY
		    IF (TCOD(2).NE.0) THEN
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      CALL WNCTXT(F(1),'!2_!UJ, !UJ,',
	1			TCD(TCOD(0)),TCOD(2))
		    END IF
		    IF (TCOD(0).EQ.T_S) THEN
		      TCOD(1)=TCOD(1)+1			!COUNT LINES
		      I2=WNTIBR(XFDES,LFENTB,TCOD(4))	!REFERENCE
		      J=2*(LFENTJ(WNTF_IND_J+2*MXNARR-1)-
	1			TRCNT-TCOD(1)+1)	!OFFSET
		      CALL WNCTXT(F(1),'!2_!SJ, !UJ,',
	1			J,1)
		    END IF
		    TCOD(1)=TCOD(1)+1
		    TSEEN=.TRUE.			!END SEEN
		  END IF				!OFFSET
		END DO					!ENTRIES
	      END IF					!OFFSET
	    END DO					!ALL ENTRIES
	    CALL WNCTXT(F(1),'!2_!UJ, !UJ };',
	1			0,1)
	  END IF					!OFFSETS
C
C EDIT DATA
C
	  IF (IF.EQ.5) THEN				!_E
	    CNAM=' '					!NO COMMON
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_BEG) THEN	!NEW STRUCTURE
		CALL WNTIO1(0,FENTB,CNAM,LNAM1,LCNAM)	!NAME
	        DO I=0,1				!FORTRAN/CEE
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS edit definitions:',
	1		CTXT(0,I,1),LNAM1)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	        END DO					!FORTRAN/CEE
		TCOD(1)=0				!COUNT LINES
		TCOD(3)=I1				!CURRENT POINTER
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		FENTB(WNTF_NAM_1).NE.ICHAR('-')) THEN !OFFSET
		  TCOD(1)=TCOD(1)+1			!COUNT LINES
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_EBG .AND.
	1		TCOD(1).NE.0) THEN		!HAVE SEEN EDIT
		DO I=0,2				!FORTRAN/C (2*)
		  IF (I.EQ.0) THEN
	            CALL WNCTXT(F(I),'	INTEGER !AS\EDL,!AS__EL',
	1			LNAM1,LNAM1)
		    CALL WNCTXT(F(I),'	  PARAMETER (!_!AS\EDL=!UJ,'//
	1			'!#C!! Length table!/	1!2_!AS__EL=!UJ)',
	1			LNAM1,TCOD(1),COMPOS,
	1			LNAM1,TCOD(1))
		    CALL WNCTXT(F(I),'	CHARACTER*!UJ !AS_EC(4,!UJ)',
	1			12,LNAM1,TCOD(1))
		    CALL WNCTXT(F(I),'	INTEGER !AS_EJ(4,!UJ)',
	1			LNAM1,TCOD(1))
		  ELSE IF (I.EQ.1) THEN			!C CHAR.
		    CALL WNCTXT(F(I),'#define !AS\EDL !UJ'//
	1			'!#C/* Length table */',
	1			LNAM1,TCOD(1),COMPOS+7)
		    CALL WNCTXT(F(I),'#define !AS__EL !UJ'//
	1			'!#C/* Length table */',
	1			LNAM1,TCOD(1),COMPOS+7)
		    CALL WNCTXT(F(1),'	static char !AS_ec [!UJ][4][!UJ] = {',
	1			LCNAM,TCOD(1),12)
		  ELSE					!C INTEGER
		    CALL WNCTXT(F(1),'	static int !AS_ej [!UJ][4] = {',
	1			LCNAM,TCOD(1))
		  END IF				!FORTRAN/C
		  J=TCOD(1)				!SAVE LAST
		  TCOD(1)=0				!COUNT LINES
	          DO I3=TCOD(3)+1,I1			!ALL ENTRIES
	            I2=WNTIBR(XFDES,FENTB,I3)		!READ ENTRY
	            IF (FENTJ(WNTF_BTYP_J).EQ.BT_SDA .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		FENTB(WNTF_NAM_1).NE.ICHAR('-')) THEN !OFFSET
		      TCOD(1)=TCOD(1)+1			!COUNT LINE
		      IF (FENTJ(WNTF_EDIP_J).GT.0) THEN	!EDIT GIVEN
		        I2=WNTIBR(EFDES,EENTB,FENTJ(WNTF_EDIP_J)) !READ EDIT
		      ELSE
		        EENTC(WNTE_UNIT_1+1:WNTE_UNIT_1+WNTE_UNIT_N)=
	1				' '		!MAKE
		        EENTC(WNTE_SPEC_1+1:WNTE_SPEC_1+WNTE_SPEC_N)=
	1				' '
		        EENTJ(WNTE_EDIT_J)=0
		        EENTC(WNTE_PAT_1+1:WNTE_PAT_1+WNTE_PAT_N)=
	1				ECD(FENTJ(WNTF_DTP_J))
		      END IF
		      IF (EENTC(WNTE_PAT_1+1:
	1			WNTE_PAT_1+WNTE_PAT_N).EQ.' ') !NO PATTERN
	1			EENTC(WNTE_PAT_1+1:WNTE_PAT_1+WNTE_PAT_N)=
	1				ECD(FENTJ(WNTF_DTP_J))
		      IF (FENTJ(WNTF_DTP_J).EQ.T_S) THEN !STRUCTURE
			LNAM2=EENTC(WNTE_SPEC_1+1:
	1			WNTE_SPEC_1+WNTE_SPEC_N) !SPECIAL FIELD
			IF (LNAM2.EQ.' ') THEN		!NO SPECIAL
	                  I2=WNTIBR(XFDES,LFENTB,FENTJ(WNTF_SREF_J)) !READ REF.
	                  CALL WNTIO1(I,LFENTB,CNAM,LNAM2,LCNAM2) !GET NAME
			  EENTC(WNTE_SPEC_1+1:WNTE_SPEC_1+WNTE_SPEC_N)=
	1			'S:'//LNAM2		!SET SPECIAL EDIT
			END IF
		      END IF
		      IF (FENTJ(WNTF_DTP_J).EQ.T_C) THEN !CHARACTER
		        I4=FENTJ(WNTF_SLEN_J)		!LENGTH
		      ELSE
		        I4=FENTJ(WNTF_ULEN_J)
		      END IF
		      IF (J.EQ.TCOD(1)) THEN		!LAST
			LNAM='};'
		      ELSE
			LNAM=','
		      END IF
		      IF (I.EQ.0) THEN
			CALL WNCTXT(F(I),'	  DATA !AS_EC(1,!UJ),'//
	1			'!AS_EC(2,!UJ),!AS_EC(3,!UJ),'//
	1			'!AS_EC(4,!UJ)!/	1!_'//
	1			'/''!AD'',''!AD'',''!AD '',''!AD ''/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			EENTB(WNTE_PAT_1),WNTE_PAT_N,
	1			EENTB(WNTE_UNIT_1),WNTE_UNIT_N,
	1			EENTB(WNTE_SPEC_1),WNTE_SPEC_N)
			CALL WNCTXT(F(I),'	  DATA !AS_EJ(1,!UJ),'//
	1			'!AS_EJ(2,!UJ),!AS_EJ(3,!UJ),'//
	1			'!AS_EJ(4,!UJ)!/	1!_'//
	1			'/!UJ,!UJ,!UJ,!UJ/',
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			LNAM1,TCOD(1),LNAM1,TCOD(1),
	1			FENTJ(WNTF_OFF_J),
	1			MAX(FENTJ(WNTF_TLEN_J),1),
	1			EENTJ(WNTE_EDIT_J),I4)
		      ELSE IF (I.EQ.1) THEN		!C CHAR
			CALL WNCTXT(F(1),'!2_'//
	1			'"!AD","!AD","!AD ","!AD "!AS',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			EENTB(WNTE_PAT_1),WNTE_PAT_N,
	1			EENTB(WNTE_UNIT_1),WNTE_UNIT_N,
	1			EENTB(WNTE_SPEC_1),WNTE_SPEC_N,
	1			LNAM)
		      ELSE				!C INT
			CALL WNCTXT(F(1),'!2_'//
	1			'!UJ,!UJ,!UJ,!UJ!AS',
	1			FENTJ(WNTF_OFF_J),
	1			MAX(FENTJ(WNTF_TLEN_J),1),
	1			EENTJ(WNTE_EDIT_J),I4,
	1			LNAM)
		      END IF				!FORTRAN/C
		    END IF				!OFFSET
		  END DO				!ENTRIES
		END DO					!FORTRAN/C
	      END IF					!OFFSET
	    END DO					!ALL ENTRIES
	  END IF					!OFFSETS
C
C DATA
C
	  IF (IF.EQ.1) THEN				!.DEF ASKED
	    USEEN=-1					!NO UNION
	    CNAM=' '					!NO COMMON
	    DO I=0,1					!FORTRAN/CEE
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS  Data declarations:',CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	      DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
		I2=WNTIBR(XFDES,FENTB,I1)		!READ ENTRY
		IF (FENTJ(WNTF_BTYP_J).EQ.BT_DAT .AND.
	1		FENTB(WNTF_NAM_1).NE.ICHAR('-')) THEN !DATA ENTRY
		  IF (I.EQ.1 .AND. (FENTJ(WNTF_REFP_J).LE.0 .OR.
	1		FENTJ(WNTF_REFP_J).GT.I1) .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		USEEN.GE.0) THEN		!END UNION
		    I2=WNTIBR(XFDES,LFENTB,USEEN)	!READ REF. NAME
		    CALL WNTIO1(I,LFENTB,CNAM,LNAM1,LCNAM) !GET NAME
		    CALL WNCTXT(F(I),'  } !AS;',LCNAM)	!UNION NAME
		    USEEN=-1				!READY
		  END IF
		  IF (FENTJ(WNTF_REFP_J).GT.I1 .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1			I.EQ.1) THEN		!START = REFERENCE
		    CALL WNCTXT(F(I),'  union {')
		    USEEN=I1				!SAVE WHERE
		  END IF
		  CALL WNTIO3(I,F,FENTB,FENTJ,CNAM)	!SHOW LINE
		  IF (FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I1 .AND.
	1			I.EQ.0) THEN		!THIS IS = REFERENCE
		    I2=WNTIBR(XFDES,LFENTB,FENTJ(WNTF_REFP_J)) !READ REF. NAME
		    CALL WNCTXT(F(I),'	  EQUIVALENCE (!AD,!AD)',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LFENTB(WNTF_NAM_1),WNTF_NAM_N)
		  END IF				!= REFERENCE
		END IF					!DATA ENTRY
	      END DO					!ALL ENTRIES
	      IF (I.EQ.1 .AND. USEEN.GE.0) THEN		!END UNION
	        I2=WNTIBR(XFDES,LFENTB,USEEN)		!READ REF. NAME
		CALL WNTIO1(I,LFENTB,CNAM,LNAM1,LCNAM)	!GET NAME
	        CALL WNCTXT(F(I),'  } !AS;',LCNAM)	!UNION NAME
	        USEEN=-1				!READY
	      END IF
	    END DO					!FORTRAN/CEE
	  END IF					!.DEF ASKED
C
C COMMON  DATA
C
	  IF (IF.EQ.1 .OR. IF.EQ.2) THEN		!.DEF ASKED
	    CSEEN=.FALSE.				!NO COMMON BLOCK
	    USEEN=-1					!NO UNION
	    CNAM=' '					!NO COMMON NAME
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_DCM) THEN	!NEW COMMON
		IF (CSEEN) THEN				!FINISH OLD
		  CALL WNCTXT(F(1),'};')
		END IF
		CALL WNTIO1(I,FENTB,CNAM,CNAM,LCNAM)	!GET NAME
	        DO I=0,1				!FORTRAN/CEE
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS common data:',
	1		CTXT(0,I,1),CNAM)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
		END DO
		CALL WNCTXT(F(1),'struct !AS_com {',LCNAM)
		CSEEN=.TRUE.				!SET ONE ACTIVE
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_COM) THEN !DATA ENTRY
		IF ((FENTJ(WNTF_REFP_J).LE.0 .OR.
	1		FENTJ(WNTF_REFP_J).GT.I1) .AND.
	1		FENTJ(WNTF_DTP_J).NE.0 .AND.
	1		USEEN.GE.0) THEN		!END UNION
		  I2=WNTIBR(XFDES,LFENTB,USEEN)		!READ REF. NAME
		  CALL WNTIO1(I,LFENTB,CNAM,LNAM1,LCNAM) !GET NAME
		  CALL WNCTXT(F(1),'  } !AS;',LCNAM)	!UNION NAME
		  USEEN=-1				!READY
		END IF
		IF (FENTJ(WNTF_REFP_J).GT.I1 .AND.
	1		FENTJ(WNTF_DTP_J).NE.0) THEN	!START = REFERENCE
		  CALL WNCTXT(F(1),'  union {')
		  USEEN=I1				!SAVE WHERE
		END IF
		DO I=0,1				!FORTRAN/CEE
		  IF (IF.EQ.2) THEN
		    CALL WNTIO3(I,F,FENTB,FENTJ,CNAM)	!SHOW LINE WITH INIT
		  ELSE
		    CALL WNTIO2(I,F,FENTB,FENTJ,CNAM)	!SHOW LINE NO INIT
		  END IF
		  IF (FENTJ(WNTF_REFP_J).GT.0 .AND.
	1		FENTJ(WNTF_REFP_J).LT.I1 .AND.
	1			I.EQ.0) THEN		!THIS IS = REFERENCE
		    I2=WNTIBR(XFDES,LFENTB,FENTJ(WNTF_REFP_J)) !READ REF. NAME
		    CALL WNCTXT(F(I),'	  EQUIVALENCE (!AD,!AD)',
	1			FENTB(WNTF_NAM_1),WNTF_NAM_N,
	1			LFENTB(WNTF_NAM_1),WNTF_NAM_N)
		  END IF				!= REFERENCE
		END DO					!FORTRAN/CEE
	      END IF					!DATA ENTRY
	    END DO					!ALL ENTRIES
	    IF (USEEN.GE.0) THEN			!END UNION
	      I2=WNTIBR(XFDES,LFENTB,USEEN)		!READ REF. NAME
	      CALL WNTIO1(I,LFENTB,CNAM,LNAM1,LCNAM)	!GET NAME
	      CALL WNCTXT(F(1),'  } !AS;',LCNAM)	!UNION NAME
	      USEEN=-1					!READY
	    END IF
	    IF (CSEEN) THEN				!FINISH OLD
	      CALL WNCTXT(F(1),'};')
	    END IF
	  END IF					!.DEF ASKED
C
C COMMON  BLOCK
C
	  IF (IF.EQ.1 .OR. IF.EQ.2) THEN		!.DEF ASKED
	    CSEEN=.FALSE.				!NO COMMON ENTRIES
	    CNAM=' '					!NO COMMON
	    DO I1=0,XFDES_J(WNTB_CNT_J)-1		!ALL ENTRIES
	      I2=WNTIBR(XFDES,FENTB,I1)			!READ ENTRY
	      IF (FENTJ(WNTF_BTYP_J).EQ.BT_DCM) THEN	!NEW COMMON
		IF (CSEEN) THEN				!FINISH OLD
		  DO I=0,0				!FORTRAN/C
		    CALL WNCTXT(F(I),'!AS',LIN1)	!LAST LINE PREVIOUS
		  END DO				!FORTRAN/C
		END IF
		CALL WNTIO1(I,FENTB,CNAM,CNAM,LCNAM)	!GET NAME
	        DO I=0,1				!FORTRAN/CEE
	          CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	          CALL WNCTXT(F(I),'!AS  !AS common block:',
	1		CTXT(0,I,1),CNAM)
	          CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
		END DO
c		CALL WNCTXT(F(1),'#ifdef wn_cv__!/\'//
c:	1		'#define !AS_com_ _!AS_com_!/\'//
c	1		'#endif',LCNAM,LCNAM)
		CALL WNCTXT(F(1),'extern struct !AS_com !AS_com_ ;',
	1		LCNAM,LCNAM)			!C REFERENCE
		CALL WNCTXS(LIN1,'      COMMON /!AS_COM/ ',
	1		CNAM)				!HEADER
		I4=WNCALN(LIN1)+1			!LENGTH FILLED
		CSEEN=.FALSE.				!NO COMMON ENTRIES
	      ELSE IF (FENTJ(WNTF_BTYP_J).EQ.BT_COM .AND.
	1		FENTJ(WNTF_DTP_J).NE.0) THEN	!DATA ENTRY
		CALL WNTIO1(I,FENTB,CNAM,LNAM1,LCNAM)	!GET NAME
		DO I=0,0				!FORTRAN
		  IF (FENTJ(WNTF_REFP_J).GT.0 .AND.
	1	    FENTJ(WNTF_REFP_J).LT.I1) THEN	!SKIP EQUIVALENCE
		  ELSE
		    IF (I4.GE.COMPOS-10) THEN		!NEW LINE
		      CALL WNCTXT(F(I),'!AS,',LIN1)	!PRINT LINE
		      CALL WNCTXS(LIN1,'     1!2_,')
		      I4=WNCALN(LIN1)-1
		    ELSE IF (CSEEN) THEN
		      I4=I4+1				!ADD ,
		      LIN1(I4:I4)=','
		    END IF
		    CSEEN=.TRUE.			!NAME SEEN
		    CALL WNCTXS(LIN1(I4+1:),'!AS',
	1			LNAM1)			!ADD NAME
		    I4=WNCALN(LIN1)
		  END IF				!EQUIVALENCE
		END DO					!FORTRAN/CEE
	      END IF					!DATA ENTRY
	    END DO					!ALL ENTRIES
	    IF (CSEEN) THEN				!LAST COMMON LINE
	      DO I=0,0					!FORTRAN
		CALL WNCTXT(F(I),'!AS',LIN1)
	      END DO					!FORTRAN/CEE
	    END IF
	  END IF					!.DEF ASKED
C
C NEXT FILE
C
 101	  CONTINUE
	  IF (IF.EQ.1 .AND. CINSN) THEN			!INDICATE EXTERNAL BD
	    DO I=0,1					!FORTRAN/C
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS  External initialisation:',
	1		CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	      LNAM=PARM(P_NAM)
	      IF (I.EQ.0) THEN				!FORTRAN
		CALL WNCAUC(LNAM)
		CALL WNCTXT(F(I),'      EXTERNAL !AS_BD',LNAM)
	      ELSE					!C
		CALL WNCALC(LNAM)
		CALL WNCTXT(F(I),'	extern !AS_bd_() ;',LNAM)
	      END IF
	    END DO					!FORTRAN/C
	  END IF
	  IF (IF.EQ.1 .OR. (IF.EQ.3 .AND. .NOT.DEFSN .AND.
	1		.NOT.(PARSN .AND. .NOT.BEGSN))) THEN !FORTRAN END
	    DO I=0,1					!FORTRAN/C
	      CALL WNCTXT(F(I),'!AS',CTXT(0,I,0))
	      CALL WNCTXT(F(I),'!AS  Given statements:',CTXT(0,I,1))
	      CALL WNCTXT(F(I),'!AS!79C!AS',CTXT(0,I,1),
	1		CTXT(1,I,0))
	      IF (I.EQ.0) THEN				!FORTRAN
	        DO I1=0,FEDES_J(WNTB_CNT_J)-1		!ALL LINES
		  I2=WNTIBR(FEDES,FMENTB,I1)		!READ LINE
		  CALL WNCTXT(F(I),'      !AD',
	1		FMENTB,MXSLIN)
		END DO
	      ELSE					!C
	        DO I1=0,CEDES_J(WNTB_CNT_J)-1		!ALL LINES
		  I2=WNTIBR(CEDES,FMENTB,I1)		!READ LINE
		  CALL WNCTXT(F(I),'      !AD',
	1		FMENTB,MXSLIN)
		END DO
	      END IF
	    END DO					!FORTRAN/C
	  END IF
	  IF (IF.EQ.2) THEN				!_BD
	    CALL WNCTXT(F(0),'!AS',CTXT(0,0,0))
	    CALL WNCTXT(F(0),'!AS',CTXT(0,0,0))
	    CALL WNCTXT(F(0),'      END',CTXT(0,0,0))
	  END IF
	  DO I=0,1					!TRAILER
	    CALL WNCTXT(F(I),'!AS-!79C!AS',
	1		CTXT(0,I,0),CTXT(1,I,0))
	    CALL WNCFCL(F(I))				!CLOSE OUTPUT
	    IF (F(I).NE.0)
	1	CALL WNCTXT(F_P,'!AS!20C\generated',FNAM(I))
	  END DO
 100	  CONTINUE
	END DO
C
C READY
C
 800	CONTINUE
C
	RETURN
C
C
	END

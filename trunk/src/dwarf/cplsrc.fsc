C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C.Ident:	CPL_SRC
C.Keywords:	Compiler Utility, Source File
C.Author:	Friso Olnon (NFRA, Dwingeloo)
C.Language:	DWARF-Fortran
C.Environment:	VAX or Alliant
C.Comments:
C		Common variables used:
C	INTEGER*4	CPL$SRCLUN	! (m) lun for open source file
C				(= -1 if not open)
C	CHARACTER*64	CPL$SRCNAME	! (m) full spec of last opened file
C				(= blank initially)
C	INTEGER*4	CPL$SRCLNR	! (m) nr of the last source line read
C				(= 0 if not open or just opened/rewinded
C	CHARACTER*255	CPL$SRCBUF	! (m) last source line read
C				(= blank if not open or just opened/rewinded
C	INTEGER*4	CPL$SRCLBUF	! (m) signif length of last line read
C				(= 0 if not open or just opened/rewinded
C	INTEGER*4	CPL$SRCPTR	! (m) next SRCBUF character to read
C				(= 0 if not open,
C				 = 1 if just opened/rewinded/backspaced/read,
C				 = SRCLBUF+1 for end-of-line)
C
C.Version:	900415 FMO - recreation
C.Version:	900502 FMO - new GEN_LUN module
C.Version:	920214 GvD - no optional arguments in MSG anymore
C.Version:	940119 CMV - use WNGLUN i.s.o GEN_LUN
C--------------------------------------------------------------------------
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_OPEN (FILESPEC)
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
	CHARACTER*(*)	FILESPEC	! (i) file specification
C
C.Purpose:	Open the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	fatal	CPL_SRCOPNERR	error report left in message buffer
C.Notes:
C--------------------------------------------------------------------------
C
	INTEGER*4	FILNAM_FULL, GEN_FORIOS
	INTEGER		MSG_SET
C
	INTEGER*4	IS, LN
C
C
	IF (CPL$SRCLUN.GE.0) GOTO 999
C
	IS = FILNAM_FULL (FILESPEC,CPL$SRCNAME,LN,' ')
	IF (IAND(IS,1).NE.0) CALL WNGLUN(CPL$SRCLUN)
	IF (CPL$SRCLUN.EQ.0) GOTO 999
C
	OPEN (UNIT=CPL$SRCLUN,FILE=CPL$SRCNAME(:LN),STATUS='OLD',
#ifdef wn_li__
	1					ERR=992)
#else
	1					READONLY,ERR=992)
#endif
	CPL$SRCBUF = ' '
	CPL$SRCLBUF = 0
	CPL$SRCLNR = 0
	CPL$SRCPTR = 1
C
	CPL_SRC_OPEN = CPL_SUCCESS
	RETURN
C
 992	IS = GEN_FORIOS (FILESPEC)
	CALL WNGLUF(CPL$SRCLUN)
	CPL$SRCLUN = -1
C
 999	CPL_SRC_OPEN = MSG_SET (CPL_SRCOPNERR,0)
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_CLOSE ()
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
C.Purpose:	Close the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS	also if the file is not open
C	error	CPL_SRCCLOERR	error report left in message buffer
C.Notes:
C--------------------------------------------------------------------------
C
	INTEGER		GEN_FORIOS, MSG_SET
C
	INTEGER*4	IS
C
C
	IF (CPL$SRCLUN.GE.0) THEN
		CLOSE (UNIT=CPL$SRCLUN,ERR=992)
		CALL WNGLUF(CPL$SRCLUN)
		CPL$SRCLUN = -1
		CPL$SRCBUF = ' '
		CPL$SRCLBUF = 0
		CPL$SRCLNR = 0
		CPL$SRCPTR = 0
	ENDIF
C
	CPL_SRC_CLOSE = CPL_SUCCESS
	RETURN
C
 992	IS = GEN_FORIOS (CPL$SRCNAME)
 999	CPL_SRC_CLOSE = MSG_SET (CPL_SRCCLOERR,0)
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_REWIND ()
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
C.Purpose:	Rewind the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	fatal	CPL_SRCREWERR	error report left in message buffer
C.Notes:
C--------------------------------------------------------------------------
C
C
	INTEGER		GEN_FORIOS, MSG_SET
C
	INTEGER*4	IS
C
C
	REWIND (UNIT=CPL$SRCLUN,ERR=999)
	CPL$SRCBUF = ' '
	CPL$SRCLBUF = 0
	CPL$SRCLNR = 0
	CPL$SRCPTR = 1
C
	CPL_SRC_REWIND = CPL_SUCCESS
	RETURN
C
 999	IS = GEN_FORIOS (CPL$SRCNAME)
	CPL_SRC_REWIND = MSG_SET (CPL_SRCREWERR,0)
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_BACKSP ()
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
C.Purpose:	Backspace the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C.Notes:
C--------------------------------------------------------------------------
C
C
	CPL$SRCPTR = 1
C
	CPL_SRC_BACKSP = CPL_SUCCESS
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_INQUIRE (FULLSPEC,LSPEC)
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
	CHARACTER*(*)	FULLSPEC	! (o) full file specification
	INTEGER*4	LSPEC		! (o) its significant length
C
C.Purpose:	Get the full specification of the source file last opened
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C.Notes:
C--------------------------------------------------------------------------
C
	INTEGER		WNCALN
C
C
	FULLSPEC = CPL$SRCNAME
	LSPEC = WNCALN (FULLSPEC)
C
	CPL_SRC_INQUIRE = CPL_SUCCESS
	RETURN
	END
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_READ ()
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
C.Purpose:	Read the next source line
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	info	CPL_SRCEOF	end of file reached
C	fatal	CPL_SRCRDERR	error report left in message buffer
C.Notes:
C	The source buffer is refilled and the status block is updated
C	accordingly.
C-------------------------------------------------------------------------
C
	INTEGER*4	MSG_SET, GEN_FORIOS, WNCAL0
C
	INTEGER*4	IS
C
C
C	READ (CPL$SRCLUN,'(Q,A)',ERR=999,END=900) CPL$SRCLBUF,CPL$SRCBUF
	CPL$SRCBUF=' '
	READ (CPL$SRCLUN,'(A)',ERR=999,END=900) CPL$SRCBUF
	CPL$SRCLNR = CPL$SRCLNR+1
	CPL$SRCLBUF = WNCAL0 (CPL$SRCBUF)
	CPL$SRCPTR = 1
C
	CPL_SRC_READ = CPL_SUCCESS
	RETURN
C
 900	CPL_SRC_READ = CPL_SRCEOF
	RETURN
C
 999	IS = GEN_FORIOS (CPL$SRCNAME)
	CPL_SRC_READ = MSG_SET (CPL_SRCRDERR,0)
	RETURN
	END
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_GETLINE (SRCLINE,LLINE,LINENR)
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
	CHARACTER*(*)	SRCLINE		! (o) source line
	INTEGER*4	LLINE		! (o) its significant length
	INTEGER*4	LINENR		! (o) nr of the line
C
C.Purpose:	Get a source line
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	info	CPL_SRCEOF	end of file (issued by CPL_SRC_READ)
C	false	status code returned by CPL_SRC_READ
C.Notes:
C	If the buffer is exhausted, the next source line will be read.
C	The next part of the buffer then is copied to SRCLINE.
C	Trailing blanks and tabs are ignored. SRCLINE will be blank-padded.
C	SRCLINE = ' ' and LLINE = 0 for Fortran I/O error or end-of-file.
C-------------------------------------------------------------------------
C
	INTEGER*4	CPL_SRC_READ
	INTEGER*4	STR_COPY, STR_SIGLEN
C
	INTEGER*4	IS
C
C
C					Initialize the output arguments
C
	SRCLINE = ' '
	LLINE = 0
	LINENR = CPL$SRCLNR
C
C					If the buffer is empty or exhausted,
C					fill it with the next source line
C
	IF (LINENR.EQ.0 .OR. CPL$SRCPTR.GT.CPL$SRCLBUF) THEN
		IS = CPL_SRC_READ ()
		IF (IS.NE.CPL_SUCCESS) GOTO 999
		LINENR = CPL$SRCLNR
	ENDIF
C
C					Copy the next part of the buffer
C					to SRCLINE and update the pointer
C
	IF (CPL$SRCPTR.LE.CPL$SRCLBUF) THEN
		IS = STR_COPY (CPL$SRCBUF(CPL$SRCPTR:CPL$SRCLBUF),SRCLINE,LLINE)
		CPL$SRCPTR = CPL$SRCPTR+LLINE
		LLINE = STR_SIGLEN (SRCLINE)
	ENDIF
C
	CPL_SRC_GETLINE = CPL_SUCCESS
	RETURN
C
 999	CPL_SRC_GETLINE = IS
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_GETKEY (KEYWORD,LKEY,LINENR)
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
	CHARACTER*(*)	KEYWORD		! (o) keyword (uppercase)
	INTEGER*4	LKEY		! (o) sign. length of keyword
	INTEGER*4	LINENR		! (o) nr of current source line
C
C.Purpose:	Get the next keyword from the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	info	CPL_SRCEOF	end of file (issued by CPL_SRC_READ)
C	false	status code returned by CPL_SRC_READ
C.Notes:
C	The keyword must be the first token in the current or next line.
C	Whites (blanks and tabs) and comments are skipped. The search continues
C	across line boundaries and ends at the first significant character.
C
C	The keyword ends before the first white, '!' or  '=', or at the line
C	end. Lowercase characters are converted to uppercase.
C
C	A blank keyword (LKEY = 0) is assumed to be found when the first
C	significant character found is an '='.
C-------------------------------------------------------------------------
C
	CHARACTER	BLANK*1, TAB*1, WHITE*2, EQUAL*1, EXCLAM*1
		PARAMETER (BLANK  = ' ')
		PARAMETER (EQUAL  = '=')
		PARAMETER (EXCLAM = '!')
C
	INTEGER*4	CPL_SRC_READ
	INTEGER*4	STR_COPY_U, STR_SKIP_W, STR_UPCASE
C
	INTEGER*4	IS
	LOGICAL*4	FOUND
C
C
C					Initialize the output arguments
C
	TAB    = CHAR(9)
	WHITE  = BLANK//TAB
C
	KEYWORD = BLANK
	LKEY = 0
	LINENR = CPL$SRCLNR
C
C					Start with a fresh source line
C
	IF (CPL$SRCPTR.NE.1 .OR. LINENR.EQ.0) THEN
		IS = CPL_SRC_READ ()
		IF (IS.NE.CPL_SUCCESS) GOTO 999
		LINENR = CPL$SRCLNR
	ENDIF
C
C					Skip to the start of the keyword
C					- skip white and comment lines
C					- skip leading whites
C
	FOUND = .FALSE.
	DO WHILE (.NOT.FOUND)
		IF (CPL$SRCLBUF.GT.0) THEN
			IS = STR_SKIP_W (WHITE,
	1			CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR)
			FOUND = CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).NE.EXCLAM
		ENDIF
		IF (.NOT.FOUND) THEN
			IS = CPL_SRC_READ ()
			IF (IS.NE.CPL_SUCCESS) GOTO 999
			LINENR = CPL$SRCLNR
		ENDIF
	ENDDO
C
C					Extract the keyword
C
	IS = STR_COPY_U (WHITE//EQUAL//EXCLAM,
	1		CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR,KEYWORD,LKEY)
	IF (LKEY.GT.0) IS = STR_UPCASE (KEYWORD(:LKEY))
C
	CPL_SRC_GETKEY = CPL_SUCCESS
	RETURN
C
 999	CPL_SRC_GETKEY = IS
	RETURN
	END
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	INTEGER*4 FUNCTION CPL_SRC_GETVAL (VALUE,LVAL,LINENR)
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'DWC_DEF'
	INCLUDE 'CPL_2_DEF'
C
	CHARACTER*(*)	VALUE		! (o) value
	INTEGER*4	LVAL		! (o) sign. length of value
	INTEGER*4	LINENR		! (o) nr of current source line
C
C.Purpose:	Get the next value from the source file
C.Returns:	Status code (.TRUE. for success, .FALSE. otherwise)
C	success	CPL_SUCCESS
C	info	CPL_SRCEOF	end of file (issued by CPL_SRC_READ)
C	false	status code returned by CPL_SRC_READ
C.Notes:
C	The search starts at the current position in the current source
C	line (i.e. after the keyword). Whites, continuation marks and
C	comments are skipped. The search continues across line boundaries,
C	independent of the use of continuation marks, and ends at the first
C	significant character.
C
C	QUOTED VALUE:
C
C	The value ends before the first quote that is the last significant
C	character on a line (i.e. only followed by whites or comment).
C
C	The value continues across line boundaries. If a line does not
C	end with a continuation mark a carriage-return/line-feed will
C	be inserted, otherwise the value just continues on the next line.
C
C	The opening and closing quotes are not part of the value: they
C	only indicate to the compiler that the value should be taken
C	literally. Inside the value, quotes can be used freely except that
C	a quote followed by (whites and) an exclamation mark will be
C	interpreted as an end-of-value.
C
C	UNQUOTED VALUE:
C
C	The value ends with the last significant character on the line,
C	unless that character is a continuation mark in which case the
C	value continues on the next line.
C
C	Tabs are converted to blanks, multiple blanks to a single blank,
C	and lowercase to uppercase characters.
C-------------------------------------------------------------------------
C
	CHARACTER*(*)	BLANK, EQUAL, EXCLAM, HYPHEN, QUOTE
	CHARACTER	TAB,WHITE,CRLF*2
		PARAMETER (BLANK  = ' ')
		PARAMETER (EQUAL  = '=')
		PARAMETER (EXCLAM = '!')
		PARAMETER (HYPHEN = '-')
		PARAMETER (QUOTE  = '"')
C
	INTEGER*4	CPL_SRC_READ
	INTEGER*4	STR_SKIP_W, STR_COPY, STR_COPY_U, STR_UPCASE
C
	INTEGER*4	IS, TMP
	LOGICAL*4	END_VAL, END_LINE
C
	TAB    = CHAR(9)
	WHITE  = BLANK//TAB
	CRLF   = CHAR(13)//CHAR(10)
C
C					Initialize the output arguments
C
	VALUE = ' '
	LVAL = 0
	LINENR = CPL$SRCLNR
C
C					Skip to the start of the value
C					- skip whites and comment
C					- if end-of-line: return null value
C
	IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR)
	END_LINE = CPL$SRCPTR.GT.CPL$SRCLBUF
	1	.OR. CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.EXCLAM
	IF (END_LINE) GOTO 900
C
C					- skip '=', whites and comment
C
	IF (CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.EQUAL) THEN
		CPL$SRCPTR = CPL$SRCPTR+1
		IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR)
		END_LINE = CPL$SRCPTR.GT.CPL$SRCLBUF
	1		.OR. CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.EXCLAM
	ENDIF
C
C					- skip continuation mark and comment
C
	IF (.NOT.END_LINE
	1	.AND. CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.HYPHEN) THEN
		TMP = CPL$SRCPTR+1
		IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),TMP)
		END_LINE = TMP.GT.CPL$SRCLBUF .OR. CPL$SRCBUF(TMP:TMP).EQ.EXCLAM
	ENDIF
C
C					- if end-of-line: continue with next
C					  line, skip whites, continuation
C					  marks, comments and end-of-lines
C
	DO WHILE (END_LINE)
		IS = CPL_SRC_READ ()
		IF (IS.NE.CPL_SUCCESS) GOTO 999
		LINENR = CPL$SRCLNR
		IF (CPL$SRCLBUF.GT.0) THEN
			IS = STR_SKIP_W (WHITE,
	1			CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR)
			END_LINE = CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.EXCLAM
		ENDIF
		IF (.NOT.END_LINE
	1		.AND. CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.HYPHEN) THEN
			TMP = CPL$SRCPTR+1			
			IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),TMP)
			END_LINE = TMP.GT.CPL$SRCLBUF
	1			.OR. CPL$SRCBUF(TMP:TMP).EQ.EXCLAM
		ENDIF
	ENDDO
C
C					Extract a quoted value
C					- skip starting quote
C					- copy across line boundaries
C					  until closing quote
C					- skip continuation marks
C					- insert a CRLF for every end-of-line
C					  not preceded by a continuation mark
C
	END_VAL = .FALSE.
	IF (CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.QUOTE) THEN
	    CPL$SRCPTR = CPL$SRCPTR+1
	    DO WHILE (.NOT.END_VAL)
		IS = STR_COPY_U (QUOTE//HYPHEN,
	1		CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR,VALUE,LVAL)
		END_LINE = CPL$SRCPTR.GT.CPL$SRCLBUF
		IF (END_LINE) THEN
			IS = STR_COPY (CRLF,VALUE,LVAL)
		ELSE IF (CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.QUOTE) THEN
			TMP = CPL$SRCPTR+1
			IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),TMP)
			END_VAL = TMP.GT.CPL$SRCLBUF
	1			.OR. CPL$SRCBUF(TMP:TMP).EQ.EXCLAM
			IF (.NOT.END_VAL) IS = STR_COPY (QUOTE,VALUE,LVAL)
			CPL$SRCPTR = CPL$SRCPTR+1
		ELSE						! hyphen
			TMP = CPL$SRCPTR+1
			IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),TMP)
			END_LINE = TMP.GT.CPL$SRCLBUF
	1			.OR. CPL$SRCBUF(TMP:TMP).EQ.EXCLAM
			IF (.NOT.END_LINE) IS = STR_COPY (HYPHEN,VALUE,LVAL)
			CPL$SRCPTR = CPL$SRCPTR+1
		ENDIF
		DO WHILE (END_LINE)
			IS = CPL_SRC_READ ()
			IF (IS.NE.CPL_SUCCESS) GOTO 999
			LINENR = CPL$SRCLNR
			END_LINE = CPL$SRCLBUF.EQ.0
			IF (END_LINE) IS = STR_COPY (CRLF,VALUE,LVAL)
		ENDDO
	    ENDDO
C
C					Extract an unquoted value
C					- copy until the first end-of-line or
C					  comment not preceded by a
C					  continuation mark
C					- skip continuation marks
C					- ignore white lines
C					- convert tabs to blanks, multiple
C					  blanks to single blanks, and
C					  lowercase to uppercase characters
C
	ELSE
	    DO WHILE (.NOT.END_VAL)
		IS = STR_COPY_U (WHITE//EXCLAM//HYPHEN,
	1		CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR,VALUE,LVAL)
		END_LINE = CPL$SRCPTR.GT.CPL$SRCLBUF
	1		.OR. CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.EXCLAM
		IF (END_LINE) THEN
			END_VAL = .TRUE.
		ELSE IF (CPL$SRCBUF(CPL$SRCPTR:CPL$SRCPTR).EQ.HYPHEN) THEN
			TMP = CPL$SRCPTR+1
			IS = STR_SKIP_W (WHITE,CPL$SRCBUF(:CPL$SRCLBUF),TMP)
			END_LINE = TMP.GT.CPL$SRCLBUF
	1			.OR. CPL$SRCBUF(TMP:TMP).EQ.EXCLAM
			IF (.NOT.END_LINE) IS = STR_COPY (HYPHEN,VALUE,LVAL)
			CPL$SRCPTR = CPL$SRCPTR+1
		ELSE						! white
			IF (VALUE(LVAL:LVAL).NE.BLANK) THEN
				IS = STR_COPY (BLANK,VALUE,LVAL)
			ENDIF
			IS = STR_SKIP_W (WHITE,
	1			CPL$SRCBUF(:CPL$SRCLBUF),CPL$SRCPTR)
		ENDIF
		DO WHILE (.NOT.END_VAL .AND. END_LINE)
			IS = CPL_SRC_READ ()
			IF (IS.NE.CPL_SUCCESS) GOTO 999
			LINENR = CPL$SRCLNR
			END_LINE = CPL$SRCLBUF.EQ.0
		ENDDO
	    ENDDO
	    IF (VALUE(LVAL:LVAL).EQ.BLANK) LVAL = LVAL-1
	    IF (LVAL.GT.0) IS = STR_UPCASE (VALUE(:LVAL))
	ENDIF
C
 900	CPL_SRC_GETVAL = CPL_SUCCESS
	RETURN
C
 999	CPL_SRC_GETVAL = IS
	RETURN
	END

























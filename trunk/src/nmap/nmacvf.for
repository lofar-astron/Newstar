C+ NMACVF.FOR
C  WNB 910304
C
C  Revisions:
C
	SUBROUTINE NMACVF(N,CVLTP,CVSTP,FTSZ,OUTSZ,TAB,TABU,TABV)
C
C  Calculate convolution function
C
C  Result:
C
C	CALL NMACVF ( N_J:I, CVLTP_J:I, CVSTP_J:I, FTSZ_J(0:1):I,
C				OUTSZ_J(0:1), TAB_E(0:*):O, TABU_E(0:*):O,
C				TABV_E(0:*):O,)
C				Calculate convolution function in TAB,
C				and the convolution correction functions
C				in TABU and TABV respectively. TAB will be N
C				points long, TABU and V resp. OUTSZ(0) and (1).
C				CVLTP is the type of function, CVLSTP the
C				interval.
C
C
C  PIN references:
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER N			!NUMBER OF POINTS IN TABLE
	REAL TAB(0:*)			!CONVOLUTION FUNCTION TABLE
	REAL TABU(0:*)			!U CORRECTION TABLE
	REAL TABV(0:*)			!V CORRECTION TABLE
	INTEGER CVLTP			!CONVOLUTION TYPE
	INTEGER CVSTP			!CONVOLUTION STEP
	INTEGER FTSZ(0:1)		!FFT SIZE
	INTEGER OUTSZ(0:1)		!OUTPUT SIZE
C
C  Function references:
C
C
C  Data declarations:
C
	REAL SN,CS,DSN,DCS			!SIN/COS VALUES FT
	REAL P1,P2,P3				!PARAMETERS
	REAL R2
C-
C
C CONSTANT
C
	IF (CVLTP.LT.1 .OR. CVLTP.GT.5) THEN
	  DO I=0,N-1
	    TAB(I)=1
	  END DO
C
	  DO I=0,OUTSZ(0)/2
	    TABU(I)=1
	  END DO
	  DO I=0,OUTSZ(1)/2
	    TABV(I)=1
	  END DO
C
C INIT
C
	ELSE
	  DO I=0,OUTSZ(0)/2			!EMPTY RESULT U
	    TABU(I)=0
	  END DO
	  DO I=0,OUTSZ(1)/2			!EMPTY RESULT V
	    TABV(I)=0
	  END DO
C
C GAUSSIAN
C
	  IF (CVLTP.EQ.1) THEN
	    P1=SQRT(-.25*PI*PI/LOG(.25))/CVSTP	!PARAMETER
C
C BOX
C
C
C PROLATE 4*4
C
	  ELSE IF (CVLTP.EQ.3) THEN
	    P1=1./(2.*CVSTP)
C
C EXP*SINC
C
	  ELSE IF (CVLTP.EQ.4) THEN
	    P1=PI/1.55/CVSTP			!PARAMETERS
	    P2=1./2.52/CVSTP
	    P3=2.
C
C PROLATE 6*6
C
	  ELSE IF (CVLTP.EQ.5) THEN
	    P1=1./(3.*CVSTP)
	  END IF
C
C DETERMINE CORRECTION FUNCTION
C
	  DO I1=0,N-1
C
C GAUSS
C
	    IF (CVLTP.EQ.1) THEN
	      R1=EXP(-((P1*I1)**2))		!VALUE
C
C BOX
C
	    ELSE IF (CVLTP.EQ.2) THEN
	      IF (I1.LT.CVSTP/2) THEN
	        R1=1
	      ELSE IF (I1.EQ.CVSTP/2) THEN
	        R1=.5
	      ELSE
	        R1=0
	      END IF
C
C PROLATE 4*4
C
	    ELSE IF (CVLTP.EQ.3) THEN
	      R2=I1*P1
	      IF (R2.LE.1.) THEN
	        R0=R2*R2-1.
	        R1=(((((2.853104E-2*R0-1.215569E-1)*R0+2.363775E-1)*R0-
	1		1.971357E-1)*R0+5.007900E-2)/
	2		((6.458640E-2*R0+4.228767E-1)*R0+1))*(1-R2*R2)
	      ELSE
	        R1=0
	      END IF
C
C EXP*SINC
C
	    ELSE IF (CVLTP.EQ.4) THEN
	      IF (I1.EQ.0) THEN
	        R1=1
	      ELSE
	        R1=(SIN(P1*I1)/(P1*I1))*EXP(-((P2*I1)**P3))
	      END IF
C
C PROLATE 6*6
C
	    ELSE IF (CVLTP.EQ.5) THEN
	      R2=I1*P1
	      IF (R2.GT.1.) THEN
	        R1=0
	      ELSE IF (R2.LE.0.75) THEN
	        R0=R2*R2-.5625
	        R1=(((((2.312756E-1*R0-5.335581E-1)*R0+6.278660E-1)*R0-
	1			3.644705E-1)*R0+8.203343E-2)/
	2			((2.078043E-1*R0+8.212018E-1)*R0+1))*(1-R2*R2)
	      ELSE
	        R0=R2*R2-1.
	        R1=(((((6.412774E-2*R0-1.201436E-1)*R0+1.021332E-1)*R0-
	1			3.697768E-2)*R0+4.028559E-3)/
	2			((2.918724E-1*R0+9.599102E-1)*R0+1))*(1-R2*R2)
	      END IF
	    END IF
C
C CONVOLUTION VALUE
C
	    TAB(I1)=R1				!SAVE VALUE
	    IF (I1.EQ.0) R1=.5*R1		!CENTRE VALUE
	    CS=1				!START COS/SIN
	    SN=0
	    DSN=PI2*I1/FLOAT(CVSTP)/FLOAT(FTSZ(0)) !STEP COS/SIN U
	    DCS=COS(DSN)
	    DSN=SIN(DSN)
	    DO I=0,OUTSZ(0)/2			!ADD TO ALL CORRECTION U
	      TABU(I)=TABU(I)+R1*CS
	      R0=CS*DCS-SN*DSN			!NEW COS/SIN
	      SN=SN*DCS+CS*DSN
	      CS=R0
	    END DO
	    CS=1				!START COS/SIN
	    SN=0
	    DSN=PI2*I1/FLOAT(CVSTP)/FLOAT(FTSZ(1)) !STEP COS/SIN V
	    DCS=COS(DSN)
	    DSN=SIN(DSN)
	    DO I=0,OUTSZ(1)/2			!ADD TO ALL CORRECTION V
	      TABV(I)=TABV(I)+R1*CS
	      R0=CS*DCS-SN*DSN			!NEW COS/SIN
	      SN=SN*DCS+CS*DSN
	      CS=R0
	    END DO
	  END DO
C
C GET CORRECTION FUNCTION
C
	  R0=TABU(0)
	  DO I=0,OUTSZ(0)/2			!NORMALIZE U
	    IF (TABU(I).NE.0) TABU(I)=R0/TABU(I)
	  END DO
	  R0=TABV(0)
	  DO I=0,OUTSZ(1)/2			!NORMALIZE V
	    IF (TABV(I).NE.0) TABV(I)=R0/TABV(I)
	  END DO
	END IF
C
	RETURN
C
C
	END

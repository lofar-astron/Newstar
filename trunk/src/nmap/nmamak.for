C+ NMAMAK.FOR
C  WNB 910305
C
C  Revisions:
C	WNB 910913	Change loops
C	WNB 921202	Add data clean (NMAMAC)
C	CMV 931216	Change grouping for loops
C	CMV 931216	Again change grouping (did not check on SCN-group)
C
	SUBROUTINE NMAMAK
C
C  Make maps
C
C  Result:
C
C	CALL NMAMAK	will make all maps asked
C	CALL NMAMAC ( CMHP_J:I, CMPNAM_J(0:7):I)
C			will make a cleaned map overwriting map pointed
C			to by CMHP with name CMPNAM
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'GFH_O_DEF'		!GENERAL FILE HEADER
	INCLUDE 'SGH_O_DEF'		!SUB-GROUP HEADER
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER CMHP			!CLEAN MAP HEADER POINTER
	INTEGER CMPNAM(0:7)		!CLEAN MAP SET NAME
C
C  Function references:
C
	LOGICAL WNDLNG,WNDLNF		!LINK SUB-GROUP
	LOGICAL WNDXLN			!NEXT LOOP VALUE
C
C  Data declarations:
C
	INTEGER FCATMP			!SORT FILE
	INTEGER FCACVL			!CONVOLUTION OUTPUT FILE
	LOGICAL SOAP,SOCV,SAP		!SAVE AP OPTIONS
	LOGICAL LCL			!CLEAN SWITCH
	INTEGER LPCHK(0:7)		!CHECK OFFSETS
	INTEGER EQCHK(0:7)		!MORE CHECK OFFSETS
C-
C
C NMAMAK
C
	LCL=.FALSE.				!NOT CLEAN
	GOTO 100
C
C NMAMAC
C
	ENTRY NMAMAC(CMHP,CMPNAM)
C
	LCL=.TRUE.
	SGPH(5)=CMHP				!SAVE MAP HEADER
	GOTO 100
C
C INIT
C
 100	CONTINUE
	CALL WNDXLI(LPOFF)			!INIT LOOP OFFSETS
	DO I=0,7				!OFFSET CHECKS
	  LPCHK(I)=0
	  EQCHK(I)=0
	END DO
C
C ALL OUTPUTS
C
	IF (.NOT.LCL) THEN			!NORMAL
	  DO WHILE (WNDXLN(LPOFF))		!LOOP
	    IF (.NOT.DODFT) THEN		!FIND LINKS
	      IF ( (LPOFF(1).LT.LPCHK(1) .AND.
	1	    LPOFF(2).LT.LPCHK(2) .AND.
	1	    LPOFF(3).LT.LPCHK(3)) .OR.
	1	   (LPOFF(1).EQ.LPCHK(1) .AND.
	1	    LPOFF(1).EQ.EQCHK(1) .AND.
	1	    LPOFF(2).EQ.LPCHK(2) .AND.
	1	    LPOFF(2).EQ.EQCHK(2) .AND.
	1	    LPOFF(3).EQ.LPCHK(3) .AND.
	1	    LPOFF(3).EQ.EQCHK(3))) THEN !NEW JOB
	        IF (.NOT.WNDLNG(GFH_LINKG_1,0,SGH_GROUPN_1,
	1			FCAOUT,SGPH(0),SGNR(0))) THEN !CREATE JOB
 10	          CONTINUE
	          CALL WNCTXT(F_TP,'!/Cannot create map header linkage')
	          CALL WNGEX			!STOP PROGRAM
	        END IF
	      END IF
C
	      DO I=1,3				!NEW CHECK
	        LPCHK(I)=MAX(LPCHK(I),LPOFF(I))
	      END DO
	      IF (LPOFF(1).EQ.LPCHK(1).AND.
	1	  LPOFF(2).EQ.LPCHK(2).AND.
	1	  LPOFF(3).EQ.LPCHK(3)) THEN
		EQCHK(1)=LPOFF(1)
		EQCHK(2)=LPOFF(2)
		EQCHK(3)=LPOFF(3)
	      END IF
C
	      IF (.NOT.WNDLNF(SGPH(0)+SGH_LINKG_1,LPOFF(2),
	1			SGH_GROUPN_1,FCAOUT,
	1			SGPH(1),SGNR(1))) GOTO 10 !CREATE FIELD
	      IF (.NOT.WNDLNF(SGPH(1)+SGH_LINKG_1,LPOFF(3),
	1			SGH_GROUPN_1,FCAOUT,
	1			SGPH(2),SGNR(2))) GOTO 10 !CREATE CHANNEL
	    END IF
C
C SORT DATA
C
	    CALL WNCTXT(F_TP,' ')
	    IF (DODFT) THEN
	      CALL WNCCSX(F_TP,'DFTing')	!STATISTICS
	    ELSE
	      CALL WNCCSX(F_TP,'Sorting')	!STATISTICS
	    END IF
	    CALL NMASOR(FCATMP)			!SORT/DFT DATA
	    IF (CNTJVL(4).LE.0) THEN		!NO DATA FOUND
	      CALL WNCTXT(F_TP,'No data found')
C
C CONVOLVE DATA
C
	    ELSE IF (.NOT.DODFT) THEN
	      IF (UWGT.EQ.2) THEN		!UNIFORM WEIGHT
	        CALL WNCCSX(F_TP,'Uniforming')
	        CALL NMAUNI(FCATMP,A_B(BINADM-A_OB)) !FULL UNIFORM
	      END IF
	      SOAP=OUTOPT(2)			!SAVE AP OUTPUT OPTION
	      SOCV=OUTOPT(3)			!SAVE COVER OUTPUT OPTION
	      SAP=MAKAP				!SAVE AP MAKING
	      DO I2=0,NPOL-1			!ALL POLARISATIONS
	        IF (.NOT.WNDLNG(SGPH(2)+SGH_LINKG_1,0,
	1			SGH_GROUPN_1,FCAOUT,
	1			SGPH(3),SGNR(3))) GOTO 10 !CREATE POLAR.
	        CALL WNCCSX(F_TP,'Convolving')	!STATISTICS
	        CALL NMACVL(FCATMP,FCACVL,A_B(BINADM-A_OB),I2) !CONVOLVE DATA
C
C TRANSPOSE DATA
C
	        CALL WNCCSX(F_TP,'Transposing')	!STATISTICS
	        CALL NMATRP(FCACVL,I2,A_B(DECVB(0)-A_OB),
	1			A_B(DECVB(1)-A_OB)) !TRANSPOSE AND OUTPUT
C
C NEXT POLARISATION
C
	        OUTOPT(2)=.FALSE.		!MAKE ONLY ONE AP PER POL. SET
	        OUTOPT(3)=.FALSE.
	        MAKAP=.FALSE.
	        CALL WNFCL(FCACVL)		!CLOSE AND DELETE CONVOLVED DATA
	      END DO
	      OUTOPT(2)=SOAP			!RESTORE AP OUTPUT OPTION
	      OUTOPT(3)=SOCV			!RESTORE COVER OUTPUT OPTION
	      MAKAP=SAP				!RESTORE AP MAKING
	      CALL WNFCL(FCATMP)		!CLOSE AND DELETE SORTED DATA
	      CALL WNGFVM(4*(L_J/L_B)*NBIN,BINADM) !RELEASE ADMINISTRATION
	    END IF
C
C NEXT LOOP
C
	  END DO				!MORE
C
C CLEAN MAP
C
	ELSE
	  DO I=0,7				!SET LINKS
	    SGNR(I)=CMPNAM(I)
	  END DO
C
C SORT DATA
C
	  CALL WNCTXT(F_TP,' ')
	  CALL WNCCSX(F_TP,'Sorting')		!STATISTICS
	  CALL NMASOR(FCATMP)			!SORT/DFT DATA
	  IF (CNTJVL(4).LE.0) THEN		!NO DATA FOUND
	    CALL WNCTXT(F_TP,'No data found')
C
C CONVOLVE DATA
C
	  ELSE
	    IF (UWGT.EQ.2) THEN			!UNIFORM WEIGHT
	      CALL WNCCSX(F_TP,'Uniforming')
	      CALL NMAUNI(FCATMP,A_B(BINADM-A_OB)) !FULL UNIFORM
	    END IF
	    SOAP=OUTOPT(2)			!SAVE AP OUTPUT OPTION
	    SOCV=OUTOPT(3)			!SAVE COVER OUTPUT OPTION
	    SAP=MAKAP				!SAVE AP MAKING
	    CALL WNCCSX(F_TP,'Convolving')	!STATISTICS
	    CALL NMACVL(FCATMP,FCACVL,A_B(BINADM-A_OB),I2) !CONVOLVE DATA
C
C TRANSPOSE DATA
C
	    CALL WNCCSX(F_TP,'Transposing')	!STATISTICS
	    CALL NMATRP(FCACVL,I2,A_B(DECVB(0)-A_OB),
	1			A_B(DECVB(1)-A_OB)) !TRANSPOSE AND OUTPUT
C
C NEXT POLARISATION
C
	    CALL WNFCL(FCATMP)			!CLOSE AND DELETE SORTED DATA
	    CALL WNGFVM(4*(L_J/L_B)*NBIN,BINADM) !RELEASE ADMINISTRATION
	  END IF
	END IF
C
C READY
C
 21	CONTINUE
	IF (.NOT.LCL) THEN
	  CALL WNFCL(FCAOUT)			!CLOSE OUTPUT
	  CALL WNCTXT(F_TP,' ')
	  CALL WNCCSX(F_TP,'End')		!STATISTICS
	END IF
C
	RETURN					!READY
C
C
	END

C NMAMKP.FOR
C  WNB 950809
C
C  Revisions:
C       WNB 950917	Add more buffers; change convolution
C
	SUBROUTINE NMAMKP(STH,BASEL,CMOD,CDAT,APDAT,FTBUF,FTW,FTBE,FTBJ,
	1   UV0,UV,NOTPT)
C
C  Convert a scan to Polarisation intensity
C
C  Result:
C
C	CALL NMAMKP ( STH_B(0:*), BASEL_E(0:*):I, CMOD_X(0:3,0:*):I,
C			CDAT_X(0:*,0:3):O, APDAT_E(0:*):O,
C       		FTBUF_X(0:*,0:1):IO, FTW_E(0:*):IO,
C      			FTBE_E(0:1,0:*):IO, FTBJ(0:*):IO, UV0_E(0:1):I,
C			UV_E(0:1,0:*):O, NOTPT_J:O)
C
C			Convert the scan data in CDAT with weights APDAT
C			to polarised intensity in BUFFERS.
C			FTBUF, FTBE, FTBE and FTW are FT help buffers.
C			NOTPT is the number of output points
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	BYTE STH(0:*)			! SET HEADER
	REAL BASEL(0:*)			! BASELINES in metres
	COMPLEX CMOD(0:3,0:STHIFR-1)	! INPUT DATA
	COMPLEX CDAT(0:STHIFR-1,0:3)	! INPUT DATA
	REAL APDAT(0:*)			! DATA WEIGHT
	COMPLEX C0,C1
	COMPLEX FTBUF(0:NPTRF-1,0:1) 	!FT BUFFER (U,V)
	REAL FTW(0:NPTRF-1)		!FT WEIGHT BUFFER
					!(FORWARD/REVERSE)
	REAL FTBE(0:1,0:NPTRF-1)	!U,V BUFFER
	INTEGER FTBJ(0:NPTRF-1)		!COUNT BUFFER
	REAL UV0(0:1)			!STANDARD UV
	REAL UV(0:1,0:*)		!UV
	INTEGER NOTPT			!# OF OUTPUT POINTS
C
C  Function references:
C
	INTEGER WNGGJ			!GET VALUE
C
C  Data declarations:
C
	INTEGER NIFR			! # OF INTERFEROMETERS
C-
C
C INIT
C
	NIFR=WNGGJ(STH(STH_NIFR_1))		! # OF IFRS
	CALL WNGMVZ(NPTRF*2*LB_X,FTBUF)		!CLEAR DATA
	CALL WNGMVZ(NPTRF*2*LB_E,FTBE)		!CLEAR U,V
	CALL WNGMVZ(NPTRF*LB_J,FTBJ)		!CLEAR COUNT
	CALL WNGMVZ(NPTRF*LB_E,FTW)		!CLEAR WEIGHT
C
C CONVOLVE SCAN
C
	DO I=NIFR-1,0,-1
	  IF (APDAT(I).NE.0) THEN		!PRESENT
	    R0=APDAT(I)*APDAT(I)		!WEIGHT
	    IF (POLTJ(-1,0).EQ.1) THEN		!ZERO OFFSET
	      DO I1=0,1				!Q,U
		FTBUF(0,I1)=FTBUF(0,I1)+2*R0*CDAT(I,I1)*
	1	    CONJG(CDAT(I,I1))
	      END DO
	      FTBJ(0)=FTBJ(0)+1			!COUNT
	      FTW(0)=FTW(0)+2*R0		!WEIGHT
	    END IF
	    DO I1=I-1,0,-1			!POSITIVE SIDE
	      IF (APDAT(I1).NE.0) THEN
		R0=APDAT(I)*APDAT(I1)		!WEIGHT
		J0=NINT((BASEL(I)-BASEL(I1))/BSTEP) !POINTER
		DO I2=0,1			!Q,U
		  FTBUF(J0,I2)=FTBUF(J0,I2)+2*R0*CDAT(I,I2)*
	1	      CONJG(CDAT(I1,I2))
		END DO
		FTBJ(J0)=FTBJ(J0)+1		!COUNT
		FTW(J0)=FTW(J0)+2*R0		!WEIGHT
		DO I2=0,1
		  FTBE(I2,J0)=FTBE(I2,J0)+UV(I2,I)-UV(I2,I1) !U,V
		END DO
	      END IF
	    END DO
	    DO I1=0,I-1				!NEGATIVE SIDE
	      IF (APDAT(I1).NE.0) THEN
		R0=APDAT(I)*APDAT(I1)		!WEIGHT
		J0=NINT((BASEL(I)+BASEL(I1))/BSTEP) !POINTER
		DO I2=0,1			!Q,U
		  FTBUF(J0,I2)=FTBUF(J0,I2)+2*R0*CDAT(I,I2)*
	1	      CDAT(I1,I2)
		END DO
		FTBJ(J0)=FTBJ(J0)+1		!COUNT
		FTW(J0)=FTW(J0)+2*R0		!WEIGHT
		DO I2=0,1
		  FTBE(I2,J0)=FTBE(I2,J0)+UV(I2,I)+UV(I2,I1) !U,V
		END DO
	      END IF
	    END DO
	    R0=APDAT(I)*APDAT(I1)		!WEIGHT LAST POINT
	    J0=NINT((BASEL(I)+BASEL(I))/BSTEP)	!POINTER
	    DO I2=0,1				!Q,U
	      FTBUF(J0,I2)=FTBUF(J0,I2)+R0*CDAT(I,I2)*
	1	      CDAT(I,I2)
	    END DO
	    FTBJ(J0)=FTBJ(J0)+1			!COUNT
	    FTW(J0)=FTW(J0)+R0			!WEIGHT
	    DO I2=0,1
	      FTBE(I2,J0)=FTBE(I2,J0)+UV(I2,I)+UV(I2,I) !U,V
	    END DO
	  END IF
	END DO
	J0=0					!OUTPUT POINTER
	DO I=0,NPTRF-1				!NORMALISE
	  IF (FTW(I).NE.0) THEN
	    FTBUF(J0,0)=(FTBUF(I,0)+FTBUF(I,1))/FTW(I) !DATA
	    DO I1=0,1				!U,V
	      FTBE(I1,J0)=FTBE(I1,I)/FTBJ(I)	!AVERAGE U,V
	    END DO
	    FTW(J0)=FTW(I)			!WEIGHT
	    J0=J0+1				!COUNT POINTS
	  END IF
	END DO
	NOTPT=J0					!RETURN POINT COUNT
CC	DO I=1,NPTRF/2-1			!FILL OTHER HALF
CCC	  DO I1=0,1				!Q,U
CC	    FTBUF(NPTRF-I,I1)=CONJG(FTBUF(I,I1))
CC	  END DO
CC	END DO
CC	DO I1=0,1
CC	  CALL WNMFTC(NPTRF,FTBUF(0,I1),FTW(0,0)) !TRANSFORM U,V
CC	END DO
C
C MAKE P
C
CC	DO I=0,NPTRF-1
CC	  FLB(2*I)=SQRT(FTBUF(I,0)**2+FTBUF(I,1)**2)
CC	  FLB(2*I+1)=0
CC	  R0=PI*I/REAL(NPTRF)
CC	  FLBW(I)=CMPLX(COS(R0),-SIN(R0))
CC	END DO
CCCC	DO I=NPTRF/4,NPTRF/2-1
CCCC	  FTBUF(I,0)=0
CCCC	  FTBUF(NPTRF-I,0)=0
CCCC	END DO
CCC
CCC TRANSFORM BACK
CCC
CCCC	CALL WNMFTC(NPTRF,FTBUF(0,0),FTW(0,1)) 	!TRANSFORM P
CC	CALL WNMFTC(2*NPTRF,FLB(0),FLBW(0)) 	!TRANSFORM P
CC	DO I=0,NIFR-1				!ALL DATA
CC	  IF (APDAT(I).NE.0) THEN
CC	    I1=NINT(BASEL(I)/BSTEP)		!FT BIN
CCCC	    cdat(i,0)=0
CCCC	    do i2=0,nptrf-1
CCCC	      r0=pi2*i1*i2/real(nptrf)
CCCC	      cdat(i,0)=cdat(i,0)+ftbuf(i2,0)*cmplx(cos(r0),-sin(r0))
CCCC	    end do
CCCC	    CDAT(I,0)=FTBUF(I1,0)/APDAT(I)
CC	    CDAT(I,0)=FLB(I1)/APDAT(I)
CC	  END IF
CC	END DO
C
C READY
C
 900	CONTINUE
C
	RETURN
C
C
	END

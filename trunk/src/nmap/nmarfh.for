C+ NMARFH.FOR
C  HjV 940714
C
C  Revisions:
C	CMV 940926	Use both SCAL and OFF, variable length headers
C       CMV 950116      Initialise return value
C	CMV 951221	Catch any decoding errors, report but ignore
C	CMV 010101	Decode dates in yyyy-mm-dd as well
C
	LOGICAL FUNCTION NMARFH(FBFLEN, FBUF, LFBUF,TP,OLABEL,
	1		MPH,MPHI,MPHJ,MPHE,MPHD,
	2    		SCAL,OFF,NRCUB,NRDPTS,RPI,JJ2,FCATAP)	!GET HEADER
C
C  Read FITS map header
C
C  Result:
C
C	CALL NMARFH( FBFLEN_J:I, FBUF_C(FBFLEN):O, LFBUF_B(FBFLEN):O,
C			TP_J:I,  OLABEL_J:I,
C			MPH_B(0:*):I, MPHI_I(0:*):I,
C			MPHJ_J(0:*):I, MPHE_E(0:*):I, MPHD_D(0:*):I,
C			SCAL_E:O,OFF_E:ONRCUB_J:O,NRDPTS_J:O,RPI_E:O,
C			JJ2_J:O)
C				Read FITS header of type TP (16 or 32) 
C				from MPH map header in FBUF=lFBUF (with
C				length of buffers FBFLEN),
C				and return SCALe, # of cubics, # of datapoints,
C				Ref. Pixel INDEX (Hor. and Vert.)
C				OLABEL is current label.
C				JJ2 is the offset on the tape at FCATAP
C				(should be zero at entry).
C
C  PIN references:
C
C	COMMENT		Comment line(s)
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FBFLEN
	CHARACTER*(*) FBUF		!FITS BUFFER
	  BYTE LFBUF(0:FBFLEN-1)	! Equivalenced in calling routine
	INTEGER TP			!HEADER TYPE (16 OR 32)
	INTEGER OLABEL			!OUTPUT LABEL
	BYTE MPH(0:*)			!MPH MAP HEADER
	INTEGER*2 MPHI(0:*)
	INTEGER MPHJ(0:*)
	REAL MPHE(0:*)
	DOUBLE PRECISION MPHD(0:*)
	INTEGER CNF			!SIMULTANEOUS INPUT MAPS
	REAL SCAL,OFF			!DATA SCALE and OFFSET
	INTEGER NRCUB			!# OF CUBICS
	INTEGER NRDPTS			!# OF DATAPOINTS
	REAL RPI(0:1)			!REFERENCE PIXEL INDEX (HOR,VERT)
	INTEGER JJ2			!Pointer on input tape
	INTEGER FCATAP			!Input tape
C
C  Function references:
C
	LOGICAL WNDPAR			!GET USER DATA
	INTEGER STR_MATCH		!COMPARE STRINGS
	LOGICAL WNFRD			!READ DATA
C
C  Data declarations:
C
	LOGICAL END_FOUND		!FOUND END-RECORD?
	REAL UNIT			!SCALE OUTPUT (200 OR 1)
	INTEGER BITPIX			!HEADER TYPE (16 OR 32)
	REAL BSCALE			!DATA SCALE
	REAL BZERO			!
	CHARACTER*8 BUNIT		!
	CHARACTER*4 MAPTYP		!MAP TYPE
	CHARACTER*2 POLCOD		!POLARISATION CODE
	CHARACTER*8 DATE		!DATE FITS-TAPE MADE
	CHARACTER*10 TMP		!TMP FOR DATE-OBS
	CHARACTER*64 ORIGIN		!WHO MADE THIS FITS-TAPE
	REAL EPOCH			!EPOCHE OF MAP
	CHARACTER*12 INSTRUME		!
	CHARACTER*12 OBJECT		!FIELDNAME
	REAL DATE_OBS			!OBSERVATION DATE
	DOUBLE PRECISION BANDW			!TOTAL BANDWIDTH OF OBS(HERTZ)
	REAL VEL			!CENTRE VELOCITY (M/S)
	CHARACTER*12 VELCODE		!VELOCITY CODE
	REAL VELR			!REFERENCE VELOCITY (M/S)
	DOUBLE PRECISION FREQR		!REFERENCE FREQUENCY (HERTZ)
	DOUBLE PRECISION FREQ0		!REST FREQUENCY (HERTZ)
	DOUBLE PRECISION PCRA		!POINTING CENTRE R.A. (DEG)
	DOUBLE PRECISION PCDEC		!POINTING CENTRE DEC (DEG)
	INTEGER NBLANK			!# OF UNDEFINED VALUES
	CHARACTER*11 BLGRAD		!TAPER TYPE
	CHARACTER*11 UVGRID		!CONVOLUTION TYPE
	INTEGER*2 CORGRID		!CORRECT FOR CONVOLUTION
	INTEGER*2 CLIP			!CLIPPING DONE
	INTEGER*2 SUBTR			!SOURCE SUBTRACTION
	CHARACTER*11 DATTYP		!DATA TYPE
	CHARACTER*11 UVCDT		!UV COORDINATE TYPE
	INTEGER*2 DEBEAM		!DE-BEAM COUNT
	REAL DATAMAX			!MAX. INTENSITY
	REAL DATAMIN			!MIN. INTENSITY
	INTEGER NINTF			!TOTAL INTERFEROMETERS
	INTEGER NFREQ			!TOTAL # OF FREQUNECY POINTS
	REAL NOISE			!NOISE IN MAP
	DOUBLE PRECISION NORM		!NORM. FACTOR IN FFT
	INTEGER FFTRA			!FFT SIZE IN R.A.
	INTEGER FFTDEC		!FFT SIZE IN DEC.
	CHARACTER*70 COMMENT		!USERS COMMENT
	INTEGER NST			!# OF SETS IN MAP
	INTEGER NPT			!# OF INPUT  DATA POINTS
	INTEGER SETN			!# OF SET
	INTEGER*2 PCD			!PROGRAM CODE
	INTEGER UNKNOWN			!UNKNOWN LINES
	INTEGER NAXIS			!# OF AXIS
	INTEGER AXIS(8)			!
	DOUBLE PRECISION CRVAL(8)	!
	DOUBLE PRECISION CRPIX(8)	!
	DOUBLE PRECISION CDELT(8)	!
	DOUBLE PRECISION CRESL(8)	!
	CHARACTER*8 CTYPE(8)		!DESCRIPTION 
C
	INTEGER ML(12)			!LENGTH OF MONTHS, FORGET LEAPYEAR
	 DATA ML/31,28,31,30,31,30,31,31,30,31,30,31/
C
C INITIALIZE
C
	 NMARFH=.TRUE.                   !ASSUME SUCCESS
	BITPIX=-1
	NAXIS=-1
	DO I=1,8
	  AXIS(I)=0
	  CRPIX(I)=0.0
	  CRVAL(I)=0.0
	  CRESL(I)=0.0
	  CTYPE(I)=' '
	END DO
	BSCALE=0.0
	BZERO=0.0
	BUNIT=' '
	MAPTYP='MAP'
	POLCOD='I'
	DATE=' '
	ORIGIN=' '
	EPOCH=0.0
	INSTRUME=' '
	OBJECT=' '
	BANDW=0.0
	VEL=0.0
	VELCODE='UNKNOWN'
	VELR=0.0
	FREQR=0.0
	FREQ0=0.0
	PCRA=0.0
	PCDEC=0.0
	NBLANK=-1
	BLGRAD='NATURAL'
	UVGRID='GAUSSIAN'
	CORGRID=-1
	CLIP=-1
	SUBTR=-1
	DATTYP='MAP'
	UVCDT='NORMAL'
	DEBEAM=0
	DATAMAX=0.0
	DATAMIN=0.0
	NINTF=0
	NFREQ=0
	NOISE=0.0
	NORM=0.0
	FFTRA=0
	FFTDEC=0
	OLABEL=0
	NPT=-1
	NST=-1
	SETN=-1
	PCD=-1
	COMMENT=' '
C
C REQUIRED HEADER PARAMETERS
C
	END_FOUND=.FALSE.
	DO WHILE (.NOT.END_FOUND)
C
C READ NEXT BUFFER
C
	  IF (.NOT.WNFRD(FCATAP,FBFLEN,LFBUF,JJ2)) THEN !READ FITS HEADER
	    CALL WNCTXT(F_TP,'Error reading FITS header')
	    NMARFH=.FALSE.				!INDICATE ERROR
	    RETURN					!AND EXIT
	  END IF
	  JJ2=JJ2+FBFLEN
C
C DECODE HEADER LINES
C
	  J=1
	  DO WHILE (.NOT.END_FOUND.AND.J.LT.FBFLEN)
	    I5=0			!IO STATUS DEFAULT OK
	    IF (FBUF(J:J+6).EQ.'BITPIX ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) BITPIX
	    ELSE IF (FBUF(J:J+5).EQ.'NAXIS ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NAXIS
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS1 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(1)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS2 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(2)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS3 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(3)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS4 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(4)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS5 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(5)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS6 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(6)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS7 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(7)
	    ELSE IF (FBUF(J:J+6).EQ.'NAXIS8 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) AXIS(8)
	    ELSE IF (FBUF(J:J+6).EQ.'BSCALE ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) BSCALE
	    ELSE IF (FBUF(J:J+5).EQ.'BZERO ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) BZERO
	    ELSE IF (FBUF(J:J+5).EQ.'BUNIT ') THEN
	       CALL NMARFS(BUNIT,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'MAPTYP ') THEN
	       CALL NMARFS(MAPTYP,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+3).EQ.'POL ') THEN
	       CALL NMARFS(POLCOD,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+4).EQ.'DATE ') THEN
	       CALL NMARFS(DATE,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'ORIGIN ') THEN
	       CALL NMARFS(ORIGIN,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+5).EQ.'EPOCH ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) EPOCH
	    ELSE IF (FBUF(J:J+7).EQ.'INSTRUME') THEN
	       CALL NMARFS(INSTRUME,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'OBJECT ') THEN
	       CALL NMARFS(OBJECT,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+7).EQ.'DATE-OBS') THEN
	       IF (INDEX(FBUF(J:J+80),'''').NE.0) THEN
	         CALL NMARFS(TMP,FBUF(J:J+80))
	         IF (TMP(3:3).EQ.'/') THEN	 !DECODE FROM dd/mm/yy
	           READ(TMP,'(I2,''/'',I2,''/'',I2)') I1,I2,I3
	           DATE_OBS=1900.+REAL(I3)+REAL(I1)/365.25
	         ELSE				 !DECODE FROM yyyy-mm-dd
	           READ(TMP,'(I4,''-'',I2,''/'',I2)') I3,I2,I1
	           DATE_OBS=REAL(I3)+REAL(I1)/365.25
	         END IF
	         IF (I2.GT.12) I2=0			!ONLY 12 MONTHS
	         DO I=1,I2-1
		    DATE_OBS=DATE_OBS+REAL(ML(I)/365.25)
	         END DO
	       ELSE
	         READ (FBUF(J+11:),*,IOSTAT=I5) DATE_OBS
	       END IF
	    ELSE IF (FBUF(J:J+5).EQ.'BANDW ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) BANDW
	    ELSE IF (FBUF(J:J+3).EQ.'VEL ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) VEL
	    ELSE IF (FBUF(J:J+7).EQ.'VELCODE ') THEN
	       CALL NMARFS(VELCODE,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+4).EQ.'VELR ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) VELR
	    ELSE IF (FBUF(J:J+5).EQ.'FREQR ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) FREQR
	    ELSE IF (FBUF(J:J+4).EQ.'PCRA ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) PCRA
	    ELSE IF (FBUF(J:J+5).EQ.'PCDEC ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) PCDEC
	    ELSE IF (FBUF(J:J+6).EQ.'NBLANK ') THEN
	      READ (FBUF(J+11:),*,IOSTAT=I5) NBLANK
	    ELSE IF (FBUF(J:J+6).EQ.'BLGRAD ') THEN
	       CALL NMARFS(BLGRAD,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'UVGRID ') THEN
	       CALL NMARFS(UVGRID,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+7).EQ.'CORGRID ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CORGRID
	    ELSE IF (FBUF(J:J+4).EQ.'CLIP ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CLIP
	    ELSE IF (FBUF(J:J+5).EQ.'SUBTR ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) SUBTR
	    ELSE IF (FBUF(J:J+6).EQ.'DATTYP ') THEN
	       CALL NMARFS(DATTYP,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+5).EQ.'UVCDT ') THEN
	       CALL NMARFS(UVCDT,FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'DEBEAM ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) DEBEAM
	    ELSE IF (FBUF(J:J+7).EQ.'DATAMAX ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) DATAMAX
	    ELSE IF (FBUF(J:J+7).EQ.'DATAMIN ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) DATAMIN
	    ELSE IF (FBUF(J:J+5).EQ.'NINTF ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NINTF
	    ELSE IF (FBUF(J:J+5).EQ.'NFREQ ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CNF
	    ELSE IF (FBUF(J:J+5).EQ.'NOISE ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NOISE
	    ELSE IF (FBUF(J:J+4).EQ.'NORM ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NORM
	    ELSE IF (FBUF(J:J+5).EQ.'FFTRA ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) FFTRA
	    ELSE IF (FBUF(J:J+6).EQ.'FFTDEC ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) FFTDEC
	    ELSE IF (FBUF(J:J+6).EQ.'MAPLAB ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) OLABEL
	    ELSE IF (FBUF(J:J+6).EQ.'INSECT ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NST
	    ELSE IF (FBUF(J:J+5).EQ.'INPTS ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) NPT
	    ELSE IF (FBUF(J:J+5).EQ.'SETNR ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) SETN
	    ELSE IF (FBUF(J:J+7).EQ.'COMMENT ') THEN
	       IF (COMMENT.EQ.' ') COMMENT=FBUF(J+10:j+79)
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL1 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(1)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX1 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(1)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT1 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(1)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL1 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(1)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE1 ') THEN
	       CALL NMARFS(CTYPE(1),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL2 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(2)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX2 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(2)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT2 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(2)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL2 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(2)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE2 ') THEN
	       CALL NMARFS(CTYPE(2),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL3 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(3)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX3 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(3)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT3 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(3)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL3 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(3)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE3 ') THEN
	       CALL NMARFS(CTYPE(3),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL4 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(4)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX4 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(4)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT4 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(4)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL4 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(4)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE4 ') THEN
	       CALL NMARFS(CTYPE(4),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL5 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(5)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX5 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(5)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT5 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(5)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL5 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(5)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE5 ') THEN
	       CALL NMARFS(CTYPE(5),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL6 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(6)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX6 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(6)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT6 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(6)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL6 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(6)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE6 ') THEN
	       CALL NMARFS(CTYPE(6),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL7 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(7)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX7 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(7)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT7 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(7)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL7 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(7)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE7 ') THEN
	       CALL NMARFS(CTYPE(7),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+6).EQ.'CRVAL8 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRVAL(8)
	    ELSE IF (FBUF(J:J+6).EQ.'CRPIX8 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRPIX(8)
	    ELSE IF (FBUF(J:J+6).EQ.'CDELT8 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CDELT(8)
	    ELSE IF (FBUF(J:J+6).EQ.'CRESL8 ') THEN
	       READ (FBUF(J+11:),*,IOSTAT=I5) CRESL(8)
	    ELSE IF (FBUF(J:J+6).EQ.'CTYPE8 ') THEN
	       CALL NMARFS(CTYPE(8),FBUF(J:J+80))
	    ELSE IF (FBUF(J:J+4).EQ.'END ') THEN
	       END_FOUND=.TRUE.
	    ELSE
	       UNKNOWN=UNKNOWN+1
	    END IF
	    IF (I5.NE.0) THEN
		CALL WNCTXT(F_TP,
	1		'Error decoding header card (ignored):!/!AS',
	1		FBUF(J:J+79))
	    END IF
	    J=J+80					!NEXT CARD IN HEADER
	  END DO
	END DO						!NEXT HEADER RECORD
C
C FILL MPH
C
 100	TP=BITPIX
	CNF=NFREQ
	IF (PCRA.EQ.0)  PCRA=CRVAL(1)
	IF (PCDEC.EQ.0) PCDEC=CRVAL(2)
	UNIT=200.
	IF (BUNIT(1:7).EQ.'JY/BEAM') THEN
	  IF (MAPTYP.EQ.'AP  ') THEN
	     UNIT=1.
	  END IF
	ELSE IF (BUNIT.EQ.'W.U.    ') THEN
	  UNIT=1.
	END IF
C
C	Before release 4.75, the scaling for the AP was written to
C	tape incorrectly. RFITS repaired this. Now WFITS has been 
C	repaired, so RFITS uses the value from tape (W.U. regardless
C	of units).
C
	OFF=BZERO
	IF (MAPTYP.EQ.'AP  ') THEN
	   SCAL=1./BSCALE
	ELSE IF (MAPTYP.EQ.'PA  ') THEN
	   SCAL=1./BSCALE*(180./PI)		! MPH needs Radians
	ELSE
	   SCAL=1./(BSCALE*UNIT)		! MPH needs W.U.
	END IF
	IF (INSTRUME.EQ.'ATCA') THEN
	  MPHJ(MPH_INST_J)=1
	ELSE
	  MPHJ(MPH_INST_J)=0
	END IF
	MPHJ(MPH_NRA_J)=AXIS(1)
	MPHJ(MPH_NDEC_J)=AXIS(2)
	MPHD(MPH_RA_D)=CRVAL(1)/360.D0
	MPHD(MPH_SRA_D)=-CDELT(1)/360.D0
	MPHD(MPH_DEC_D)=CRVAL(2)/360.D0
	MPHD(MPH_SDEC_D)=CDELT(2)/360.D0
	MPHE(MPH_FRA_E)=-(CDELT(1)*AXIS(1))/360.D0
	MPHE(MPH_FDEC_E)=(CDELT(2)*AXIS(2))/360.D0
	MPHD(MPH_FRQ_D)=(CRVAL(3)+CDELT(3)*(AXIS(3)-CRPIX(3)))/1.D6
	CALL WNGMV(MPH_FNM_N,OBJECT,MPH(MPH_FNM_1))
	CALL WNGMV(MPH_TYP_N,MAPTYP,MPH(MPH_TYP_1))
	CALL WNGMV(MPH_POL_N,POLCOD,MPH(MPH_POL_1))
	MPHE(MPH_EPO_E)=EPOCH
	MPHE(MPH_OEP_E)=DATE_OBS
	MPHD(MPH_BDW_D)=BANDW/1.D6
	MPHE(MPH_VEL_E)=VEL
	MPHE(MPH_VELR_E)=VELR
	MPHD(MPH_FRQC_D)=FREQR/1.D6
	MPHD(MPH_FRQ0_D)=FREQ0/1.D6
	MPHD(MPH_RAO_D)=PCRA/360.D0
	MPHD(MPH_DECO_D)=PCDEC/360.D0
	MPHE(MPH_MAX_E)=DATAMAX*UNIT
	MPHE(MPH_MIN_E)=DATAMIN*UNIT
	MPHJ(MPH_NBL_J)=NINTF
	MPHE(MPH_NOS_E)=NOISE*UNIT
	MPHD(MPH_SUM_D)=NORM
	MPHJ(MPH_FSR_J)=FFTRA
	MPHJ(MPH_FSD_J)=FFTDEC
	MPHJ(MPH_NST_J)=NST
	MPHJ(MPH_NPT_J)=NPT
	MPHJ(MPH_SETN_J)=SETN
	MPHI(MPH_OYR_I)=INT(DATE_OBS)-1900.
	MPHI(MPH_ODY_I)=NINT((DATE_OBS-(1900.+MPHI(MPH_OYR_I)))*365.25)
	MPHD(MPH_SHR_D)=(MPHJ(MPH_NRA_J)/2+1.D0-CRPIX(1))*
	1    MPHD(MPH_SRA_D)
	MPHD(MPH_SHD_D)=(MPHJ(MPH_NDEC_J)/2+1.D0-CRPIX(2))*
	1    MPHD(MPH_SDEC_D)
	IF (VELCODE.EQ.'UNKNOWN') THEN
	  MPHJ(MPH_VELC_J)=0
	  MPHD(MPH_FRQO_D)=CRVAL(3)/1.D6
	ELSE
	  MPHD(MPH_FRQV_D)=CRVAL(3)/1.D6
	  IF (VELCODE.EQ.'RHEL') THEN
	    MPHJ(MPH_VELC_J)=1
	  ELSE IF (VELCODE.EQ.'RLSR') THEN
	    MPHJ(MPH_VELC_J)=2
	  ELSE IF (VELCODE.EQ.'OHEL') THEN
	    MPHJ(MPH_VELC_J)=3
	  ELSE IF (VELCODE.EQ.'OLSR') THEN
	    MPHJ(MPH_VELC_J)=4
	  END IF
	END IF
	IF (BLGRAD.EQ.'GAUSSIAN') THEN
	  MPHI(MPH_CD_I+0)=1
	ELSE IF (BLGRAD.EQ.'LINEAR') THEN
	  MPHI(MPH_CD_I+0)=2
	ELSE IF (BLGRAD.EQ.'NATURAL') THEN
	  MPHI(MPH_CD_I+0)=3
	ELSE IF (BLGRAD.EQ.'OVERR') THEN
	  MPHI(MPH_CD_I+0)=4
	ELSE IF (BLGRAD.EQ.'RGAUSS') THEN
	  MPHI(MPH_CD_I+0)=5
	ELSE
	  MPHI(MPH_CD_I+0)=0
	END IF
	IF (UVGRID.EQ.'GAUSSIAN') THEN
	  MPHI(MPH_CD_I+1)=1
	ELSE IF (UVGRID.EQ.'BOX') THEN
	  MPHI(MPH_CD_I+1)=2
	ELSE IF (UVGRID.EQ.'PROLATE 4*4') THEN
	  MPHI(MPH_CD_I+1)=3
	ELSE IF (UVGRID.EQ.'EXP*SINC') THEN
	  MPHI(MPH_CD_I+1)=4
	ELSE IF (UVGRID.EQ.'PROLATE 6*6') THEN
	  MPHI(MPH_CD_I+1)=5
	ELSE
	  MPHI(MPH_CD_I+1)=0
	END IF
	MPHI(MPH_CD_I+2)=CORGRID
	MPHI(MPH_CD_I+3)=CLIP
	MPHI(MPH_CD_I+4)=SUBTR
	IF (DATTYP.EQ.'NORMAL') THEN
	  MPHI(MPH_CD_I+5)=1
	ELSE IF (DATTYP.EQ.'COSINE') THEN
	  MPHI(MPH_CD_I+5)=2
	ELSE IF (DATTYP.EQ.'SINE') THEN
	  MPHI(MPH_CD_I+5)=3
	ELSE IF (DATTYP.EQ.'AMPLITUDE') THEN
	  MPHI(MPH_CD_I+5)=4
	ELSE IF (DATTYP.EQ.'PHASE') THEN
	  MPHI(MPH_CD_I+5)=5
	ELSE
	  MPHI(MPH_CD_I+5)=0
	END IF
	IF (UVCDT.EQ.'NORMAL') THEN
	  MPHI(MPH_CD_I+6)=0
	ELSE IF (UVCDT.EQ.'BAS-HA') THEN
	  MPHI(MPH_CD_I+6)=1
	ELSE IF (UVCDT.EQ.'IFR-HA') THEN
	  MPHI(MPH_CD_I+6)=2
	ELSE
	  MPHI(MPH_CD_I+6)=-1
	END IF
	MPHI(MPH_CD_I+7)=DEBEAM
	CALL WNGMV(MPH_UCM_N,COMMENT,MPH(MPH_UCM_1))
	IF (STR_MATCH('NMAP',ORIGIN)) THEN
	  MPHI(MPH_PCD_I)=0
	ELSE
	END IF
	NRCUB=1
	DO I1=3,NAXIS
	   NRCUB=NRCUB*AXIS(I1)		!# OF CUBICS
	END DO
	NRDPTS=AXIS(1)*AXIS(2)		!# OF DATAPOINTS
	RPI(0)=CRPIX(1)			!REF.PIX. HORIZONTAL INDEX
	RPI(1)=CRPIX(2)			!REF.PIX. VERTICAL INDEX
C
C
	RETURN
C
	END

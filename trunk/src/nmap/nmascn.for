C+ NMASCN.FOR
C  WNB 910305
C
C  Revisions:
C	WNB 910815	Make circular uv-area selection
C	WNB 910923	Sign shifts
C	WNB 911009	Correct baseline-ifr for circular uv-area
C	WNB 911025	Perfection mosaicking
C	WNB 920421	Scale for BASHA/IFRHA
C	WNB 920423	idem
C	WNB 920424	Cater for autocorrelation in IFR-HA
C	WNB 920515	Change SHIFT for BASHA, IFRHA to normal position shift
C	WNB 920817	Add circular weights
C	WNB 921104	Correct for left half (U<0) part of UV plane
C	WNB 930826	New model data
C	WNB 931008	Add MINST
C	CMV 940601	Add update of Job Summary Log
C	JPH 940930	Add code for CENTRE
C       WNB 950809	Add code for polarised intensity
C       WNB 950817	More Pol. Int. buffers
C	JPH 960403	Add comment on code for CENTRE
C
C
	SUBROUTINE NMASCN(FCA,CHHA,STH,IFRT,ANG,BASEL,IRED,TAPER,SCAN,
	1   STP,SRA,SDEC,LM0,FRQ0,TF,MINST,
	1   CDAT,APDAT,UV,FTBUF,FTW,FTBE,FTBJ,
	1   NOTPT)
C
C  Read one scan and correct for everything
C
C  Result:
C
C	CALL NMASCN ( FCA_J:I, CHHA_E(0:1):I, STH_B(0:*), IFRT_I(0:*),
C			ANG_E(0:2,0:*),
C			BASEL_E(0:*):I, IRED_J(0:*):I, TAPER_E(0:*):I, SCAN_J:I,
C			STP_J:I, SRA_D:I, SDEC_D:I, LM0_E(0:1):I,
C			FRQ0_D:I, TF_E(0:1), MINST_J:I,
C			CDAT_X(0:*,0:3):O, APDAT_E(0:*):O, UV_E(0:1,0:*):O
C			FTBUF_X(*):IO, FTW_X(*):I, FTBE_E(*):IO, FTBJ_J(*):IO,
C			NOTPT_J:O)
C				Read the scan SCAN from FCA and belonging to
C			the set with header STH and interferometer table IFRT,
C			baselines BASEL, redundant baselines IRED and
C			taper TAPER.
C			CHHA gives the range of selectable hour angles.
C			STP through MINST are source model calculation aids.
C			Correct the scan for everything wanted, and output
C			the data CDAT, the weight APDAT and the UV coordinates
C			UV. ANG the dipole angles. NOTPT # of pol. int. points.
C			FTW, FTBJ, FTBE and FTBUF for use in NMAMKP
C		
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'SCH_O_DEF'		!SCAN HEADER
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FCA			! FILE
	REAL CHHA(0:1)			! SELECTED HA-RANGE
	BYTE STH(0:*)			! SET HEADER
	INTEGER*2 IFRT(0:*)		! INTERFEROMETER TABLE
	REAL ANG(0:2,0:*)		! DIPOLE ANGLE INFORMATION
	REAL BASEL(0:*)			! BASELINES in metres
	INTEGER IRED(0:*)		! REDUNDANT BASELINES
	REAL TAPER(0:*)			! TAPER values versus baseline
	INTEGER SCAN			! SCAN number TO DO
	INTEGER STP			! SOURCE TYPE
	DOUBLE PRECISION SRA,SDEC	! SOURCE CENTRE RA, DEC
	REAL LM0(0:1)			! SOURCE COORD. OFFSETS
	DOUBLE PRECISION FRQ0		! SOURCE FREQ.
	REAL TF(0:1)			! INTEGR. TIME AND BANDWIDTH SMEARING
	INTEGER MINST			! INSTRUMENT
	COMPLEX CDAT(0:STHIFR-1,0:3)	! DATA
	REAL APDAT(0:*)			! DATA WEIGHT: 0 or 1, per interferomtr
	REAL UV(0:1,0:*)		! U, V COORDINATES per interferometer
					!  (radians)
	COMPLEX FTBUF(0:*)		! FT BUFFER (DATA POL. INT)
	REAL FTW(0:*)			! FT WEIGHTS (POL.INT.)
	REAL FTBE(0:1,0:*)		! UV BUFFER (POL. INT.)
	INTEGER FTBJ(0:*)		! COUNT BUFFER (POL. INT.)
	INTEGER NOTPT			! # OF OUTPUT POL INT POINTS
C
C  Function references:
C
	LOGICAL NSCSCR			!READ A SCAN
	INTEGER WNGGJ			!GET VALUES
	INTEGER*2 WNGGI
	REAL WNGGE
	DOUBLE PRECISION WNGGD
C
C  Data declarations:
C
	LOGICAL DOPI			! DO POL INT
	INTEGER LNPOL			!LOCAL # OF POL
	INTEGER LPOLTJ(0:1,0:3)		!LOCAL POL CODE
	  DATA LPOLTJ(0,0),LPOLTJ(1,0) /Q_M,U_M/
	COMPLEX CMOD(0:3,0:STHIFR-1)	! MODEL DATA (I,Q,U,V)
	INTEGER RWT(0:STHIFR-1)		! REDUNDANT COUNT
	INTEGER NIFR			! # OF INTERFEROMETERS
	INTEGER IPOL			! # OF INPUT POLARISATIONS
	REAL UV0(0:3),UV0S(0:3)		! BASIC UV DATA
	REAL RADSC			! UV SCALE TO RADIANS = projection fctr
	REAL CWG(0:STHIFR-1)		! CIRC. WEIGHT BUFFER
	BYTE SCH(0:SCH__L-1)		! SCAN HEADER
	  REAL SCHE(0:SCH__L/LB_E-1)
	  EQUIVALENCE (SCH,SCHE)
	REAL WGT(0:STHIFR-1,0:3)	! DATA WEIGHTS
C-
C
C INIT
C
	NIFR=WNGGJ(STH(STH_NIFR_1))		! # OF IFRS
	DOPI=.FALSE.
	DO I=0,NIFR-1				! preset NO DATA
	  APDAT(I)=0
	END DO
	IPOL=WNGGI(STH(STH_PLN_1))		! # OF INPUT POLARISATIONS
C
C READ the SCAN
C
	IF (.NOT.NSCSCR(FCA,STH,IFRT,SCAN,CAP,CDAP,SCH,WGT,CDAT))
	1			GOTO 901	!READ AND CORRECT SCAN DATA
	IF (SCHE(SCH_HA_E).LT.CHHA(0) .OR. SCHE(SCH_HA_E).GT.CHHA(1))
	1			GOTO 900	!NOT WANTED
C
C MAKE UV, depending on UVCDT:
C  UVCDT=0: Standard UV coordinates
C  UVCDT=1: BASHA: U=baseline, V=hour angle
C  UVCDT=2: IFRHA: U=ifr designation, V=hour angle
C
	J=1					! APPARENT
	IF (ABS(MAPCTP).EQ.2) J=2		! MAKE 1950.0
	CALL NMOMUV(J,MAPCRD(0),MAPCRD(1),STH,	! MAKE UV FOR 1M IN RAD.:
	1	SCH,UV0) 			! UV0 = U, V scales in rad/m
						!  projected perpendicular to
						!  the line of sight
	RADSC=DPI2*WNGGD(STH(STH_FRQ_1))	! 2pi *freq /c = 2pi /lambda =
	1	/DCL/1D-6 			!  radians/m in the equatorial
						!  plane
	RADSC=RADSC/SQRT(UV0(0)**2+UV0(1)**2)	! LENGTH UV VECTOR 1M = 
						!  projection factor
	R0=SCHE(SCH_HA_E)*PI2			! HA in radians
	R1=WNGGD(STH(STH_FRQ_1))/(DCL*1D-6)	! SCALE: 1/lambda
C
	DO I=0,NIFR-1				! ALL INTERFEROMETERS
	  IF (BASEL(I).GE.0 .AND.		! SELECTED BASELINE
	1	BASEL(I).GE.UVRAD(0)*RADSC .AND.
	1	BASEL(I).LE.UVRAD(1)*RADSC) THEN! WANTED?
	    APDAT(I)=1				! yes
	    IF (UVCDT.EQ.0) THEN		! NORMAL UV?
	      DO I1=0,1
	        UV(I1,I)=UV0(I1)*BASEL(I)	! U, V IN RAD.
	      END DO
C
	    ELSE				! BASHA or IFRHA
	      UV(1,I)=NINT(R0*R1*FIELD(1))
	1		*PI2/FIELD(1) 		! vertical: HA (rounded)
	      IF (UVCDT.EQ.1) THEN		! BASHA?
	        UV(0,I)=NINT(BASEL(I)*R1
	1		*FIELD(0))*PI2/FIELD(0)	! horizontal: baseline (rounded)
	      ELSE				! IFRHA?
	        J1=MOD(IFRT(I),256)		! TEL # WEST
	        J2=IFRT(I)/256			! TEL # East
	        UV(0,I)=NINT((
	1		(J1*(2*STHTEL-1-J1))/2+J2)
	1		*R1*FIELD(0))*		! horizontal: ifr designation 
	1		PI2/FIELD(0)		! 920424  	(rounded)
	      ENDIF
	    ENDIF
	  ENDIF
	END DO
C
C CIRCULAR WEIGHTS
C
	IF (CWGTYP.GT.0) THEN			! CIRC. WEIGHT ASKED?
	  D0=WNGGD(STH(STH_FRQ_1))		! FREQUENCY
	  DO I=0,NIFR-1
	    IF (APDAT(I).GT.0) THEN		! baseln selected for this scan
CC	      IF (CWGTYP.EQ.1 .OR. CWGTYP.EQ.5) THEN
	      IF (CWGTYP.EQ.1) THEN		! gaussian weight
	        CWG(I)=EXP(-((BASEL(I)/RADSC*FRQMAX/CWGVAL/D0)**2))
	      ELSE IF (CWGTYP.EQ.2) THEN	! triangular weight
	        CWG(I)=MAX(0D0,1D0-BASEL(I)/RADSC*FRQMAX/CWGVAL/D0)
	      ELSE
	        CWG(I)=1
	      END IF
	    ELSE
	      CWG(I)=0				!DELETED SCAN
	    END IF
	  END DO
	END IF
C
C SOURCE SUBTRACTION / MODEL DATA
C
	IF (SUB .OR. UVDTP.EQ.1) THEN		!SOURCE SUBTRACT
	  CALL NMOMUV(STP,SRA,SDEC,STH,SCH,UV0S) !GET UV DATA
	  CALL NMOMU4(0,FCA,SCAN,STH,UV0S,LM0,FRQ0,STH(STH_RTP_1),
	1		IPOL,NIFR,IFRT,TF,MINST,CMOD) !GET MODEL DATA
	  IF (UVDTP.EQ.1) THEN			!MODEL DATA
	    CALL NMOCIX(STH,SCHE,ANG,CDAT,CMOD)	!GET MODEL DATA
	  ELSE					!STANDARD
	    CALL NMOCIY(STH,SCHE,ANG,CDAT,CMOD,-1) !CORRECT FOR MODEL
	  END IF
	END IF
C
C MAKE CORRECT POLARISATIONS
C
	IF (POLTJ(-1,0).NE.0) THEN		!LI == POL.INT. ASKED
	  DOPI=.TRUE.
	  LNPOL=2				!LOCAL
	  CALL NMOCXX(STH,SCHE,ANG,WGT,APDAT,CDAT,CDAT,LNPOL,LPOLTJ(0,0))
						!MAKE Q,U
	ELSE
	  LNPOL=NPOL				!LOCAL
	  CALL NMOCXX(STH,SCHE,ANG,WGT,APDAT,CDAT,CDAT,NPOL,POLTJ(0,0))
	END IF
C
C CLIPPING
C
	IF (CLIP) THEN				! CLIPPING TEST
	  DO I=0,NIFR-1
	    IF (APDAT(I).GT.0) THEN		! STILL PRESENT
	      IF (BASEL(I).GE.CLPRAD(0) .AND.
	1	BASEL(I).LE.CLPRAD(1)) THEN	! within clip annulus?
		DO I1=0,LNPOL-1
	          R0=ABS(CDAT(I,I1))		! AMPLITUDE
	          IF (R0.GE.CLPLEV(0) .AND.
	1		R0.LE.CLPLEV(1)) 	! clip BETWEEN limits
	1		APDAT(I)=0
		END DO
	      END IF
	    END IF
	  END DO
	END IF
C
C FIELD SHIFT AND DATA CONVERSION If the shift is specified in the form of a
C  FIELD_CENTRE, we convert it to the corresponding L,M shift. This will result
C  in all maps being made for the same centre. This feature is thought to be
C  useful only in special applications, notably mosaic observations of 
C  instrumental polarisation.
C LSHIFT indicates the type of shift: 0=none, 1=shift, 2=centre
C
	IF (LSHIFT.LT.0) THEN			! FIELD_CENTRE specified
	  CALL WNMCRD (CNTDVL(0),CNTDVL(1),
	1	SHIFT(0),SHIFT(1),	
	1	CENTRE(0),CENTRE(1))		! convert to l,m
	  SHIFT(0)=SHIFT(0)*DEG*3600.		! rad to arcsec
	  SHIFT(1)=SHIFT(1)*DEG*3600.
	ENDIF
	DO I=0,NIFR-1				! ALL IFRS
	  IF (LSHIFT.NE.0 .OR.
	1	MAPCTP.LT.0) THEN		! FIELD SHIFT
	    IF (LSHIFT.NE.0) THEN
	      R0=-UVSC*(SHIFT(0)*UV0(0)*BASEL(I)+
	1		SHIFT(1)*UV0(1)*BASEL(I))
	    ELSE
	      R0=0
	    END IF
	    IF (MAPCTP.LT.0) THEN		! FIELD SHIFT MOSAIC
	      R0=R0-(CNTDVL(10)*UV0(0)*BASEL(I)+
	1		CNTDVL(11)*UV0(1)*BASEL(I))
	    END IF
	    DO I1=0,LNPOL-1
	      CDAT(I,I1)=CDAT(I,I1)*CMPLX(COS(R0),SIN(R0))
	    END DO
	  END IF
C
C U<0 CORRECTION
C
	  IF (UV(0,I).LT.0) THEN		! ON LEFT HALF
	    DO I1=0,1				! REVERSE UV
	      UV(I1,I)=-UV(I1,I)
	    END DO
	    DO I1=0,LNPOL-1			! CONJUGATE DATA
	      CDAT(I,I1)=CONJG(CDAT(I,I1))
	    END DO
	  END IF
C
C SPECIAL DATA TYPES
C
	  DO I1=0,LNPOL-1
	    IF (DATTYP.EQ.1) THEN		!NOTHING
	    ELSE IF (DATTYP.EQ.2) THEN		!COS
	      CDAT(I,I1)=CMPLX(REAL(CDAT(I,I1)),0.)
	    ELSE IF (DATTYP.EQ.3) THEN		!SIN
	      CDAT(I,I1)=CMPLX(0.,AIMAG(CDAT(I,I1)))
	    ELSE IF (DATTYP.EQ.4) THEN		!AMPL
	      CDAT(I,I1)=CMPLX(ABS(CDAT(I,I1)),0E0)
	    ELSE IF (DATTYP.EQ.5) THEN		!PHASE
	      R0=ABS(CDAT(I,I1))		!AMPL
	      IF (R0.GT.0) CDAT(I,I1)=CDAT(I,I1)/R0 !PHASE ONLY
	    END IF
	  END DO
C
C TAPER/CIRC. WEIGHT
C
	  APDAT(I)=APDAT(I)*TAPER(I)		!ANTENNA PATTERN FACTOR
	  IF (CWGTYP.GT.0) APDAT(I)=APDAT(I)*CWG(I) !CIRC. WEIGHT
C
C UV
C
	  DO I1=0,1				!MAKE OUTPUT UV
	    UV(I1,I)=UV(I1,I)*FIELD(I1)/PI2	!OUTPUT UV
	  END DO
	  IF (APDAT(I).NE.0) CNTJVL(4)=CNTJVL(4)+1 !COUNT # OF DATAPOINTS
	END DO
C
C CORRECT FOR REDUNDANT BASELINES
C
	IF (UWGT.EQ.1 .AND. .NOT.DOPI) THEN	!STANDARD UNIFORM
	  DO I=0,NIFR-1				!REDUNDANT TEST
	    RWT(I)=0
	  END DO
	  DO I=0,NIFR-1				!ALL INTERFEROMETERS
	    IF (IRED(I).GT.0) THEN		!REDUNDANT
	      IF (APDAT(I).NE.0) THEN
	        RWT(IRED(I))=RWT(IRED(I))+1	!COUNT FOR SET
	      END IF
	    END IF
	  END DO
	  DO I=0,NIFR-1				!CORRECT WEIGHTS
	    IF (IRED(I).GT.0) THEN
	      IF (APDAT(I).NE.0) APDAT(I)=APDAT(I)/RWT(IRED(I))
	    END IF
	  END DO
	END IF
C
C MAKE P**2
C
	IF (DOPI) THEN
	  CALL NMAMKP(STH,BASEL,CMOD,CDAT,APDAT,FTBUF,FTW,FTBE,FTBJ,
	1     UV0,UV,NOTPT)			!MAKE P
	END IF
C
C UPDATE JOB SUMMARY LOG
C
 901	CONTINUE
	CALL NMAJSS(FCA,STH,SCHE(SCH_HA_E),IFRT,BASEL,APDAT)
C
C READY
C
 900	CONTINUE
C
	RETURN
C
C
	END

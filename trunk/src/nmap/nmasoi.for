C+ NMASOI.FOR
C  WNB 910304
C
C  Revisions:
C	HjV 920520	HP does not allow extended source lines
C       WNB 950809	Add BUFPP
C       WNB 950817	Enlarge UV plane for Pol. Int.
C
	SUBROUTINE NMASOI(FCA,BUFPP)
C
C  Initiate sorting
C
C  Result:
C
C	CALL NMASOI( FCA_J:I, BUFPP_J:O)	
C				Initiate UV plane sorting to temporary file
C				with FCA as control, and BUFPP a pointer to
C				a buffer for polarised intensities
C
C
C  PIN references:
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FCA			!FILE CONTROL
	INTEGER BUFPP			!FT BUFFER POLARISED INTENSITIES
C
C  Function references:
C
	LOGICAL WNFOP			!OPEN FILE
	LOGICAL WNGGVM,WNGGVA		!GET VIRTUAL MEMORY
	INTEGER WNMEJC			!CEIL(X)
	CHARACTER*20 WNFFNM		!GET A FILE NAME
C
C  Data declarations:
C
C-
C
C DFT
C
	IF (DODFT) THEN
	  DO I2=0,NPOL-1			!GET BUFFERS
	    IF (.NOT.WNGGVA(LB_E*((FTSIZ(0)/2)*2+1)*
	1			((FTSIZ(1)/2)*2+1),DFTBFA(I2))) THEN
	      CALL WNCTXT(F_TP,'Cannot obtain DFT buffers')
	      CALL WNGEX			!STOP PROGRAM
	    END IF
	    CALL WNGMVZ(LB_E*((FTSIZ(0)/2)*2+1)*((FTSIZ(1)/2)*2+1),
	1			A_B(DFTBFA(I2)-A_OB)) !CLEAR BUFFER
	    DFTWT(I2)=0				!TOTAL WEIGHT
	  END DO
	  GOTO 10
	END IF
C
C POL BUFFER
C
	IF (.NOT.WNGGVA((3*LB_X+2*LB_E+LB_J)*NPTRF,BUFPP)) THEN
	  CALL WNCTXT(F_TP,'Cannot obtain FT buffer pol. int')
	  CALL WNGEX				!STOP PROGRAM
	END IF
	I1=(BUFPP-A_OB)/LB_X
	DO I=0,NPTRF/2-1			!FILL WEIGHTS
	  R0=I*PI2/REAL(NPTRF)
	  A_X(I1+I)=CMPLX(COS(R0),SIN(R0))
	  A_X(I1+I+NPTRF/2)=CMPLX(COS(R0),-SIN(R0))
	END DO
C
C OPEN FILE
C
	IF (.NOT.WNFOP(FCA,WNFFNM('NMA','TMP'),'WT')) THEN !OPEN OUTPUT
	  CALL WNCTXT(F_TP,'Cannot open temporary sort file')
	  CALL WNGEX				!FINISH PROGRAM
	END IF
C
C GET SIZES
C
	IF (UVCDT.EQ.0) THEN			!STANDARD
	  DO I=0,1
	    IF (POLTJ(-1,0).EQ.0) THEN		!NORMAL
	      UVCMAX(I)=WNMEJC(UVMAX(I)*FIELD(I)+CVLWID(I)) !MAX UV
							    !COORD
	    ELSE				!POL. INT.
	      UVCMAX(I)=2*WNMEJC(UVMAX(I)*FIELD(I)+CVLWID(I)) !MAX UV
							    !COORD
	    END IF
	  END DO
	ELSE IF (UVCDT.EQ.1) THEN		!BASHA
	  DO I=0,1
	    IF (I.EQ.1 .OR. (I.EQ.0 .AND. POLTJ(-1,0).EQ.0)) THEN !NORMAL
	      UVCMAX(I)=WNMEJC(UV1MAX(I)*FIELD(I)*
	1	  FRQMAX/(CL*1E-6)+CVLWID(I))
	    ELSE				!POL. INT.
	      UVCMAX(I)=2*WNMEJC(UV1MAX(I)*FIELD(I)*
	1	  FRQMAX/(CL*1E-6)+CVLWID(I))
	    END IF
	  END DO
	ELSE					!IFRHA
	  DO I=0,1
	    UVCMAX(I)=WNMEJC(UV2MAX(I)*FIELD(I)*
	1		FRQMAX/(CL*1E-6)+CVLWID(I))
	  END DO
	END IF
	DO I=0,1
	  UVCMAX(I)=MIN(FTSIZ(I)/2-1,UVCMAX(I))	!MAX UV COORD
	END DO
	BINSIZ=MIN(UVCMAX(0)+1,MAX(1,(MEMSIZ/8-(2*UVCMAX(1)+1)*
	1		WNMEJC(2*CVLWID(0)))/(2*UVCMAX(1)+1))) !# OF LINES/BIN
	NBIN=WNMEJC(FLOAT(UVCMAX(0)+1)/BINSIZ)	!# OF BINS
C
C PREPARE MEMORY
C
	JS=WNGGVM(4*LB_J*NBIN,BINADM)		!BIN ADMINISTRATION
	IF (JS) JS=WNGGVM(MXSBB*NBIN,BINBUF)	!BIN BUFFERS
	IF (.NOT.JS) THEN			!ERROR
	  CALL WNCTXT(F_TP,'Cannot obtain sorting buffers')
	  CALL WNGEX				!EXIT PROGRAM
	END IF
C
	J2=(BINADM-A_OB)/LB_J			!ADDRESS ADMINISTRATION BUFFER
	J1=(BINBUF-A_OB)/LB_J			!ADDRESS BUFFERS
	DO I=0,NBIN-1				!PREPARE ALL BUFFERS
	  A_J(J2)=0				!POINTER IN THIS BUFFER
	  A_J(J2+1)=I				!CURRENT BUFFER FOR THIS BIN
	  A_J(J2+2)=((MXSBJ-1)/(3+2*NPOL))*
	1		(3+2*NPOL)		!# OF ENTRIES IN BUFFER
	  A_J(J2+3)=-1				!POINTER TO PREVIOUS DISK BUFFER
	  A_J(J1+MXSBJ-1)=-1			!POINTER TO PREVIOUS BUFFER
	  J2=J2+4				!DESCRIBE NEXT BUFFER
	  J1=J1+MXSBJ
	END DO
C
C READY
C
 10	CONTINUE
C
	RETURN
C
C
	END

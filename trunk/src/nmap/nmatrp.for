C+ NMATRP.FOR
C  WNB 910318
C
C  Revisions:
C	WNB 910730	Reverse order FFT
C	WNB 911105	Change RAO/DECO definition
C	HjV 920520	HP does not allow extended source lines
C	WNB 920828	Update line velocities
C	WNB 921104	J2000
C	WNB 921202	Add for data clean
C	WNB 930127	New bandwidth
C	CMV 940530	Add pointer to Job Summary Log
C
	SUBROUTINE NMATRP(FIN,NP,TABU,TABV)
C
C  Transpose and do second step FFT
C
C  Result:
C
C	CALL NMATRP( FIN_J:I, NP_J:I, TABU_E(0:*):I, TABV_E(0:*):I)
C				Do transpose of map, and the second step
C				of the FFT. FIN specifies the input file,
C				NP the polarisation being done.
C				TABU and TABV the convolution correction
C				tables.
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'GFH_O_DEF'		!GENERAL FILE HEADER
	INCLUDE 'SGH_O_DEF'		!SUB-GROUP HEADER
	INCLUDE 'MPH_O_DEF'		!MAP HEADER
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FIN			!INPUT FILE
	INTEGER NP			!POLARISATION BEING DONE
	REAL TABU(0:*)			!CORRECTION CONVOLUTION U
	REAL TABV(0:*)			!IBID. V
C
C  Function references:
C
	INTEGER WNMEJC			!CEIL(X)
	INTEGER WNFEOF			!GET DISK POSITION
	LOGICAL WNDLNF,WNDLNG		!LINK SUB-GROUP
	LOGICAL WNDLNK			!LINK A SET
	LOGICAL WNFOP			!OPEN DISK FILE
	LOGICAL WNFRD			!READ DISK
	LOGICAL WNFWR			!WRITE DISK
	LOGICAL WNGGVA			!GET MEMORY
C
C  Data declarations:
C
	LOGICAL LCL			!DATA CLEAN SWITCH
	INTEGER MPHP			!MAP HEADER POINTER
	BYTE MPH(0:MPHHDL-1)		!MAP HEADER
	  INTEGER*2 MPHI(0:MPHHDL/2-1)
	  INTEGER MPHJ(0:MPHHDL/4-1)
	  REAL MPHE(0:MPHHDL/4-1)
	  DOUBLE PRECISION MPHD(0:MPHHDL/8-1)
	  EQUIVALENCE (MPH,MPHI,MPHJ,MPHE,MPHD)
	INTEGER LSIZE			!# OF LINES PER STAGE
	INTEGER LSIZX			!IBID. IN BYTES
	INTEGER LSTEP			!LINE LENGTH ON DISK
	INTEGER LOFF			!OFFSET ON DISK START AP/MAP
	INTEGER BUFPTR,BFPTRX		!TRANSPOSE BUFFER ADDR
	INTEGER FTBUF,FTBUFE,FTBUFX	!FFT BUFFER
	INTEGER WTBUF,WTBUFX		!FFT WEIGHT BUFFER
	INTEGER HIST			!HISTOGRAM BUFFER ADDRESS
C-
C
C INITIALIZE
C
	LCL=OPT.EQ.'CLE'			!SET CLEAN
	LSIZE=MIN(WNMEJC(MEMSIZ/FLOAT(LB_X*(UHIGH+1))),
	1			OUTSIZ(1))	!LENGTH ONE STAGE
	LSIZX=LB_X*LSIZE			!STAGE LENGTH IN BYTES
	JS=WNGGVA(LSIZX*(UHIGH+1),BUFPTR)	!GET TRANSPOSE BUFFER
	IF (JS) JS=WNGGVA(LB_X*FTSIZ(0),FTBUF)	!GET FFT BUFFER
	IF (JS) JS=WNGGVA(LB_X*FTSIZ(0)/2,WTBUF) !FFT WEIGHT BUFFER
	IF (.NOT. JS) THEN
	  CALL WNCTXT(F_TP,'Cannot obtain transpose buffers')
	  CALL WNGEX				!STOP PROGRAM
	END IF
	BFPTRX=(BUFPTR-A_OB)/LB_X
	WTBUFX=(WTBUF-A_OB)/LB_X
	FTBUFE=(FTBUF-A_OB)/LB_E
	FTBUFX=(FTBUF-A_OB)/LB_X
	DO I=0,FTSIZ(0)/2-1			!FILL WEIGHT BUF
	  R0=I*PI2/FTSIZ(0)
	  A_X(WTBUFX+I)=CMPLX(COS(R0),-SIN(R0))
	END DO
	LSTEP=0					!STEP
	IF (OUTOPT(1)) LSTEP=LSTEP+LB_X*OUTSIZ(1) !DISK INPUT STEP
	IF (OUTOPT(2))  LSTEP=LSTEP+LB_X*OUTSIZ(1)
C
C DO ALL LINES
C
	DO I1=0,1				!DO MAP AND AP
	  LOFF=0				!OFFSET ON DISK
	  IF (I1.EQ.0) THEN
	    IF (.NOT.OUTOPT(1)) GOTO 10		!DO NOT DO MAP
	    IF (.NOT.LCL) THEN
	      IF (.NOT.WNDLNF(SGPH(3)+SGH_LINKG_1,I1,SGH_GROUPN_1,FCAOUT,
	1		SGPH(4),SGNR(4))) THEN	!FIND/CREATE SUB-GROUP
 20	        CONTINUE
	        CALL WNCTXT(F_TP,'Error creating sub-group')
	        CALL WNGEX			!STOP PROGRAM
	      END IF
	    END IF
	  ELSE					!AP
	    IF (OUTOPT(1)) LOFF=LB_X*OUTSIZ(1)	!OFFSET ON DISK
	    IF (.NOT.OUTOPT(2)) GOTO 10		!DO NOT DO AP
	    IF (.NOT.WNDLNF(SGPH(3)+SGH_LINKG_1,I1,SGH_GROUPN_1,FCAOUT,
	1		SGPH(4),SGNR(4))) GOTO 20 !FIND/CREATE SUB-GROUP
	  END IF
	  IF (LCL) THEN
	    MPHP=SGPH(5)
	  ELSE
	    CALL WNGMVZ(MPHHDL,MPH)		!CLEAR MAP HEADER
	    MPHP=WNFEOF(FCAOUT)			!POINTER TO MAP HEADER
	    IF (.NOT.WNFWR(FCAOUT,MPHHDL,MPH,MPHP)) GOTO 20 !WRITE MAP HEADER
	    IF (.NOT.WNDLNK(GFH_LINK_1,MPHP,
	1		MPH_SETN_1,FCAOUT)) GOTO 20 !LINK THE SET
	    IF (.NOT.WNDLNG(SGPH(4)+SGH_LINKG_1,MPHP,
	1		SGH_GROUPN_1,FCAOUT,SGPH(5),
	1		SGNR(5))) GOTO 20	!LINK SUB-GROUP
	  END IF
	  IF (.NOT.WNFRD(FCAOUT,MPHHDL,MPH,MPHP)) GOTO 20 !REREAD MAP HEADER
	  IF (.NOT.LCL) MPHJ(MPH_MDP_J)=WNFEOF(FCAOUT) !MAP DATA POINTER
	  MPHI(MPH_VER_I)=MPHHDV		!SET MAP VERSION
	  MPHI(MPH_LEN_I)=MPHHDL		!HEADER LENGTH
	  MPHE(MPH_MAX_E)=-1E30			!INIT MAX/MIN
	  MPHE(MPH_MIN_E)=+1E30
	  IF (I1.EQ.0) THEN			!INIT HISTOGRAM
	    CALL WNMHS8(HIST,1,1E0)		!GET HISTO BUFFER
	  END IF
	  DO I2=0,OUTSIZ(1)-1,LSIZE		!DO STAGES
	    J0=MIN(LSIZE,OUTSIZ(1)-I2)		!LENGTH TO DO IN STAGE
	    DO J=0,UHIGH			!READ A STAGE INTO BUFFER
	      IF (.NOT.WNFRD(FIN,LB_X*J0,A_X(BFPTRX+J*LSIZE),
	1			LOFF+J*LSTEP+LB_X*I2)) THEN
	        CALL WNCTXT(F_TP,'Read error transpose file')
		CALL WNGEX			!STOP PROGRAM
	      END IF
	    END DO
	    DO J1=0,J0-1			!ALL LINES IN STAGE
	      I5=I2+J1-OUTSIZ(1)/2		!DECLINATION POSITION
	      DO J=0,UHIGH
		A_X(FTBUFX+J)=A_X(BFPTRX+J*LSIZE+J1) !TRANSPOSE
	      END DO
	      CALL WNGMVZ(LB_X*(FTSIZ(0)-UHIGH-1),
	1			A_X(FTBUFX+UHIGH+1)) !ZERO BUF
	      CALL WNMFTC(FTSIZ(0),A_X(FTBUFX),
	1			A_X(WTBUFX))	!FFT
	      CALL WNMFCS(FTSIZ(0),A_X(FTBUFX))	!SWAP HALVES
	      CALL WNMFCR(FTSIZ(0),A_X(FTBUFX))	!MAKE REAL
C
C CORRECT FOR CONVOL
C
	      IF (DECVL) THEN			!CORRECT FOR CONVOLUTION
		J2=ABS(LB_E*I5)			!POS. IN BUF
		CALL WNMFSN(OUTSIZ(0)/2,A_E(FTBUFE+FTSIZ(0)/2),
	1			A_B(DECVB(0)-A_OB),A_B(DECVB(1)-A_OB+J2))
		CALL WNMFIN(OUTSIZ(0)/2,A_E(FTBUFE+(FTSIZ(0)-
	1			OUTSIZ(0))/2),A_B(DECVB(0)-A_OB+LB_E),
	1			A_B(DECVB(1)-A_OB+J2)) !NORMALIZE
	      END IF
C
C NORMALIZE AND FIND MAX/MIN
C
	      R0=-1E36				!MAX
	      R1=1E36				!MIN
	      CALL WNMFMX(OUTSIZ(0),A_E(FTBUFE+(FTSIZ(0)-OUTSIZ(0))/2),
	1			1D0/SUM,R0,I3,R1,I4) !NORM., FIND MIN/MAX
	      IF (R0.GT.MPHE(MPH_MAX_E)) THEN	!NEW MAX
		MPHE(MPH_MAX_E)=R0
		MPHJ(MPH_MXR_J)=I3-OUTSIZ(0)/2
		MPHJ(MPH_MXD_J)=I5
	      END IF
	      IF (R1.LT.MPHE(MPH_MIN_E)) THEN	!NEW MIN
		MPHE(MPH_MIN_E)=R1
		MPHJ(MPH_MNR_J)=I4-OUTSIZ(0)/2
		MPHJ(MPH_MND_J)=I5
	      END IF
C
C OUTPUT MAP (OUTSIZ(0))
C
	      IF (.NOT.WNFWR(FCAOUT,LB_E*OUTSIZ(0),
	1		A_E(FTBUFE+(FTSIZ(0)-OUTSIZ(0))/2),
	1		MPHJ(MPH_MDP_J)+
	1		LB_E*(I2+J1)*OUTSIZ(0))) THEN !OUTPUT A LINE
 11	        CONTINUE
	        CALL WNCTXT(F_TP,'Write error Map/AP file')
	        CALL WNGEX			!STOP PROGRAM
	      END IF
	      IF (I1.EQ.0) THEN
		CALL WNMHS1(HIST,OUTSIZ(0),	!MAKE HISTO
	1			A_E(FTBUFE+(FTSIZ(0)-OUTSIZ(0))/2))
	      END IF
	    END DO				!END LINES
	  END DO				!END STAGE
	  CALL WNGMFS(MPH_FNM_N,CNTCVL(0),MPH(MPH_FNM_1)) !FIELD NAME
	  IF (ABS(MAPCTP).EQ.2) THEN		!MAP EPOCH
	    MPHE(MPH_EPO_E)=CNTDVL(13)
	  ELSE
	    MPHE(MPH_EPO_E)=CNTDVL(4)
	  END IF
	  MPHD(MPH_RA_D)=MAPCRD(0)		!RA MAP
	  MPHD(MPH_DEC_D)=MAPCRD(1)		!DEC MAP
	  MPHD(MPH_FRQ_D)=CNTDVL(6)		!FREQUENCY MAP
	  MPHD(MPH_BDW_D)=CNTDVL(14)		!TOTAL BANDWIDTH
	  IF (ABS(MAPCTP).EQ.2) THEN		!MAP EPOCH
	    MPHD(MPH_RAO_D)=CNTDVL(2)		!EPOCH RA
	    MPHD(MPH_DECO_D)=CNTDVL(3)		!EPOCH DEC
	  ELSE					!APPARENT
	    MPHD(MPH_RAO_D)=CNTDVL(0)		!APPAR. RA
	    MPHD(MPH_DECO_D)=CNTDVL(1)		!APPAR. DEC
	  END IF
	  MPHD(MPH_FRQO_D)=CNTDVL(6)		!OBS. FREQ.
	  MPHI(MPH_ODY_I)=CNTJVL(0)		!OBS. DAY
	  MPHI(MPH_OYR_I)=CNTJVL(1)		!OBS. YEAR
	  MPHJ(MPH_INST_J)=CNTJVL(6)		!INSTRUMENT TYPE
	  MPHI(MPH_DCD_I)=5			!E FORMAT
	  MPHI(MPH_PCD_I)=0			!PROGRAM NMAP
	  MPHD(MPH_SRA_D)=FIELD(0)/FTSIZ(0)/PI2	!RA GRID STEP
	  MPHD(MPH_SDEC_D)=FIELD(1)/FTSIZ(1)/PI2 !DEC GRID STEP
	  MPHD(MPH_SFRQ_D)=0			!FREQ GRID STEP
	  MPHJ(MPH_NRA_J)=OUTSIZ(0)		!SIZE RA
	  MPHJ(MPH_NDEC_J)=OUTSIZ(1)		!SIZE DEC
	  MPHJ(MPH_NFRQ_J)=1			!SIZE FREQ
	  MPHJ(MPH_ZRA_J)=OUTSIZ(0)/2		!POS. CENTRE MAP RA
	  MPHJ(MPH_ZDEC_J)=OUTSIZ(1)/2		!POS. CENTRE MAP DEC
	  MPHJ(MPH_ZFRQ_J)=0			!POS. CENTRE MAP FREQ
	  IF (ABS(MAPCTP).EQ.2) THEN		!MAP EPOCH
	    CALL WNMCRD(MPHD(MPH_RA_D),MPHD(MPH_DEC_D),R0,R1,
	1		CNTDVL(2),CNTDVL(3))
	  ELSE
	    CALL WNMCRD(MPHD(MPH_RA_D),MPHD(MPH_DEC_D),R0,R1,
	1		CNTDVL(0),CNTDVL(1))
	  END IF
	  MPHD(MPH_SHR_D)=SHIFT(0)/3600./360.+R0/PI2 !SHIFT RA
	  MPHD(MPH_SHD_D)=SHIFT(1)/3600./360.+R1/PI2 !SHIFT DEC
	  MPHD(MPH_SHF_D)=0			!SHIFT FREQ
	  MPHD(MPH_SUM_D)=SUM			!NORMALISATION
	  MPHE(MPH_UNI_E)=5./1000.		!TO GET JY FROM W.U.
	  CALL WNGMFS(MPH_UCM_N,CNTCVL(1),MPH(MPH_UCM_1)) !USER COMMENT
	  MPHJ(MPH_NPT_J)=CNTJVL(4)		!# OF DATA POINTS
	  IF (I1.EQ.0) THEN			!MAP
	    CALL WNGMFS(MPH_TYP_N,'MAP',MPH(MPH_TYP_1))
	  ELSE					!AP
	    CALL WNGMFS(MPH_TYP_N,'AP',MPH(MPH_TYP_1))
	  END IF
	  CALL WNGMFS(MPH_POL_N,POLC(NP),MPH(MPH_POL_1)) !POL. CODE
	  MPHI(MPH_CD_I+0)=TAPTYP		!TAPER TYPE
	  MPHI(MPH_CD_I+1)=CVLTYP		!CONVOLUTION TYPE
	  IF (DECVL) THEN
	    MPHI(MPH_CD_I+2)=1			!DE-CONVOLVE
	  ELSE
	    MPHI(MPH_CD_I+2)=0			!NO DE-CONVOLVE
	  END IF
	  IF (CLIP) THEN
	    MPHI(MPH_CD_I+3)=1			!CLIP
	  ELSE
	    MPHI(MPH_CD_I+3)=0			!NO CLIP
	  END IF
	  IF (SUB) THEN
	    MPHI(MPH_CD_I+4)=1			!SOURCE SUBTRACTS
	  ELSE
	    MPHI(MPH_CD_I+4)=0			!NO SUBTRACTS
	  END IF
	  MPHI(MPH_CD_I+5)=DATTYP		!DATA TYPE
	  MPHI(MPH_CD_I+6)=UVCDT		!UV COORD. TYPE
	  MPHI(MPH_CD_I+7)=0			!DE-BEAM COUNT
	  IF (ABS(MAPCTP).EQ.2) THEN		!EPOCH
	    MPHI(MPH_EPT_I)=1
	    MPHE(MPH_OEP_E)=CNTDVL(4)		!OBS. EPOCH
	  ELSE					!APPARENT
	    MPHI(MPH_EPT_I)=0
	    MPHE(MPH_OEP_E)=CNTDVL(4)		!OBS. EPOCH
	  END IF
	  IF (I1.EQ.0) THEN
	    CALL WNMHS3(HIST,1,F_P)		!PRINT HISTO
	    CALL WNMHS4(HIST,MPHE(MPH_NOS_E),F_P) !GET NOISE
	    CALL WNMHS9(HIST)			!RELEASE BUFFER
	  END IF
	  MPHE(MPH_FRA_E)=(OUTSIZ(0)-1)*MPHD(MPH_SRA_D) !FIELD SIZE RA
	  MPHE(MPH_FDEC_E)=(OUTSIZ(1)-1)*MPHD(MPH_SDEC_D) !FIELD SIZE DEC
	  MPHE(MPH_FFRQ_E)=0			!FIELD SIZE FREQ
	  CALL WNGMFS(MPH_TEL_N,'WSRT',MPH(MPH_TEL_1)) !TEL. NAME
	  MPHJ(MPH_FSR_J)=FTSIZ(0)		!FFT SIZES
	  MPHJ(MPH_FSD_J)=FTSIZ(1)
	  MPHJ(MPH_NBL_J)=CNTJVL(5)		!BASELINE COUNT
	  MPHJ(MPH_NST_J)=CNTJVL(2)		!# OF SETS
	  MPHJ(MPH_VELC_J)=CNTJVL(3)		!VEL. CODE
	  MPHE(MPH_VEL_E)=CNTDVL(7)		!VELOCITY
	  MPHD(MPH_FRQC_D)=CNTDVL(9)		!REF. FREQ.
	  MPHE(MPH_VELR_E)=CNTDVL(8)		!REF. VELOCITY
	  MPHD(MPH_FRQV_D)=MPHD(MPH_FRQO_D)	!OBS. CHANNEL FREQUENCY
	  MPHD(MPH_FRQ0_D)=CNTDVL(12)		!REST FREQ.
	  IF (I1.EQ.0) THEN
	     MPHJ(MPH_JOBP_J)=JOBSUM(0)		!POINTER TO JOB SUMMARY
	     MPHJ(MPH_JOBL_J)=JOBSUM(1)		!LENGTH OF JOB SUMMARY
	     CALL NMAJSM(MPH)		!UPDATE JOB-SUMMARY
	  ELSE
	     MPHJ(MPH_JOBP_J)=0			!NO JOB SUMMARY
	     MPHJ(MPH_JOBL_J)=0
	  END IF
	  IF (.NOT.WNFWR(FCAOUT,MPHHDL,MPH,MPHP)) GOTO 11 !REWRITE HEADER
	  CALL WNCTXT(F_P,'!^')			!FORM FEED
	  IF (LCL) THEN				!ONLY PRINT (?)
	    I2=F_TP
	  ELSE
	    I2=F_TP
	  END IF
	  IF (I1.EQ.0) THEN
	    CALL WNCTXT(I2,'!2/Description of the map produced:')
	  ELSE
	    CALL WNCTXT(I2,
	1		'!2/Description of the antenna pattern produced:')
	  END IF
	  SGNR(6)=-1				!FINISH NAME
	  CALL NMAPMH(I2,MPH,SGNR,NODOUT)
	  CALL WNCTXT(I2,' ')
	  CALL WNCCSX(I2,'Finished')		!STATISTICS
 10	  CONTINUE				!SKIP AP OR MAP
	END DO					!END AP/MAP
C
C FREE BUFFERS
C
	CALL WNGFVA(LB_X*FTSIZ(0),FTBUF)	!FFT BUFFER
	CALL WNGFVA(LB_X*FTSIZ(0)/2,WTBUF)	!FFT WEIGHT BUFFER
	CALL WNGFVA(LSIZX*(UHIGH+1),BUFPTR)	!TRANSPOSE BUFFER
C
	RETURN
C
C
	END

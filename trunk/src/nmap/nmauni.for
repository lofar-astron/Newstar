C+ NMAUNI.FOR
C  WNB 910328
C
C  Revisions:
C
	SUBROUTINE NMAUNI(FIN,BAD)
C
C  Do uniforming of grid
C
C  Result:
C
C	CALL NMAUNI( FIN_J:I, BAD_J(4,0:*):I)
C					Do uniforming of rectangular grid,
C					using sorted data in FIN.
C					BAD is the bin administration.
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NMA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FIN			!SORTED INPUT FILE
	INTEGER BAD(4,0:*)		!SORT BIN ADMINISTRATION
C
C  Function references:
C
	LOGICAL WNGGVA			!GET VIRTUAL MEMORY
	LOGICAL WNFRD			!READ FILE
	LOGICAL WNFWR			!WRITE FILE
	INTEGER WNMEJC			!CEIL(X)
	REAL NMAUNU			!UNIFORM FACTOR
C
C  Data declarations:
C
	INTEGER MAPBUF,MAPBFJ		!ADDRESS MAP CONVOL. BUFFER
	INTEGER UOUT			!CURRENT U OUTPUT
	REAL BUF(0:MXSBJ-1)		!INPUT BUFFER
	  INTEGER JBUF(0:MXSBJ-1)
	  EQUIVALENCE (BUF,JBUF)
C-
C
C INIT
C
	UHIGH=UVCMAX(0)				!MAXIMUM U COORDINATE
	VHIGH=UVCMAX(1)				!MAXIMUM V COORDINATE
	VLOW=-UVCMAX(1)				!MINIMUM V COORDINATE
	VSIZE=2*UVCMAX(1)+1			!LENGTH CONVOLUTION LINE
	USIZE=WNMEJC(BINSIZ+2*CVLWID(0))	!SIZE OF ONE U CONVOLUTION BUF.
	ULOB=0					!START WITH U=0
C
C GET BUFFER
C
	IF (.NOT.WNGGVA(LB_J*USIZE*(VSIZE+1),
	1		MAPBUF)) THEN		!GET MAP CONVOLUTION BUFFER
	  CALL WNCTXT(F_TP,'Cannot obtain uniforming buffer')
	  CALL WNGEX				!STOP PROGRAM
	END IF
	MAPBFJ=(MAPBUF-A_OB)/LB_J
	CALL WNGMVZ(LB_J*(VSIZE+1)*USIZE,A_J(MAPBFJ)) !CLEAR BUF
C
C DO UNIFORMING
C
C INIT
C
	UOUT=0					!START U OUTPUT
C
C ALL BINS
C
	DO I=0,NBIN				!DO FOR ALL BINS
	  IF (I.LT.NBIN) THEN			!READ A BIN
	    J=BAD(4,I)				!BLOCK IN BIN
	    DO WHILE (J.NE.-1)			!MORE DATA IN BIN
	      IF (WNFRD(FIN,MXSBB,BUF,J)) THEN	!READ BUF
	        J=JBUF(MXSBJ-1)			!POINTER TO NEXT BUF
	      ELSE
 11	        CONTINUE
	        CALL WNCTXT(F_TP,'Read error sorted file')
	        CALL WNGEX			!STOP PROGRAM
	      END IF
	      DO I1=0,BAD(3,I)-1,3+2*NPOL	!DO ALL DATA POINTS
	        IF (JBUF(I1+2).EQ.0) GOTO 10	!BUFFER READY
	        CALL NMAUNX(BUF(I1),A_J(MAPBFJ)) !UNIFORM IT
	      END DO				!END POINTS
 10	      CONTINUE
	    END DO				!MORE IN BIN
	  END IF
C
C CORRECT DATA FOR A BIN
C
	  IF (I.GT.0) THEN			!CORRECT PREVIOUS BIN
	    I2=I-1				!PREVIOUS BIN
	    J=BAD(4,I2)				!BLOCK IN BIN
	    DO WHILE (J.NE.-1)			!MORE DATA IN BIN
	      IF (.NOT.WNFRD(FIN,MXSBB,BUF,J)) GOTO 11 !READ BUF
	      DO I1=0,BAD(3,I2)-1,3+2*NPOL	!DO ALL DATA POINTS
	        IF (JBUF(I1+2).EQ.0) GOTO 20	!BUFFER READY
	        BUF(I1+2)=BUF(I1+2)*NMAUNU(BUF(I1),A_J(MAPBFJ)) !CORRECT
	      END DO				!END POINTS
 20	      CONTINUE
	      IF (WNFWR(FIN,MXSBB,BUF,J)) THEN	!REWRITE BUF
	        J=JBUF(MXSBJ-1)			!POINTER TO NEXT BUF
	      ELSE
	        CALL WNCTXT(F_TP,'Rewrite error sorted file')
	        CALL WNGEX			!STOP PROGRAM
	      END IF
	    END DO				!MORE IN BIN
C
C ZERO BUFFER
C
	    J2=BINSIZ*I-1			!MAX. U TO DO
	    DO J1=UOUT,J2			!OUTPUT WHAT IS POSSIBLE
	      J0=J1-ULOB			!OFFSET IN BUF
	      IF (J0.GE.USIZE) J0=J0-USIZE	!WRAP
	      CALL WNGMVZ(LB_J*VSIZE,A_J(MAPBFJ+J0*VSIZE)) !CLEAR BUF
	    END DO
	    UOUT=J2+1				!NEXT OUTPUT START
	    IF (UOUT-ULOB.GE.USIZE) ULOB=ULOB+USIZE !WRAPPING
	  END IF				!END CORRECTION
	END DO					!END BINS
C
C FREE BUFFERS
C
	CALL WNGFVA(LB_J*USIZE*(VSIZE+1),MAPBUF) !RELEASE MAP BUFFER
C
	RETURN
C
C
	END

C+ NGCEXN.FOR
C  WNB 920819
C
C  Revisions:
C
	LOGICAL FUNCTION NGCEX1(TCOD,LTCOD,COD,CDP,RPS,LRPS,RPP,LRPP,NVAL)
C
C  Help analyze expression
C
C  Result:
C
C	NGCEX1_L = NGCEX1( TCOD_J:I, LTCOD_B(4):I, COD_J(*):O, CDP_J(*):IO,
C				RPS_J(*):IO, LRPS_B(4,*):IO, RPP_J:IO,
C				LRPP_J:IO, NVAL_J:I)
C						Set TCOD in reverse polish stack
C						and cleanup Reverse Polish stack
C						RPS, by putting into executable
C						stack COD if possible. LRPP is
C						the current low RPP, and NVAL
C						the current # of values on
C						the COD stack.
C	NGCEX2_L = NGCEX2( N_J:I, STR_C*:I, STP_J:IO)
C						Update string pointer STP into
C						string STR with N. Error if
C						beyond end-of-string.
C	NGCEX3_L = NGCEX3( TCOD_J:I, LTCOD_B(4):I, COD_J(*):O, CDP_J(*):IO,
C				RPS_J(*):IO, LRPS_B(4,*):IO, RPP_J:IO,
C				LRPP_J:IO, NVAL_J:I)
C						Set TCOD in RPS.
C	NGCEX4_L = NGCEX4( TCOD_J:I, LTCOD_B(4):I, COD_J(*):O, CDP_J(*):IO,
C				RPS_J(*):IO, LRPS_B(4,*):IO, RPP_J:IO,
C				LRPP_J:IO, NVAL_J:I)
C						Set TCOD in COD stack.
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER TCOD			!EXECUTABLE CODE
	  BYTE LTCOD(4)
	INTEGER COD(*)			!EXECUTABLE STACK
	INTEGER CDP			!COD POINTER
	INTEGER RPS(*)			!REVERSE POLISH STACK
	  BYTE LRPS(4,*)
	INTEGER RPP			!RPS POINTER
	INTEGER LRPP			!LOW CURRENT RPP
	INTEGER NVAL			!# OF VALUES ON COD
	INTEGER N			!STRING SKIP
	CHARACTER*(*) STR		!STRING
	INTEGER STP			!STR POINTER
C
C  Entry points
C
	LOGICAL NGCEX2
	LOGICAL NGCEX3
	LOGICAL NGCEX4
C
C  Function references:
C
C
C  Data declarations:
C
C-
C
C NGCEX1
C
	NGCEX1=.TRUE.
C
	DO WHILE (RPP.GT.LRPP)			!CHECK ALL ON RPS
	  IF (LTCOD(2).LT.LRPS(2,RPP)) THEN	!NEW PRIORITY LESS THAN OLD
 11	    CONTINUE
	    CDP=CDP+1				!SET ON CODE STACK
	    COD(CDP)=RPS(RPP)
	    IF (NVAL.LT.LRPS(3,RPP)) THEN	!NOT ENOUGH VALUES FOR OPERATION
 12	      CONTINUE
	      NGCEX1=.FALSE.
C
	      RETURN
	    END IF
	    NVAL=NVAL-LRPS(4,RPP)		!UPDATE # VALUES ON STACK
	    RPP=RPP-1				!DELETE FROM RPS
	  ELSE IF (LTCOD(2).GT.LRPS(2,RPP)) THEN !NEW PRIORITY GREATHER THAN OLD
 10	    CONTINUE
	    GOTO 20				!CANNOT CLEAN RPS
	  ELSE					!NEW PRIORITY EQUAL OLD
	    IF (LTCOD(2).GE.44) THEN
	      GOTO 10				!EXECUTE RIGHT-TO-LEFT
	    ELSE
	      GOTO 11				!EXECUTE LEFT-TO RIGHT
	    END IF
	  END IF
	END DO
C
C SPECIAL TCOD
C
 20	CONTINUE
	IF (LTCOD(1).GE.40) THEN		!SAVE ENVIRONMENT ( FUNC, ( ...)
	  RPS(RPP+1)=TCOD			!SET TYPE
	  RPS(RPP+2)=0				!ARGUMENT COUNT
	  RPS(RPP+3)=NVAL			!OLD NVAL
	  NVAL=0
	  RPS(RPP+4)=LRPP			!OLD LOW RPS POINTER
	  RPP=RPP+4				!NEW RPS START
	  LRPP=RPP				!CONTINUE IF START
	ELSE IF (LTCOD(1).GE.30) THEN		!SPECIAL FINAL CODES
	  IF (LTCOD(1).EQ.30) THEN		!,
	    IF (LRPP.NE.RPP .OR. LRPP.LT.4 .OR. NVAL.NE.1) GOTO 12 !ERROR
	    RPS(LRPP-2)=RPS(LRPP-2)+1		!COUNT ARGUMENTS
	    NVAL=0				!START AFRESH
	  ELSE IF (LTCOD(1).EQ.31) THEN		!END OF STRING
	    IF (LRPP.NE.RPP .OR. LRPP.NE.0 .OR. NVAL.NE.1) GOTO 12 !ERROR
	    CDP=CDP+1
	    COD(CDP)=0				!END OF ALL
	  ELSE IF (LTCOD(1).EQ.32) THEN		!)
	    IF (LRPP.NE.RPP .OR. LRPP.LT.4) GOTO 12 !ERROR
	    IF (LRPS(1,LRPP-3).EQ.40) THEN	!()
	      IF (NVAL.NE.1) GOTO 12		!ERROR
	      NVAL=RPS(LRPP-1)+NVAL		!RESTORE NVAL
	      LRPP=RPS(LRPP)			!RESTORE PREVIOUS ENVIRONMENT
	      RPP=RPP-4				!DELETE ENVIRONMENT FROM RPS
	    ELSE IF (LRPS(1,LRPP-3).GE.50) THEN !FUNCTION
	      IF (NVAL.NE.1) THEN
	        IF (LRPS(3,LRPP-3).EQ.0 .AND. NVAL.EQ.0) THEN !OK
	        ELSE
	          GOTO 12			!ERROR
	        END IF
	      END IF
	      RPS(LRPP-2)=RPS(LRPP-2)+NVAL	!COUNT ARGUMENTS
	      IF (RPS(LRPP-2).NE.LRPS(3,LRPP-3)) THEN !WRONG # OF ARGUMENTS
	        IF (LRPS(1,LRPP-3).EQ.50 .AND. RPS(LRPP-2).EQ.2) THEN !ATAN
	          LRPS(1,LRPP-3)=LRPS(1,LRPP-3)+1 !MAKE ATAN 2 ARGUMENTS
	          LRPS(3,LRPP-3)=LRPS(3,LRPP-3)+1
	        ELSE
	          GOTO 12			!ERROR
	        END IF
	      END IF
	      NVAL=RPS(LRPP-1)+LRPS(4,LRPP-3)	!NEW ARGUMENTS
	      CDP=CDP+1				!SET FUNCTION
	      COD(CDP)=RPS(LRPP-3)
	      LRPP=RPS(LRPP)			!PREVIOUS ENVIRONMENT
	      RPP=RPP-4				!DELETE SAVED ENVIRONMENT
	    ELSE
	      GOTO 12				!ERROR
	    END IF
	  ELSE
	    GOTO 12				!ERROR
	  END IF
	ELSE					!NORMAL OPERATION
	  RPP=RPP+1				!SET ON STACK
	  RPS(RPP)=TCOD
	END IF
C
	RETURN
C
C NGCEX2
C
	ENTRY NGCEX2(N,STR,STP)
C
	IF (STP+N.GT.LEN(STR)) THEN
	  NGCEX2=.FALSE.			!ERROR
	  STP=LEN(STR)
	ELSE
	  NGCEX2=.TRUE.
	  STP=STP+N
	END IF
C
	RETURN
C
C NGCEX3
C
	ENTRY NGCEX3(TCOD,LTCOD,COD,CDP,RPS,LRPS,RPP,LRPP,NVAL)
C
	NGCEX3=.TRUE.
	RPP=RPP+1				!UPDATE POINTER
	RPS(RPP)=TCOD				!SET IN RPS
C
	RETURN
C
C NGCEX4
C
	ENTRY NGCEX4(TCOD,LTCOD,COD,CDP,RPS,LRPS,RPP,LRPP,NVAL)
C
	NGCEX4=.TRUE.
	CDP=CDP+1				!UPDATE POINTER
	COD(CDP)=TCOD				!SET IN COD
C
	RETURN
C
C
	END

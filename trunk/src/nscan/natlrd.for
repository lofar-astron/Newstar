C+ NATLRD.FOR
C  WNB 920514
C
C  Revisions:
C	WNB 921110	Typo in input ptr
C	WNB 921124	Add FLAG
C	WNB 921125	Change FLAG; limit scan length
C	WNB 930406	Multiple source/IF correction; tape error handling
C	WNB 930407	Correct HA
C	WNB 930414	Correct HA
C
	SUBROUTINE NATLRD(FCA,FCAPT,FCAT,TAB,TABE,FILLED,IFRS,VISP,BUFP)
C
C  Read ATNF data into TMP file
C
C  Result:
C
C	CALL NATLRD( FCA_J:I, FCAPT_J:IO, FCAT_J:I, TAB_J(MAX_SU,MAX_IF,0:*):O,
C				TABE_E(MAX_SU,MAX_IF,0:*):O,
C				FILLED_L:IO, IFRS_J:O, VISP_J:I, BUFP_J:I)
C				Will load ATNF data into TMP file, reading from
C				FCA into FCATMP. Detailing the output in TAB:
C				0: COUNT
C				1: START UT(E)
C				2: DUT(E)
C				3: FIRST TMP POINTER
C				4: CURRENT UT
C				5: PREVIOUS TMP POINTER (OR -1)
C				6: START HA
C				7: CURRENT INTERFEROMETERS
C				8: SELECT IF
C				9: SELECT SOURCE
C				and using the visibility and time slice  array
C				ptrs VISP and WGTP. If FILLED, already data in
C				buf.
C				IFRS gives the interferometers found.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NAT_DEF'
	INCLUDE 'RPF_DEF'		!RPFITS DATA
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FCA			!INPUT FILE
	INTEGER FCAPT			!INPUT FILE PTR
	INTEGER FCAT			!OUTPUT FILE
	INTEGER TAB(MAX_SU,MAX_IF,0:*)	!DESCRIPTION TABLE
	REAL TABE(MAX_SU,MAX_IF,0:*)
	LOGICAL FILLED			!INDICATE READ STATUS
	INTEGER IFRS			!INTERFEROMETERS SEEN
	INTEGER VISP			!VISIBILITY ARRAY PTR
	INTEGER BUFP			!TIME SLICE ARRAY PTR
C
C  Function references:
C
	LOGICAL WNFWR			!WRITE DATA
	LOGICAL NATRPD			!READ DATA
C
C  Data declarations:
C
	LOGICAL LAST,FIRST		!LAST DATA
	INTEGER CSRCNO,CIFNO		!CURRENT ID
	INTEGER DATJ(0:9)		!DATA AREA
	  REAL DATE(0:9)
	  EQUIVALENCE (DATJ,DATE)
	  INTEGER LDAT			!LINK DATA
	  EQUIVALENCE (LDAT,DATJ(0))
	  INTEGER BAS			!BASELINE CODE
	  EQUIVALENCE (BAS,DATJ(1))
	  REAL UT,U,V,W			!COORDINATES
	  EQUIVALENCE (UT,DATE(2)),(U,DATE(3)),(V,DATE(4)),(W,DATE(5))
	  INTEGER FLAG			!FLAG DATA
	  EQUIVALENCE (FLAG,DATJ(6))
	  INTEGER BIN			!PULSAR BIN
	  EQUIVALENCE (BIN,DATJ(7))
	  INTEGER IFNO			!IF
	  EQUIVALENCE (IFNO,DATJ(8))
	  INTEGER SRCNO			!SOURCE
	  EQUIVALENCE (SRCNO,DATJ(9))
C
C  Common:
C
	COMMON /RPDLOC/ DATJ
C-
C
C INIT
C
	DO I=1,MAX_IF
	  DO I1=1,MAX_SU
	    TAB(I1,I,0)=0			!PREPARE TABLE
	  END DO
	END DO
	J0=0					!TMP FILE PTR
	IFRS=0					!NO INTERFEROMETERS
	LAST=.FALSE.				!NOT LAST
	CSRCNO=-1				!CURRENT DATA
	CIFNO=-1
C
C READ DATA
C
 10	CONTINUE
	IF (.NOT.FILLED) THEN			!NO DATA YET
	  IF (.NOT.NATRPD(FCA,FCAPT,A_B(VISP-A_OB),
	1		BAS,UT,U,V,W,FLAG,BIN,IFNO,SRCNO)) THEN
	    LAST=.TRUE.
	  ELSE
	    IF (BAS.GT.0 .AND. FLAG.NE.0)	!ZERO BAD DATA
	1		CALL WNGMVZ(LB_X*IF_NSTOK(IFNO)*IF_NFREQ(IFNO),
	1			A_B(VISP-A_OB))
	  END IF
	END IF
	FILLED=.FALSE.				!ASSUME NOT FILLED
	IF (LAST) GOTO 12			!NO MORE
	IF (BAS.LE.0) GOTO 10			!SKIP SPECIAL
	IF (TAB(1,IFNO,8).EQ.0) GOTO 10		!IF NOT SELECTED
	IF (TAB(SRCNO,1,9).EQ.0) GOTO 10	!SOURCE NOT SELECTED
C
C FILL TABLE
C
	FIRST=.TRUE.				!ASSUME NEW BUFFER
	IF (TAB(SRCNO,IFNO,0).EQ.0) THEN	!FIRST DATA
	  TABE(SRCNO,IFNO,1)=UT			!SAVE UT
	  TAB(SRCNO,IFNO,0)=1			!COUNT
	  TAB(SRCNO,IFNO,5)=-1			!FIRST DISK BLOCK
	  TABE(SRCNO,IFNO,6)=ATAN2(REAL(V*SIN(SU_DEC(SRCNO))-
	1		W*COS(SU_DEC(SRCNO))),U) !GET HA
	  TAB(SRCNO,IFNO,7)=0			!CURRENT IFRS
	ELSE IF (UT.EQ.TABE(SRCNO,IFNO,4)) THEN	!SAME UT
	  FIRST=.FALSE.				!MORE IN SAME BUFFER
	ELSE IF (TAB(SRCNO,IFNO,0).EQ.1) THEN	!NEXT DATA
	  R0=UT-TABE(SRCNO,IFNO,1)		!DUT
	  IF (R0.LT.0) R0=R0+24.*3600.		!CORRECT
	  TABE(SRCNO,IFNO,2)=R0			!SAVE DUT
	  TAB(SRCNO,IFNO,0)=2			!COUNT
	ELSE
	  R0=UT-TABE(SRCNO,IFNO,1)		!DUT
	  IF (R0.LT.0) R0=R0+24.*3600.		!CORRECT
	  IF (ABS(R0-TABE(SRCNO,IFNO,2)*NINT(R0/TABE(SRCNO,IFNO,2))).GT.
	1		0.01 .OR.
	1		TAB(SRCNO,IFNO,0).GE.360) THEN !NEW START
	    FILLED=.TRUE.
	  ELSE
	    TAB(SRCNO,IFNO,0)=TAB(SRCNO,IFNO,0)+1 !COUNT TIME
	  END IF
	END IF
	TABE(SRCNO,IFNO,4)=UT			!CURRENT UT
C
C WRITE PREVIOUS
C
 12	CONTINUE
	IF (LAST .OR. FILLED .OR. FIRST) THEN	!WRITE PREVIOUS
	  IF (CSRCNO.GT.0 .AND. CIFNO.GT.0) THEN !SOME PRESENT
	    IF (TAB(CSRCNO,CIFNO,0).GT.0) THEN
	      LDAT=0				!LAST LINK
	      IF (TAB(CSRCNO,CIFNO,5).NE.-1) THEN !NOT FIRST
	        IF (.NOT.WNFWR(FCAT,LB_J,J0,TAB(CSRCNO,CIFNO,5))) GOTO 11 !LINK
	      ELSE
		TAB(CSRCNO,CIFNO,3)=J0		!FIRST DISK POINTER
	      END IF
	      TAB(CSRCNO,CIFNO,5)=J0
	      IF (.NOT.WNFWR(FCAT,LB_J,LDAT,J0)) GOTO 11 !WRITE LINK
	      J0=J0+LB_J
	      IF (.NOT.WNFWR(FCAT,LB_J,TAB(CSRCNO,CIFNO,7),J0)) GOTO 11 !IFRS
	      J0=J0+LB_J
	      IF (.NOT.WNFWR(FCAT,
	1		LB_X*MXNIFR*IF_NFREQ(CIFNO)*IF_NSTOK(CIFNO),
	1		A_B(BUFP-A_OB),J0)) THEN !WRITE DATA
 11	        CONTINUE
	        CALL WNCTXT(F_TP,'Error writing TMP scan file')
	        CALL WNGEX			!STOP
	      END IF
	      J0=J0+LB_X*MXNIFR*IF_NFREQ(CIFNO)*IF_NSTOK(CIFNO) !TMP PTR
	    END IF
	  END IF
	END IF
C
C FILL BUFFER
C
	IF (.NOT.LAST .AND. .NOT.FILLED) THEN
	  I=MOD(BAS,256)			!TELESCOPES
	  I1=BAS/256
	  IF (I.LE.I1) THEN
	    I=I1-(I*(I-13)+14)/2		!IFR PTR
	  ELSE
	    I=I-(I1*(I1-13)+14)/2		!IFR PTR
	  END IF
	  IF (I.GE.0 .AND. I.LT.31) THEN
	    IFRS=IOR(IFRS,2**I) !SET SEEN
	    TAB(SRCNO,IFNO,7)=IOR(TAB(SRCNO,IFNO,7),2**I) !SET SEEN
	  END IF
	  DO I1=0,IF_NFREQ(IFNO)-1		!FILL BUFFER
	    J2=(BUFP-A_OB)/LB_E+(I1*MXNIFR+I)*IF_NSTOK(IFNO)*LB_X/LB_E !PTR
	    J1=(VISP-A_OB)/LB_E+I1*IF_NSTOK(IFNO)*LB_X/LB_E !INPUT PTR
	    DO I2=0,(LB_X/LB_E)*IF_NSTOK(IFNO)-1
	      A_E(J2+I2)=A_E(J1+I2)
	    END DO
	  END DO
	  CSRCNO=SRCNO				!SAVE CURRENT ID
	  CIFNO=IFNO
	  GOTO 10				!MORE DATA
	END IF
C
 900	CONTINUE
	RETURN					!READY
C
C
	END

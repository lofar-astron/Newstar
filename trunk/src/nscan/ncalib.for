C+ NCALIB.FOR
C  WNB 900306
C
C  Revisions:
C	WNB 910612	Add loops
C	WNB 910813	Add copy
C	WNB 910828	Add RUN
C	WNB 910913	Change loops
C	WNB 910923	Add PDSET,PDEDIT,PDCOPY
C	WNB 910930	Add loops on POLAR COPY
C	WNB 910930	Add VZERO
C	WNB 911009	Add RENORM
C	WNB 921217	Add CCOPY
C	WNB 930602	Add IREF, CLK
C	WNB 930603	Add BASEL_POLE, DX, DY, DZ, FREQ_CORR
C	WNB 930614	Text for DX....
C	WNB 930617	Add SHIFT SET
C	CMV 931027	Tell user SHOW is in log-file
C	JPH 931201	Remove useless comments to make the good ones visible
C	CMV 940503	Add IFR corrections, enumerate NCASTX etc
C	JPH 940902	Combine all duplicated WNDRUNs and WNFCLs in single 
C			 calls. (Consequently WNDRUN is now checked for all
C			 options, - I assume that the old situation was
C			 incorrect.)
C			Loop back to NCADAT for all options. (see NOTE below)
C	CMV 940927	Add option SET MULTIPLY (SETCLK)
C	JPH 941214	Remove temporary message
C	JPH 950124	Merge CMV940927
C	CMV 950220	Format in SHOW set back to original
C       HjV 950622	Add NCACIC-part (Copy IFR corrections)
C       WNB 950629	Change LOOP
C       HjV 960411	Correct Copy MIFR corrections part.
C			Take all interferometers. (Also 00, 11 etc.)
C	JPH 960627	Revised SHOW format, also on terminal
C	JPH 960718	NCAPVZ --> PVA for VZERO COPY
C	JPH 960801	Replace function codes by legible ones. Fix dispatching
C			 error. (CLK and MIFR were mixed up so CLK wouldn't 
C			 work.)
C	JPH 961120	NCAPVx MDONE argument to control message emission.
C			 (Local flag ith DATA is reinitialised every time the
C			  routine is entered!)
C	JPH 961209	JDONE argument on NCASTN
C	JPH 970128	SHOW: Change calculation of gain ME, add comment. 
C	WNB 981022	Added loops for SET--INIT
C       WNB 080711      Added SETINVERT option
C
C
	SUBROUTINE NCALIB
C
C  Main routine to do calibration of scan files
C
C  Result:
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'NCA_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL WNDRUN
	LOGICAL WNDXLN		 	!NEXT
C
C  Data declarations:
C
	CHARACTER*1 IPC(0:1)			!X,Y CODE
	  DATA IPC/'X','Y'/
	COMPLEX CSOL(0:STHTEL-1,0:1)		!AVERAGE CORRECTION TEL X,Y
	  REAL RSOL(0:1,0:STHTEL-1,0:1)
	  EQUIVALENCE (CSOL,RSOL)
	COMPLEX CME(0:STHTEL-1,0:1)		!M.E. AVERAGE TEL X,Y
	REAL RME(0:STHTEL,0:1,0:1)		!TEL G,P X,Y
	COMPLEX CISOL(0:3,0:STHIFR-1,0:1)	! AVERAGE CORRECTION 
						!  POL,IFR,APPLY/DE_APPLY
	  REAL RISOL(0:1,0:3,0:STHIFR-1,0:1)
	  EQUIVALENCE (CISOL,RISOL)
	COMPLEX CIME(0:3,0:STHIFR-1,0:1)	!M.E. AVERAGE POL,IFR,APP/DE_APP
	CHARACTER*1 TELNMA(0:35)
	  CHARACTER*36 TELNAM
	  EQUIVALENCE (TELNAM,TELNMA)
	  DATA TELNAM /'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'/
	LOGICAL	MDONE				! NCAPVx message control
	INTEGER JDONE				! NCASTN message control
C-
C
C NOTE - JPH 940902:
C	All options now loop back to NCADAT after completion and the only
C  program exit is through QUIT. For those options that used to exit 
C  autonomously, the exit in batch mode will now be through the path:
C
C		OPTION prompt in NCADAT finds no new value, returns ENDOFLOOP
C		NCADAT converts this status into a QUIT option value.
C		This routine exits on QUIT
C	
C PRELIMINARIES
C
	CALL NCAINI				!INIT PROGRAM
	JDONE=0
C
C DISPATCH
C
 10	CONTINUE
	CALL NCADAT				!GET USER DATA
	MDONE=.FALSE.				! 'message given' flag
	CALL WNCTXT(F_TP,'!/')
	IF (OPT.EQ.'QUI' .OR. .NOT.WNDRUN()) THEN
	  CALL WNGEX 
	END IF
	CALL WNDXLI(LPOFF)			
	IF (OPT.EQ.'RED') THEN
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCARED
	  END DO
C
C	Polarisation corrections
C
	ELSE IF (OPTION.EQ.'PDCALC') THEN	!CALCULATE POL. CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPOL
	  END DO
	ELSE IF (OPTION.EQ.'PDSHOW') THEN	!SHOW POL. CORRECTION
	  CALL NCAPOS
	ELSE IF (OPTION.EQ.'PDZERO') THEN	!ZERO POL. CORRECTION
	  CALL NCAPOZ
	ELSE IF (OPTION.EQ.'PDSET') THEN	!SET POL. CORRECTION
	  CALL NCAPOT
	ELSE IF (OPTION.EQ.'PDEDIT') THEN	!EDIT POL. CORRECTION
	  CALL NCAPOE
	ELSE IF (OPTION.EQ.'PDCOPY') THEN	!COPY POL. CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPOC
	  END DO
	  CALL WNFCL(FCAINP)
	ELSE IF (OPTION.EQ.'PVCALC') THEN	!VZERO CALC
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPVZ(MDONE)
	  END DO
	ELSE IF (OPTION.EQ.'PVAPPLY') THEN	!VZERO APPLY
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPVA(MDONE)
	  END DO
	ELSE IF (OPTION.EQ.'PVASK') THEN	!VZERO ASK
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPVQ(MDONE)
	  END DO
	ELSE IF (OPTION.EQ.'PVMAN') THEN	!VZERO MANUAL
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPVM(MDONE)
	  END DO
	ELSE IF (OPTION.EQ.'PVSCAN') THEN	!VZERO SCAN
	  DO WHILE (WNDXLN(LPOFF))		
C	    CALL NCAPVZ(MDONE)
	  END DO
	ELSE IF (OPTION.EQ.'PVCOPY') THEN	!VZERO COPY
	  DO WHILE (WNDXLN(LPOFF))		
	    CALL NCAPVA(MDONE)
	  END DO
	  CALL WNFCL(FCAINP)
C
C	Set and copy various corrections
C
	ELSE IF (OPTION.EQ.'SETZERO') THEN	!ZERO CORRECTION
	  CALL NCASTZ
	ELSE IF (OPTION.EQ.'SETINVERT') THEN	!INVERT CORRECTIONS
	  CALL NCASTV
	ELSE IF (OPTION.EQ.'SETMANINI') THEN	!MANUAL CORRECTION
	  CALL NCASTC
	ELSE IF (OPTION.EQ.'SETMANINI2') THEN	!MANUAL init CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		!NEXT LOOP
	     CALL NCATEL(FCAOUT,SETS,HARAN(1),HARAN(2),SIFRS,
	1	  PCGAN,PCPHS,F_T) !GET VALUES
	     CALL NCASTC
	  END DO
	ELSE IF (OPTION.EQ.'SETMIFR') THEN	!MULTIPLY CORRECTION
	  CALL NCASTY(COR_MUL) 
	ELSE IF (OPTION.EQ.'SETCOPY') THEN	!COPY TEL CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		!NEXT LOOP
	    CALL NCACLC(CSOL,CME)		!MAKE AVERAGES
	    DO I3=0,1				!X,Y
	      DO I2=0,STHTEL-1			!EXTERNAL FORMAT
	        PCGAN(I2,I3)=EXP(RSOL(0,I2,I3))	!GAIN
	        PCPHS(I2,I3)=RSOL(1,I2,I3)*DEG	!PHASE
	      END DO
	    END DO
	    CALL NCASTC				!SET DATA
	  END DO
	  CALL WNFCL(FCAINP)			
	ELSE IF (OPTION.EQ.'SETICOPY') THEN	!COPY MIFR CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		!NEXT LOOP
	    CALL NCACIC(CISOL,CIME)		!MAKE AVERAGES
	    I4=-1
	    DO I1=0,STHTEL-1
              DO I2=I1,STHTEL-1
                 I4=I4+1			!INDEX INPUT
                 IF (SIFRS(I1,I2)) THEN		!SELECTED
		    DO I3=0,3			!POL
		       IFRCOR(I4,I3)=CISOL(I3,I4,0)	!Only APPLY
		    END DO
		 END IF
	      END DO
	    END DO
	    CALL NCASTX(COR_MIFR)		!SET DATA
	  END DO
	  CALL WNFCL(FCAINP)			
C
	ELSE IF (OPTION.EQ.'SETEXT') THEN	!EXTINCTION
	  CALL NCASTX(COR_EXT)
	ELSE IF (OPTION.EQ.'SETREF') THEN	!REFRACTION
	  CALL NCASTX(COR_REF)
	ELSE IF (OPTION.EQ.'SETFAR') THEN	!FARADAY ROTATION
	  CALL NCASTX(COR_FAR)
C
	ELSE IF (OPTION.EQ.'SETLINE') THEN	!LINE CORRECTIONS
	  CALL NCASTL
	ELSE IF (OPTION.EQ.'SETRENORM') THEN	!RENORM CORRECTIONS
	  CALL NCASTN(JDONE)
	ELSE IF (OPTION.EQ.'SETCCOPY') THEN	!INTERPOLATE CALIB. CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		! 
	    CALL NCACCP(CSOL,CME)		!COPY CORRECTIONS
	  END DO
	  CALL WNFCL(FCAINP)			
C
	ELSE IF (OPTION.EQ.'SETIREFRAC') THEN	!IONOS. REFRACTION
	  CALL NCASTX(COR_IRF)
	ELSE IF (OPTION.EQ.'SETCLK') THEN	!CLOCK CORRECTION
	  CALL NCASTX(COR_CLK)
	ELSE IF (OPTION.EQ.'SETIFR') THEN	!ADDITIVE IFR CORRECTION
	  CALL NCASTX(COR_AIFR)
	ELSE IF (OPTION.EQ.'SETMIFR') THEN	!MULTIPLICATIVE IFR CORRECTION
	  CALL NCASTX(COR_MIFR)
C
	ELSE IF (OPTION.EQ.'SETPOLE') THEN	!BASEL POLE
	  CALL NCASTY(COR_POLE)
	ELSE IF (OPTION.EQ.'SETFREQ') THEN	!FREQ.
	  CALL NCASTY(COR_FRQ)
	ELSE IF (OPTION.EQ.'SETDX') THEN	!DX
	  CALL NCASTY(COR_DX)
	ELSE IF (OPTION.EQ.'SETDY') THEN	!DY
	  CALL NCASTY(COR_DY)
	ELSE IF (OPTION.EQ.'SETDZ') THEN	!DZ
	  CALL NCASTY(COR_DZ)
	ELSE IF (OPTION.EQ.'SETSHIFT') THEN	!SHIFT
	  CALL NCASTS
C
C NCACLC calculates the average and ME of ln(gain) and phase.
C Shown here are (gain-1) and the mean error of ln(gain). For small errors, the C  transformation between the two representatoions has little effect; for large
C  errors, this rep[resentation is as good or bad a any other one. To do it
C  more properly, one should either average gain itself rather than ln(gain),
C  or show ln(gain) rather than (gain-1).
C 
	ELSE IF (OPT.EQ.'SHO') THEN		!SHOW AVERAGE CORRECTION
	  DO WHILE (WNDXLN(LPOFF))		!NEXT LOOP
	    CALL NCACLC(CSOL,CME)		!MAKE AVERAGES
	    CALL WNCTXT(F_P,'!/!Q1!7C!8$#AS',STHTEL,TELNMA(0)) !HEADING
	    DO I3=0,1				!X,Y
	      DO I2=0,STHTEL-1			!EXTERNAL FORMAT
	        PCGAN(I2,I3)=1000*(EXP(RSOL(0,I2,I3))-1) 	     !GAIN %
	        PCPHS(I2,I3)=10*RSOL(1,I2,I3)*DEG		     !PHASE
CC	        RME(I2,0,I3)=10*REAL(CME(I2,I3))*(PCGAN(I2,I3)+100.) !M.E. GAIN
	        RME(I2,0,I3)=1000*REAL(CME(I2,I3))
	        RME(I2,1,I3)=10*AIMAG(CME(I2,I3))*DEG		     !M.E. PHASE
	      END DO
 	      CALL WNCTXT(F_TP,
	1		'!/!Q1!AS\g(.1%) !5$#E9.0!/!2C\(M.E.) !5$#E9.0',
	1		IPC(I3),STHTEL,PCGAN(0,I3),STHTEL,RME(0,0,I3))
	      CALL WNCTXT(F_TP,
	1		'!Q1!AS\p(.1d) !5$#E9.0!/!2C\(M.E.) !5$#E9.0!/',
	1		IPC(I3),STHTEL,PCPHS(0,I3),STHTEL,RME(0,1,I3))
 	    END DO
	    CALL WNCTXT(F_P,' ')
	  END DO
		
 	END IF
	CALL WNFCL(FCAINP)
	CALL WNFCL(FCAOUT)
	GOTO 10
C
	END

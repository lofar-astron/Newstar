C+ NCASTZ.FOR                                   
C  WNB 910813                                   
C                                               
C  Revisions:                                   
C       WNB 910820      Add STX, STR, STF, STL  
C       WNB 911009      Add STN                 
C       WNB 911121      Typo in STF             
C       WNB 921104      Full HA range           
C       WNB 921201      Add gain/phase          
C       WNB 921217      Add NCAST1              
C       HjV 930311      Change some text        
C       WNB 930602      Add NCASTI, NCASTK      
C       WNB 930602      Add NCASTY              
C       WNB 930606      Change scaling ionospheric refraction
C       WNB 930614      Change scaling DX...    
C       WNB 930617      Add NCASTS              
C       WNB 930619      Add CBITS               
C       WNB 930623      Correct STL             
C       WNB 930803      CBITS_DEF               
C       WNB 930825      Change pol. definitions 
C       CMV 931027      Tell user what has been done (ZERO, MAN, COPY)
C       JPH 931103      RTP factor in baseline pole
C       CMV 940224      Add differential shifts 
C       CMV 940331      Select telescopes to copy corrections for
C       CMV 940503      NCASTZ uses APSOL to select gains/phases
C       CMV 940503      Enumerate types in NCASTX etc, zero SHIFT
C       HjV 940516      Typo                    
C       JPH 940809      Reduce frequency of "Scan done" outputs
C       WNB 940811      Use NSCSWI for interferometer errors
C       JPH 940902      Improve reporting (940809)
C       CMV 940927      Add COR_MUL for extra gain factors
C       JPH 950124      Merge CMV 940927        
C       WNB 950614      Modify loop             
C       WNB 950628      Use CORAP/CORDAP in call to NSCSWI
C       WNB 950629      Always assume loops     
C       CMV 960123      Clear NDONE/NSEC for SET ZERO
C       HjV 960411      Put values on correct places in XCOR (NCASTX)
C                       Take all interferometers. (Also 00, 11 etc.)
C       JPH 960614      NCASTN: Leave undefined corrections unchanged
C       JPH 960725      Fix GP initialisation
C	JPH 961118	Fix handling of absent values in renormalisation
C			NCASTN: STL --> STG
C	JPH 961209	Reorganise renormalisation to produce meaningful result C			 for gain
C	JPH 9701..	Optional gain renormalisation for non-FM configuration,
C			 controlled by FREGPH<0
C	JPH 970204	Emit 'forced renormalisation' message only once.
C	WNB 080711	Added NCASTV
C	WNB 080726	Made NCASTV for multiple sets
C                                               
C                                               
	SUBROUTINE NCASTZ                       
C                                               
C  Set corrections in scan file                 
C                                               
C  Result:                                      
C                                               
C       CALL NCASTZ     will zero the specified corrections in scan files
C       CALL NCASTV     will invert the specified corrections in scan files
C			(only the 'apply' ones; not de-apply)
C       CALL NCASTC     will set the provided corrections in scans
C       CALL NCAST1( STHPI_J:I) will set the corrections in one set
C       CALL NCASTL     will copy continuum corrections to line channels
C       CALL NCASTN     will renormalise telescope corrections
C       CALL NCASTX     will set various corrections in scans
C                               TYP =   COR_EXT  : extinction
C                                       COR_CLK  : clock correction
C                                       COR_IRF  : ion. refraction
C                                       COR_FAR  : faraday rotation
C                                       COR_AIFR : additive ifr.errors
C                                       COR_MIFR : multiplicative ifr.
C       CALL NCASTY( TYP_J:I) will set the corrections in OTHS:
C                               TYP =   COR_POLE : baseline pole
C                                       COR_FRQ  : frequency
C                                       COR_DX   : dx
C                                       COR_DY   : dy
C                                       COR_DZ   : dz
C       CALL NCASTS     will set the (de-apply) shifts in STH
C                                               
C  Include files:                               
C                                               
	INCLUDE 'WNG_DEF'                       
	INCLUDE 'CBITS_DEF'                     
	INCLUDE 'STH_O_DEF'                     ! SET HEADER
	INCLUDE 'SCH_O_DEF'                     ! SCAN HEADER
	INCLUDE 'NCA_DEF'                       
C                                               
C  Parameters:                                  
C                                               
	INTEGER MXNFAR                          ! LENGTH FARADAY FILE
	  PARAMETER (MXNFAR=100)
	INTEGER FIRSTM				! first movable telescope
	  PARAMETER (FIRSTM=10)
	INTEGER G,P, F,M, E,W, X,Y		! gain,phase, fixed,movable,
						!  East,West, X,Y
	  PARAMETER (G=0,P=1, F=0,M=1, W=0,E=1, X=0,Y=1)
	INTEGER RED,ALG,OTH
	  PARAMETER (RED=1, ALG=2, OTH=3)	!corrn table index
C                                               
C  Arguments:                                   
C                                               
	INTEGER STHPI                           ! STHP FOR ST1
	INTEGER TYP                             ! TYPE OF CORRECTION
	INTEGER JDONE				! messaging flag
C                                               
C  Function references:                         
C                                               
	LOGICAL WNFWR                           ! WRITE FILE
	LOGICAL WNFRD                           ! READ FILE
	INTEGER WNFEOF                          ! FIND END OF FILE
	CHARACTER*32 WNTTSG                     ! GET SET NAME
	REAL WNGEND                             ! NORMALISE ANGLE
	LOGICAL NSCSTL,NSCSTG                   ! GET A SET
	LOGICAL NSCSCH,NSCSCT                   ! READ SCAN HEADER
	LOGICAL NSCSCW                          ! WRITE SCAN HEADER
	LOGICAL NSCSWC                          ! WRITE CORRECTION RESULTS
	LOGICAL NSCSWI                          ! WRITE IFR CORRECTIONS
	LOGICAL NSCSIF                          ! GET IFR TABLE
C                                               
C  Data declarations:                           
C                                               
	LOGICAL DOST1                           ! ST1 SWITCH
	LOGICAL DOINV				! INV SWITCH
	INTEGER SNAM(0:7,0:2)                   ! SET NAMES
	  INTEGER SETNAM(0:7)                   ! FULL SET NAME
	  EQUIVALENCE (SETNAM,SNAM(0,1))        
	REAL HA                                 ! HA OF SCAN
	REAL CHA,SHA                            ! COS, SIN(HA)
	DOUBLE PRECISION CDEC,SDEC              ! COS, SIN(DEC)
	REAL SFRQ                               ! FREQ. SCALE
	REAL CLAT,SLAT                          ! COS, SIN(LAT)
	REAL CSOL(0:STHTEL-1,0:1,0:1)           ! SOLUTION G,P X,Y
	INTEGER NFARAD                          ! # OF FARADAY LINES
	REAL FAROT(2,MXNFAR)                    ! FARADAY DATA
	REAL TCOR(0:1,0:STHTEL-1,0:1)           ! TELESCOPE CORRECTIONS
	COMPLEX XCOR(0:3,0:STHIFR-1)            ! INTERFEROMETER CORRECTIONS
	REAL TMU                                ! M.E. (OR <0 IF DELETED SCAN)
	INTEGER STHP,STHP1                      ! POINTER TO SET HEADER
	COMPLEX C0                              ! DUMMY COMPLEX
	INTEGER IGP, ISCN, ITL, ITL1, IXY, IFR  ! loop indices
	INTEGER RPTR                            ! CORR. TABLE PTR
	INTEGER INDX                            ! TEL. INDEX IN TABLE
	INTEGER CTYP                            ! LOOP CORRECTION TYPE
C
        INTEGER CDPOL(0:1)               	! POL. CODES
	  DATA CDPOL/XX_P,YY_P/                 
	INTEGER PLFL(0:3)                       
	  DATA PLFL/XX_P,XY_P,YX_P,YY_P/        
	INTEGER NSOFF(0:1,0:2)                  ! OFFSETS FOR NOISES
	  DATA NSOFF/CAP_RED,STH_REDNS_E,       
	1            CAP_ALG,STH_ALGNS_E,       
	1            CAP_OTH,STH_OTHNS_E/       
C                                               
	INTEGER*2 	IFRT(0:STHIFR-1)        ! INTERFEROMETER TABLE
 	INTEGER IFRA(0:1,0:STHIFR-1)            
	REAL ANG(0:2,0:STHIFR-1)                
	INTEGER 	NDONE, NSEC             ! scans/sectors-done counters
 	CHARACTER 	POL (0:1)                     
	  DATA 		POL/'X','Y'/                     
	CHARACTER*5 	GP(G:P)                     
	  DATA 		GP/'gain','phase'/
	CHARACTER*(STHTEL+STHTEL/5) TELMSK	! telescope mask message text
	CHARACTER	SYMB(0:1)		! mask symbols
	  DATA		SYMB/'1','.'/
 	REAL		SUM(F:M)		! remorm. accum., fixed and mov.
	REAL		N(F:M)			! counts
	INTEGER		FM			! fixed/movable index
	LOGICAL		DOGAIN			! 'gain normalisation' flag
	LOGICAL		FCGAIN			! 'force gain normalisn' flag
	INTEGER         BIT                     ! MASK BIT TEST
C
	BYTE STH(0:STHHDL-1)                    ! SET HEADER
	  INTEGER*2 STHI(0:STHHDL/2-1)          
	  INTEGER STHJ(0:STHHDL/4-1)            
	  REAL STHE(0:STHHDL/4-1)               
	  REAL*8 STHD(0:STHHDL/8-1)             
	  EQUIVALENCE(STH,STHI,STHJ,STHE,STHD)  
	BYTE STH1(0:STHHDL-1)                   ! SET HEADER
	  INTEGER*2 STH1I(0:STHHDL/2-1)         
	  INTEGER STH1J(0:STHHDL/4-1)           
	  REAL STH1E(0:STHHDL/4-1)              
	  REAL*8 STH1D(0:STHHDL/8-1)            
	  EQUIVALENCE(STH1,STH1I,STH1J,STH1E,STH1D)
	BYTE SCH(0:SCHHDL-1)                    ! SCAN HEADER
	  INTEGER*2 SCHI(0:SCHHDL/2-1)          
	  INTEGER SCHJ(0:SCHHDL/4-1)            
	  REAL SCHE(0:SCHHDL/4-1)               
	  REAL*8 SCHD(0:SCHHDL/8-1)             
	  EQUIVALENCE(SCH,SCHI,SCHJ,SCHE,SCHD)  
	BYTE SCH1(0:SCHHDL-1)                   ! SCAN HEADER
	  INTEGER*2 SCH1I(0:SCHHDL/2-1)         
	  INTEGER SCH1J(0:SCHHDL/4-1)           
	  REAL SCH1E(0:SCHHDL/4-1)              
	  REAL*8 SCH1D(0:SCHHDL/8-1)            
	  EQUIVALENCE(SCH1,SCH1I,SCH1J,SCH1E,SCH1D)
C-                                              
C                                               
C INIT                                          
C
	DOINV=.FALSE.			        ! INDICATE ZERO
	GOTO 12
C
C STV
C
	ENTRY NCASTV
C
	DOINV=.TRUE.
	GOTO 12
C
 12	CONTINUE
	DOST1=.FALSE.                           
	CORDAP=0                                ! NOTHING DE-APPLIED
	CORAP=NOT(CORZE)                        ! CORRECT FOR ZERO
	DO I3=0,1                               ! X,Y
	  DO I2=0,1                             ! G,P
	    DO I1=0,STHTEL-1                    ! TEL.
	      CSOL(I1,I2,I3)=0                  ! ZERO CORRECTION
	    END DO                              
	  END DO                                
	END DO                                  
	NSEC=0                                  
	NDONE=0                                 
	GOTO 10                                 
C                                               
C STC                                           
C                                               
	ENTRY NCASTC                            
C                                               
	DOST1=.FALSE.
	DOINV=.FALSE.                           
	GOTO 11                                 
C                                               
C ST1                                           
C                                               
	ENTRY NCAST1(STHPI)                     
C                                               
	DOST1=.TRUE.
	DOINV=.FALSE.                            
	STHP=STHPI                              ! GET STHP
	GOTO 11                                 
C                                               
 11     CONTINUE                                
	NSEC=0                                  
	NDONE=0                                 
	APSOL(0)=.TRUE.                         ! DO GAIN
	APSOL(1)=.TRUE.                         ! DO PHASE
	CORDAP=0                                ! NOTHING DE-APPLIED
	CORAP=0                                 ! NOTHING APPLIED
	CORZE=0                                 ! NO ZEROING
	DO I3=0,1                               ! X,Y
	  DO I1=0,STHTEL-1                      ! TEL.
	    CSOL(I1,0,I3)=LOG(ABS(PCGAN(I1,I3)))! PUT CORRECTION
	    CSOL(I1,1,I3)=PCPHS(I1,I3)/180.*PI  ! MAKE RADIANS
	  END DO                                
	END DO                                  
	GOTO 10                                 
C                                               
C DO SEcTorS                                    
C                                               
 10     CONTINUE                                
	IF (.NOT.DOST1) THEN                    
	  IF (.NOT.NSCSTL(FCAOUT,SETS,STH(0),STHP,SETNAM,LPOFF))
	1               GOTO 21                 ! NO MORE SETS
	ELSE                                    
	  IF (.NOT.WNFRD(FCAOUT,STHHDL,STH(0),STHP)) GOTO 22
						! READ SET HEADER
	  SETNAM(0)=STHJ(STH_SETN_J)            ! SAVE SET NUMBER
	  SETNAM(1)=-2                          
	END IF                                  
	NSEC=NSEC+1                             
C                                               
C DO SCANS                                      
C                                               
	DO I=0,STHJ(STH_SCN_J)-1                ! ALL SCANS
C                                               
C INIT SCAN                                     
C                                              
	  HA=STHE(STH_HAB_E)+I*STHE(STH_HAI_E)  ! HA OF SCAN
	  IF (HA.LT.HARAN(1) .OR. HA.GT.HARAN(2)) GOTO 30
						! FORGET
C                                               
C ZERO                                          
C         
	  IF (.NOT.DOINV) THEN
	    IF (.NOT.NSCSWC(FCAOUT,STH,I,CSOL,CAP_OTH,APSOL,XYSOL,TELS,
	1	CORAP,CORDAP,CORZE)) THEN
   31	      CONTINUE                            
	      CALL WNCTXT(F_TP,' !7$EAF7.2 Error writing scan data',HA)
	      GOTO 20		! TRY NEXT SET
	    END IF                                
	    IF (.NOT.NSCSWI(FCAOUT,STH,I,IFRT,0,IAND(CORZE,CAP_MIFR),
	1	0,0,CORZE)) GOTO 31
	    IF (.NOT.NSCSWI(FCAOUT,STH,I,IFRT,0,IAND(CORZE,CAP_AIFR),
	1	0,0,CORZE)) GOTO 31
	  ELSE
C
C INVERT
C
	    IF (.NOT.NSCSCH(FCAOUT,STH,0,I,0,0,SCH)) THEN ! READ SCAN HDR
	      GOTO 32		! TRY NEXT SCAN
	    END IF
CC	    CALL WNCTXT(F_TP, 'corze !UL',CORZE) !  xxx
	    DO IXY=X,Y          ! X,Y
	      IF (XYSOL(IXY)) THEN ! X OR Y TODO?
		DO ITL=0,STHTEL-1
		  IF (TELS(ITL)) THEN !THIS TELESCOPE TODO?
		    INDX=2*ITL+2*STHTEL*IXY ! OFFSET ON CORRECTION ARRAY
		    BIT=1             ! MASK BIT
		    RPTR=SCH_REDC_E   ! START WITH REDUN
		    DO CTYP=RED,OTH   ! RED,ALG,OTH
		      IF (IAND(CORZE,BIT).NE.0) THEN ! DO THIS CORRECTION
			DO IGP=G,P    ! GAIN AND PHASE
			  IF (APSOL(IGP)) THEN
			    SCHE(RPTR+INDX+IGP)=-SCHE(RPTR+INDX+IGP) !INVERT
			  END IF
			END DO
		      END IF
		      BIT=2*BIT	      !NEXT CORR. TABLE
		      RPTR=RPTR+SCH_ALGC_E-SCH_REDC_E
		    END DO            ! END CTYP LOOP
		  END IF
		END DO                ! END TELESCOPE LOOP
	      END IF
	    END DO                    ! END XY LOOP
	    IF (.NOT.NSCSCW(FCAOUT,STH,0,I,0,0,SCH)) THEN ! WRITE SCAN HDR
	      GOTO 31
	    END IF
	  END IF                      ! END INVERT
C                                               
C NEXT SCAN                                     
C                                               
 30       CONTINUE                              
	  NDONE=NDONE+1  
 32	  CONTINUE
	  IF (MOD(NDONE,100).EQ.0)              
	1       CALL WNCTXT(F_TP,'Now at output sector !AS: !UJ scans done', 
	1       WNTTSG(SETNAM,0), NDONE)        
	END DO                                  ! END SCANS
C                                               
C NEXT SEcTor                                   
C                                               
 20     CONTINUE  
	IF (.NOT.DOINV) THEN                              
	  IF (IAND(CAP_SHF,CORZE).NE.0) THEN ! ZERO SHIFT
	    DO I=0,1		! SET SHIFTS
	      STHE(STH_SHFT_E+I)= 0               
	      STHE(STH_DSHFT_E+I)=0               
	    END DO                                
	  END IF                                  
C         
	  IF (CORZE.NE.0) THEN	! ZERO NOISES
	    DO I=0,2		! RESET NOISES
	      IF (IAND(NSOFF(0,I),CORZE).NE.0) THEN
				! CORRECTION SET ZERO
		DO I3=0,1	! GAIN,PHASE
		  IF (APSOL(I3)) THEN ! DO
		    DO I4=0,1	! X,Y
		      IF (XYSOL(I4)) STHE(NSOFF(1,I)+I3+2*I4)=0
				! ZERO NOISE
		    END DO                        
		  END IF                          
		END DO                            
	      END IF                              
	    END DO                                
	    IF (.NOT.WNFWR(FCAOUT,STHHDL,STH,STHP)) THEN
				! REWRITE SET HEADER
 22	      CONTINUE                            
	      CALL WNCTXT(F_TP,'Error reading/writing '//
	1	  'Sector header !AS',WNTTSG(SETNAM,0))
	    END IF                                
	  END IF		! END ZERO NOISES
	END IF
	IF (.NOT.DOST1) GOTO 10 ! NEXT SET
C         
C READY                                         
C                                               
 21     CONTINUE                                
	CALL WNCTXT(F_TP,                       
	1       '!13C\Total of !UJ output sectors, !UJ scans', NSEC, NDONE)
	RETURN                                  ! READY
C                                               
C STL                                           
C                                               
	ENTRY NCASTL                            
C                                               
C DO SETS                                       
C                                               
	DO WHILE (NSCSTL(FCAOUT,SETS,STH(0),STHP,SETNAM,LPOFF))
						! NEXT SET
	  DO I=1,7                              ! MAKE CONTINUUM SEARCH
	    SNAM(I,0)=0                         
	  END DO                                
	  SNAM(0,0)=1                           
	  SETNAM(3)=RS1                           ! CONTINUUM CHANNEL
	  IF (.NOT.NSCSTG(FCAOUT,SNAM,STH1(0),STHP1,SNAM(0,2))) THEN
						! NO CONT.
	    CALL WNCTXT(F_TP,'No continuum channel !AS',
	1               WNTTSG(SETNAM,0))       
	    GOTO 61                             ! NEXT SET
	  END IF                                
C                                               
C DO SCANS                                      
C                                               
	  DO I=0,STHJ(STH_SCN_J)-1              ! ALL SCANS
C                                               
C INIT SCAN                                     
C                                               
	    HA=STHE(STH_HAB_E)+I*STHE(STH_HAI_E)! HA OF SCAN
	    IF (HA.LT.HARAN(1) .OR. HA.GT.HARAN(2)) GOTO 60
						! FORGET
	    IF (.NOT.NSCSCH(FCAOUT,STH,0,I,0,0,SCH)) THEN
						! READ SCAN
	      GOTO 61                           ! TRY NEXT SCAN
	    END IF                              
C                                               
C CONTINUUM DATA                                
C                                               
	    I1=NINT((HA-STH1E(STH_HAB_E))/STH1E(STH_HAI_E))
						! INPUT SCAN #
	    IF (.NOT.NSCSCH(FCAOUT,STH1,0,I1,0,0,SCH1)) THEN
	      GOTO 61                           ! TRY NEXT SCAN
	    END IF                              
C                                               
C COPY DATA                                     
C                                               
	    DO I2=0,1                           ! NOISES
	      IF (IAND(SPOL,CDPOL(I2)).NE.0) THEN
						! WANT POL.
		DO I3=0,1                       
		  SCHE(SCH_REDNS_E+2*I2+I3)=SCH1E(SCH_REDNS_E+2*I2+I3)
		  SCHE(SCH_ALGNS_E+2*I2+I3)=SCH1E(SCH_ALGNS_E+2*I2+I3)
		  SCHE(SCH_OTHNS_E+2*I2+I3)=SCH1E(SCH_OTHNS_E+2*I2+I3)
		END DO                          
	      END IF                            
	    END DO                              
	    SCHE(SCH_EXT_E)=SCH1E(SCH_EXT_E)    ! EXTINCTION
	    SCHE(SCH_REFR_E)=SCH1E(SCH_REFR_E)  ! REFRACTION
	    SCHE(SCH_FARAD_E)=SCH1E(SCH_FARAD_E)! FARADAY
	    SCHE(SCH_IREF_E)=SCH1E(SCH_IREF_E)  ! IONOS REFRACTION
	    SCHE(SCH_CLKC_E)=SCH1E(SCH_CLKC_E)  ! CLOCK CORRECTION
	    DO I2=0,1                           ! CORRECTIONS
	      IF (IAND(SPOL,CDPOL(I2)).NE.0) THEN
						! WANT POL.
		DO I3=0,STHTEL-1                
		  DO I4=0,1                     
		    SCHE(SCH_REDC_E+2*STHTEL*I2+2*I3+I4)=
	1               SCH1E(SCH_REDC_E+2*STHTEL*I2+2*I3+I4)
		    SCHE(SCH_ALGC_E+2*STHTEL*I2+2*I3+I4)=
	1               SCH1E(SCH_ALGC_E+2*STHTEL*I2+2*I3+I4)
		    SCHE(SCH_OTHC_E+2*STHTEL*I2+2*I3+I4)=
	1               SCH1E(SCH_OTHC_E+2*STHTEL*I2+2*I3+I4)
		  END DO                        
		END DO                          
	      END IF                            
	    END DO                              
	    SCHJ(SCH_IFRAC_J)=SCH1J(SCH_IFRAC_J)! IFR CORRECTIONS
	    SCHJ(SCH_IFRMC_J)=SCH1J(SCH_IFRMC_J)
C                                               
C WRITE HEADER                                  
C                                               
	    IF (.NOT.NSCSCW(FCAOUT,STH,0,I,0,0,SCH)) THEN
	      CALL WNCTXT(F_TP,'!7$EAF7.2 Error writing scan data',HA)
	      GOTO 61                           ! TRY NEXT SET
	    END IF                              
C                                               
C NEXT SCAN                                     
C                                               
 61         CONTINUE                            
	  END DO                                ! END SCANS
C                                               
C NEXT SET                                      
C                                               
 60       CONTINUE                              
	END DO                                  ! END SETS
C                                               
	RETURN                                  ! READY
C                                               
C STN                                           
C                                               
	ENTRY NCASTN(JDONE)                            
C                                               
C INIT                                          
C                                               
	APSOL(0)=.TRUE.                         ! DO GAIN
	APSOL(1)=.TRUE.                         ! DO PHASE
	IF (JDONE.EQ.0) THEN
	  JDONE=1
	  CALL WNCTXT(F_TP,'
	1!/!4C\    As of December 1996, the gain renormalisation algorithm has 
	1!/!4C\been changed. Gain renormalisations made earlier are in error.
	1!/!4C\To redo them, first zero the ALG corrections with the SET ZERO 
	1!/!4C\option.
	1!/
	1!/!4C\    The revised code is valid exclusively for the "standard"
	1!/!4C\WSRT configuration with only fixed-movable interferometers. It 
	1!/!4C\will equalise the average gains of the fixed and movable 
	1!/!4C\telescope groups. If either group is absent in the selection
 	1!/!4C\(FORCE_GAIN parameter), the average for the telescopes selected
	1!/!4C\will be zeroed !/' )
	ENDIF
C
C Gain renormalisation requested? To be forced for non-standard configuration?
C
!= I1=ITL
	DOGAIN=.FALSE.
	FCGAIN=.FALSE.
 	DO ITL=0,STHTEL-1
	  IF (FREGPH(ITL,G).NE.0) DOGAIN=.TRUE.
	  IF (FREGPH(ITL,G).LT.0) FCGAIN=.TRUE.
	ENDDO
!=
C                                                                                           C Sector loop
C
	DO WHILE (NSCSTG(FCAOUT,SETS,STH(0),STHP,SETNAM))
	  CALL WNDSTI(FCAOUT,SETNAM)
C
C Get IFR table and check for FM configuration. 
C
	  IF (DOGAIN) THEN			! Gain normalisation
	    IF (FCGAIN) THEN			! Forcing requested
	      IF (JDONE.LT.2) THEN
	        JDONE=2
	        CALL WNCTXT(F_TP,
	1'!4C\Forced gain renormalisation:!/' //
	1'!4C\' //
	1'Resulting gain corrections are WRONG for FF and MM interferometers' )
 	      ENDIF
	    ELSE		
	      IF (.NOT.NSCSIF(FCAOUT,STH,IFRT,IFRA,ANG)) GOTO 73
	      DO IFR=0,STHJ(STH_NIFR_J)-1
	        IF (IFRA(W,IFR).GE.FIRSTM .OR. 
	1		IFRA(E,IFR).LT.FIRSTM) THEN
		  CALL WNCTXT(F_TP,
	1'!-18$AS Aborting gain renormalisation for a nonstandard WSRT' // 
	1'!/!20C\configuration: !XJ!XJ is not fixed-movable',
	1		WNTTSG(SETNAM,0), IFRA(W,IFR),IFRA(E,IFR) )
		  GOTO 70 
	        ENDIF
	      ENDDO
	    ENDIF
	  ENDIF
C
C Scan loop
C	     
!= I=ISCN
 	  DO ISCN=0,STHJ(STH_SCN_J)-1           ! ALL SCANS
	    HA=STHE(STH_HAB_E)+ISCN*STHE(STH_HAI_E)
 	    IF (HA.LT.HARAN(1) .OR. HA.GT.HARAN(2)) GOTO 71
C                                               
C GET HEADER AND CORRECTIONS                    
C                                               
	    IF (.NOT.NSCSCT(FCAOUT,STH,0,ISCN,CORAP,0,SCH,
	1                       TCOR,TMU)) THEN 
 73           CONTINUE                          
	      CALL WNCTXT(F_TP,'!7$EAF7.2 Error reading/writing scan data',HA)
	      GOTO 70                           ! TRY NEXT SET
	    END IF
                             
C                                               
C DO                                            
C 	Phase renormalisation simply reduces the average of selected telescopes
C  to zero.
C	Gain renormalisation is meaningful only in the case where the telescopes
C  form two groups, with no correlations within each group. Renormalisation 
C  consists of making the gain averages for the two groups equal. The present
C  code covers only the specific case of fixed and movable groups, which is by
C  far the most common one.
C	For phase the F accumulator is used for all telescopes and the M
C  accumulator is left at 0. For gain, the F and M accumulations are done 
C  separately and then combined.
C	In the special case that only F or M telescopes are selected, the gain
C  average for these selected telescopes is reduced to 0.
C	The renormalisation corrections are store in the OTH table.
C                                             
!= I=ISCN I1=IGP I2=ITL I3=IXY
	    IF (TMU.GE.0) THEN                  ! PRESENT
	      DO IGP=G,P                        ! GAIN, PHASE
		DO IXY=0,1                      ! X,Y
		  SUM(F)=0                      ! AVERAGES
		  SUM(M)=0
		  N(F)=0                        ! COUNTS
		  N(M)=0
		  I=1				! TELMSK index
		  FM=F				! begin with fixed telescopes
 		  DO ITL=0,STHTEL-1
		    IF (IGP.EQ.G .AND.		! for gain,
	1		ITL.EQ.FIRSTM) FM=M	!  switch to moving telescopes
		    CSOL(ITL,IGP,IXY)=0		! preset
		    IF (FREGPH(ITL,IGP).NE.0 .AND.! selected
	1		TCOR(IGP,ITL,IXY).NE.0.)!  and present
	1		THEN					
		      N(FM)=N(FM)+1                 
		      SUM(FM)=SUM(FM)+TCOR(IGP,ITL,IXY)
		      TELMSK(I:I)='.'
		    ELSEIF (FREGPH(ITL,IGP).NE.0) THEN
		      TELMSK(I:I)='1'		! selected and not present
		    ELSE
		      TELMSK(I:I)='.'		! not selected
 		    ENDIF
		    I=I+1			! next char in TELMSK
 		    IF (MOD(ITL+1,5).EQ.0) THEN
		      TELMSK(I:I)=' '		! insert a blank
		      I=I+1
		    ENDIF	
  		  ENDDO
		  IF (N(F)+N(M).NE.0) THEN	! some values found
 		    IF (TELMSK.NE.'..... ..... ....') THEN
						! some values missing 
 		      CALL WNCTXT(F_TP,'!-18$AS !6$EAF7.2' //      
	1 ' Missing !1$AS !-5$AS value(s): !AS',
	1               WNTTSG(SETNAM,0),SCHE(SCH_HA_E), 
	1		POL(IXY),GP(IGP), TELMSK )
		    END IF
		    IF (N(F).NE.0) SUM(F)=SUM(F)/N(F)
		    IF (N(M).NE.0) SUM(M)=SUM(M)/N(M)
		    IF (IGP.EQ.G) THEN		! for gain,
		      SUM(F)=SUM(F)-SUM(M)	!  make F and M averages equal
		      IF (N(F).NE.0 .AND. N(M).NE.0)
	1			SUM(F)=SUM(F)/2
		    ENDIF
 		    I=-1  
  		    DO ITL=0,STHTEL-1           
 		      IF (IGP.EQ.0 .AND. ITL.EQ.FIRSTM)
	1			I=1		! reverse gain for moving tel.
		      IF (TCOR(IGP,ITL,IXY) .NE.0.)! if correction defined,
 	1   		CSOL(ITL,IGP,IXY)=I*SUM(F)!  set normalising value
		    END DO
		  ENDIF                      
 		END DO! x, y
	      END DO! gain, phase
	    END IF
!=                              
C                                               
C WRITE HEADER                                  
C                                               
	    IF (.NOT.NSCSWC(FCAOUT,STH,ISCN,CSOL,CAP_OTH,APSOL,XYSOL,TELS,
	1                       -1,0,0)) GOTO 73
C                                               
C NEXT SCAN                                     
C                                               
 71         CONTINUE                            
	  END DO! scans
C                                               
C NEXT SET                                      
C                                               
 70       CONTINUE                              
	END DO! sectors                                  
C                                               
	RETURN                                  
C                                               
C STX                                           
C                                               
	ENTRY NCASTX(TYP)                       
C                                               
C                                               
C READ FARADAY DATA                             
C                                               
	IF (TYP.EQ.COR_FAR.OR.TYP.EQ.COR_IRF) THEN
						! NEED IONOSPHERE
	  CALL WNGLUN(J3)                      
#ifdef wn_li__ 
	  OPEN (UNIT=J3,ERR=50,FILE=FILINP,STATUS='OLD')
#else
	  OPEN (UNIT=J3,ERR=50,FILE=FILINP,READONLY,STATUS='OLD')
#endif
						! OPEN INPUT
	  NFARAD=0                              
	  DO WHILE (NFARAD.LT.MXNFAR)           ! READ
	    READ (UNIT=J3,FMT=*,ERR=50,END=51)  
	1               FAROT(1,NFARAD+1),FAROT(2,NFARAD+1)
	    NFARAD=NFARAD+1                     
	  END DO                                
 51       CONTINUE                              
	  CLOSE (UNIT=J3,ERR=52)                
 52       CONTINUE                              
	  CALL WNGLUF(J3)                       
C                                               
C SORT                                          
C                                               
	  DO I=1,NFARAD-1                       
	    DO I1=1,NFARAD-1                    
	      IF (FAROT(1,I1).GT.FAROT(1,I1+1)) THEN
		DO I2=1,2                       
		  R0=FAROT(I2,I1)               
		  FAROT(I2,I1)=FAROT(I2,I1+1)   
		  FAROT(I2,I1+1)=R0             
		END DO                          
	      END IF                            
	    END DO                              
	  END DO                                
	END IF                                  
C                                               
	GOTO 42                                 ! SET CORRECTIONS
C                                               
C ERROR READING IONOSPHERE                      
C                                               
 50     CALL WNCTXT(F_TP,'Cannot open/read Faraday file !AS',FILINP)
	CLOSE (UNIT=J3,ERR=53)                  
 53     CONTINUE                                
	RETURN                                  
C                                               
C DO SETS                                       
C                                               
 42     CONTINUE                                
	DO WHILE(NSCSTL(FCAOUT,SETS,STH(0),STHP,SETNAM,LPOFF))
						! NEXT SET
C                                               
C READ IFR TABLE AND SORT CORRECTIONS           
C                                               
	  IF (TYP.EQ.COR_MIFR.OR.TYP.EQ.COR_AIFR) THEN
						! NEED IFR TABLE
	    IF (.NOT.NSCSIF(FCAOUT,STH,IFRT,IFRA,ANG)) THEN
						! READ IFR TABLE
	       CALL WNCTXT(F_TP,'!/Error reading IFR table !AS',
	1                 WNTTSG(SETNAM,0))     
	       GOTO 40                          ! TRY NEXT SET
	    END IF                              
C                                               
	    IF (TYP.EQ.COR_MIFR) THEN           
	       C0=CMPLX(LOG(1.),0.)             ! ASSUME PERFECT GAIN
	    ELSE                                
	       C0=CMPLX(0,0)                    ! ASSUME NO OFFSET
	    END IF                              
	    DO I4=0,STHJ(STH_NIFR_J)-1          
	      DO I3=0,3                         
		XCOR(I3,I4)=C0                  ! DEFAULT VALUE
	      END DO                            
	    END DO                              
C                                               
	    I4=0                                ! INDEX IN ICOR
	    DO WHILE (I4.LT.STHJ(STH_NIFR_J))   ! FIND INDEX IN IFRT
	      I=-1                              ! POINTER IN IFRCOR
	      DO I1=0,STHTEL-1                  
		DO I2=I1,STHTEL-1               
		  I=I+1                         ! NEXT ENTRY IN IFRCOR
		  IF (SIFRS(I1,I2)) THEN        ! IFR SELECTED
		     IF (IFRT(I4).EQ.I1*256+I2.OR.
	1                 IFRT(I4).EQ.I2*256+I1) THEN
						! FOUND
			DO I3=0,3               
			  IF (IAND(SPOL,PLFL(I3)).NE.0) THEN
						! POL SELECTED
			    XCOR(I3,I4)=IFRCOR(I,I3)
						! COPY
			  END IF                
			END DO                  
			GOTO 44                 
		     END IF                     
		   END IF                       
		END DO                          ! I2
	      END DO                            ! I1
 44           CONTINUE                          
	      I4=I4+1                           
	    END DO                              ! WHILE I4
	  END IF                                
C                                               
C DO SCANS                                      
C                                               
	  DO I=0,STHJ(STH_SCN_J)-1              ! ALL SCANS
C                                               
C INIT SCAN                                     
C                                               
	    HA=STHE(STH_HAB_E)+I*STHE(STH_HAI_E)! HA OF SCAN
	    IF (HA.LT.HARAN(1) .OR. HA.GT.HARAN(2)) GOTO 41
						! FORGET
C                                               
C GET HEADER                                    
C                                               
	    IF (.NOT.NSCSCH(FCAOUT,STH,0,I,0,0,SCH)) THEN
 43           CONTINUE                          
	      CALL WNCTXT(F_TP,                 
	1       '!7$EAF7.2 Error reading/writing scan data',HA)
	      GOTO 40                           ! TRY NEXT SET
	    END IF                              
C                                               
C DO                                            
C                                               
	    IF (TYP.EQ.COR_CLK) THEN            ! CLOCK CORRECTION
	      SCHE(SCH_CLKC_E)=CFREF(0)         
	    ELSE IF (TYP.EQ.COR_EXT) THEN       ! EXTINCTION
	      SCHE(SCH_EXT_E)=CFEXT(0)+STHD(STH_FRQ_D)/1000.*
	1               (CFEXT(1)+STHD(STH_FRQ_D)/1000.*CFEXT(2))
	    ELSE IF (TYP.EQ.COR_REF) THEN       ! REFRACTION
	      SCHE(SCH_REFR_E)=CFREF(0)+STHD(STH_FRQ_D)/1000.*
	1               (CFREF(1)+STHD(STH_FRQ_D)/1000.*CFREF(2))
	    ELSE IF (TYP.EQ.COR_FAR.OR.TYP.EQ.COR_IRF) THEN
						! IONOSPHERIC
	      R0=HA*360.                        ! HA DEGREES
	      IF (NFARAD.GT.0) THEN             
		I1=1                            
		DO WHILE (I1.LE.NFARAD)         
		  IF (R0.LE.FAROT(1,I1)) GOTO 54! FOUND
		  I1=I1+1                       
		END DO                          
 54             CONTINUE                        
		IF (I1.LE.1) THEN               
		  R1=FAROT(2,1)                 ! ROTATION
		ELSE IF (I1.GT.NFARAD) THEN     
		  R1=FAROT(2,NFARAD)            
		ELSE                            
		  R1=(R0-FAROT(1,I1-1))/(FAROT(1,I1)-FAROT(1,I1-1))
						! FRACTION
		  R1=(1-R1)*FAROT(2,I1-1)+R1*FAROT(2,I1)
		END IF                          
	      ELSE                              
		R1=0                            ! NO FARADAY/REFRACTION
	      END IF                            
	      IF (TYP.EQ.COR_FAR) THEN          ! FARADAY
		R1=R1/((STHD(STH_FRQ_D)/1000.)**2)
						! SCALE
		SCHE(SCH_FARAD_E)=WNGEND(R1)/DEG! SAVE RADIANS
	      ELSE                              ! IONOS. REFRACTION
		R1=R1/(STHD(STH_FRQ_D)/1000.)   ! SCALE
		SCHE(SCH_IREF_E)=WNGEND(R1)/360.! SAVE CIRCLES
	      END IF                            
	    END IF                              
C                                               
C WRITE HEADER                                  
C                                               
	    IF (.NOT.NSCSCW(FCAOUT,STH,0,I,0,0,SCH)) GOTO 43
C                                               
C WRITE IFR ERRORS                              
C                                               
	    IF (TYP.EQ.COR_AIFR) THEN           ! ADD. IFR
	      IF (.NOT.NSCSWI(FCAOUT,STH,I,IFRT,XCOR,CAP_AIFR,
	1               CORAP,CORDAP,0)) GOTO 43! SAVE
	    ELSE IF (TYP.EQ.COR_MIFR) THEN      ! MUL. IFR
	      IF (.NOT.NSCSWI(FCAOUT,STH,I,IFRT,XCOR,CAP_MIFR,
	1               CORAP,CORDAP,0)) GOTO 43! SAVE
	    END IF                              
C                                               
C NEXT SCAN                                     
C                                               
 41         CONTINUE                            
	  END DO                                ! END SCANS
C                                               
C NEXT SET                                      
C                                               
 40       CONTINUE                              
	END DO                                  
C                                               
	RETURN                                  
C                                               
C STY                                           
C                                               
	ENTRY NCASTY(TYP)                       
C                                               
	APSOL(0)=.FALSE.                        ! NO GAIN
	APSOL(1)=.TRUE.                         ! DO PHASE
	IF (TYP.EQ.COR_MUL) THEN                ! EXTRA GAIN FACTORS
	  APSOL(0)=.TRUE.                       ! ONLY GAIN
	  APSOL(1)=.FALSE.                      ! NO PHASE
	END IF                                  
	DO I1=0,STHTEL-1                        ! ALL TELESCOPES
	  TELS(I1)=.TRUE.                       
	END DO                                  
	CORDAP=0                                ! NOTHING DE-APPLIED
	CORAP=CAP_OTH                           ! ADD TO OTHS APPLIED
	CORZE=0                                 ! NO ZEROING
C                                               
C DO SETS                                       
C                                               
	DO WHILE (NSCSTL(FCAOUT,SETS,STH(0),STHP,SETNAM,LPOFF))
	  SDEC=SIN(STHD(STH_DEC_D)*PI2)         ! SIN(DEC)
	  CDEC=COS(STHD(STH_DEC_D)*PI2)         ! COS(DEC)
	  SFRQ=STHD(STH_FRQ_D)/(CL*1E-6)        ! FREQ. SCALE
	  IF (STHJ(STH_INST_J).EQ.1) THEN       ! ATNF
	    SLAT=SLATA                          
	    CLAT=CLATA                          
	  ELSE                                  ! WSRT
	    SLAT=SLATW                          
	    CLAT=CLATW                          
	  END IF                                
C                                               
C DO SCANS                                      
C                                               
	  DO I=0,STHJ(STH_SCN_J)-1              ! ALL SCANS
C                                               
C INIT SCAN                                     
C                                               
	    HA=STHE(STH_HAB_E)+I*STHE(STH_HAI_E)! HA OF SCAN
	    IF (HA.LT.HARAN(1) .OR. HA.GT.HARAN(2)) GOTO 81
						! FORGET
	    SHA=SIN(HA*PI2)                     
	    CHA=COS(HA*PI2)                     
C                                               
C GET CORRECTIONS                               
C                                               
	    DO I1=0,STHTEL-1                    ! TEL.
	      IF (TYP.EQ.COR_FRQ) THEN          ! FREQ.
		CSOL(I1,1,0)=-PI2*STHE(STH_RTP_E+I1)*
	1               PCGAN(0,0)*SFRQ*CDEC*SHA/
	1               STHD(STH_FRQ_D)         
		CSOL(I1,1,1)=CSOL(I1,1,0)       ! Y CORR= X CORR
	      ELSE IF (TYP.EQ.COR_DX) THEN      ! DX
		CSOL(I1,1,0)=PI2*               
	1               PCGAN(I1,0)/1000.*SFRQ* 
	1               CDEC*SHA                
		CSOL(I1,1,1)=CSOL(I1,1,0)       ! Y CORR= X CORR
	      ELSE IF (TYP.EQ.COR_DY) THEN      ! DY
		CSOL(I1,1,0)=-PI2*              
	1               PCGAN(I1,0)/1000.*SFRQ* 
	1               (SDEC*CLAT-CDEC*CHA*SLAT)
		CSOL(I1,1,1)=CSOL(I1,1,0)       ! Y CORR= X CORR
	      ELSE IF (TYP.EQ.COR_DZ) THEN      ! DZ
		CSOL(I1,1,0)=-PI2*              
	1               PCGAN(I1,0)/1000.*SFRQ* 
	1               (SDEC*SLAT+CDEC*CHA*CLAT)
		CSOL(I1,1,1)=CSOL(I1,1,0)       ! Y CORR= X CORR
	      ELSE IF (TYP.EQ.COR_POLE) THEN    ! BASEL. POLE
		CSOL(I1,1,0)=-PI2*STHE(STH_RTP_E+I1)*
	1               PCGAN(0,0)/DEG*SFRQ*    
	1               SDEC                    
		CSOL(I1,1,1)=CSOL(I1,1,0)       ! Y CORR= X CORR
	      ELSE IF (TYP.EQ.COR_MUL) THEN     ! EXTRA FACTOR
		CSOL(I1,0,0)=LOG(ABS(PCGAN(I1,0)))
		CSOL(I1,0,1)=LOG(ABS(PCGAN(I1,1)))
	      END IF                            
	    END DO                              ! END TEL.
C                                               
C APPLY                                         
C                                               
	    IF (.NOT.NSCSWC(FCAOUT,STH,I,CSOL,CAP_OTH,APSOL,XYSOL,TELS,
	1                       CORAP,CORDAP,CORZE)) THEN
	      CALL WNCTXT(F_TP,'!7$EAF7.2 Error writing scan data',HA)
	      GOTO 80                           ! TRY NEXT SET
	    END IF                              
C                                               
C NEXT SCAN                                     
C                                               
 81         CONTINUE                            
	  END DO                                ! END SCANS
C                                               
C NEXT SET                                      
C                                               
 80       CONTINUE                              
	END DO                                  ! END SETS
C                                               
C READY                                         
C                                               
	RETURN                                  ! READY
C                                               
C STS                                           
C                                               
	ENTRY NCASTS                            
C                                               
C DO SETS                                       
C                                               
	DO WHILE (NSCSTL(FCAOUT,SETS,STH(0),STHP,SETNAM,LPOFF))
	  DO I=0,1                              ! SET SHIFTS
	    STHE(STH_SHFT_E+I)= CFREF(I)        
	    STHE(STH_DSHFT_E+I)=CFEXT(I)        
	  END DO                                
	  IF (.NOT.WNFWR(FCAOUT,STHHDL,STH,STHP)) GOTO 22
						! REWRITE SET HEADER
	END DO                                  ! END SETS
C                                               
C READY                                         
C                                               
	RETURN                                  ! READY
C                                               
C                                               
	END                                     


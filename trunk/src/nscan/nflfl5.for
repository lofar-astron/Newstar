C+ NFLFL5.FOR
C  WNB 930617
C
C  Revisions:
C	WNB 930618	Rename from NSCDF5
C	WNB 930620	More output text; add type; make FL8
C	HjV 930621	Remove declaration WNCASB
C	WNB 930622	Add baseline type; more text
C	WNB 930820	Change order WRITE IFR print
C	JEN 931112	Extra argument (LUNOUT) for NFLFL7 (WRITE)
C	JEN 931210	Make messages consistent (entries/length)
C	CMV 940203	Write node-name and sets in ASCII file
C
	LOGICAL FUNCTION NFLFL5(DFAR)
C
C  Output/input of flagging files
C
C  Result:
C
C	NFLFL5_L = NFLFL5( DFAR_J:I)
C				Unload list to FLF node
C	NFLFL6_L = NFLFL6( DFAR_J:I)
C				Load list from FLF node
C	NFLFL7_L = NFLFL7( DFAR_J:I,LUNOUT_J:I,NODE_C*:I,SETS_J(0:*,0:*))
C				Write list to ASCII file or log/screen
C				The node name and the decoded sets are
C				written as comment.
C	NFLFL8_L = NFLFL8( DFAR_J:I)
C				Read list from ASCII file
C
C  PIN references:
C
C	INPUT_FLF_NODE
C	OUTPUT_FLF_NODE
C	OUTPUT_FILE
C	INPUT_FILE
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'GFH_O_DEF'
	INCLUDE 'FLH_O_DEF'	!FLF HEADER
	INCLUDE 'FLF_O_DEF'	!FLF ENTRY
	INCLUDE 'STH_O_DEF'	!TELESCOPE INFO
	INCLUDE 'SSH_O_DEF'		!SET INFO
C
C  Entry points:
C
	LOGICAL NFLFL6,NFLFL7,NFLFL8
C
C  Parameters:
C
	INTEGER MXENT		!ENTRIES IN CORE
	  PARAMETER (MXENT=8192)
	INTEGER MXRANG		!MAX. RANGE VALUE
	  PARAMETER (MXRANG=65536*16)
C
C  Arguments:
C
	INTEGER DFAR		!AREA FOR FLAGS
	INTEGER LUNOUT		!OUTPUT UNIT NR (FOR NFLFL7)
	CHARACTER*(*) NODE	!INPUT NODE
	INTEGER SETS(0:SOF__N-1,0:*)	!SPECIFIED SETS
C
C  Function references:
C
	LOGICAL WNFOP		!OPEN FILE
	LOGICAL WNFRD,WNFWR	!READ/WRITE FILE
	LOGICAL WNDNOD		!GET USER NODE
	LOGICAL WNDPAR		!GET USER DATA
	LOGICAL WNDSTM		!DECODE SET SPECIFICATION
	LOGICAL WNCASC		!SKIP CHARACTER
	LOGICAL WNCAFF		!GET FIELD
	LOGICAL WNCACJ,WNCACE,WNCACI !GET VALUE
	LOGICAL NFLFL1,NFLFL2	!SET/GET ENTRY FROM LIST
	LOGICAL NFLFLS		!GET HEADER FOR ENTRIES
	LOGICAL NFLFLR		!GO TO BEGINNING OF LIST
C
C  Data declarations:
C
	INTEGER DFCA		!IN/OUT FCA
	INTEGER LUN		!LUN USED
	CHARACTER*80 DNOD	!NODE NAME
	CHARACTER*160 DFIL	!FILE NAME
	CHARACTER*32 DHOST,DUSER !HOST NAME, USER NAME
	CHARACTER*2 POLT(0:3)	!POLARISATION NAMES
	  DATA POLT/'XX','XY','YX','YY'/
	CHARACTER*1 TELT(0:STHTEL-1) !TEL. NAMES
	  DATA TELT/'0','1','2','3','4','5','6','7','8','9',
	1		'A','B','C','D'/
	CHARACTER*1 TEL1	!TELESCOPE
	CHARACTER*20 LFLD(6)	!OUTPUT TEXT
	CHARACTER*80 LINE,FLINE	!INPUT TEXT
	INTEGER PT		!TEXT POINTER
	BYTE LFLH(0:FLHHDL-1)	!LOCAL FILE HEADER
	  INTEGER LFLHJ(0:FLHHDL/LB_J-1)
	  REAL LFLHE(0:FLHHDL/LB_E-1)
	  EQUIVALENCE (LFLH,LFLHJ,LFLHE)
	BYTE LFLF(0:FLFHDL-1,2)	!LOCAL ENTRY
	  INTEGER*2 LFLFI(0:FLFHDL/LB_I-1,2)
	  INTEGER LFLFJ(0:FLFHDL/LB_J-1,2)
	  REAL LFLFE(0:FLFHDL/LB_E-1,2)
	  EQUIVALENCE (LFLF,LFLFI,LFLFJ,LFLFE)
C-
C
C FL5
C
C INIT
C
	IF (DFAR.EQ.0) GOTO 900			!CANNOT DO
	NFLFL5=.TRUE.				!ASSUME OK
	IF (.NOT.WNDNOD('OUTPUT_FLF_NODE',' ','FLF','W',DNOD,DFIL)) THEN
	  CALL WNCTXT(F_TP,'Cannot open FLF node')
	  GOTO 900
	END IF
	IF (.NOT.WNFOP(DFCA,DFIL,'U')) THEN
	  CALL WNCTXT(F_TP,'Cannot open FLF node file')
	  GOTO 900
	END IF
C
C UNLOAD HEADER
C
	IF (.NOT.NFLFLS(DFAR,LFLH)) GOTO 901	!CANNOT GET HEADER
	IF (.NOT.WNFWR(DFCA,FLHHDL,LFLH,GFHHDL)) GOTO 51 !WRITE HEADER
	J=LFLHJ(FLH_FLFP_J)			!DATA POINTER
C
C UNLOAD ENTRIES
C
	I1 = 0                                  !COUNTER
	DO WHILE (NFLFL2(DFAR,LFLF(0,1),LFLF(0,2)))
          I1 = I1+1                             !COUNT ENTRIES
	  IF (.NOT.WNFWR(DFCA,FLFHDL,LFLF(0,1),J)) THEN !WRITE TO NODE
 51	    CONTINUE
	    CALL WNCTXT(F_TP,'Error writing FLF node')
	    GOTO 901
	  END IF
	  J=J+FLFHDL				!NEXT POINTER
	  IF (IAND(LFLFJ(0,1),1).NE.0) THEN	!WRITE SECOND
	    IF (.NOT.WNFWR(DFCA,FLFHDL,LFLF(0,2),J)) GOTO 51 !WRITE TO NODE
	    J=J+FLFHDL				!NEXT POINTER
	  END IF
	END DO					!MORE
C
	IF (.NOT.WNFWR(DFCA,FLHHDL,LFLH,GFHHDL)) GOTO 51 !REWRITE HEADER
	CALL WNFCL(DFCA)			!CLOSE OUTPUT
	CALL WNCTXT(F_TP,' ')
	CALL WNCTXT(F_TP,'!UJ entries stored in FLF node "!AS"'
	1               //' (list length=!UJ)'
	1		,I1,DNOD,LFLHJ(FLH_FLFN_J))
C
	RETURN
C
C FL6
C
	ENTRY NFLFL6(DFAR)
C
	IF (DFAR.EQ.0) GOTO 900			!CANNOT DO
	NFLFL6=.TRUE.				!ASSUME OK
	IF (.NOT.WNDNOD('INPUT_FLF_NODE',' ','FLF','R',DNOD,DFIL)) THEN
	  CALL WNCTXT(F_TP,'Cannot open FLF node')
	  GOTO 900
	END IF
	IF (.NOT.WNFOP(DFCA,DFIL,'R')) THEN
	  CALL WNCTXT(F_TP,'Cannot open FLF node file')
	  GOTO 900
	END IF
C
C LOAD HEADER
C
	IF (.NOT.WNFRD(DFCA,FLHHDL,LFLH,GFHHDL)) THEN
 60	  CONTINUE
	  CALL WNCTXT(F_TP,'Error reading FLF node')
	  GOTO 901
	END IF
	J=LFLHJ(FLH_FLFP_J)			!DATA POINTER
C
C LOAD DATA
C
	DO I=0,LFLHJ(FLH_FLFN_J)-1		!READ ALL ENTRIES
	  IF (.NOT.WNFRD(DFCA,FLFHDL,
	1	LFLF(0,1),J)) GOTO 60		!READ
	  IF (.NOT.NFLFL1(DFAR,LFLF)) GOTO 60	!PUT ENTRY
	  J=J+FLFHDL				!NEXT ENTRY
	END DO
	IF (.NOT.NFLFLS(DFAR,LFLH)) GOTO 60	!CANNOT GET STATUS
	CALL WNFCL(DFCA)			!CLOSE INPUT
C
	JS = NFLFLR(DFAR)                       !BEGINNING OF FLAG LIST
	I1=0					!COUNTER
	DO WHILE(NFLFL2(DFAR,LFLF(0,1),LFLF(0,2))) !ALL ENTRIES
	  I1=I1+1				!COUNT ENTRIES
	END DO
CCC	CALL WNCTXT(F_TP,' ')
CCC	CALL WNCTXT(F_TP,'!UJ entries in flag-list'
CCC	1               //' (list length=!UJ)'
CCC	1		,I1,LFLHJ(FLH_FLFN_J))
C
	RETURN
C
C FL7
C
C If LUNOUT<=0, the FLF list will be written to a file.
C If LUNOUT=F_T or F_P or F_TP, the list will be typet and/or printed.
C
	ENTRY NFLFL7(DFAR,LUNOUT,NODE,SETS)
C
C INIT
C
	IF (DFAR.EQ.0) GOTO 901			!CANNOT DO
	NFLFL7=.TRUE.				!ASSUME OK
	IF ((LUNOUT.EQ.F_T).OR.
     1      (LUNOUT.EQ.F_P).OR.
     1      (LUNOUT.EQ.F_TP)) THEN              !TYPE/PRINT
          LUN = LUNOUT                          !USE INPUT LUN
	  DFIL = ' '                            !NO FILENAME
	  CALL WNCTXT(LUN,'Current flag-list:')
C
	ELSE                                    !WRITE TO FILE
          LUN = F_0                             !USE DEFAULT LUN
	  DFIL='FLAG.LOG'                       !NAME OF ASCII FLAG-FILE
	  IF (.NOT.WNDPAR('OUTPUT_FILE',DFIL,LEN(DFIL),J0,DFIL)) THEN
	    IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 902	!READY
 72	    CONTINUE
	    CALL WNCTXT(F_TP,'No proper file specified')
	    GOTO 900
	  END IF
	  IF (J0.LT.0) GOTO 72
	  IF (J0.EQ.0) GOTO 902			!READY
	  CALL WNCFOP(LUN,DFIL)			!OPEN OUTPUT FILE
	  CALL WNGSGH(DHOST)			!GET HOST
	  CALL WNGSGU(DUSER)			!GET USER
	  JS=WNDSTM(SETS,LINE)			!DECODE SETS
	  CALL WNCTXT(LUN,'!!+ *** Flagging file !AS',DFIL)
	  CALL WNCTXT(LUN,'!!  *** Created by !AS on !%DN '//
	1		'at !%T at !AS',DUSER,DHOST)
	  CALL WNCTXT(LUN,'!!  *** Input node:  !AS',NODE)
	  CALL WNCTXT(LUN,'!!  *** Input sets: "!AS"',LINE)
        END IF
C
C WRITE (NB: The comment-lines with *** are printed when READ)
C
	CALL WNCTXT(LUN,'!!  Flags:')
	CALL WNCTXT(LUN,'!!!_MAN : 80  CLIP: 40  NOIS: 20  ADD : 10')
	CALL WNCTXT(LUN,'!!!_SHAD: 08  U3  : 04  U2  : 02  U1  : 01')
	CALL WNCTXT(LUN,'!!  Types:')
	CALL WNCTXT(LUN,'!!!_\00:  Interprete Ifr field as interferometer')
	CALL WNCTXT(LUN,'!!!_\01:  Interprete Ifr field as baselines in m')
	CALL WNCTXT(LUN,'!!  Data following an !! are seen as comments')
	CALL WNCTXT(LUN,'!!  Remaining fields have format:')
	CALL WNCTXT(LUN,'!!!_\*:          all values')
	CALL WNCTXT(LUN,'!!!_\value:      single value')
	CALL WNCTXT(LUN,'!!!_\val1=val2:  value range (inclusive)')
	CALL WNCTXT(LUN,'!!!/!!-!/'//
	1		'!!Flag!8CType!14CChannel'//
	1		'!28CHour-angle!48CIfr!60CPol')
C
C WRITE FLF ENTRIES
C
	I1=0					!COUNTER
	DO WHILE(NFLFL2(DFAR,LFLF(0,1),LFLF(0,2)))
	  I1=I1+1				!COUNT ENTRIES
	  CALL WNCTXS(LFLD(1),'!2$XJ',
	1		IAND(ISHFT(LFLFJ(FLF_FLAG_J,1),-8),'ff'X))
	  CALL WNCTXS(LFLD(6),'!2$XJ',
	1		IAND(ISHFT(LFLFJ(FLF_FLAG_J,1),-24),'ff'X))
	  IF (LFLFJ(FLF_CHAN_J,1).EQ.-1) THEN
	    LFLD(2)='*'
	  ELSE
	    IF (LFLFJ(FLF_CHAN_J,1).EQ.LFLFJ(FLF_CHAN_J,2)) THEN
	      CALL WNCTXS(LFLD(2),'!5$SJ',
	1		LFLFJ(FLF_CHAN_J,1))
	    ELSE
	      CALL WNCTXS(LFLD(2),'!5$SJ=!5$SJ',
	1		LFLFJ(FLF_CHAN_J,1),LFLFJ(FLF_CHAN_J,2))
	    END IF
	  END IF
	  IF (LFLFJ(FLF_HA_E,1).EQ.-1) THEN
	    LFLD(3)='*'
	  ELSE
	    IF (LFLFE(FLF_HA_E,1).EQ.LFLFE(FLF_HA_E,2)) THEN
	      CALL WNCTXS(LFLD(3),'!8$EAF10.2',
	1		LFLFE(FLF_HA_E,1))
	    ELSE
	      CALL WNCTXS(LFLD(3),'!8$EAF10.2=!8$EAF10.2',
	1		LFLFE(FLF_HA_E,1),LFLFE(FLF_HA_E,2))
	    END IF
	  END IF
	  IF (LFLFI(FLF_IFR_I,1).EQ.-1) THEN
	    LFLD(4)='*'
	  ELSE
	    IF (LFLFI(FLF_IFR_I,1).EQ.LFLFI(FLF_IFR_I,2)) THEN
	      IF (IAND(LFLFJ(FLF_FLAG_J,1),'01000000'X).EQ.0) THEN !IFR
	        CALL WNCTXS(LFLD(4),'!AS!AS',
	1		TELT(MOD(LFLFI(FLF_IFR_I,1)*1,256)),
	1		TELT(LFLFI(FLF_IFR_I,1)/256))
	      ELSE				!BASELINE
		CALL WNCTXS(LFLD(4),'!5$UI',
	1		LFLFI(FLF_IFR_I,1))
	      END IF
	    ELSE
	      IF (IAND(LFLFJ(FLF_FLAG_J,1),'01000000'X).EQ.0) THEN !IFR
	        CALL WNCTXS(LFLD(4),'!AS!AS=!AS!AS',
	1		TELT(MOD(LFLFI(FLF_IFR_I,1)*1,256)),
	1		TELT(LFLFI(FLF_IFR_I,1)/256),
	1		TELT(MOD(LFLFI(FLF_IFR_I,2)*1,256)),
	1		TELT(LFLFI(FLF_IFR_I,2)/256))
	      ELSE				!BASELINE
		CALL WNCTXS(LFLD(4),'!5$UI=!5$UI',
	1		LFLFI(FLF_IFR_I,1),LFLFI(FLF_IFR_I,2))
	      END IF
	    END IF
	  END IF
	  IF (LFLFI(FLF_POL_I,1).EQ.-1) THEN
	    LFLD(5)='*'
	  ELSE
	    IF (LFLFI(FLF_POL_I,1).EQ.LFLFI(FLF_POL_I,2)) THEN
	      CALL WNCTXS(LFLD(5),'!2$AS',
	1		POLT(IAND(LFLFI(FLF_POL_I,1),3)))
	    ELSE
	      CALL WNCTXS(LFLD(5),'!2$AS=!2$AS',
	1		POLT(IAND(LFLFI(FLF_POL_I,1),3)),
	1		POLT(IAND(LFLFI(FLF_POL_I,2),3)))
	    END IF
	  END IF
	  CALL WNCTXT(LUN,'!AS!8C!AS!14C!AS!28C!AS!48C!AS!60C!AS',
	1		LFLD(1),LFLD(6),LFLD(2),LFLD(3),LFLD(4),LFLD(5))
	END DO
C
	CALL WNCFCL(LUN)			!CLOSE OUTPUT
        IF (DFIL.EQ.' ') THEN                   !TYPE/PRINT
	  JS = NFLFLS(DFAR,LFLH)        	!GET FLAG-LIST HEADER
	  CALL WNCTXT(F_TP,'!UJ entries in current flag-list'
	1               //' (list length=!UJ)'
	1		,I1,LFLHJ(FLH_FLFN_J))
        ELSE
	  CALL WNCTXT(F_TP,'!UJ entries stored in ASCII file "!AS"'
	1		//' (list length=!UJ)'
	1		,I1,DFIL,LFLHJ(FLH_FLFN_J))
	  CALL WNCTXT(F_TP,'  Created by !AS on !%DN '//
	1		'at !%T at !AS',DUSER,DHOST)
	  CALL WNCTXT(F_TP,'  for input node:  !AS',NODE)
	  CALL WNCTXT(F_TP,'  and input sets: "!AS"',LINE)
        END IF
C
	RETURN
C
C FL8
C
	ENTRY NFLFL8(DFAR)
C
	IF (DFAR.EQ.0) GOTO 901			!CANNOT DO
	NFLFL8=.TRUE.				!ASSUME OK
	DFIL='FLAG.LOG'
	IF (.NOT.WNDPAR('INPUT_FILE',DFIL,LEN(DFIL),J0,DFIL)) THEN
	  IF (E_C.EQ.DWC_ENDOFLOOP) GOTO 902	!READY
 82	  CONTINUE
	  CALL WNCTXT(F_TP,'No proper file specified')
	  GOTO 900
	END IF
	IF (J0.LT.0) GOTO 82
	IF (J0.EQ.0) GOTO 902			!READY
	LUN=0
	CALL WNGLUN(LUN)			!GET LUN TO USE
	IF (LUN.EQ.0) THEN
 83	  CONTINUE
	  CALL WNCTXT(F_TP,'Cannot open/read file')
	  NFLFL8=.FALSE.
	  IF (LUN.NE.0) GOTO 84			!CLOSE
	  GOTO 902
	END IF
	OPEN (UNIT=LUN,FILE=DFIL,STATUS='OLD',ERR=83) !OPEN INPUT
C
C READ DATA
C 
        I1 = 0                                  !Entry counter
 86	CONTINUE
	READ (UNIT=LUN,FMT=1000,END=87,ERR=83) LINE
 1000	FORMAT(A)
	PT=1					!DATA POINTER
	IF (.NOT.WNCAFF(LINE,PT,FLINE)) THEN    !COMMENT-LINE (!)
          IF (INDEX(LINE,'***').GT.0) THEN      !IMPORTANT INFORMATION
	    CALL WNCTXT (F_T,'!AS',LINE)        !TYPE 
          END IF
          GOTO 86	                        !READ NEXT LINE
	END IF
	PT=1
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (.NOT.WNCACJ(FLINE,PT,16,J0)) GOTO 86 !GET FLAGS
	LFLFJ(FLF_FLAG_J,1)=ISHFT(IAND(J0,'000000ff'X),8)
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (.NOT.WNCACJ(FLINE,PT,16,J0)) GOTO 86 !GET TYPE
	LFLFJ(FLF_FLAG_J,1)=IOR(LFLFJ(FLF_FLAG_J,1),
	1		ISHFT(IAND(J0,'000000ff'X),24))
	LFLFJ(FLF_FLAG_J,2)=LFLFJ(FLF_FLAG_J,1)	!COPY
	I0=0					!NO CONTINUATION
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (WNCASC(FLINE,PT,'*')) THEN		!CHANNEL
	  LFLFJ(FLF_CHAN_J,1)=-1
	  LFLFJ(FLF_CHAN_J,2)=-1
	ELSE
	  IF (.NOT.WNCACJ(FLINE,PT,10,LFLFJ(FLF_CHAN_J,1))) GOTO 86
	  CALL WNCASB(FLINE,PT)			!SKIP BLANK
	  IF (WNCASC(FLINE,PT,'=')) THEN	!CONTINUATION
	    I0=1				!SET CONTINUATION
	    CALL WNCASB(FLINE,PT)		!SKIP BLANK
	    IF (.NOT.WNCACJ(FLINE,PT,10,LFLFJ(FLF_CHAN_J,2))) GOTO 86
	  ELSE
	    LFLFJ(FLF_CHAN_J,2)=LFLFJ(FLF_CHAN_J,1) !COPY
	  END IF
	END IF
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (WNCASC(FLINE,PT,'*')) THEN		!HA
	  LFLFJ(FLF_HA_E,1)=-1
	  LFLFJ(FLF_HA_E,2)=-1
	ELSE
	  IF (.NOT.WNCACE(FLINE,PT,10,LFLFE(FLF_HA_E,1))) GOTO 86
	  LFLFE(FLF_HA_E,1)=LFLFE(FLF_HA_E,1)/360.
	  CALL WNCASB(FLINE,PT)			!SKIP BLANK
	  IF (WNCASC(FLINE,PT,'=')) THEN	!CONTINUATION
	    I0=1				!SET CONTINUATION
	    CALL WNCASB(FLINE,PT)		!SKIP BLANK
	    IF (.NOT.WNCACE(FLINE,PT,10,LFLFE(FLF_HA_E,2))) GOTO 86
	    LFLFE(FLF_HA_E,2)=LFLFE(FLF_HA_E,2)/360.
	  ELSE
	    LFLFE(FLF_HA_E,2)=LFLFE(FLF_HA_E,1)	!COPY
	    LFLFE(FLF_HA_E,1)=LFLFE(FLF_HA_E,1)-0.25	!******* CMV 20000804
	  END IF
	END IF
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (WNCASC(FLINE,PT,'*')) THEN		!IFR
	  LFLFI(FLF_IFR_I,1)=-1
	  LFLFI(FLF_IFR_I,2)=-1
	ELSE
	  IF (IAND(LFLFJ(FLF_FLAG_J,1),'01000000'X).EQ.0) THEN !IFR
	    IF (.NOT.WNCACI(FLINE,PT,16,LFLFI(FLF_IFR_I,1))) GOTO 86
	    LFLFI(FLF_IFR_I,1)=(LFLFI(FLF_IFR_I,1)/16)+
	1		MOD(LFLFI(FLF_IFR_I,1)*1,16)*256
	  ELSE					!BASELINE
	    IF (.NOT.WNCACI(FLINE,PT,10,LFLFI(FLF_IFR_I,1))) GOTO 86
	  END IF
	  CALL WNCASB(FLINE,PT)			!SKIP BLANK
	  IF (WNCASC(FLINE,PT,'=')) THEN	!CONTINUATION
	    I0=1				!SET CONTINUATION
	    CALL WNCASB(FLINE,PT)		!SKIP BLANK
	    IF (IAND(LFLFJ(FLF_FLAG_J,1),'01000000'X).EQ.0) THEN !IFR
	      IF (.NOT.WNCACI(FLINE,PT,16,LFLFI(FLF_IFR_I,2))) GOTO 86
	      LFLFI(FLF_IFR_I,2)=(LFLFI(FLF_IFR_I,2)/16)+
	1		MOD(LFLFI(FLF_IFR_I,2)*1,16)*256
	    ELSE				!BASELINE
	      IF (.NOT.WNCACI(FLINE,PT,10,LFLFI(FLF_IFR_I,2))) GOTO 86
	    END IF
	  ELSE
	    LFLFI(FLF_IFR_I,2)=LFLFI(FLF_IFR_I,1) !COPY
	  END IF
	END IF
	CALL WNCASB(FLINE,PT)			!SKIP BLANK
	IF (WNCASC(FLINE,PT,'*')) THEN		!POL
	  LFLFI(FLF_POL_I,1)=-1
	  LFLFI(FLF_POL_I,2)=-1
	ELSE
	  IF (FLINE(PT:PT).EQ.'X' .OR. FLINE(PT:PT).EQ.'x') THEN
	    LFLFI(FLF_POL_I,1)=0
	  ELSE IF (FLINE(PT:PT).EQ.'Y' .OR. FLINE(PT:PT).EQ.'y') THEN
	    LFLFI(FLF_POL_I,1)=2
	  ELSE
	    GOTO 86				!FORMAT ERROR
	  END IF
	  PT=PT+1				!NEXT CHARACTER
	  IF (FLINE(PT:PT).EQ.'X' .OR. FLINE(PT:PT).EQ.'x') THEN
	  ELSE IF (FLINE(PT:PT).EQ.'Y' .OR. FLINE(PT:PT).EQ.'y') THEN
	    LFLFI(FLF_POL_I,1)=LFLFI(FLF_POL_I,1)+1
	  ELSE
	    GOTO 86				!FORMAT ERROR
	  END IF
	  PT=PT+1				!NEXT CHARACTER
	  CALL WNCASB(FLINE,PT)			!SKIP BLANK
	  IF (WNCASC(FLINE,PT,'=')) THEN	!CONTINUATION
	    I0=1				!SET CONTINUATION
	    CALL WNCASB(FLINE,PT)		!SKIP BLANK
	    IF (FLINE(PT:PT).EQ.'X' .OR. FLINE(PT:PT).EQ.'x') THEN
	      LFLFI(FLF_POL_I,2)=0
	    ELSE IF (FLINE(PT:PT).EQ.'Y' .OR. FLINE(PT:PT).EQ.'y') THEN
	      LFLFI(FLF_POL_I,2)=2
	    ELSE
	      GOTO 86				!FORMAT ERROR
	    END IF
	    PT=PT+1				!NEXT CHARACTER
	    IF (FLINE(PT:PT).EQ.'X' .OR. FLINE(PT:PT).EQ.'x') THEN
	    ELSE IF (FLINE(PT:PT).EQ.'Y' .OR. FLINE(PT:PT).EQ.'y') THEN
	      LFLFI(FLF_POL_I,2)=LFLFI(FLF_POL_I,2)+1
	    ELSE
	      GOTO 86				!FORMAT ERROR
	    END IF
	    PT=PT+1				!NEXT CHARACTER
	  ELSE
	    LFLFI(FLF_POL_I,2)=LFLFI(FLF_POL_I,1) !COPY
	  END IF
	END IF
	IF (I0.EQ.0) THEN			!ONLY 1
	  IF (.NOT.NFLFL1(DFAR,LFLF)) GOTO 83	!PUT ENTRY
	ELSE
	  LFLFJ(FLF_FLAG_J,1)=IOR(LFLFJ(FLF_FLAG_J,1),1) !INDICATE TWO
	  LFLFJ(FLF_FLAG_J,2)=IOR(LFLFJ(FLF_FLAG_J,2),2)
	  IF (.NOT.NFLFL1(DFAR,LFLF(0,1))) GOTO 83 !PUT ENTRY
	  IF (.NOT.NFLFL1(DFAR,LFLF(0,2))) GOTO 83
	END IF
        I1 = I1+1                               !Count entries
	GOTO 86					!MORE
C
C READY
C
 87	CONTINUE
	IF (.NOT.NFLFLS(DFAR,LFLH)) GOTO 83	!CANNOT GET STATUS
	CALL WNCTXT(F_TP,' ')
	CALL WNCTXT(F_TP,'!UJ entries added to flag-list',I1) 
 84	CONTINUE
	CLOSE (UNIT=LUN,ERR=85)			!CLOSE INPUT
 85	CONTINUE
	CALL WNGLUF(LUN)			!FREE LUN
C
	RETURN
C
C ERRORS
C
 901	CONTINUE
	CALL WNFCL(DFCA)			!MAKE SURE
 900	CONTINUE
	NFLFL5=.FALSE.				!RETURN ERROR
	CALL WNCFCL(LUN)			!MAKE SURE FILE CLOSED
 902	CONTINUE
C
	RETURN
C
C
	END

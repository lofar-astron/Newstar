C+ NSCOFR.FOR
C  WNB 900403
C
C  Revisions:
C	WNB 910730	Correct gain corrections
C	WNB 911007	Typo in gain corrections
C	WNB 920811	Typo in interferometer table
C	WNB 930127	Add all FRQ*
C	HjV 930311	Change some text
C	WNB 930608	New weights/BITS
C	HJV 930618	Symbolic names for mask bits in CBITS_O_DEF
C	WNB 930803	CBITS_DEF
C	WNB 930819	Add STH_DIPC
C	WNB 931001	Typo in dipole code
C       HjV 940602	Make available for VAX R-series files
C
	SUBROUTINE NSCOFR
C
C  Load WSRT data from old SCN file
C
C  Result:
C
C	CALL NSCOFR	will load WSRT data in SCN file from old SCN file
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'NSC_DEF'
	INCLUDE 'CBITS_DEF'
	INCLUDE 'GFH_O_DEF'			!GENERAL FILE HEADER
	INCLUDE 'SGH_O_DEF'			!SUB-GROUP HEADER
	INCLUDE 'STH_O_DEF'			!SET HEADER
	INCLUDE 'SCH_O_DEF'			!SCAN HEADER
	INCLUDE 'OHW_O_DEF'			!OH BLOCK
	INCLUDE 'OHW_T_DEF'		
	INCLUDE 'SCW_O_DEF'			!SC BLOCK
	INCLUDE 'SCW_T_DEF'		
	INCLUDE 'SHW_O_DEF'			!SC BLOCK
	INCLUDE 'SHW_T_DEF'		
	INCLUDE 'RFH_O_DEF'			!R-SERIES FILE HEADER
	INCLUDE 'RFH_T_DEF'
	INCLUDE 'RSH_O_DEF'			!R-SERIES SET HEADER
	INCLUDE 'RSH_T_DEF'
	INCLUDE 'RSC_O_DEF'			!R-SERIES SCAN AND DATA HEADER
	INCLUDE 'RSC_T_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL WNFOP,WNFOPF			!OPEN FILE
	LOGICAL WNFRD				!READ DATA
	LOGICAL WNFWR				!WRITE DATA
	INTEGER WNFEOF				!FILE POSITION
	INTEGER WNCALN				!STRING LENGTH
	LOGICAL WNDLNK				!LINK SET
	LOGICAL WNDLNG,WNDLNF			!LINK GROUP
	CHARACTER*32 WNTTSG			!MAKE SUB-GROUP STRING
C
C  Data declarations:
C
	BYTE STH(0:STHHDL-1)			!SET HEADER
	  INTEGER*2 STHI(0:STHHDL/2-1)
	  INTEGER   STHJ(0:STHHDL/4-1)
	  REAL STHE(0:STHHDL/4-1)
	  REAL*8 STHD(0:STHHDL/8-1)
	  EQUIVALENCE (STH,STHI,STHJ,STHE,STHD)
	BYTE SCH(0:SCHHDL-1)			!SCAN HEADER
	  INTEGER*2 SCHI(0:SCHHDL/2-1)
	  INTEGER   SCHJ(0:SCHHDL/4-1)
	  REAL SCHE(0:SCHHDL/4-1)
	  REAL*8 SCHD(0:SCHHDL/8-1)
	  EQUIVALENCE (SCH,SCHI,SCHJ,SCHE,SCHD)
	BYTE OFH(0:192-1)			!OLD FILE HEADER
	  CHARACTER*192 OFHC
	  INTEGER*2 OFHI(0:192/2-1)
	  INTEGER   OFHJ(0:192/4-1)
	  REAL OFHE(0:192/4-1)
	  REAL*8 OFHD(0:192/8-1)
	  EQUIVALENCE (OFH,OFHC,OFHI,OFHJ,OFHE,OFHD)
	BYTE OSH(0:400-1)			!OLD SET HEADER
	  INTEGER*2 OSHI(0:400/2-1)
	  INTEGER   OSHJ(0:400/4-1)
	  REAL OSHE(0:400/4-1)
	  REAL*8 OSHD(0:400/8-1)
	  EQUIVALENCE (OSH,OSHI,OSHJ,OSHE,OSHD)
	BYTE OSC(0:1600-1,0:3)			!OLD SCAN HEADER
	  INTEGER*2 OSCI(0:1600/2-1,0:3)
	  INTEGER   OSCJ(0:1600/4-1,0:3)
	  REAL OSCE(0:1600/4-1,0:3)
	  REAL*8 OSCD(0:1600/8-1,0:3)
	  EQUIVALENCE (OSC,OSCI,OSCJ,OSCE,OSCD)
	BYTE OHW(0:OHWHDL-1)			!OH BLOCK
	  INTEGER*2 OHWI(0:OHWHDL/2-1)
	  INTEGER OHWJ(0:OHWHDL/4-1)
	  REAL OHWE(0:OHWHDL/4-1)
	  DOUBLE PRECISION OHWD(0:OHWHDL/8-1)
	  EQUIVALENCE (OHW,OHWI,OHWJ,OHWE,OHWD)
	BYTE SCW(0:SCWHDL-1)			!SC BLOCK
	  INTEGER*2 SCWI(0:SCWHDL/2-1)
	  INTEGER SCWJ(0:SCWHDL/4-1)
	  REAL SCWE(0:SCWHDL/4-1)
	  DOUBLE PRECISION SCWD(0:SCWHDL/8-1)
	  EQUIVALENCE (SCW,SCWI,SCWJ,SCWE,SCWD)
	INTEGER*2 ODAT(0:2,0:800)		!DATA ARRAY
	INTEGER*2 IFRT(0:MXNIFR-1,0:3)		!IFR TABLE
	INTEGER IFRD(9,0:MXNIFR-1)		!IFR DESCRIPTOR
	INTEGER POLS(0:3)			!POL. TRANSLATION
	INTEGER COH(3),CSC(3),CSH(3)		!OH/SC/SH POINTERS
	CHARACTER*32 SETSTR			!GROUP NAME
	BYTE DUMMY(30000)			!READ OH/SC
	  INTEGER DUMMYJ(0:(30000-4)/4)
	  EQUIVALENCE (DUMMY(1),DUMMYJ(0))
        INTEGER*2 DBH_T(0:1,0:1)                !DATA TRANSLATION
          DATA DBH_T/4,0,0,1/
C-
C
C INIT
C
	COH(1)=0				!CLEAR POINTERS
	CSC(1)=0
	CSH(1)=0
	IF (.NOT.WNFOP(IMCA,IFILE,'R')) THEN
 10	  CONTINUE
	  CALL WNCTXT(F_TP,'!/I/O error input file')
	  GOTO 800
	END IF
	IF (.NOT.WNFRD(IMCA,192,OFH,0)) GOTO 10 !READ FILE HEADER
	IF (DECSW.NE.0) CALL WNTTTL(QFH__L,OFH,QFH_T,DECSW)
	IF (OFHC(1:4).NE.'.SCN') THEN
	  CALL WNCTXT(F_TP,'!/Input file not old SCN file')
	  GOTO 800
	END IF
	J0=40					!POINT TO SET LIST
	IF (.NOT.WNDLNG(GFH_LINKG_1,0,SGH_GROUPN_1,FCAOUT,
	1		SGPH(0),SGNR(0))) THEN	!MAKE JOB GROUP
 11	  CONTINUE
	  CALL WNCTXT(F_TP,'!/Cannot create sub-group')
	  GOTO 800
	END IF
	IF (.NOT.WNDLNG(SGPH(0)+SGH_LINKG_1,0,SGH_GROUPN_1,FCAOUT,
	1		SGPH(1),SGNR(1))) GOTO 11 !MAKE LABEL GROUP
	IF (.NOT.WNDLNG(SGPH(1)+SGH_LINKG_1,0,SGH_GROUPN_1,FCAOUT,
	1		SGPH(2),SGNR(2))) GOTO 11 !MAKE POINTING GROUP
C
C READ A SET
C
 100	CONTINUE
	IF (.NOT.WNFRD(IMCA,4,J0,J0)) GOTO 10	!NEXT SET PTR
	IF (DECSW.NE.0) THEN
	  DBH_T(0,0)=3
	  DBH_T(1,0)=1
	  CALL WNTTTL(4,J0,DBH_T,DECSW)
	END IF
	IF (J0.EQ.40) GOTO 800			!READY
	IF (.NOT.WNFRD(IMCA,400,OSH,J0)) GOTO 10 !READ SET HEADER
	IF (DECSW.NE.0) CALL WNTTTL(QSH__L,OSH,QSH_T,DECSW)
	I=OSHI(8)				!CHANNEL
	IF (.NOT.WNDLNF(SGPH(2)+SGH_LINKG_1,I,SGH_GROUPN_1,FCAOUT,
	1		SGPH(3),SGNR(3))) GOTO 11 !MAKE CHANNEL GROUP
	SGNR(4)=0				!CORRECT TILL END
	SGNR(5)=-1
	SETSTR=WNTTSG(SGNR(0),0)		!GROUP NAME
	CALL WNCTXT(F_TP,'Sector !UI being copied to !AS',
	1		OSHI(70),SETSTR)
	CALL WNGMVZ(STHHDL,STH(0))		!CLEAR STH
	STHI(STH_LEN_I)=STHHDL			!LENGTH
	STHI(STH_VER_I)=STHHDV			!VERSION
	STHI(STH_BEC_I)=OSHI(7)			!BACKEND CODE
	STHJ(STH_DIPC_J)=0			!DIPOLE CODE
	I1=OSHI(6)
	DO I=0,STHTEL-1
	  IF (I.LT.10) THEN			!WEST TEL.
	    STHJ(STH_DIPC_J)=STHJ(STH_DIPC_J)+ISHFT(I1/4,2*I)
	  ELSE					!EAST TEL
	    STHJ(STH_DIPC_J)=STHJ(STH_DIPC_J)+ISHFT(MOD(I1,4),2*I)
	  END IF
        END DO
  	
	STHJ(STH_VNR_J)=OSHJ(5)			!VOLG NUMBER
	STHI(STH_PLN_I)=OSHI(9)			!# OF POLARISATIONS
	CALL WNGMV(STH_FIELD_N,OFH(120),STH(STH_FIELD_1)) !FIELD NAME
	STHD(STH_RA_D)=OSHE(9)			!APP. RA
	STHD(STH_DEC_D)=OSHE(10)		!APP. DEC
	STHD(STH_RAE_D)=OFHD(17)		!RA EPOCH
	STHD(STH_DECE_D)=OFHD(18)		!DEC EPOCH
	STHE(STH_OEP_E)=OSHE(6)			!OBS. DATE IN JUL. YEARS
	STHE(STH_EPO_E)=OFHE(33)		!EPOCH
	STHI(STH_OBS_I)=OSHI(38)		!DAY
	STHI(STH_OBS_I+1)=OSHI(39)		!YEAR
	DO I=0,STHTEL-1				!TEL. POSITIONS
	  STHE(STH_RTP_E+I)=(OSHE(21+I))
	END DO
	STHE(STH_HAI_E)=OSHE(17)
	STHE(STH_HAV_E)=OSHE(20)
	STHE(STH_HAB_E)=OSHE(16)
	STHJ(STH_SCN_J)=OSHI(72)
	DO I1=0,STHI(STH_PLN_I)-1		!ALL POL.
	  IF (I1.EQ.0) THEN			!SET XX
	    STHE(STH_REDNS_E+1)=OSHE(62+I1)	!RED. PHASE NOISE
	    STHE(STH_ALGNS_E+1)=OSHE(66+I1)	!ALIGN PHASE NOISE
	    STHE(STH_ALGNS_E+0)=OSHE(70+I1)	!ALIGN GAIN NOISE
	    STHE(STH_REDNS_E+0)=OSHE(74+I1)	!RED. GAIN NOISE
	  ELSE IF ((I1.EQ.1 .AND. STHI(STH_PLN_I).EQ.2) .OR.
	1	   (I1.EQ.3 .AND. STHI(STH_PLN_I).EQ.4)) THEN !SET YY
	    STHE(STH_REDNS_E+3)=OSHE(62+I1)	!RED. PHASE NOISE
	    STHE(STH_ALGNS_E+3)=OSHE(66+I1)	!ALIGN PHASE NOISE
	    STHE(STH_ALGNS_E+2)=OSHE(70+I1)	!ALIGN GAIN NOISE
	    STHE(STH_REDNS_E+2)=OSHE(74+I1)	!RED. GAIN NOISE
	  END IF
	END DO
C
C GET IFRS
C
	DO I=0,STHI(STH_PLN_I)-1
	  I1=2*OSHI(104+I)
	  IF (.NOT.WNFRD(IMCA,I1,IFRT(0,I),
	1		OSHJ(54+I))) GOTO 10	!READ IFR
	  IF (DECSW.NE.0) THEN
	    DBH_T(0,0)=2
	    DBH_T(1,0)=I1
	    CALL WNTTTL(I1,IFRT(0,I),DBH_T,DECSW)
	  END IF
	END DO
	J=0					!NO IFRS FOUND
	DO I=0,STHI(STH_PLN_I)-1		!ALL POL.
	  IF (OSHI(100+I).EQ.ICHAR('X')*256+ICHAR('X')) THEN !FIND POINTER
	    POLS(I)=0
	  ELSE IF (OSHI(100+I).EQ.ICHAR('X')*256+ICHAR('Y')) THEN
	    POLS(I)=1
	  ELSE IF (OSHI(100+I).EQ.ICHAR('Y')*256+ICHAR('Y')) THEN
	    POLS(I)=2
	  ELSE
	    POLS(I)=3
	  END IF
	  DO I1=0,OSHI(104+I)-1			!ALL IFRS PER POL.
	    DO I2=0,J-1				!CHECK PRESENCE
	      IF (IFRD(1,I2).EQ.MOD(IFRT(I1,I),256) .AND.
	1		IFRD(2,I2).EQ.IFRT(I1,I)/256) THEN !FOUND
		I3=POLS(I)			!POINTER
		IFRD(3+I3,I2)=1000*I+I1		!DATA POINTER
		GOTO 20
	      END IF
	    END DO
	    IFRD(1,J)=MOD(IFRT(I1,I),256)	!NEW ENTRY
	    IFRD(2,J)=IFRT(I1,I)/256
	    DO I3=3,6				!SET NO POL
	      IFRD(I3,J)=-1
	    END DO
	    IFRD(7,J)=STHE(STH_RTP_E+IFRD(2,J))-
	1		STHE(STH_RTP_E+IFRD(1,J)) !BASELINE
	    I3=POLS(I)				!POINTER
	    IFRD(3+I3,J)=1000*I+I1		!DATA POINTER
	    J=J+1				!COUNT IFR
 20	    CONTINUE
	  END DO
	END DO
	DO I=0,J-2				!SORT ON BASELINE
	  DO I1=0,J-2-I
	    IF (IFRD(7,I1).GT.IFRD(7,I1+1)) THEN !MOVE ENTRY
	      DO I2=1,9
		I3=IFRD(I2,I1)
		IFRD(I2,I1)=IFRD(I2,I1+1)
		IFRD(I2,I1+1)=I3
	      END DO
	    END IF
	  END DO
	END DO
	STHJ(STH_NIFR_J)=J			!# OF IFRS
	STHJ(STH_IFRP_J)=WNFEOF(FCAOUT)		!IFR TABLE POINTER
	DO I=0,J-1				!MAKE IFR TABLE
	  IFRT(I,0)=IFRD(1,I)+IFRD(2,I)*256
	END DO
	IF (.NOT.WNFWR(FCAOUT,2*STHJ(STH_NIFR_J),IFRT(0,0),
	1		STHJ(STH_IFRP_J))) GOTO 12 !WRITE IFR TABLE
	DO I=0,3				!DETAILED TABLES
	  DO I1=0,J-1
	    IF (IFRD(3+I,I1).NE.-1) THEN	!PRESENT
	      IFRT(I1,0)=1
	    ELSE				!NOT PRESENT
	      IFRT(I1,0)=0
	    END IF
	  END DO
	  IF (.NOT.WNFWR(FCAOUT,2*J,IFRT(0,0),STHJ(STH_IFRP_J)+
	1		2*J*(1+I))) GOTO 12	!WRITE DETAILS
	END DO
C
C GET OH/SC/SH
C
	IF (OSHJ(13).NE.0) THEN			!SET OH
	  IF (OSHJ(13).NE.COH(1)) THEN		!WRITE OH
	    IF (.NOT.WNFRD(IMCA,12,DUMMY,OSHJ(13))) THEN
	      GOTO 10				!READ OH ERROR
	    END IF
	    IF (DECSW.NE.0) THEN
	      DBH_T(0,0)=3
	      DBH_T(1,0)=1
	      CALL WNTTTL(4,DUMMYJ(2),DBH_T,DECSW)
	    END IF
	    IF (.NOT.WNFRD(IMCA,DUMMYJ(2),DUMMY,OSHJ(13))) THEN
	      GOTO 10				!READ OH ERROR
	    END IF
	    IF (DECSW.NE.0) CALL WNTTTL(OHWHDL,DUMMY,OHW_T,DECSW)
	    STHJ(STH_OHP_J)=WNFEOF(FCAOUT)	!SET OH POINTER
	    STHJ(STH_NOH_J)=DUMMYJ(2)
	    IF (.NOT.WNFWR(FCAOUT,STHJ(STH_NOH_J),DUMMY,
	1		STHJ(STH_OHP_J))) THEN
	      GOTO 12				!WRITE OH
	    END IF
	    COH(1)=OSHJ(13)			!SAVE CHECK POINTERS
	    COH(2)=STHJ(STH_OHP_J)
	    COH(3)=STHJ(STH_NOH_J)
	  ELSE
	    STHJ(STH_OHP_J)=COH(2)		!SET OH POINTER
	    STHJ(STH_NOH_J)=COH(3)		!SET OH LENGTH
	  END IF
	END IF
	IF (OSHJ(14).NE.0) THEN			!SET SC
	  IF (OSHJ(14).NE.CSC(1)) THEN		!WRITE SC
	    IF (.NOT.WNFRD(IMCA,12,DUMMY,OSHJ(14))) THEN
	      GOTO 10				!READ SC ERROR
	    END IF
	    IF (DECSW.NE.0) THEN
	      DBH_T(0,0)=3
	      DBH_T(1,0)=1
	      CALL WNTTTL(4,DUMMYJ(2),DBH_T,DECSW)
	    END IF
	    IF (.NOT.WNFRD(IMCA,DUMMYJ(2),DUMMY,OSHJ(14))) THEN
	      GOTO 10				!READ SC ERROR
	    END IF
	    IF (DECSW.NE.0) CALL WNTTTL(SCWHDL,DUMMY,SCW_T,DECSW)
	    STHJ(STH_SCP_J)=WNFEOF(FCAOUT)	!SET SC POINTER
	    STHJ(STH_NSC_J)=DUMMYJ(2)
	    IF (.NOT.WNFWR(FCAOUT,STHJ(STH_NSC_J),DUMMY,
	1		STHJ(STH_SCP_J))) THEN
	      GOTO 12				!WRITE SC
	    END IF
	    CSC(1)=OSHJ(14)			!SAVE CHECK POINTERS
	    CSC(2)=STHJ(STH_SCP_J)
	    CSC(3)=STHJ(STH_NSC_J)
	  ELSE
	    STHJ(STH_SCP_J)=CSC(2)		!SET SC POINTER
	    STHJ(STH_NSC_J)=CSC(3)		!SET SC LENGTH
	  END IF
	END IF
	IF (OSHJ(15).NE.0) THEN			!SET SH
	  IF (OSHJ(15).NE.CSH(1)) THEN		!WRITE SH
	    IF (.NOT.WNFRD(IMCA,12,DUMMY,OSHJ(15))) THEN
	      GOTO 10				!READ SH ERROR
	    END IF
	    IF (DECSW.NE.0) THEN
	      DBH_T(0,0)=3
	      DBH_T(1,0)=1
	      CALL WNTTTL(4,DUMMYJ(2),DBH_T,DECSW)
	    END IF
	    IF (.NOT.WNFRD(IMCA,DUMMYJ(2),DUMMY,OSHJ(15))) THEN
	      GOTO 10				!READ SH ERROR
	    END IF
	    IF (DECSW.NE.0) CALL WNTTTL(SHWHDL,DUMMY,SHW_T,DECSW)
	    STHJ(STH_SHP_J)=WNFEOF(FCAOUT)	!SET SH POINTER
	    STHJ(STH_NSH_J)=DUMMYJ(2)
	    IF (.NOT.WNFWR(FCAOUT,STHJ(STH_NSH_J),DUMMY,
	1		STHJ(STH_SHP_J))) THEN
	      GOTO 12				!WRITE SH
	    END IF
	    CSH(1)=OSHJ(15)			!SAVE CHECK POINTERS
	    CSH(2)=STHJ(STH_SHP_J)
	    CSH(3)=STHJ(STH_NSH_J)
	  ELSE
	    STHJ(STH_SHP_J)=CSH(2)		!SET SH POINTER
	    STHJ(STH_NSH_J)=CSH(3)		!SET SH LENGTH
	  END IF
	END IF
	STHJ(STH_SCNP_J)=WNFEOF(FCAOUT)+STHHDL	!PTR TO DATA
	STHJ(STH_SCNL_J)=SCHHDL+6*STHJ(STH_NIFR_J)*
	1		STHI(STH_PLN_I)		!LENGTH SCAN
	STHI(STH_CHAN_I)=OSHI(8)		!CHANNEL #
	STHD(STH_FRQ_D)=OSHE(11)		!FREQUENCY
	STHD(STH_FRQE_D)=OSHE(11)
	STHD(STH_FRQV_D)=OSHE(11)
	STHD(STH_FRQC_D)=OFHD(19)
	STHE(STH_BAND_E)=OSHE(12)		!BANDWIDTH
	CALL NSCCLP(FCAOUT,STH(0),STHE(STH_PHI_E)) !PREC. ROTATION ANGLE
	STHE(STH_PHI_E)=STHE(STH_PHI_E)/PI2	!MAKE FRACTIONS
	IF (STHJ(STH_OHP_J).NE.0 .AND. STHJ(STH_SCP_J).NE.0) THEN !CAN DO
	  IF (.NOT.WNFRD(FCAOUT,STHJ(STH_NOH_J),OHW,
	1		STHJ(STH_OHP_J))) GOTO 10 !READ OH
	  IF (.NOT.WNFRD(FCAOUT,STHJ(STH_NSC_J),SCW,
	1		STHJ(STH_SCP_J))) GOTO 10 !READ SC
	  STHD(STH_UTST_D)=1.+SCWD(SCW_CUTST_D)	!UT/ST DAY LENGTH
	  D0=STHE(STH_HAB_E)-OHWD(OHW_HAST_D)	!HA SINCE START
	  IF (D0.LT.0) D0=D0+1
	  D1=OHWD(OHW_HAEND_D)-OHWD(OHW_HAST_D)	!LENGTH OBS.
	  IF (D1.LT.0) D1=D1+1
	  D1=D1/2.				!TO START OF OBS.
	  STHD(STH_MJD_D)=OHWD(OHW_JDAY_D)+40000D0-0.5D0- !MAKE MJD
	1		(D1-D0)/STHD(STH_UTST_D)
	END IF
	IF (.NOT.WNFWR(FCAOUT,STHHDL,STH(0),STHJ(STH_SCNP_J)-STHHDL))
	1			THEN		!WRITE SET HEADER
 12	  CONTINUE
	  CALL WNCTXT(F_TP,'!/Write error')
	  GOTO 800
	END IF
C
C COPY DATA
C
	DO I=0,STHJ(STH_SCN_J)-1		!ALL SCANS
	  DO I1=0,STHI(STH_PLN_I)-1		!ALL POL.
	    I2=440+4*OSHI(104+I1)
	    IF (.NOT.WNFRD(IMCA,I2,OSC(0,I1),
	1		OSHJ(58+I1)+I*OSHI(71))) GOTO 10 !READ SCAN
	    IF (DECSW.NE.0) CALL WNTTTL(QSCHDL,OSC(0,I1),QSC_T,DECSW)
	  END DO
	  CALL WNGMVZ(SCHHDL,SCH(0))		!EMPTY SCAN HEADER
	  SCHE(SCH_HA_E)=OSCE(1,0)		!HA
	  SCHE(SCH_MAX_E)=OSCE(6,0)		!MAX COS/SIN
	  IF (OSC(38,0).EQ.0) THEN		!NOT DELETED
	    SCHJ(SCH_BITS_J)=0
	  ELSE
	    SCHJ(SCH_BITS_J)=FL_OLD		!DELETE SCAN
	  END IF
	  SCHE(SCH_EXT_E)=OSCE(12,0)		!EXTINCTION
	  SCHE(SCH_REFR_E)=OSCE(13,0)		!REFRACTION
	  DO I1=0,STHI(STH_PLN_I)-1		!ALL POL.
	    SCHE(SCH_MAX_E)=MAX(SCHE(SCH_MAX_E),OSCE(6,I1)) !TOTAL MAX.
	    IF (I1.EQ.0) THEN			!SET XX
	      SCHE(SCH_REDNS_E+1)=OSCE(3,I1)	!RED. PHASE NOISE
	      SCHE(SCH_ALGNS_E+1)=OSCE(4,I1)	!ALIGN PHASE NOISE
	      SCHE(SCH_ALGNS_E+0)=OSCE(5,I1)	!ALIGN GAIN NOISE
	      SCHE(SCH_REDNS_E+0)=OSCE(7,I1)	!RED. GAIN NOISE
	      DO I2=0,STHTEL-1			!CORRECTIONS
		I3=2*I2				!OFFSET
		SCHE(SCH_REDC_E+I3+0)=OSCE(72+I2,I1) !RED. GAIN
		SCHE(SCH_REDC_E+I3+1)=OSCE(28+I2,I1) !RED. PHASE
		SCHE(SCH_ALGC_E+I3+0)=OSCE(58+I2,I1)-OSCE(72+I2,I1) !ALIGN GAIN
		SCHE(SCH_ALGC_E+I3+1)=OSCE(14+I2,I1)-OSCE(28+I2,I1) !ALIGN PHASE
	      END DO
	    ELSE IF ((I1.EQ.1 .AND. STHI(STH_PLN_I).EQ.2) .OR.
	1		(I1.EQ.3 .AND. STHI(STH_PLN_I).EQ.4)) THEN !SET YY
	      SCHE(SCH_REDNS_E+3)=OSCE(3,I1)	!RED. PHASE NOISE
	      SCHE(SCH_ALGNS_E+3)=OSCE(4,I1)	!ALIGN PHASE NOISE
	      SCHE(SCH_ALGNS_E+2)=OSCE(5,I1)	!ALIGN GAIN NOISE
	      SCHE(SCH_REDNS_E+2)=OSCE(7,I1)	!RED. GAIN NOISE
	      DO I2=0,STHTEL-1			!CORRECTIONS
		I3=2*STHTEL+2*I2		!OFFSET
		SCHE(SCH_REDC_E+I3+2)=OSCE(72+I2,I1) !RED. GAIN
		SCHE(SCH_REDC_E+I3+3)=OSCE(28+I2,I1) !RED. PHASE
		SCHE(SCH_ALGC_E+I3+2)=OSCE(58+I2,I1)-OSCE(72+I2,I1) !ALIGN GAIN
		SCHE(SCH_ALGC_E+I3+3)=OSCE(14+I2,I1)-OSCE(28+I2,I1) !ALIGN PHASE
	      END DO
	    END IF
	  END DO
	  J1=WNFEOF(FCAOUT)			!OUTPUT POINTER
	  DO I2=0,STHI(STH_PLN_I)-1		!ALL POLS
	   DO I1=0,STHJ(STH_NIFR_J)-1		!ALL IFRS
	    I3=I1*STHI(STH_PLN_I)		!POL. OFFSET
	    I4=IFRD(3+POLS(I2),I1)		!DATA POINTER
	    IF (I4.NE.-1) THEN
	      I5=MOD(I4,1000)			!BUF. POINTER
	      I4=I4/1000			!POL. POINTER
	      ODAT(1,I2+I3)=OSCI(220+2*I5,I4)	!COS
	      ODAT(2,I2+I3)=OSCI(220+2*I5+1,I4)	!SIN
	      IF (ODAT(1,I2+I3).EQ.-32768) THEN
	        ODAT(0,I2+I3)=0			!WEIGHT
	      ELSE
	        ODAT(0,I2+I3)=1			!WEIGHT
	      END IF
	    ELSE				!NOT PRESENT
	      ODAT(0,I2+I3)=0
	      ODAT(1,I2+I3)=0
	      ODAT(2,I2+I3)=0
	    END IF
	   END DO
	  END DO
	  IF (.NOT.WNFWR(FCAOUT,SCHHDL,SCH(0),J1)) GOTO 12 !WRITE HEADER
	  IF (.NOT.WNFWR(FCAOUT,6*STHJ(STH_NIFR_J)*STHI(STH_PLN_I),
	1		ODAT,J1+SCHHDL)) GOTO 12 !DATA
	END DO
	IF (.NOT.WNDLNK(GFH_LINK_1,STHJ(STH_SCNP_J)-STHHDL,
	1		STH_SETN_1,FCAOUT)) GOTO 12 !LINK SET
	IF (.NOT.WNDLNG(SGPH(3)+SGH_LINKG_1,STHJ(STH_SCNP_J)-STHHDL,
	1		SGH_GROUPN_1,FCAOUT,
	1		SGPH(4),SGNR(4))) GOTO 11 !MAKE DATA GROUP
	GOTO 100				!NEXT SET
C
 800	CONTINUE
	CALL WNFCL(IMCA)			!CLOSE INPUT
	CALL WNFCL(FCAOUT)			!CLOSE OUTPUT
	RETURN					!READY
C
C
	END

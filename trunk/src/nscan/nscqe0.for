C+ NSCQE0.FOR
C  WNB 940812
C
C  Revisions:
C	WNB 940830	Typo
C
	LOGICAL FUNCTION NSCQE0(QUA,FCA,AX1,DOFF)
C
C  Write actual interferometer errors
C
C  Result:
C
C	NSCQE0_L = NSCQE0( QUA_J:I, FCA_J:I, AX1_J:I, DOFF_J:I)
C			Write Qube scan interferometer errors at main
C			position AX1, diskoffset DOFF.
C	NSCQE1_L = NSCQE1( QUA_J:I, FCA_J:I, AX1_J:I, DOFF_J:I)
C			Zero Qube error data at diskoffset DOFF
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'             !BIT DEFINITIONS
	INCLUDE 'QUB_O_DEF'		!QUBE DEFINITION
	INCLUDE 'STH_O_DEF'		!SCAN SET HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER QUA			!QUBE CONTROL AREA
	INTEGER FCA			!FILE
	INTEGER AX1			!AXIS TO DO
	INTEGER DOFF			!DISK OFFSET
C
C  Entry points:
C
	LOGICAL NSCQE1
C
C  Function references:
C
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNFWR			!WRITE DATA
	LOGICAL NSCQR0			!FIND SET HEADER
	LOGICAL NSCSWI			!WRITE IFR ERRORS
C
C  Data declarations:
C
	INTEGER L4DPL			!DATA POINT LENGTH
	INTEGER LAX3			!LENGTH LAST AXIS
	INTEGER SCNT			!SORT # OF LINES
	INTEGER NPASS			!# OF PASSES
	INTEGER BLINE			!BEGIN CURRENT PASS
	INTEGER LLINE			!LENGTH CURRENT PASS
	INTEGER BOFF			!LINE OFFSET
	INTEGER SCNP			!START SCAN POINTER
	COMPLEX LMIFR(0:3,0:STHIFR-1)	!LOCAL ERROR DATA
C-
C
C INIT
C
	NSCQE0=.TRUE.				!ASSUME OK
	IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_OUT).EQ.0) GOTO 800 !CANNOT DO
	IF (AX1.LT.0) RETURN			!NOTHING TO DO 
	L4DPL=4*LB_X				!LENGTH DATAPOINT
	LAX3=A_J(QUA+QUA_NDAT_J)		!LAST AXIS LENGTH
	SCNT=A_J(QUA+QUA_SCNT_J)/((LB_X)/LB_E)	!SORT LINES
	IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_I).NE.0) THEN !GIVE NORMAL SCAN
	  RETURN				!NOTHING TO DO
	ELSE IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_F).NE.0) THEN !GIVE FREQ SCAN
	  I1=AX1				!TIME POINT
	  I0=LAX3-1				!FREQ POINT
	ELSE IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_T).NE.0) THEN !GIVE HA SCAN
	  I0=AX1				!FREQ POINT
	  I1=LAX3-1				!HA POINT
	ELSE					!UNKNOWN
	  GOTO 800
	END IF
	IF (I0.LT.0 .OR. I0.GE.A_J(QUA+QUA_IFRQ_J) .OR.
	1		I1.LT.0 .OR.
	1		I1.GE.A_J(QUA+QUA_IHA_J)) GOTO 800 !ILLEGAL
C
C WRITE TIF/FIT/ITF/IFT
C
	NPASS=(LAX3+SCNT-1)/SCNT		!# OF PASSES
	DO I=0,NPASS-1				!ALL PASSES
	  BLINE=I*SCNT				!OFFSET IN LINE
	  LLINE=MIN(LAX3-BLINE,SCNT)		!# OF CURRENT LINES
	  DO I3=0,A_J(QUA+QUA_IIFR_J)-1		!ALL LINES IN PASS
	    IF (.NOT.WNFRD(A_J(QUA+QUA_IFCA_J),	!READ PART LINE
	1		L4DPL*LLINE,
	1		A_B(A_J(QUA+QUA_SBPT_J)+
	1			L4DPL*LLINE*I3),
	1		DOFF+L4DPL*LAX3*I3)) THEN
 10	      CONTINUE
	      CALL WNCTXT(F_TP,'Error writing Qube scan F=!UJ, T=!UJ',
	1		I0,I1)
	      GOTO 800
	    END IF
	  END DO
	  DO I3=BLINE,BLINE+LLINE-1		!ALL IFR LINES
	    BOFF=I3-BLINE			!OFFSET LINE
	    DO I4=0,A_J(QUA+QUA_IIFR_J)-1	!TRANSPOSE DATA
	      CALL WNGMV(L4DPL,
	1		A_B(A_J(QUA+QUA_SBPT_J)+L4DPL*LLINE*I4+
	1			L4DPL*BOFF),
	1		LMIFR(0,I4))
	    END DO
	    IF (IAND(A_J(QUA+QUA_ORDER_J),QUB_F).NE.0) THEN !ITF/TIF
	      I4=I3				!FREQ
	      I5=AX1				!TIME
	    ELSE
	      I4=AX1
	      I5=I3
	    END IF
	    IF (.NOT.NSCQR0(QUA,FCA,I4,I5,SCNP)) GOTO 10 !GET STH
	    IF (.NOT.NSCSWI(FCA,A_B(A_J(QUA+QUA_CSTH_J)),
	1		I5-SCNP,
	1		A_I(A_J(QUA+QUA_PIFR_J)),
	1		LMIFR,A_J(QUA+QUA_TCOR_J),
	1		A_J(QUA+QUA_CAP_J),
	1		A_J(QUA+QUA_CDAP_J),0)) GOTO 10 !WRITE ERRORS
	  END DO				!END PASS
	END DO					!ALL PASSES
C
	RETURN
C
C ERROR
C
 800	CONTINUE
	NSCQE0=.FALSE.				!INDICATE ERROR
C
	RETURN

C
C NSCQE1
C
	ENTRY NSCQE1(QUA,FCA,AX1,DOFF)
C
	CALL WNGMVZ(4*LB_X*STHIFR,LMIFR)	!MAKE ZERO BUFFER
	DO I=0,A_J(QUA+QUA_NDAT_J)-1
	  IF (.NOT.WNFWR(A_J(QUA+QUA_IFCA_J),
	1		4*LB_X*A_J(QUA+QUA_IIFR_J),
	1		LMIFR,
	1		DOFF+4*LB_X*A_J(QUA+QUA_IIFR_J)*I)) GOTO 10
	END DO
C
	RETURN
C
C
	END

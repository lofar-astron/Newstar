C+ NSCUVF.FOR
C  WNB 910220
C
C  Revisions:
C	WNB 910913	Add model subtraction and selection of corrections
C	WNB 910918	Calculation of dUTST
C	WNB 920109	Correct buffer management
C	HjV 920520	HP does not allow extended source lines
C	HjV 930311	Change some text
C	WNB 930825	Add dipole position; polarisation codes
C	WNB 930826	Add new Stokes calculation
C	CMV 930910	Allow single polarisation
C	CMV 930913	Ignore APDAT, set weights zero for individual pol's
C	CMV 940418	Correct selection of Polarisations
C       CMV 970130      Prevent creation of multiple output files
C
	SUBROUTINE NSCUVF
C
C  Convert SCN file to AIPS UVFITS format
C
C  Result:
C
C	CALL NSCUVF	will convert a SCN file to UVFITS AIPS format
C
C  PIN references:
C
C	IAT_UTC
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'CBITS_DEF'
	INCLUDE 'OHW_O_DEF'		!OH BLOCK
	INCLUDE 'SCW_O_DEF'		!SC BLOCK
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'SCH_O_DEF'		!SCAN HEADER
	INCLUDE 'NSC_DEF'
C
C  Parameters:
C
	INTEGER LRCLEN			!RECORD LENGTH FITS (CHANGE ALSO NSCUWB)
	  PARAMETER (LRCLEN=2880)
	INTEGER CDILEN			!CARD IMAGE LENGTH
	  PARAMETER (CDILEN=80)
	INTEGER NCDI			!# OF CARD IMAGES/RECORD
	  PARAMETER (NCDI=LRCLEN/CDILEN)
	INTEGER V_Z,V_L,V_I,V_J,V_C,V_E,V_D,V_T,
	1		V_XI,V_XJ	!CODES FOR FITS CARD LINES
	  PARAMETER (V_Z=0,V_L=1,V_I=2,V_J=3,V_C=4,V_E=5,V_D=6,
	1		V_T=7,V_XI=8,V_XJ=9)
	INTEGER MXNFRQ			!MAX # OF SIMULTANEOUS CHANNELS
	  PARAMETER (MXNFRQ=1024)
	INTEGER MXNSCT			!MAX # OF SECTORS PER FREQUENCY
	  PARAMETER (MXNSCT=50)
	INTEGER DBLEN			!DATA BUFFER LENGTH
	  PARAMETER (DBLEN=2*(4*3*MXNFRQ+6)) !BYTES
C
C  Arguments:
C
C
C  Function references:
C
	LOGICAL WNFOPF			!OPEN FILE (EXTENDED)
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNFWR			!WRITE DATA
	INTEGER WNFTLB			!CURRENT TAPE LABEL
	LOGICAL WNGGVM			!GET MEMORY
	CHARACTER*32 WNTTSG		!SET NAME
	DOUBLE PRECISION WNGDFD,WNGDND	!ANGLE CONVERSION
	DOUBLE PRECISION WNGDPF
	INTEGER WNCALN			!STRING LENGTH
	LOGICAL WNDPAR			!GET PARAMETER
	LOGICAL NSCSTG			!GET SETS
	LOGICAL NSCUWF			!FILL FITS LINE
	LOGICAL NSCUMF,NSCUMS,NSCUMB	!MAKE FITS LINE
	LOGICAL NSCSIF			!READ INTERFEROMETERS
	LOGICAL NSCSCR			!READ SCAN DATA
	LOGICAL NSCUV0			!WRITE UVFITS HEADER
	LOGICAL NSCUV1			!WRITE UVFITS  AN HEADER
CC	LOGICAL NSCUV2			!WRITE UVFITS  FQ HEADER
CC	LOGICAL NSCUV3			!WRITE UVFITS  SU HEADER
CC	LOGICAL NSCUV4			!WRITE UVFITS  SN HEADER
CC	LOGICAL NSCUV5			!WRITE UVFITS  BP HEADER
C
C  Data declarations:
C
	CHARACTER*160 ONFILE		!FILE NAME
	INTEGER NPOL			!# OF POL. INPUT
	INTEGER ONPOL			!# OF POL. TO DO
	INTEGER POLT(0:3)		!POL. TRANSLATION TABLE
	CHARACTER*15 CPOL		!POLARISATION STRING
	INTEGER LCPOL			!LENGTH OF CPOL
	INTEGER CAP,CDAP		!CORRECTIONS TO (DE-)APPLY
	INTEGER NIFR			!# OF IFRS
	INTEGER NSCN			!# OF SCANS
	INTEGER NSCT			!# OF SECTORS
	INTEGER LSCN,LSCT		!LOOP SCANS, SECTORS
	LOGICAL FORCN			!INDICATE NEW FIELD
	LOGICAL FORSCT			!INDICATE NEW SECTOR
	INTEGER SAVNAM(0:7)		!SAVE NAME
	INTEGER APDAT(0:STHIFR-1)	!CHECK STOKES
	CHARACTER*(STHTEL) TELNAM	!TEL. NAMES
	  DATA TELNAM/'0123456789ABCD'/
	INTEGER*2 DATB(0:2)		!DATE BUFFER
	INTEGER NFRQ			!# OF FREQ. TO DO
	INTEGER*2 IFRT(0:STHIFR-1)	!IFR TABLES
	INTEGER IFRA(0:1,0:STHIFR-1)
	REAL ANG(0:2,0:STHIFR-1)
	REAL BASEL(0:STHIFR-1)		!BASELINE TABLE
	INTEGER WGTPT			!DATA WEIGHT POINTER
	INTEGER DATPT			!DATA POINTER
	CHARACTER*12 TXT		!DATA HELP
	DOUBLE PRECISION IATOFF		!IAT-UTC IN DAYS
	DOUBLE PRECISION GSTIAT		!GST AT IAT 0HR IN DAYS
	DOUBLE PRECISION UT1UTC		!UT1-UTC IN DAYS
	REAL IATJS(0:1,0:50)		!LEAP SECONDS
	  DATA ((IATJS(I,J),I=0,1),J=0,16)
	1	/-1000000,10,41498,11,41683,12,42048,13,42413,14,
	1	42778,15,43144,16,43509,17,43874,18,44239,19,
	1	44786,20,45151,21,45516,22,46247,23,47161,24,
	1	47892,25,48257,26/
	  DATA (IATJS(0,J),J=17,50) /34*1000000/
	  DATA (IATJS(1,J),J=17,50) /34*27/
	BYTE BUF(0:DBLEN-1)		!DATA HELP BUFFER
	  CHARACTER*(DBLEN) BUFC
	  INTEGER*2 BUFI(0:DBLEN/2-1)
	  INTEGER BUFJ(0:DBLEN/4-1)
	  REAL BUFE(0:DBLEN/4-1)
	  DOUBLE PRECISION BUFD(0:DBLEN/8-1)
	  EQUIVALENCE (BUF,BUFC,BUFI,BUFJ,BUFE,BUFD)
	INTEGER STHP			!SET HEADER POINTER
	INTEGER SETNAM(0:7)		!NAME OF SET
	BYTE STH(0:STHHDL-1)		!SET HEADER
	  INTEGER*2 STHI(0:STHHDL/2-1)
	  INTEGER STHJ(0:STHHDL/4-1)
	  REAL STHE(0:STHHDL/4-1)
	  DOUBLE PRECISION STHD(0:STHHDL/8-1)
	  EQUIVALENCE (STH,STHI,STHJ,STHE,STHD)
	BYTE SCH(0:SCHHDL-1)		!SCAN HEADER
	  INTEGER*2 SCHI(0:SCHHDL/2-1)
	  INTEGER SCHJ(0:SCHHDL/4-1)
	  REAL SCHE(0:SCHHDL/4-1)
	  EQUIVALENCE (SCH,SCHI,SCHJ,SCHE)
	BYTE OHW(0:OHWHDL-1)		!OH BLOCK
	  INTEGER*2 OHWI(0:OHWHDL/2-1)
	  INTEGER OHWJ(0:OHWHDL/4-1)
	  REAL OHWE(0:OHWHDL/4-1)
	  DOUBLE PRECISION OHWD(0:OHWHDL/8-1)
	  EQUIVALENCE (OHW,OHWI,OHWJ,OHWE,OHWD)
	BYTE SCW(0:SCWHDL-1)		!SC BLOCK
	  INTEGER*2 SCWI(0:SCWHDL/2-1)
	  INTEGER SCWJ(0:SCWHDL/4-1)
	  REAL SCWE(0:SCWHDL/4-1)
	  DOUBLE PRECISION SCWD(0:SCWHDL/8-1)
	  EQUIVALENCE (SCW,SCWI,SCWJ,SCWE,SCWD)
	INTEGER TSTB(MXNSCT,MXNFRQ)	!SET POINTER TABLE
	DOUBLE PRECISION DFRQTB		!FREQUENCY
	DOUBLE PRECISION DBNDTB		!BAND
	DOUBLE PRECISION BNDTST		!STEP IN FREQUENCY
	REAL HABTST(MXNSCT)		!HAB TEST
	REAL HAITST(MXNSCT)		!HAI TEST
	INTEGER NSCTST(MXNSCT)		!N POINTS TEST
	INTEGER I6,I7
C-
C
C INIT
C
	CALL WNDDAP(CAP,CDAP)				!GET CORRECTION BITS
C
C Select polarisations. 
C
C	Standard FITS sequence is either I,Q,U,V or XX,YY,XY,YX
C
C	Since the polarisation is defined in the FITS header with 
C	CRVAL and CDELT, the combinations XX,XY,YX and I,U,V cannot be 
C	properly described, so we also produce YY and Q respectively.
C
	ONPOL=0						!ASSUME NO OUTPUT
	CPOL=' '
	LCPOL=1
C
	IF (IAND(POL(1),STOKES_P).EQ.0) THEN		!XX...
C
	   IF  (IAND(POL(1),XX_P).AND.IAND(POL(1),XY_P).AND.
	1	IAND(POL(1),YX_P)) POL(1)=IOR(POL(1),YY_P)	!SHOULD DO YY 
C
	   IF (IAND(POL(1),XX_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),I_M)		!DO XX
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='XX,'
	      LCPOL=LCPOL+3
	   END IF
	   IF (IAND(POL(1),YY_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),V_M)			!DO YY
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='YY,'
	      LCPOL=LCPOL+3
	   END IF
	   IF (IAND(POL(1),XY_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),Q_M)			!DO XY
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='XY,'
	      LCPOL=LCPOL+3
	   END IF
	   IF (IAND(POL(1),YX_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),U_M)			!DO YX
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='YX,'
	      LCPOL=LCPOL+3
	   END IF
	ELSE						!IQUV
C
	   IF  (IAND(POL(1),SI_P).AND.IAND(POL(1),SU_P).AND.
	1	IAND(POL(1),SV_P)) POL(1)=IOR(POL(1),SQ_P)	!SHOULD DO Q
C
	   IF (IAND(POL(1),SI_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),I_M)+LINE_P		!DO L
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='I,'
	      LCPOL=LCPOL+2
	   END IF
  	   IF (IAND(POL(1),SQ_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),Q_M)			!DO Q
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='Q,'
	      LCPOL=LCPOL+2
	   END IF
	   IF (IAND(POL(1),SU_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),U_M)			!DO U
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='U,'
	      LCPOL=LCPOL+2
	   END IF
	   IF (IAND(POL(1),SV_P).NE.0) THEN
	      POLT(ONPOL)=IAND(POL(1),V_M)			!DO V
	      ONPOL=ONPOL+1
	      CPOL(LCPOL:)='V,'
	      LCPOL=LCPOL+2
	   END IF
	END IF
	IF (LCPOL.GT.0) CPOL(LCPOL-1:)=' '		!STRIP TRAILING COMMA
C
C This routine writes into a single output file data for
C   * a single bandwidth (implied by UVFITS)
C   * a single pointing position
C   * the same interferometer table
C   * the same number of polarizations
C
C Data are written sorted in a number of groups, where each group
C contains all frequency/polarization points for a fixed (u,v,w) point.
C 
C
C GATHER FIELD DATA
C
	IF (.NOT.NSCSTG(FCAIN,SETS,STH,STHP,SETNAM)) THEN !GET FIRST SET
	  STHP=0					!SET NO MORE
	  CALL WNCTXT(F_TP,'No input data')
	END IF
C
C WE HAVE THE FIRST SECTOR FOR A NEW OUTPUT FILE
C
 200	CONTINUE
	IF (STHP.EQ.0) GOTO 900				!ALL FINISHED
	IF (.NOT.WNFRD(FCAIN,STHHDL,STH,STHP)) THEN	!READ HEADER
	  CALL WNCTXT(F_TP,'Error reading sector header')
	  GOTO 900
	END IF
	DO I=0,7					!SAVE NAME
	  SAVNAM(I)=SETNAM(I)
	END DO
	NPOL=STHI(STH_PLN_I)				!# OF POLARISATIONS
	NIFR=STHJ(STH_NIFR_J)				!# OF IFRS
	DO I=1,MXNFRQ					!CLEAR SET LIST
	  DO I1=1,MXNSCT
	    TSTB(I1,I)=0
	  END DO
	END DO
	NFRQ=1						!# OF FREQUENCIES
	NSCT=1						!# OF SECTORS
	NSCN=STHJ(STH_SCN_J)				!# OF SCANS
	TSTB(NSCT,NFRQ)=STHP				!SET HEADER POINTER
	DFRQTB=STHD(STH_FRQ_D)
	DBNDTB=STHE(STH_BAND_E)
	BNDTST=STHE(STH_BAND_E)				!FREQ. STEP INITIAL
	HABTST(NSCT)=STHE(STH_HAB_E)			!START HA SECTORS
	HAITST(NSCT)=STHE(STH_HAI_E)			!INCREM. HA TEST
	NSCTST(NSCT)=STHJ(STH_SCN_J)			!LENGTH SECTORS TEST
	IF (STHJ(STH_OHP_J).NE.0) THEN			!READ OH BLOCK
	  IF (.NOT.WNFRD(FCAIN,STHJ(STH_NOH_J),OHW,STHJ(STH_OHP_J))) THEN
 10	    CONTINUE
	    CALL WNCTXT(F_TP,'Error reading OH/SC block')
	    GOTO 900
	  END IF
	ELSE
	  CALL WNGMVZ(OHWHDL,OHW)
	END IF
	IF (STHJ(STH_SCP_J).NE.0) THEN			!READ SC BLOCK
	  IF (.NOT.WNFRD(FCAIN,STHJ(STH_NSC_J),
	1		SCW,STHJ(STH_SCP_J))) GOTO 10
	ELSE
	  CALL WNGMVZ(SCWHDL,SCW)
	END IF
C
C CHECK IF NEXT SET IN INPUT FILE FITS INTO THIS OUTPUT FILE
C
 210	CONTINUE
	FORCN=.FALSE.					!ASSUME CAN HANDLE
	IF (.NOT.NSCSTG(FCAIN,SETS,STH,STHP,SETNAM)) THEN !GET NEXT SET
	  STHP=0					!SET NO MORE
	  FORCN=.TRUE.					!NEW
	END IF
C
C IF NEW GRP,OBS OF FLD ASSUME DIFFERENT POINTING POSITION
C
	IF (.NOT.FORCN) THEN
	  DO I=0,2					!TEST FIELD
	    IF (SAVNAM(I).NE.SETNAM(I)) THEN
              CALL WNCTXT(F_TP,
	1        '!AS - New grp/obs/fld --> new label',
	1	WNTTSG(SETNAM,0))
	      FORCN=.TRUE.				!NEW FIELD
	    END IF
	  END DO
	END IF
C
C IF DIFFERENT NUMBER OF POLS/IFRS: CANNOT HANDLE IN ONE FILE
C
	IF (.NOT.FORCN) THEN
	  IF (NPOL.NE.STHI(STH_PLN_I)) FORCN=.TRUE.	!NEW LABEL
	  IF (NIFR.NE.STHJ(STH_NIFR_J)) FORCN=.TRUE.
          IF (FORCN) THEN
              CALL WNCTXT(F_TP,
	1        '!AS - Different nifr/npol --> new label',
	1	WNTTSG(SETNAM,0))
          END IF
	END IF
C
C IF DIFFERENT BANDWIDTH: CANNOT HANDLE IN ONE FILE
C
	IF (.NOT.FORCN) THEN
	   IF (ABS(DBLE(STHE(STH_BAND_E))-DBNDTB).GT.1D-6) THEN
	      FORCN=.TRUE.			!NOT CORRECT BANDWIDTH
              CALL WNCTXT(F_TP,
	1        '!AS - Different bandwidth --> new label',
	1	WNTTSG(SETNAM,0))
           END IF
	END IF

C
C IF DIFFERENT CHANNEL AND DIFFERENT SEPARATION: CANNOT HANDLE IN ONE FILE
C
	IF (.NOT.FORCN) THEN
	  IF (SAVNAM(3).EQ.SETNAM(3)) THEN		!SAME CHANNEL
	  ELSE
	    IF (NFRQ.GE.MXNFRQ) THEN			!CANNOT FIT MORE CHAN.
              CALL WNCTXT(F_TP,
	1        '!AS - Too many channels --> new label',
	1	WNTTSG(SETNAM,0))
	      FORCN=.TRUE.
	    ELSE
	      IF (NFRQ.EQ.1) BNDTST=STHD(STH_FRQ_D)-DFRQTB !FREQ. STEP
	      IF (ABS(STHD(STH_FRQ_D)-DFRQTB-NFRQ*BNDTST).GT.1D-6)
	1		FORCN=.TRUE.			!NOT CORRECT FREQ. STEP
	      IF (.NOT.FORCN) THEN
	        NFRQ=NFRQ+1				!NEXT CHANNEL
	        SAVNAM(3)=SETNAM(3)			!SAVE NEW VALUE
              ELSE
                CALL WNCTXT(F_TP,
	1	'!AS - Channel (!D MHz) does not fit --> new label',
	1	   WNTTSG(SETNAM,0),STHD(STH_FRQ_D))
	      END IF
	    END IF
	  END IF
	END IF
C
C OK, IT FITS IN THE SAME FILE. NOW CHECK IF IT'S A NEW SECTOR 
C WE MAY HAVE FOUND THIS HA-RANGE FOR ANOTHER FREQUENCY
C
	IF (.NOT.FORCN) THEN				!COUNT THE SET DATA
	  FORSCT=.TRUE.					!ASSUME NEW SECTOR
	  DO I=1,NSCT					!TEST SECTOR
	    IF (FORSCT) THEN
	      IF (ABS(STHE(STH_HAB_E)-HABTST(I)).LT.1E-5 .AND.
	1		ABS(STHE(STH_HAI_E)-HAITST(I)).LT.1E-6 .AND.
	1		STHJ(STH_SCN_J).EQ.NSCTST(I)) THEN !FOUND SECTOR
		TSTB(I,NFRQ)=STHP			!WHERE TO FIND
	        FORSCT=.FALSE.				!NO NEW SECTOR
	      END IF
	    END IF
	  END DO
	  IF (FORSCT) THEN				!NEW SECTOR
	    IF (NSCT.GE.MXNSCT) THEN			!FORGET THIS SECTOR
	    ELSE					!ADD NEW SECTOR
	      NSCT=NSCT+1
	      HABTST(NSCT)=STHE(STH_HAB_E)		!START HA SECTOR
	      HAITST(NSCT)=STHE(STH_HAI_E)		!INCREM. HA TEST
	      NSCTST(NSCT)=STHJ(STH_SCN_J)		!LENGTH SECTOR TEST
	      TSTB(NSCT,NFRQ)=STHP			!WHERE TO FIND
	      NSCN=NSCN+STHJ(STH_SCN_J)			!COUNT SCANS
	    END IF
	  END IF
	  GOTO 210					!TRY MORE SETS
	END IF
C
C OUTPUT DATA
C
C
C OPEN OUTPUT
C
	IF (OUNIT.EQ.'D') THEN				!DISK OUTPUT
	  IF (OLAB.LE.0) OLAB=1
	  CALL WNCTXS(ONFILE,'!AS\.!6$ZJ',OFILE,OLAB)	!FILE NAME
	  IF (.NOT.WNFOPF(OMCA,ONFILE(1:WNCALN(ONFILE)),'W',
	1		0,0,LRCLEN,0)) THEN
	    CALL WNCTXT(F_TP,'Cannot open file !AS',ONFILE)
	    GOTO 900					!READY
	  END IF
	ELSE						!TAPE OUTPUT
	  CALL WNCTXS(ONFILE,'label !6$ZJ',OLAB)	!FILE NAME
	  IF (.NOT.WNFOPF(OMCA,' ','W',0,LRCLEN,CDILEN,OLAB)) THEN
	    CALL WNCTXT(F_TP,'Cannot write to label !UJ',OLAB)
	    GOTO 900
	  END IF
	  OLAB=WNFTLB(OMCA)				!CURRENT LABEL
	END IF
	OLAB=OLAB+1					!COUNT LABEL
	SAVNAM(3)=-1					!LIMIT FIELD NAME
	CALL WNCTXT(F_TP,'!AS: !UJ chn, '//
	1	'!UJ pol (!AS), !UJ ifrs, '//
	1	'!UJ scn (in !UJ sct) to !AS',
	1	WNTTSG(SAVNAM,0),NFRQ,ONPOL,CPOL,NIFR,
	1	NSCN,NSCT,ONFILE)
C
C WRITE OUTPUT
C
C WRITE HEADER
C
C STANDARD
C
	J=0						!A SET HEADER POINTER
	DO I=1,NFRQ					!FIND ONE
	  DO I1=1,NSCT
	    IF (J.EQ.0) THEN
	      J=TSTB(I1,I)
	    END IF
	  END DO
	END DO
	IF (J.LE.0) GOTO 400				!NO SET: FINISH
	IF (.NOT.WNFRD(FCAIN,STHHDL,STH,J)) THEN	!READ SET HEADER
 430	  CONTINUE
	  CALL WNCTXT(F_TP,'Logic error')
	  GOTO 900
	END IF
	IF (.NOT.WNDPAR('IAT_UTC',IATJS(0,16),20*LB_E,J0)) GOTO 430 !GET LEAP S.
	I=0
	DO WHILE (STHD(STH_MJD_D).GE.IATJS(0,I))	!GET LEAP SECONDS
	  IATOFF=IATJS(1,I)
	  I=I+1
	END DO
	IATOFF=IATOFF/3600D0/24D0			!MAKE FRACTION OF DAY
	DATB(2)=OHWI(OHW_DATE_I+1)			!YEAR
	DATB(1)=OHWI(OHW_DATE_I+2)			!MONTH
	DATB(0)=OHWI(OHW_DATE_I+3)			!DAY
	J=OHWI(OHW_ETIM_I)-OHWI(OHW_STIM_I)		!LENGTH OBS. IN 10S
	IF (J.LT.0) J=J+24*360				!ADD ONE DAY
	R0=(J/2.+1.*OHWI(OHW_STIM_I))/24./360.		!MIDDLE OBS. FRACT. DAY
	IF (R0.GE.1.) DATB(0)=DATB(0)+1			!NEW REFERENCE DAY
	GSTIAT=OHWD(OHW_LST_D)+SCWE(SCW_WLON_E)		!GST AT MID OBS.
	GSTIAT=GSTIAT-(MOD(OHWD(OHW_JDAY_D)-.5D0,1D0)+IATOFF)*
	1		(1D0+SCWD(SCW_CUTST_D))		!GST AT 0HR IAT
	GSTIAT=WNGDPF(GSTIAT)				!0-1.
	UT1UTC=(SCWE(SCW_CLOCK_E)-SCWE(SCW_CLCOFF_E))/
	1		(1D0+SCWD(SCW_CUTST_D))-
	1		(SCWE(SCW_POLE_E)-SCWE(SCW_POLEOFF_E))*
	1		TAN(SCWE(SCW_GLAT_E)*PI2)
	UT1UTC=UT1UTC+(SCWE(SCW_DCLOCK_E)-SCWE(SCW_DPLE_E)*
	1		TAN(SCWE(SCW_GLAT_E)*PI2)/
	1		(1D0+SCWD(SCW_CUTST_D)))*
	1		(AINT(OHWD(OHW_JDAY_D))-SCWE(SCW_JDCP_E))
	IF (.NOT.NSCUV0(OMCA,ONPOL,POLT,IATOFF,NSCN,NFRQ,DFRQTB,BNDTST,
	1			STH,OHW,SCW,OINT)) GOTO 910	!WRITE HEAD
C
C GET IFR TABLES
C
	IF (.NOT.NSCSIF(FCAIN,STH,IFRT,IFRA,ANG)) THEN	!READ IFR TABLE
	  CALL WNCTXT(F_TP,'Error reading interferometer data')
	  GOTO 900
	END IF
	DO I=0,STHJ(STH_NIFR_J)-1			!MAKE BASELINES M
	  BASEL(I)=STHE(STH_RTP_E+IFRA(1,I))-STHE(STH_RTP_E+IFRA(0,I))
	  BASEL(I)=BASEL(I)*10.				!IN 10CM UNITS
	END DO
	R1=-SIN(DPI2*STHD(STH_DEC_D))			!GET U,V SCALE
	R0=1.
C
C WRITE DATA
C
	IF (.NOT.WNGGVM(LB_E*2*STHIFR*4*NFRQ,DATPT)) THEN !GET BUFFERS
 412	  CONTINUE
	  CALL WNCTXT(F_TP,'No memory for buffers')
	  GOTO 400
	END IF
	IF (.NOT.WNGGVM(LB_E*STHIFR*4*NFRQ,WGTPT)) THEN
	  CALL WNGFVM(LB_E*2*STHIFR*4*NFRQ,DATPT)
	  GOTO 412
	END IF
	DATPT=(DATPT-A_OB)/LB_E				!ARRAY POINTER
	WGTPT=(WGTPT-A_OB)/LB_E
C
C LOOP THROUGH SCANS
C
	DO LSCT=1,NSCT					!ALL SECTORS
	DO LSCN=0,NSCTST(LSCT)-1			!ALL SCANS
	 DO I=1,NFRQ					!ALL FREQUENCIES
	  IF (TSTB(LSCT,I).NE.0) THEN			!READ SET HEADER
	    IF (.NOT.WNFRD(FCAIN,STHHDL,STH,TSTB(LSCT,I))) GOTO 430 !READ HEAD
	    IF (.NOT.NSCSCR(FCAIN,STH,IFRT,LSCN,CAP,CDAP,SCH,
	1		A_E(WGTPT+(I-1)*STHIFR*4),
	1		A_E(DATPT+(I-1)*STHIFR*4*2))) THEN !READ DATA
	      CALL WNCTXT(F_TP,'Error reading scan')
	      GOTO 900
	    END IF
	    D0=STHD(STH_MJD_D)-44239+
	1		LSCN*STHE(STH_HAI_E)/STHD(STH_UTST_D) !MJD - 80.01.01
	    DO I0=0,STHJ(STH_NIFR_J)-1			!SET ALL PRESENT
		APDAT(I0)=1
	    END DO
	    CALL NMOCXX(STH,SCH,ANG,A_E(WGTPT+(I-1)*STHIFR*4),
	1		APDAT,A_E(DATPT+(I-1)*STHIFR*4*2),
	1		A_E(DATPT+(I-1)*STHIFR*4*2),ONPOL,POLT) !MAKE STOKES
C CMV930913 NMOCXX changes weights to reflect weight for selected pol.
C	    DO I0=0,STHJ(STH_NIFR_J)-1			!SET ALL PRESENT
C	      DO I1=0,3					!ZERO WEIGHTS
C	        IF (APDAT(I0,I1).EQ.0) THEN
C CMV930910 Index changed
C		  A_E(WGTPT+STHIFR*4*(I-1)+I1*STHIFR+I0)=0
C		ELSE IF (A_E(WGTPT+STHIFR*4*(I-1)+
C	1			I1*STHIFR+I0).LE.0) THEN
C		  A_E(WGTPT+STHIFR*4*(I-1)+I1*STHIFR+I0)=1
C	        END IF
C	      END DO
C	    END DO
	  END IF
	 END DO
C
C Fill buffer and write out
C
	 DO I0=0,STHJ(STH_NIFR_J)-1			!ALL INTERFEROMETERS
	  IF (OINT.EQ.16) THEN
	   BUFI(0)=-NINT(R0*BASEL(I0)*COS(DPI2*
	1		(HABTST(LSCT)+LSCN*HAITST(LSCT)))) !U
	   BUFI(1)=NINT(R1*BASEL(I0)*SIN(DPI2*
	1		(HABTST(LSCT)+LSCN*HAITST(LSCT)))) !V
	   BUFI(2)=0					!W
	   BUFI(3)=256*(IFRA(0,I0)+1)+IFRA(1,I0)+1	!BASELINE
	   BUFI(4)=AINT(D0)				!DATE
	   BUFI(5)=NINT((D0-BUFI(4))*24.*360.)		!TIME IN 10S
	   DO I=1,NFRQ					!ALL FREQUENCIES
	    IF (TSTB(LSCT,I).EQ.0) THEN			!NOT PRESENT
	     DO I2=0,ONPOL-1				!# OF POL.
	      I5=3*(I2+ONPOL*(I-1))			!DATA POINTER
	      BUFI(6+I5)=0				!NOT PRESENT
	      BUFI(7+I5)=0
	      BUFI(8+I5)=0
	     END DO
	    ELSE
	     DO I2=0,ONPOL-1				!# OF POLARISATIONS
	      I5=3*(I2+ONPOL*(I-1))			!OUTPUT POINTER
	      I6=DATPT+2*(STHIFR*4*(I-1)+I2*STHIFR+I0)	!DATA POINTER
	      I7=WGTPT+1*(STHIFR*4*(I-1)+I2*STHIFR+I0)	!WEIGHT POINTER
	      BUFI(6+I5)=NINT(A_E(I6+0))		!REAL
	      BUFI(7+I5)=NINT(A_E(I6+1))		!IMAG
	      BUFI(8+I5)=NINT(A_E(I7))			!WEIGHT
	     END DO
	    END IF
	   END DO					!END FREQ
	   IF (.NOT.NSCUMB(OMCA,V_I,BUFI(0),6+3*ONPOL*NFRQ)) GOTO 910 !WRITE DATA
C
	  ELSE
	   BUFJ(0)=-NINT(R0*BASEL(I0)*COS(DPI2*
	1		(HABTST(LSCT)+LSCN*HAITST(LSCT)))) !U
	   BUFJ(1)=NINT(R1*BASEL(I0)*SIN(DPI2*
	1		(HABTST(LSCT)+LSCN*HAITST(LSCT)))) !V
	   BUFJ(2)=0					!W
	   BUFJ(3)=256*(IFRA(0,I0)+1)+IFRA(1,I0)+1	!BASELINE
	   BUFJ(4)=AINT(D0)				!DATE
	   BUFJ(5)=NINT((D0-BUFJ(4))*24.*360.)		!TIME IN 10S
	   DO I=1,NFRQ					!ALL FREQUENCIES
	    IF (TSTB(LSCT,I).EQ.0) THEN			!NOT PRESENT
	     DO I2=0,ONPOL-1				!# OF POL.
	      I5=3*(I2+ONPOL*(I-1))			!DATA POINTER
	      BUFJ(6+I5)=0				!NOT PRESENT
	      BUFJ(7+I5)=0
	      BUFJ(8+I5)=0
	     END DO
	    ELSE
	     DO I2=0,ONPOL-1				!# OF POLARISATIONS
	      I5=3*(I2+ONPOL*(I-1))			!OUTPUT POINTER
	      I6=DATPT+2*(STHIFR*4*(I-1)+I2*STHIFR+I0)	!DATA POINTER
	      I7=WGTPT+1*(STHIFR*4*(I-1)+I2*STHIFR+I0)	!WEIGHT POINTER
	      BUFJ(6+I5)=NINT(A_E(I6+0))		!REAL
	      BUFJ(7+I5)=NINT(A_E(I6+1))		!IMAG
	      BUFJ(8+I5)=NINT(A_E(I7))			!WEIGHT
	     END DO
	    END IF
	   END DO					!END FREQ
	   IF (.NOT.NSCUMB(OMCA,V_J,BUFJ(0),6+3*ONPOL*NFRQ)) GOTO 910 !WRITE DATA
	  END IF
	 END DO						!END IFRS
C
	END DO                                          !NEXT SCAN
	END DO                                          !NEXT SECTOR
C
C FINISH DATA
C
	CALL WNGFVM(LB_E*2*STHIFR*4*NFRQ,LB_E*DATPT+A_OB) !FREE BUFFERS
	CALL WNGFVM(LB_E*STHIFR*4*NFRQ,LB_E*WGTPT+A_OB)
  400   CONTINUE
	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL OUT
C
C ANTENNA TABLE
C
	IF (.NOT.NSCUV1(OMCA,ONPOL,NFRQ,DFRQTB,BNDTST,STH,OHW,SCW,
	1		IATOFF,DATB,UT1UTC,GSTIAT)) GOTO 910 !WRITE AN HEADER
C
C MAKE ANTENNA TABLE
C
	DO I=0,STHTEL-1					!ALL TELESCOPES
	  BUFC(1:8)='WSRT'				!ANNAME
	  BUFC(5:5)=TELNAM(I+1:I+1)
	  IF (.NOT.NSCUMB(OMCA,V_C,BUF,8)) GOTO 910
	  BUFD(0)=0D0					!STABXYZ
	  BUFD(1)=OHWJ(OHW_POST_J+I)/(2D0**16)
	  BUFD(2)=0D0
	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,3)) GOTO 910
	  BUFI(0)=I+1					!NOSTA
	  BUFI(1)=1					!MNTSTA
	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,2)) GOTO 910
	  BUFE(0)=4.95					!STAXOF
	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,1)) GOTO 910
	  BUF(0)=ICHAR('X')				!POLTYA
	  IF (.NOT.NSCUMB(OMCA,V_C,BUF,1)) GOTO 910
	  BUFE(0)=90E0					!POLAA
	  BUFE(1)=0E0					!POLCALA
	  BUFE(2)=0E0
	  BUFE(3)=0E0
	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,4)) GOTO 910
	  BUF(0)=ICHAR('Y')				!POLTYB
	  IF (.NOT.NSCUMB(OMCA,V_C,BUF,1)) GOTO 910
	  BUFE(0)=180E0					!POLAB
	  BUFE(1)=0E0					!POLCALB
	  BUFE(2)=0E0
	  BUFE(3)=0E0
	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,4)) GOTO 910
	END DO						!TEL.
	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL RECORD
C
C FREQUENCY TABLE
C
CC	IF (.NOT.NSCUV2(OMCA,ONPOL,NFRQ,STH,OHW,SCW)) GOTO 910 !WRITE FQ HEADER
C
C MAKE FREQUENCY TABLE
C
CC	DO I=0,NFRQ-1					!ALL FREQUENCIES
CC	  BUFI(0)=I+1					!FRQSEL
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  BUFD(0)=(DFRQTB(I+1)-OHWD(OHW_FREQ_D))*1D6	!FREQUENCY
CC	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,1)) GOTO 910
CC	  BUFE(0)=DBNDTB(I+1)*1E6			!CH WIDTH
CC	  BUFE(1)=OHWE(OHW_BAND_E)*1E6			!TOTAL BANDWIDTH
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,2)) GOTO 910
CC	  IF (DFRQTB(I+1).GT.1000) THEN
CC	   BUFI(0)=-1					!SIDEBAND
CC	  ELSE
CC	   BUFI(0)=+1					!SIDEBAND
CC	  END IF
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	END DO
CC	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL RECORD
C
C SOURCE TABLE
C
CC	IF (.NOT.NSCUV3(OMCA,ONPOL,NFRQ,STH,OHW,SCW)) GOTO 910 !WRITE SU HEADER
C
C MAKE SOURCE TABLE
C
CC	DO I=0,0					!ALL FIELDS
CC	  BUFI(0)=I+1					!ID. NO.
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  CALL WNGMTS(12,STH(STH_FIELD_1),BUFC(1:16))	!SOURCE
CC	  IF (.NOT.NSCUMB(OMCA,V_C,BUF,16)) GOTO 910
CC	  BUFI(0)=0					!QUAL
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  BUFC(1:4)=' '					!CALCODE
CC	  IF (.NOT.NSCUMB(OMCA,V_C,BUF,4)) GOTO 910
CC	  BUFE(0)=0E0					!IFLUX
CC	  BUFE(1)=0E0					!QFLUX
CC	  BUFE(2)=0E0					!UFLUX
CC	  BUFE(3)=0E0					!VFLUX
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,4)) GOTO 910
CC	  BUFD(0)=0D0					!FREQOFF
CC	  BUFD(1)=STHE(STH_BAND_E)*1D6			!BANDWIDTH
CC	  BUFD(2)=WNGDFD(STHD(STH_RAE_D))		!RAEPO
CC	  BUFD(3)=WNGDND(WNGDFD(STHD(STH_DECE_D)))	!DECEPO
CC	  BUFD(4)=STHE(STH_EPO_E)			!EPOCH
CC	  BUFD(5)=WNGDFD(STHD(STH_RA_D))		!RAAPP
CC	  BUFD(6)=WNGDND(WNGDFD(STHD(STH_DEC_D)))	!DECAPP
CC	  BUFD(7)=0D0					!LSRVEL
CC	  BUFD(8)=STHD(STH_FRQ_D)*1D6			!RESTFREQ
CC	  BUFD(9)=0D0					!PMRA
CC	  BUFD(10)=0D0					!PMDEC
CC	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,11)) GOTO 910
CC	END DO
CC	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL RECORD
C
C GAIN TABLE
C
CC	IF (.NOT.NSCUV4(OMCA,ONPOL,NFRQ,STH,OHW,SCW)) GOTO 910 !WRITE SN HEADER
C
C MAKE GAIN TABLE
C
CC	DO I=0,STHTEL-1					!ALL TEL.
CC	  BUFD(0)=0D0					!TIME
CC	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,1)) GOTO 910
CC	  BUFE(0)=1E0					!TIME INTERVAL
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,1)) GOTO 910
CC	  BUFI(0)=1					!SOURCE ID
CC	  BUFI(1)=I+1					!ANTENNA NO.
CC	  BUFI(2)=0					!SUBARRAY
CC	  BUFI(3)=0					!NODE NO
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,4)) GOTO 910
CC	  BUFE(0)=1E0					!REAL1
CC	  BUFE(1)=0E0					!IMAG1
CC	  BUFE(2)=0E0					!DELAY 1
CC	  BUFE(3)=0E0					!RATE 1
CC	  BUFE(4)=1E0					!WEIGHT 1
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,5)) GOTO 910
CC	  BUFI(0)=10					!REFANT 1
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  BUFE(0)=1E0					!REAL2
CC	  BUFE(1)=0E0					!IMAG2
CC	  BUFE(2)=0E0					!DELAY 2
CC	  BUFE(3)=0E0					!RATE 2
CC	  BUFE(4)=1E0					!WEIGHT 2
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,5)) GOTO 910
CC	  BUFI(0)=10					!REFANT 2
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	END DO
CC	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL RECORD
C
C BANDPASS TABLE
C
CC	IF (.NOT.NSCUV5(OMCA,ONPOL,NFRQ,STH,OHW,SCW)) GOTO 910 !WRITE BP HEADER
C
C MAKE BANDPASS TABLE
C
CC	DO I=0,STHTEL-1					!ALL TEL.
CC	  BUFD(0)=0D0					!TIME
CC	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,1)) GOTO 910
CC	  BUFE(0)=1E0					!INTERVAL
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,1)) GOTO 910
CC	  BUFI(0)=1					!SOURCE ID
CC	  BUFI(1)=0					!SUBARRAY
CC	  BUFI(2)=I+1					!ANTENNA NO.
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,3)) GOTO 910
CC	  BUFE(0)=STHE(STH_BAND_E)*1E6			!BANDWIDTH
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,1)) GOTO 910
CC	  BUFD(0)=STHD(STH_FRQ_D)*1D6			!IF FREQ
CC	  IF (.NOT.NSCUMB(OMCA,V_D,BUF,1)) GOTO 910
CC	  BUFI(0)=10					!REFANT 1
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  BUFE(0)=1E0					!REAL1
CC	  BUFE(1)=0E0					!IMAG1
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,2)) GOTO 910
CC	  BUFI(0)=10					!REFANT 2
CC	  IF (.NOT.NSCUMB(OMCA,V_I,BUF,1)) GOTO 910
CC	  BUFE(0)=1E0					!REAL2
CC	  BUFE(1)=0E0					!IMAG2
CC	  IF (.NOT.NSCUMB(OMCA,V_E,BUF,2)) GOTO 910
CC	END DO
CC	IF (.NOT.NSCUWF(OMCA)) GOTO 910			!FILL RECORD
C
C END
C
	CALL WNFCL(OMCA)				!CLOSE OUTPUT
	GOTO 200					!MORE FIELDS
C
C ERROR
C
 910	CONTINUE
	CALL WNCTXT(F_TP,'Error writing FITS line')
 900	CONTINUE
	CALL WNFCL(FCAIN)				!CLOSE INPUT FILE
	CALL WNFDMO(OMCA)				!DISMOUNT/CLOSE OUTPUT
C
	RETURN						!READY
C
C
	END

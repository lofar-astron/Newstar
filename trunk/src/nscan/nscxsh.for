C+ NSCXSH.FOR
C  WNB 910211
C
C  Revisions:
C	HjV 930311	Change some text
C	WNB 931214	Cater for P:
C	CMV 940525	Add IFH structure
C
	SUBROUTINE NSCXSH(PTYPE,INFCA,STHP,SNAM)
C
C  Show set header
C
C  Result:
C
C	CALL NSCXSH ( PTYPE_J:I, INFCA_J:I, STHP_J:I, SNAM_J(*):I)
C					Show on output PTYPE the set at STHP
C					of file INFCA.
C	CALL NSCESH ( PTYPE_J:I, INFCA_J:I, STHP_J:I, SNAM_J(*):I)
C					Edit set header
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'STH_O_DEF'		!SET HEADER
	INCLUDE 'FDW_O_DEF'
	INCLUDE 'FDX_O_DEF'
	INCLUDE 'OHW_O_DEF'
	INCLUDE 'SCW_O_DEF'
	INCLUDE 'SHW_O_DEF'
	INCLUDE 'GFH_O_DEF'
	INCLUDE 'MDH_O_DEF'
	INCLUDE 'SGH_O_DEF'
	INCLUDE 'MDL_O_DEF'
	INCLUDE 'SCH_O_DEF'
	INCLUDE 'IFH_O_DEF'
	INCLUDE 'STH_E_DEF'		!EDIT INFORMATION
	INCLUDE 'FDW_E_DEF'
	INCLUDE 'FDX_E_DEF'
	INCLUDE 'OHW_E_DEF'
	INCLUDE 'SCW_E_DEF'
	INCLUDE 'SHW_E_DEF'
	INCLUDE 'GFH_E_DEF'
	INCLUDE 'MDH_E_DEF'
	INCLUDE 'SGH_E_DEF'
	INCLUDE 'MDL_E_DEF'
	INCLUDE 'SCH_E_DEF'
	INCLUDE 'IFH_E_DEF'
C
C  Parameters:
C
	INTEGER MXDEP			!MAX. NESTING DEPTH
	  PARAMETER (MXDEP=8)
	INTEGER IFRTEDL			!LENGTH IFR EDIT
	  PARAMETER (IFRTEDL=1)
	INTEGER MDDEDL			!MODEL DATA
	  PARAMETER (MDDEDL=1)
	INTEGER IFRCEDL			!IFR CORRECTIONS
	  PARAMETER (IFRCEDL=1)
	INTEGER D_GEDL			!GENERAL DATA
	  PARAMETER (D_GEDL=1)
C
C  Arguments:
C
	INTEGER PTYPE			!PRINT TYPE (f_p, f_t ETC)
	INTEGER INFCA			!FILE DESCRIPTOR
	INTEGER STHP			!SET HEADER POINTER
	INTEGER SNAM(*)			!SET NAME
C
C  Function references:
C
	LOGICAL WNFRD			!READ DATA
	LOGICAL WNFWR			!WRITE DATA
	INTEGER WNGGJ			!GET J
	CHARACTER*32 WNTTSG		!SHOW SET NUMBER
C
C  Data declarations:
C
	CHARACTER*8 PLIST(28)		!KNOWN P: AREAS
	  DATA PLIST/	'STH','FDW','OHW','SCW','SHW','FDX',
	1		'GFH','IFRT','MDH','MDD','SGH','MDL',
	1		'SCH','IFRC',
	1		'B','I','J','E','D','X','Y',
	1		'S:SET','S:SRC','S:BCOR','S:MOZP','S:IFR',
	1		'IFH',
	1		' '/
	INTEGER PLEN(0:1,28)		!P: LENGTH
	  DATA PLEN/	-1,STHHDL,
	1		STH_NFD_1,FDWHDL,
	1		STH_NOH_1,OHWHDL,
	1		STH_NSC_1,SCWHDL,
	1		STH_NSH_1,SHWHDL,
	1		STH_NFD_1,FDXHDL,
	1		-1,GFHHDL,
	1		-1,-1,
	1		-1,MDHHDL,
	1		-1,-1,
	1		-1,SGHHDL,
	1		-1,MDLHDL,
	1		-1,SCHHDL,
	1		-1,-1,
	1		-1,LB_B,-1,LB_I,-1,LB_J,-1,LB_E,
	1		-1,LB_D,-1,LB_X,-1,LB_Y,
	1		-1,SETHDL,-1,SRCHDL,-1,BCORHDL,-1,MOZPHDL,-1,IFRHDL,
	1		-1,IFHHDL,
	1		0,0/
	INTEGER DEP			!CURRENT DEPTH
	INTEGER DEPAR(4,MXDEP)		!SAVE DEPTH
	INTEGER CHP,CHDL		!CURRENT HEADER LENGTH, PTR
	INTEGER CTYP,CEDP		!CURRENT HEADER TYPE #, PTR INTO EDIT
	INTEGER CHPT			!NEXT HEADER POINTER
	INTEGER PSZ(0:1)		!P: OFFSET AND SIZE
	INTEGER TSCNL,TSCNN		!LENGTH ONE SCAN, # OF SCANS
	BYTE STH(0:STHHDL-1)		!SET HEADER
	  BYTE FDW(0:FDWHDL-1)
	  BYTE FDX(0:FDXHDL-1)
	  BYTE OHW(0:OHWHDL-1)
	  BYTE SCW(0:SCWHDL-1)
	  BYTE SHW(0:SHWHDL-1)
	  BYTE GFH(0:GFHHDL-1)
	  INTEGER*2 IFRT(0:STHIFR-1)
	  BYTE MDH(0:MDHHDL-1)
	  COMPLEX MDD(0:3,0:STHIFR-1)
	  BYTE SGH(0:SGHHDL-1)
	  BYTE SCH(0:SCHHDL-1)
	  BYTE MDL(0:MDLHDL-1)
	  COMPLEX IFRC(0:3,0:STHIFR-1)
	  BYTE IFH(0:IFHHDL-1)
	  EQUIVALENCE (STH,FDW,FDX,OHW,SCW,SHW,GFH,IFRT,MDH,MDD,
	1		SGH,SCH,MDL,IFRC,IFH)
	CHARACTER*8 IFRT_EC(4)		!IFR TABLE
	  DATA IFRT_EC/'IFR','XI',' ',' '/
	INTEGER IFRT_EJ(4)
	  DATA IFRT_EJ/0,-1,0,LB_I/
	CHARACTER*10 MDD_EC(4)		!MODEL DATA TABLE
	  DATA MDD_EC/'MDD','26$EC12.2',' ',' '/
	INTEGER MDD_EJ(4)
	  DATA MDD_EJ/0,-1,0,LB_X/
	CHARACTER*8 IFRC_EC(4)		!IFR CORRECTIONS TABLE
	  DATA IFRC_EC/'IFRC','26$EC12.4',' ',' '/
	INTEGER IFRC_EJ(4)
	  DATA IFRC_EJ/0,-1,0,LB_X/
	CHARACTER*8 D_G_EC(4,7)		!DATA TABLES
	  DATA D_G_EC/	'B','SB',' ',' ',
	1		'I','SI',' ',' ',
	1		'J','SJ',' ',' ',
	1		'E','E12.6',' ',' ',
	1		'D','D12.8',' ',' ',
	1		'X','26$EC12.6',' ',' ',
	1		'Y','26$DC12.8',' ',' '/
	INTEGER D_G_EJ(4,7)
	  DATA D_G_EJ/	0,1,0,LB_B,
	1		0,1,0,LB_I,
	1		0,1,0,LB_J,
	1		0,1,0,LB_E,
	1		0,1,0,LB_D,
	1		0,1,0,LB_X,
	1		0,1,0,LB_Y/
C-
C
C GET HEADER
C
	IF (.NOT.WNFRD(INFCA,STHHDL,STH,STHP)) THEN
	  CALL WNCTXT(PTYPE,'Read error on input node')
	  RETURN
	END IF
C
C SHOW HEADER
C
	CALL WNCTXT(PTYPE,'!/Sector header description !AS\:!/',
	1		WNTTSG(SNAM,0))
	CALL NSCXXS(PTYPE,STH,STHEDL,STH_EC,STH_EJ)	!ACTUAL SHOW
C
	RETURN
C
C NSCESH
C
	ENTRY NSCESH(PTYPE,INFCA,STHP,SNAM)
C
C INIT
C
	DEP=0					!CURRENT DEPTH
	CHP=STHP				!HEADER POINTER
	CTYP=1					!CURRENT TYPE (STH)
	CEDP=-1					!CURRENT POINTER IN EDIT LIST
	CHDL=STHHDL				!CURRENT LENGTH
C
C ACTION
C
 10	CONTINUE
	DO WHILE (CTYP.GT.0)			!SOMETHING TO DO
	  IF (CHDL.LE.0) THEN			!GET NEW HEADER
	    IF (PLEN(0,CTYP).GE.0 .AND. CEDP.GT.0) THEN
	      CHDL=WNGGJ(STH(PLEN(0,CTYP)))	!LENGTH FROM FILE
	    ELSE
	      CHDL=PLEN(1,CTYP)			!DEFAULT LENGTH
	    END IF
	    CHDL=MIN(CHDL,PLEN(1,CTYP))		!MAKE SURE NO PROBLEMS
	    IF (CHDL.LE.0) GOTO 20		!NOT PRESENT; RESTART CURRENT
	  END IF
C
C GET HEADER
C
	  IF (CHP.EQ.0 .AND.
	1		(CTYP.LT.7 .OR.
	1		(CTYP.GT.7 .AND. CTYP.LT.15) .OR.
	1		(CTYP.GT.21))) GOTO 20	!NOT PRESENT
	  IF (CHP.GT.0 .AND. CHP.LT.GFHHDL .AND.
	1		(CTYP.LT.15 .OR. CTYP.GT.21)) THEN !MUST BE GFH
	    CTYP=7
	    CHDL=PLEN(1,CTYP)
	    CHP=0
	    CEDP=-1
	  END IF
	  CALL WNGMVZ(PLEN(1,CTYP),STH)		!CLEAR BEFORE READ
	  IF (.NOT.WNFRD(INFCA,CHDL,STH,CHP)) THEN
	    CALL WNCTXT(PTYPE,'Read error on input node')
	    RETURN
	  END IF
	  IF (CTYP.EQ.1) THEN			!FILL IFR TABLE
	    IFRT_EJ(2)=WNGGJ(STH(STH_NIFR_1))	!# OF ENTRIES
	    PLEN(1,8)=IFRT_EJ(2)*LB_I		!LENGTH TABLE
	    MDD_EJ(2)=4*IFRT_EJ(2)
	    PLEN(1,10)=MDD_EJ(2)*LB_X
	    IFRC_EJ(2)=4*IFRT_EJ(2)
	    PLEN(1,14)=IFRC_EJ(2)*LB_X
	    TSCNL=WNGGJ(STH(STH_SCNL_1))	!LENGTH ONE SCAN
	    TSCNN=WNGGJ(STH(STH_SCN_1))		!NUMBER OF SCANS
	  END IF
C
C EDIT HEADER
C
	  CALL WNCTXT(PTYPE,'*** Editing !AS ***',PLIST(CTYP))
	  IF (DEP.GE.MXDEP) THEN		!SHIFT ONE
	    DO I=1,MXDEP-1
	      DO I1=1,4
	        DEPAR(I1,I)=DEPAR(I1,I+1)
	      END DO
	    END DO
	    DEP=MXDEP-1
	  END IF
	  DEP=DEP+1				!SAVE PREVIOUS
	  DEPAR(1,DEP)=CHP
	  DEPAR(2,DEP)=CTYP
	  DEPAR(3,DEP)=CEDP
	  DEPAR(4,DEP)=CHDL
	  IF (CTYP.EQ.1) THEN
	    CALL NSCXES(PTYPE,STH,STHEDL,STH_EC,STH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.2) THEN
	    CALL NSCXES(PTYPE,STH,FDWEDL,FDW_EC,FDW_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	    CTYP=6				!DO ALSO FDX
	    CEDP=-1
	    CHPT=CHP+FDWHDL
	  ELSE IF (CTYP.EQ.3) THEN
	    CALL NSCXES(PTYPE,STH,OHWEDL,OHW_EC,OHW_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.4) THEN
	    CALL NSCXES(PTYPE,STH,SCWEDL,SCW_EC,SCW_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.5) THEN
	    CALL NSCXES(PTYPE,STH,SHWEDL,SHW_EC,SHW_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.6) THEN
	    CALL NSCXES(PTYPE,STH,FDXEDL,FDX_EC,FDX_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.7) THEN
	    CALL NSCXES(PTYPE,STH,GFHEDL,GFH_EC,GFH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.8) THEN
	    CALL NSCXES(PTYPE,STH,IFRTEDL,IFRT_EC,IFRT_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.9) THEN
	    CALL NSCXES(PTYPE,STH,MDHEDL,MDH_EC,MDH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.10) THEN
	    CALL NSCXES(PTYPE,STH,MDDEDL,MDD_EC,MDD_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.11) THEN
	    CALL NSCXES(PTYPE,STH,SGHEDL,SGH_EC,SGH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.12) THEN
	    CALL NSCXES(PTYPE,STH,MDLEDL,MDL_EC,MDL_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.13) THEN
	    CALL NSCXES(PTYPE,STH,SCHEDL,SCH_EC,SCH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.14) THEN
	    CALL NSCXES(PTYPE,STH,IFRCEDL,IFRC_EC,IFRC_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.GE.15 .AND. CTYP.LE.21) THEN
	    CALL NSCXES(PTYPE,STH,D_GEDL,
	1		D_G_EC(1,CTYP-14),D_G_EJ(1,CTYP-14),PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.22) THEN
	    CALL NSCXES(PTYPE,STH,SETEDL,SET_EC,SET_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.23) THEN
	    CALL NSCXES(PTYPE,STH,SRCEDL,SRC_EC,SRC_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.24) THEN
	    CALL NSCXES(PTYPE,STH,BCOREDL,BCOR_EC,BCOR_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.25) THEN
	    CALL NSCXES(PTYPE,STH,MOZPEDL,MOZP_EC,MOZP_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.26) THEN
	    CALL NSCXES(PTYPE,STH,IFREDL,IFR_EC,IFR_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  ELSE IF (CTYP.EQ.27) THEN
	    CALL NSCXES(PTYPE,STH,IFHEDL,IFH_EC,IFH_EJ,PLIST,
	1		CTYP,CEDP,CHPT,PSZ)
	  END IF
	  IF (CTYP.GE.1000) THEN		!RELATIVE ADDRESS
	    CTYP=MOD(CTYP,1000)			!GET CORRECT TYPE
	    CHPT=CHP+CHPT			!CATER FOR OFFSET GIVEN
	  END IF
	  IF (CTYP.GE.15 .AND. CTYP.LE.21) THEN
	    CHPT=CHPT+PSZ(0)*D_G_EJ(4,CTYP-14)	!CATER FOR GIVEN OFFSET
	    D_G_EJ(2,CTYP-14)=MAX(1,MIN(PSZ(1),SCWHDL/LB_Y)) !MAX. NUMBER TO DO
	  END IF
	  IF (CTYP.EQ.12 .AND. CHPT.NE.0) THEN	!MODEL
	    CHPT=CHPT+MDLHDL*MAX(0,MIN(PSZ(0),WNGGJ(MDH(MDH_MODL_1))))
	  END IF
	  IF (CTYP.EQ.13 .AND. CHPT.NE.0) THEN !SCAN
	    CHPT=CHPT+TSCNL*MAX(0,MIN(PSZ(0),TSCNN))
	  END IF
	  IF (CTYP.GE.22 .AND. CTYP.LE.26 .AND.
	1		PSZ(0).EQ.-1) THEN	!SHOW ALL
	    IF (CTYP.EQ.22) THEN
	      DO I=0,OHW_EJ(2,CEDP)-1		!ALL SUB-STRUCTURES
	        CALL NSCXXS(PTYPE,STH(CHPT+I*OHW_EJ(4,CEDP)),
	1		SETEDL,SET_EC,SET_EJ)	!ACTUAL SHOW
	      END DO
	    ELSE IF (CTYP.EQ.23) THEN
	      DO I=0,SCW_EJ(2,CEDP)-1		!ALL SUB-STRUCTURES
	        CALL NSCXXS(PTYPE,STH(CHPT+I*SCW_EJ(4,CEDP)),
	1		SRCEDL,SRC_EC,SRC_EJ)	!ACTUAL SHOW
	      END DO
	    ELSE IF (CTYP.EQ.24) THEN
	      DO I=0,SCW_EJ(2,CEDP)-1		!ALL SUB-STRUCTURES
	        CALL NSCXXS(PTYPE,STH(CHPT+I*SCW_EJ(4,CEDP)),
	1		BCOREDL,BCOR_EC,BCOR_EJ) !ACTUAL SHOW
	      END DO
	    ELSE IF (CTYP.EQ.25) THEN
	      DO I=0,SCW_EJ(2,CEDP)-1		!ALL SUB-STRUCTURES
	        CALL NSCXXS(PTYPE,STH(CHPT+I*SCW_EJ(4,CEDP)),
	1		MOZPEDL,MOZP_EC,MOZP_EJ) !ACTUAL SHOW
	      END DO
	    ELSE IF (CTYP.EQ.26) THEN
	      DO I=0,SHW_EJ(2,CEDP)-1		!ALL SUB-STRUCTURES
	        CALL NSCXXS(PTYPE,STH(CHPT+I*SHW_EJ(4,CEDP)),
	1		IFREDL,IFR_EC,IFR_EJ)	!ACTUAL SHOW
	      END DO
	    END IF
	    CTYP=0				!READY
	    DEP=DEP+1
	  END IF
C
C REWRITE HEADER
C
	  IF (.NOT.WNFWR(INFCA,CHDL,STH,CHP)) THEN
 30	    CONTINUE
	    CALL WNCTXT(PTYPE,'Write error on input node')
	    RETURN
	  END IF
	  CHP=CHPT				!NEXT HEADER POINTER
	  IF (CTYP.GE.15 .AND. CTYP.LE.21) THEN
	    CHDL=D_G_EJ(2,CTYP-14)*D_G_EJ(4,CTYP-14) !NEW LENGTH
	  ELSE
	    CHDL=0				!NEXT HEADER LENGTH
	  END IF
	END DO
C
C RETURN PREVIOUS LEVEL
C
	DEP=DEP-1
 20	CONTINUE
	IF (DEP.GT.0) THEN			!CAN DO MORE
	  CHP=DEPAR(1,DEP)
	  CTYP=DEPAR(2,DEP)
	  CEDP=DEPAR(3,DEP)
	  CHDL=DEPAR(4,DEP)
	  DEP=DEP-1
	  GOTO 10
	END IF
C
	RETURN
C
C
	END

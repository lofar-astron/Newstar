#  nbuild.ssc
# 	WNB 921117
# 
#  Revisions:
#	WNB 921210	Change compilation of .def etc; delete c??
#	WNB 921222	Add SSC and nonomatch for HP
#	WNB 921224	Make SSC
#	WNB 930303	NSTAR_DIR added
#	WNB 930305	Make sure of aliases
#	WNB 930514	Correct aliases
#	WNB 930803	Add .dsf
#	WNB 940124	Leave _TLB
# 
# 	Build Newstar from standard export tar tape
#
#	Uses environment variables:
#		WNG			where to find wng-type sources
#		WNG_TYPE		machine (sw, dw, hp, al, cv etc)
#		WNG_OLBEXE		root of wng-type .olb, .ppd, .exe
#		WNG_SITE		site (nfra, atnf, rug ...)
#		EXEDWARF_UNIX		where to find/set DWARF .exe, .ppd
#		LIBDWARF		where to find DWARF .olb
#		NSTAR_DIR		N directories
#	and also possible:
#		WNG_EXE, WNG_OLB, WNG_TLB, WNG_ERR, WNG_LIS, WNG_LINK
#
# Intro
#
	onintr exex					# finish neatly
	if ($?echo) unset echo				# no verify
	if ($?verbose) unset verbose			# no verbose
	set pid=$$ ; @ dep=1				# for tmp files
	echo " "
	echo "Building Newstar."
	echo " "
	echo 'A log will be made in $WNG'"/../nb$pid$dep.log"
	echo "There should be about 100 Mbytes available,"
	echo "and it will probably take a few hours."
	echo " "
#
# Check environment
#
	if (! $?WNG || ! $?WNG_TYPE || ! $?WNG_OLBEXE ||\
			! $?WNG_SITE || ! $?NSTAR_DIR) then
	  echo " Error: Must have environment variables"
	  echo "        WNG, WNG_TYPE, WNG_OLBEXE, WNG_SITE, NSTAR_DIR defined"
	  echo "        You probably have not included the proper"
	  echo "        files in .cshrc (see README)"
	  goto exex
	endif
	if (! $?EXEDWARF_UNIX || ! $?LIBDWARF) then
	  echo " Error:   Cannot do everything with EXEDWARF_UNIX and/or"
	  echo "          LIBDWARF not defined"
	  echo "          You probably have not included the proper"
	  echo "          files in .cshrc (see README)"
	  goto exex
	endif
	source $WNG/wngcshrc.sun			# get aliases
	if ("`alias nxec`" == "") then
	  echo " Error:   You have no alias for nxec etc."
	  echo "          You probably have not included the proper"
	  echo "          files in .cshrc (see README)"
	  goto exex
	endif
#
# Creating environment
#
	cd $WNG
	if (! $?WNG_EXE) setenv WNG_EXE $WNG_OLBEXE	# make names
	if (! $?WNG_OLB) setenv WNG_OLB $WNG_OLBEXE
	set blddir=($NSTAR_DIR)				# Newstar directories
	foreach i ($blddir)
	  if (! -d $WNG_EXE/$i) mkdir $WNG_EXE/$i	# make directories
	  if (! -d $WNG_OLB/$i) mkdir $WNG_OLB/$i
	endif
##	if ($?WNG_TLB) unsetenv WNG_TLB			# make sure
	if ($?WNG_ERR) unsetenv WNG_ERR
	if ($?WNG_LIS) unsetenv WNG_LIS
	if ($?WNG_LINK) unsetenv WNG_LINK
#
# Get questions
#
	echo "nb$pid$dep.log" >>! $WNG/../nb$pid$dep.log # start log
	echo "Running NBUILD.SUN for $WNG_SITE($WNG_TYPE)" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "on `hostname` at `date`" | tee -a $WNG/../nb$pid$dep.log
	echo " " | tee -a $WNG/../nb$pid$dep.log
	set dogdef
	if (-e wng.def) then
	  echo -n ".def files seem to exist. Get them anyway? (y|n) [y]: " \
			| tee -a $WNG/../nb$pid$dep.log
	  set l0=($<)
	  echo "$l0" >>! $WNG/../nb$pid$dep.log
	  if ("$l0" =~ [nN]*) unset dogdef		# skip get
	endif
	set domdef
	if (-e WNG_DEF) then
	  echo -n ".def files seem compiled. Compile them anyway? (y|n) [y]: " \
			| tee -a $WNG/../nb$pid$dep.log
	  set l0=($<)
	  echo "$l0" >>! $WNG/../nb$pid$dep.log
	  if ("$l0" =~ [nN]*) unset domdef		# skip compile
	endif
	set doggrp
	if (-e wng.grp) then
	  echo -n ".grp files seem to exist. Get them anyway? (y|n) [y]: " \
			| tee -a $WNG/../nb$pid$dep.log
	  set l0=($<)
	  echo "$l0" >>! $WNG/../nb$pid$dep.log
	  if ("$l0" =~ [nN]*) unset doggrp		# skip compile
	endif
	set l0=("`ar t $WNG_OLBEXE/wng/wnlib.olb wngang.o`")
	if ("$l0" == "wngang.o") then
	  echo -n "Some compilation at least done. Compile all? (y|n) [n]: " \
			| tee -a $WNG/../nb$pid$dep.log
	  set l0=($<)
	  echo "$l0" >>! $WNG/../nb$pid$dep.log
	  if ("$l0" =~ [yY]*) set docomp		# do compile
	else
	  set docomp
	endif
	set dolink
	echo -n "Link all programs? (y|n) [y]: " \
			| tee -a $WNG/../nb$pid$dep.log
	set l0=($<)
	echo "$l0" >>! $WNG/../nb$pid$dep.log
	if ("$l0" =~ [nN]*) unset dolink		# skip link
	echo "You could clean up all unwanted files." \
			| tee -a $WNG/../nb$pid$dep.log
	echo "(0)For operation the following files should remain:" \
			| tee -a $WNG/../nb$pid$dep.log
	echo '	$EXEDWARF_UNIX/*.exe and *.ppd; $WNG/../*/*.sun' \
			| tee -a $WNG/../nb$pid$dep.log
	echo "(1)For easy updating the following files should also remain:" \
			| tee -a $WNG/../nb$pid$dep.log
	echo '	$WNG_OLB/*/*.olb $WNG/../*/*.tlb and *.def and *.inc' \
			| tee -a $WNG/../nb$pid$dep.log
	echo '		and *DEF and *.grp;' \
			| tee -a $WNG/../nb$pid$dep.log
	echo '	upper case in $WNG/../dwarf (except *.LOG)' \
			| tee -a $WNG/../nb$pid$dep.log
	echo "(2)To check programs all source files could remain" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "(3)To check all listing files can remain" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "I can remove for you including and above a specified level:" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "(probably better to run with 4 first time, and rerun" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "	nbuild later with all questions n and the proper level)" \
			| tee -a $WNG/../nb$pid$dep.log
	echo -n "Clean disk level (1|2|3|4) [3]: " \
			| tee -a $WNG/../nb$pid$dep.log
	set l0=($<)
	if ("$l0" !~ [1234]) set l0=3
	echo "$l0" >>! $WNG/../nb$pid$dep.log
	set doclup=$l0
#
# Get and make .def .sun
#
GDEF:
	cd $WNG						# base directory
	if ($?dogdef) then
	  echo "Getting .def ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# get .def
	    cd ../$i					# correct directory
	    nget -a '.*def' '.*pef' '.*dsf' '.*inc' '.*ssc' '.*sun' \
			>>&! $WNG/../nb$pid$dep.log	
	  end
	endif
MDEF:
	cd $WNG						# base directory
	if ($?domdef) then
	  echo "Compiling .def ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# compile .def
	    cd ../$i					# correct directory
	    ncomp -u *.def *.inc *.pef *.dsf *.ssc *.sun \
			>>&! $WNG/../nb$pid$dep.log
	  end
	endif
#
# Get groups
#
GGRP:
	cd $WNG						# base directory
	if ($?doggrp) then
	  echo "Getting .grp ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# get .grp
	    cd ../$i					# correct directory
	    nget -nza '.*grp' >>&! $WNG/../nb$pid$dep.log	# get .grp
	  end
	endif
#
# Compile all
#
COMP:
	cd $WNG						# base directory
	if ($?docomp) then
	  echo "Compiling Newstar system ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# compile
	    cd ../$i					# correct directory
	    ncomp *.grp >>&! $WNG/../nb$pid$dep.log	# compile
	  end
	endif
#
# Link all
#
LINK:
	cd $WNG						# base directory
	if ($?dolink) then
	  echo "Linking Newstar system ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# link
	    cd ../$i					# correct directory
	    nlink -u *.grp >>&! $WNG/../nb$pid$dep.log	# link all programs
	  end
	  foreach i ($blddir)				# compile .pin
	    cd ../$i					# correct directory
	    ncomp -u *.pin >>&! $WNG/../nb$pid$dep.log	# make ppd
	  end
	  foreach i ($blddir)				# compile .*sc
	    cd ../$i					# correct directory
	    ncomp -u *.dsc >>&! $WNG/../nb$pid$dep.log	# compile .dsc
	    ncomp -u *.ssc >>&! $WNG/../nb$pid$dep.log	# compile .ssc
	  end
	endif
#
# Cleanup
#
CLUP:
	cd $WNG
	if ($doclup < 4) then
	  echo "Removing listing files ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)				# remove listings
	    cd ../$i
	    set nonomatch
	    'rm' *.lis >& /dev/null
	    'rm' *.err >& /dev/null
	    'rm' *.old >& /dev/null
	    'rm' *.new >& /dev/null
	    'rm' *.log >& /dev/null
	    'rm' *.LOG >& /dev/null
	    'rm' *.tmp >& /dev/null
	    'rm' *~ >& /dev/null
	    'rm' *.o >& /dev/null
	    'rm' $WNG_EXE/$i/*.map >& /dev/null
	    unset nonomatch
	  end
	endif
	if ($doclup < 3) then
	  echo "Removing source files ..." | tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)
	    cd ../$i
	    set nonomatch
	    'rm' *.f?? >& /dev/null
	    'rm' *.c[a-np-z]? >& /dev/null
	    'rm' *.m?? >& /dev/null
	    'rm' *.pin >& /dev/null
	    unset nonomatch
	  end
	endif
	if ($doclup < 2) then
	  echo "Removing object/include files ..." \
			| tee -a $WNG/../nb$pid$dep.log
	  foreach i ($blddir)
	    cd ../$i
	    'rm' $WNG_OLB/$i/*.olb >& /dev/null
	    set nonomatch
	    'rm' *.def >& /dev/null
	    'rm' *.inc >& /dev/null
	    'rm' *.dsc >& /dev/null
	    'rm' *DEF >& /dev/null
	    'rm' *.ssc >& /dev/null
	    'rm' [A-Z0-9]* >& /dev/null
	    unset nonomatch
	  end
	endif
#
# Ready
#
END:
	echo " " | tee -a $WNG/../nb$pid$dep.log
	echo "Newstar built. Try if everything works by typing:" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "	indwarf			(unless in .cshrc)" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "	dws ngen/nomenu" | tee -a $WNG/../nb$pid$dep.log
	echo "	log=y" | tee -a $WNG/../nb$pid$dep.log
	echo "				(empty line)" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "and:" | tee -a $WNG/../nb$pid$dep.log
	echo '	pvax $WNG'"/../nb$pid$dep.log" \
			| tee -a $WNG/../nb$pid$dep.log
	echo 'If problem exist, rerun $WNG'"/nbuild.sun with all questions y" \
			| tee -a $WNG/../nb$pid$dep.log
	echo "To make a minimum backup to be able to rebuild the system," \
			| tee -a $WNG/../nb$pid$dep.log
	echo 'run $WNG'"/ntarz.sun" | tee -a $WNG/../nb$pid$dep.log
	echo "Good luck" | tee -a $WNG/../nb$pid$dep.log
	echo " " | tee -a $WNG/../nb$pid$dep.log
#
#  EXIT
#
exex:
	exit

#  nxec.ssc
# 	WNB 920908
# 
#  Revisions:
#	WNB 920930	Additions, overhaul, speed up
#	WNB 921014	Add -a nnet
#	WNB 921015	Change setting of WNG_OLB WNG_EXE
#	WNB 921019	Auto nget for ncomp included
#	WNB 921104	Typo (" missing); default u_d; fnam check
#	WNB 921113	Do postponed ar
#	WNB 921116	Add G qualifier and allow multi-level .grp
#	WNB 921117	Add regular expressions
#	WNB 921130	Stop multiple ar; correct set echo; tr for HP
#	WNB 921208	Add date, list of directories; new update log
#	WNB 921209	Add logical link test; -a0 switch
#	WNB 921211	Add P qualifier
#	WNB 921216	Add ##
#	WNB 921230	Make SSC
#	WNB 930108	Add X11
#	JPH 930225	-qv<x> option to start echo/verify with execution
#			include $WNG_LINK in c-dir
#			comments
#	WNB 930301	Add aliases for # type; add +es for HP; add NSTAR_DIR
#	WNB 930325	Cater for different fold
#	WNB 930330	Add _ax.tlb; giplib.olb; pgplot.olb
#	WNB 930405	Add SPAWN for better control (VAX)
#	HjV 930416	Add path for include files for HP
#	WNB 930427	More general include path HP
#	WNB 930429	Add -lm for SUN; delete pgplot
#	HjV 930503	Add -lm for HP; remove -lm for SUN
#	WNB 930504	Problem linking NGCALC
#	CMV 930906	Switches for SUN in RUG
#	WNB 930921	Assume never WNG_OLB/WNG_EXE in VMS
#	WNB 930922	WNG_OLB/WNG_EXE recursive calls
#	WNB 931213	Proper X11 path
#	WNB 931217	Add NCOPY to NSTAR_DIR
#	WNB 940124	Add _stlb, _s1tlb
# 
# 	Compile, link, maintain routines. Use as:
# 	Unix:	$WNG/nxec.sun <type> [-<code>] ... [<name>,...] ... [-<code>] ...
#	VAX:	@WNG:NXEC ...
# 
# 		Type can be:	NCOMP		Compile
# 				NLINK		Link
# 				NGET		Get from text library
# 				NXREF		Make Fortran crossreference
# 				NDEL		Delete
#				NNET		Get across net
# 		See Help (a ? in a parameter) for details.
#
#	Uses environment variables:
#		WNG			where to find wng-type sources
#		WNG_TYPE		machine (sw, dw, hp, al, cv etc)
#		WNG_OLBEXE		root of wng-type .olb, .ppd, .exe
#		WNG_SITE		site (nfra, atnf, rug ...)
#		EXEDWARF_UNIX		where to find/set DWARF .exe, .ppd
#		LIBDWARF		where to find DWARF .olb
#	and also possible:
#		WNG_NODE		node name (number) of central node
#		WNG_NODEUSER		user (or user and  pw) at central node
#		WNG_NODEDIR		WNG-root dir at central node
#					(DV:[...] or /.../......)
#		NSTAR_DIR		Newstar directories
#       The following env. variables are optional, to be used to define
#  a specific target file system (foreign host or shadow tree). Defaults are
#  shown in parentheses,  subdir is the name of the source's subdirectory
#  under $WNG/.. .
#    WNG_EXE            (WNG_OLBEXE)            parent of .exe target
#    WNG_OLB            (WNG_OLBEXE)            parent of .olb target
#    WNG_TLB            current directory       .tlb target
#    WNG_ERR, WNG_LIS   current directory       .lis, .err target
#    WNG_LINK           current directory       target for .f soft links (must
#                                               be subdir of WNG_EXE, WNG_OLB
#						or WNG/..)
#
# Intro
#
	onintr exex					# finish neatly
	set intat=x0					# assume interactive
	if ($?echo) unset echo				# no verify
	if ($?verbose) unset verbose			# no verbose
	set pid=$$ ; @ dep=1				# for tmp files
	set Upc="ABCDEFGHIJKLMNOPQRSTUVWXYZ"		# for translation
	set Lowc="abcdefghijklmnopqrstuvwxyz"
        set l1=(`echo a | fold -w1`)			# check which fold
        set l2=(`echo a | fold -w 1`)
        if ( "$l1" == "a") then
          set fold="fold -w"
        else if ("$l2" == "a") then
          set fold="fold -w "
        else
          set fold="fold -"
        endif
	if ($#argv > 5) then				# maybe batch
	  if ("$1" =~ x[12]) then			# batch
	    set intat=$1 ; shift			# indicate batch
	    set pnam=$1; shift				# set variables
	    set pcod=$1; shift
	    @ dep=$1 + 1; shift
	  endif
	endif
	set loo=(`date`)				# get date/time
	if ("$loo[3]" =~ [1-9]) set loo[3] = "0$loo[3]" # day
	set loa=( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)
	foreach mm ( 01 02 03 04 05 06 07 08 09 10 11 12)
	  if ("$loo[2]" == "$loa[$mm]") break		# month
	end
	@ yy = $loo[$#loo] -  1900			# year
	set c_date="$yy$mm$loo[3]"			# date yymmdd
	set c_time=`echo $loo[4] | tr -d ":"`		# time hhmmss
	set c_upd="UPD${c_date}.LOG"			# log name
	if (! -e $c_upd) then				# create log
	  touch $c_upd
	  set loo=(`ls UPD*.LOG`)
	  while ($#loo > 2)
	    shift loo
	  end
	  if ($#loo < 2) set loo=("None")
	  echo "! $c_upd   (Previous: $loo[1])" >>! $c_upd
	endif
#
# Check environment
#
	if ($USER == jph) then				# set shadow system
	  set c_shadow
	endif
#
	if ("$intat" == "x0") then
	  if (! $?WNG || ! $?WNG_TYPE || ! $?WNG_OLBEXE ||\
			! $?WNG_SITE) then
	    echo " Error: Must have environment variables" \
			| tee -a $c_upd
	    echo "        WNG, WNG_TYPE, WNG_OLBEXE , WNG_SITE defined" \
			| tee -a $c_upd
	    goto exex
	  endif
	  if (! $?EXEDWARF_UNIX || ! $?LIBDWARF) then
	    echo " Warning: Cannot do everything with EXEDWARF_UNIX and/or" \
			| tee -a $c_upd
	    echo "          LIBDWARF not defined" \
			| tee -a $c_upd
	  endif
	  if (! $?WNG_NODE) setenv WNG_NODE ""		# node info
	  if (! $?WNG_NODEDIR) setenv WNG_NODEDIR ""
	  if (! $?WNG_NODEUSER) setenv WNG_NODEUSER ""
	  if ($?WNG_EXE) then				# save original
	    set wng_sexe=$WNG_EXE
	  else
	    setenv WNG_EXE $WNG_OLBEXE			# make names
	  endif
	  setenv WNG_EXE $WNG_EXE/$cwd:t
	  if ($?WNG_OLB) then				# save original
	    set wng_solb=$WNG_OLB
	  else
	    setenv WNG_OLB $WNG_OLBEXE
	  endif
	  setenv WNG_OLB $WNG_OLB/$cwd:t
	  if ($?WNG_TLB) then				# save original
	    set wng_stlb=$WNG_TLB
	  else
	    setenv WNG_TLB $cwd/..
	  endif
	  setenv WNG_TLB $WNG_TLB/$cwd:t
	  if (! $?WNG_ERR) setenv WNG_ERR $cwd
	  if (! $?WNG_LIS) setenv WNG_LIS $cwd
	  if (! $?WNG_LINK) setenv WNG_LINK $cwd
	  if (! $?NSTAR_DIR) setenv NSTAR_DIR "wng dwarf nscan ncopy nmap nplot"
	  if (! -e $WNG_EXE) mkdir $WNG_EXE		# make directories
	  if (! -e $WNG_OLB) mkdir $WNG_OLB
	  if (! -e $WNG_TLB) mkdir $WNG_TLB
	  if (! -e $WNG_ERR) mkdir $WNG_ERR
	  if (! -e $WNG_LIS) mkdir $WNG_LIS
	  if (! -e $WNG_LINK) mkdir $WNG_LINK
	  if (! -e WNG_DEF && -e $WNG/nxldef.sun) then	# get links
	    source $WNG/nxldef.sun
	  endif
	endif
        set c_dir=($NSTAR_DIR)			        # N directories
        if (-d $WNG/../ncopy && "$c_dir" !~ *ncopy*) set c_dir = ($c_dir ncopy)
        set tmp=$WNG_LINK                               # $WNG_LINK:t not allwd
	if ("$c_dir" !~ *"$tmp:t"*) set c_dir=($c_dir $tmp:t) # add WNG_LINK
#
# External environment
#
	set ext=$WNG_TYPE				# Machine type
	set lnk_def=($WNG_OLBEXE/nscan/wnlib.olb \
                $WNG_OLBEXE/nmap/wnlib.olb \
		$WNG_OLBEXE/nplot/wnlib.olb)
	if (-e $WNG_OLBEXE/wng/giplib.olb) then
	  set lnk_def=($lnk_def $WNG_OLBEXE/wng/giplib.olb)
	  if ("$ext" == "hp") then
	    set lnk_def=($lnk_def -lm)
	  endif
	endif
	set lnk_def=($lnk_def $WNG_OLBEXE/wng/wnlib.olb \
		-L/usr/local/X11/lib -lX11)					# default libraries
	if ($?WNG_LDFILES) then
	  set lnk_use=($WNG_LDFILES)			# user libraries
	else
	  set lnk_use=""
	endif
	set fortran=f77 ; set xfort="" ; set lfort=""	# Fortran compiler
	set cee=cc ; set xcee="" 			# C compiler
	set assem=as ; set xassem=""			# Assembler
#
# nxec environment
#
	set chtp=(.dir .err .exe .hlb .jou .lis .log .lst .map .mlb \
		.new .npd .obj .olb .old .ppd .tlb .tmp \
		.udf .ulb)				# files to skip
	set codes=(a b c d l o p s u x y z)		# known codes
	set scodes=abcdlopsuxyz				# compressed
	set codex=(l u) ; set scodex=lu			# extended codes
	set qual=(b c f g l m o p v) ; set squal=bcfglmopv # qualifiers
	set quala=(b c f l m o p) ; set squala=bcflmop	# additive qualifiers
	set ncc_d=cdloxz ; set nnc_d=z			# default codes
	set ndc_d=aclz ; set ngc_d=lz ; set nlc_d=sz
	set fnam=""					# no names
	if ("$intat" == "x0") then			# interactive
	  set l_d=wnlib ; set u_d=" "			# lib. name; dwarf dir.
	  foreach i ($codes)				# define all codes
	    set cd_$i="-"
	  end
	  foreach i ($qual)				# define all qualifiers
	    set ${i}q_d=""
	  end
	else						# batch
	  set loo=($1) ; shift ; set fg_cd=($loo)	# codes
	  foreach i ($codes)
	    set cd_$i=$loo[1] ; shift loo		# copy codes
	  end
	  set loo=($1) ; shift ; set fg_cx=($loo)	# extended codes
	  foreach i ($codex)
	    if ("$loo[1]" == "-") then			# empty
	      set ${i}_d=" "
	    else
	      set ${i}_d="$loo[1]"
	    endif
	    shift loo
	  end
	endif
#
# Machine environment
#
	switch ($ext)					# Machine
	  case al:					# Alliant
	    set dattp=3 ; set fortran=fortran ; set lfort="-g -M"
	    set fq_d=(-c -e -w ) ; set cq_d=(-c -ce -w)
	    breaksw
	  case dw:					# DEC workstation
	    set dattp=6 ; set xfort="-assume back"
	    set lfort="-g -assume back -Wl,-M"
	    set fq_d=(-c -V -w) ; set cq_d=(-c -w)
	    breaksw
	  case sw:					# SUN workstation
	    set dattp=7 ; set xfort="-xl -Nl50"
	    set lfort="-g -xl -Qoption ld -M"
            if ($WNG_SITE == rug) set lfort=( $lfort -Bstatic )
	    set fq_d=(-c -w) ; set cq_d=(-c -ce -w)
            if ($WNG_SITE == rug) set fq_d=( $fq_d -Nn1500 )
	    breaksw
	  case cv:					# Convex
	    set dattp=5 ; set fortran=fc ; set xfort="-LST"
	    set lfort="-g -sa -vfc -O3 -na -nw -M"
	    set fq_d=(-c -na -nw -vfc -sa) ; set cq_d=(-c -na -nw)
	    breaksw
	  case hp:					# HP workstation
	    set dattp=8 ; set xfort="-Nl50" ; set lfort="-g +e +es +ppu"
	    set fq_d=(-c -w +e +es +ppu)
	    set cq_d=(-c -w)
	    if (-d /usr/include/X11R5) then
	      set cq_d=($cq_d -I/usr/include/X11R5)
	    else
	      set cq_d=($cq_d -I/usr/include/X11R4)
	    endif
	    breaksw
	  default:
	    echo " Error: Unknown machine type $ext" \
			| tee -a $c_upd
	    goto exex
	endsw
	if ("$intat" != "x0") then			# reset qualifiers
	  foreach i ($qual)				# qualifiers
	    set loa=(`eval echo \$${i}Q_D`)		# name
	    set ${i}q_d="$loa"
	  end
	endif
# 
#  Get execution type
#
	if ("$intat" == "x0") then			# interactive
	  if ($#argv < 1) set argv="Empty"		# type given
	  switch ($1)
	    case [nN][cC]*:
	      set pnam=ncomp ; set pcod=nc
	      breaksw
	    case [nN][lL]*:
	      set pnam=nlink ; set pcod=nl
	      breaksw
	    case [nN][dD]*:
	      set pnam=ndel ; set pcod=nd
	      breaksw
	    case [nN][gG]*:
	      set pnam=nget ; set pcod=ng
	      breaksw
	    case [nN][xX]*:
	      set pnam=nxref ; set pcod=nx
	      breaksw
	    case [nN][nN]*:
	      set pnam=nnet ; set pcod=nn
	      breaksw
	    default:
	      csh -f $WNG/nhelp.sun 1 $1 $ext " "  " "  " " # basic help
	      goto exex
	  endsw
# 
#  See if Help
# 
	  while ($#argv < 2) 				# ask codes
	    set l2="-${scodes}q($squal)"
	    echo -n "Codes ($l2) [?]: "
	    set argv=($1 $<)				# get codes
	    if ($#argv < 2 || "$*" =~ *\?*) then	# help codes
	      foreach i ($qual)				# export qualifiers
	        set loa=(`eval echo \$${i}q_d`)
	        setenv ${i}Q_D "$loa"
	      end
	      csh -f $WNG/nhelp.sun 2 $pnam $ext $pcod $pnam "$chtp"
	    endif
	  end
	  shift						# delete code
	endif
#
# Read line
#
RLIN:
	if ("$intat" == "x2") then			# read file
	  set argv=($<)					# get line
	  if ("$*" == "") goto RLIN			# empty line
	  if ("$*" =~ endend*) goto exex		# ready
	  if ("$*" =~ \$*) goto RLIN			# VMS
	  if ("$*" =~ \#*) then				# Unix command
	    source $WNG/wngcshrc.sun			# make aliases known
	    set loa="0"					# do not execute
	    if ("$*" =~ \#\#*) then			# limit application?
	      set loo=(`echo "$*" | tr $Upc $Lowc | awk '{print substr($0,1,5)}'`)
	      if ("$loo" == \#\#$pcod\#) then		# selected
	        set loo=(`echo "$*" | awk '{print substr($0,6)}'`)
		set loa="1"
	      endif
	    else
	      set loo=(`echo "$*" | awk '{print substr($0,2)}'`)
	      set loa="1"
	    endif
	    if ("$loa" == "1") then			# execute line
	      set wng_s1exe=$WNG_EXE			# save current
	      if ($?wng_sexe) then			# reset original
		setenv WNG_EXE $wng_sexe
	      else
		unsetenv WNG_EXE
	      endif
	      set wng_s1olb=$WNG_OLB			# save current
	      if ($?wng_solb) then			# reset original
		setenv WNG_OLB $wng_solb
	      else
		unsetenv WNG_OLB
	      endif
	      set wng_s1tlb=$WNG_TLB			# save current
	      if ($?wng_stlb) then			# reset original
		setenv WNG_TLB $wng_stlb
	      else
		unsetenv WNG_TLB
	      endif
	      eval $loo					# do line
	      setenv WNG_EXE $wng_s1exe			# restore current
	      setenv WNG_OLB $wng_s1olb
	      setenv WNG_TLB $wng_s1tlb
	    endif
	    goto RLIN					# next line
	  endif
	  set argv=($*)					# split in fields
	endif
#
# Get codes and filenames
#
	set a0=""					# no codes; del. type
	while ($#argv > 0)
	  if ("$1" == "-" || "$1" == "+") then		# empty code
	  else if ("$1" =~ -* || "$1" =~ [+\<]*) then	# code
	    set a0=("$a0""$1")				# add
	  else						# file name
	    set noglob; set fnam=($fnam $1); unset noglob
	  endif
	  shift						# next argument
	end
	if ("$intat" == "x0") then			# add defaults
	  set l0=\$\?${pcod}_COD			# default name
	  if (`eval echo "$l0"`) then			# user defaults
	    set l0=\$${pcod}_COD
	    set a0=(`eval echo $l0`"-$a0")
	  endif
	  set l0=\$${pcod}c_d				# default name
	  set a0=(`eval echo $l0`"-$a0")		# program default
	  echo "-----" >>! $c_upd
	  echo "---- $pnam -$a0 $fnam" >>! $c_upd	# log call
	  echo "-----" >>! $c_upd
	  source $WNG/nxanal.sun			# analyze codes
	else if ("$intat" == "x1" && "$a0" != "") then	# codes given
	  source $WNG/nxanal.sun			# analyze codes
	endif
#
#  Interpret codes
#
	if ($?echo) unset echo				# no verify
	if ($?verbose) unset verbose			# no verbose
	if ($vq_d != "") then
	  if ($vq_d =~ *e* && $vq_d !~ *x*) set echo	# echo asked
	  if ($vq_d =~ *v* && $vq_d !~ *x*) set verbose	# verbose asked
	endif
#
# Network info
#
	if ("$intat" == "x0") then			# skip for batch
	  if ($pcod == nn) then				# maybe ask
	    if ("$cd_a" == "0" || "$WNG_NODE" == "") then # must ask
	      set loo=""
	      while ("$loo" == "")
	        echo -n "Node [$WNG_NODE]: "
	        set loo=("$<")
	        if ("$loo" == "") set loo=("$WNG_NODE")	#default
	        setenv WNG_NODE "$loo"
	      end
	    endif
	    if ("$cd_a" == "0" || "$WNG_NODEDIR" == "") then # must ask
	      set loo=""
	      while ("$loo" == "")
	        echo -n "Remote base directory [$WNG_NODEDIR]: "
	        set loo=("$<")
	        if ("$loo" == "") set loo=("$WNG_NODEDIR") #default
	        setenv WNG_NODEDIR "$loo"
	      end
	    endif
	    if ("$cd_a" == "0" || "$WNG_NODEUSER" == "") then # must ask
	      set loo=""
	      while ("$loo" == "")
	        echo -n "Remote user [$WNG_NODEUSER]: "
	        set loo=("$<")
	        if ("$loo" == "") set loo=("$WNG_NODEUSER") #default
	        setenv WNG_NODEUSER "$loo"
	      end
	    endif
#
#  Network password
#
	    set loo=($WNG_NODEUSER)			# split
	    if ($#loo < 2) then				# ask pw
	      echo -n "Password: "
	      stty -echo ; set loa="$<" ; stty echo ; echo " " # get it
	      setenv WNG_NODEUSER "$loo $loa"
	    endif
	  endif
#
# Compiler info
#
	  switch ($ext)					# Machine
	    case al:					# Alliant
	      if ("$cd_d" != "-") then
	        set fq_d=($fq_d -g) ; set cq_d=($cq_d -g) # debug
	      endif
	      if ("$cd_x" != "-") then
	        set fq_d=($fq_d -xref)			# Fortran Xref
	      endif
	      if ("$cd_o" != "-") then
	        set fq_d=($fq_d -O -OM -alt) ; set cq_d=($cq_d -O) # optimize
	      endif
	      breaksw
	    case dw:					# DEC workstation
	      if ("$cd_d" != "-") then
	        set fq_d=($fq_d -g) ; set cq_d=($cq_d -g) # debug
	      endif
	      if ("$cd_x" != "-") then
	        set fq_d=($fq_d -xref)			# Fortran Xref
	      endif
	      if ("$cd_o" != "-") then
	        set fq_d=($fq_d -O1) ; set cq_d=($cq_d -O1) # optimize
	      endif
	      breaksw
	    case sw:					# SUN workstation
	      if ("$cd_d" != "-") then
	        set fq_d=($fq_d -g) ; set cq_d=($cq_d -g) # debug
	      endif
	      if ("$cd_x" != "-") then
	      endif
	      if ("$cd_o" != "-" && "$cd_d" == "-") then
	        set fq_d=($fq_d -O3) ; set cq_d=($cq_d -O) # optimize
	      endif
	      breaksw
	    case cv:					# Convex
	      if ("$cd_d" != "-") then
	        set fq_d=($fq_d -g) ; set cq_d=($cq_d -g) # debug
	      endif
	      if ("$cd_x" != "-") then
	        set fq_d=($fq_d -xr)			# Fortran Xref
	      endif
	      if ("$cd_o" != "-" && "$cd_d" == "-") then
	        set fq_d=($fq_d -O3) ; set cq_d=($cq_d -O) # optimize
	      endif
	      breaksw
	    case hp:					# HP workstation
	      if ("$cd_d" != "-") then
	        set fq_d=($fq_d -g) ; set cq_d=($cq_d -g) # debug
	      endif
	      if ("$cd_x" != "-") then
	      endif
	      if ("$cd_o" != "-" && "$cd_d" == "-") then
	        set fq_d=($fq_d -O) ; set cq_d=($cq_d -O) # optimize
	      endif
	      breaksw
	    default:
	      echo " Error: Unknown machine type $ext" \
			| tee -a $c_upd
	      goto exex
	  endsw
#
#  Format qualifiers
#
	  foreach i ($qual)
	    set loa=(`eval echo \$${i}q_d`)		# qualifier name
	    set lob=(`echo $loa | ${fold}1`)		# qual value
	    set loc=""					# build new qual
	    while ($#lob > 0)
	      if ("$lob[1]" == "-" || "$lob[1]" == "+") then # add space
	        set loc="$loc $lob[1]"
	      else
	        set loc="$loc$lob[1]"
	      endif
	      shift lob					# next character
	    end
	    set ${i}q_d="$loc"				# new qualifier
	  end
#
#  Create libraries
#
	  if ("$cd_l" != "-") then			# library needed
	    set l_d=`echo $l_d:r | tr $Upc $Lowc`	# library root
	    if (! -e $WNG_OLB/${l_d}.olb) ar cr $WNG_OLB/${l_d}.olb # create olb
	    if (! -e $WNG_TLB/${l_d}.tlb) ar cr $WNG_TLB/${l_d}.tlb # create tlb
	    if (! -e $WNG_TLB/${l_d}_ax.tlb) ar cr $WNG_TLB/${l_d}_ax.tlb
	    if (! -e $WNG_OLB/${l_d}.olb || ! -e $WNG_TLB/${l_d}.tlb || \
			! -e $WNG_TLB/${l_d}_ax.tlb) then
	      echo " Error: Illegal Library name." \
			| tee -a $c_upd
	      echo "        Probably illegal L<name> specified" \
			| tee -a $c_upd
	      goto exex
	    endif
	  endif
#
#  DWARF data
#
	  if ("$cd_s" != "-" && $pcod == "nl") then
	    if (! $?EXEDWARF_UNIX || ! $?LIBDWARF) then	# cannot DWARF
	      set cd_s="-"				# no shared
	    endif
	  endif
#
#  Get files if none
#
	  while ("$fnam" == "")				# no filenames
	    echo -n "Filename[ ...] [?]: "		# get filename
	    set fnam=($<)
	    if ("$fnam" == "") then
	      csh -f $WNG/nhelp.sun 3 $pnam $ext $pcod $pnam "$chtp" # file help
	    endif
	  end
	endif
#
#  Do batch if asked
#
	if ("$intat" == "x0") then			# prepare batch
	  set fg_cd="" ; set fg_cx=""			# prepare codes
	  foreach i ($codes)
	    set fg_cd=($fg_cd `eval echo \$cd_$i`)
	  end
	  foreach i ($codex)				# extended codes
	    set l0=(`eval echo \$${i}_d`)
	    if ("$l0" == "") set l0="-"
	    set fg_cx=($fg_cx $l0)
	  end
	  foreach i ($qual)				# export qualifiers
	    set loa=(`eval echo \$${i}q_d`)
	    setenv ${i}Q_D "$loa"
	  end
	  if ("$cd_b" != "-") then			# do batch
	    if ($cd_b == 0) then			# no log
	      csh -f $WNG/nxec.sun x1 $pnam $pcod $dep "$fg_cd" "$fg_cx" \
				"$fnam" >>&! /dev/null &
	    else					# log
	      csh -f $WNG/nxec.sun x1 $pnam $pcod $dep "$fg_cd" "$fg_cx" \
				"$fnam" >>&! nx${pid}.log &
	    endif
	    goto exex1					# ready
	  endif
	endif
	if ("$intat" == "x2" && "$a0" != "") then	# local switches
	  csh -f $WNG/nxec.sun x1 $pnam $pcod $dep "$fg_cd" "$fg_cx" \
				$fnam $a0
	  set fnam=""					# set done
	  if ($?olbset) unsetenv olbset			# set done
	  if ($?olbdel) unsetenv olbdel
	  if ($?tlbset) unsetenv tlbset
	  if ($?tlbdel) unsetenv tlbdel
	  if ($?taxset) unsetenv taxset
	  if ($?taxdel) unsetenv taxdel
	endif
#
#  Execute
#
        if ($vq_d != "") then
          if ($vq_d =~ *e* && $vq_d =~ *x*) set echo    # echo asked
          if ($vq_d =~ *v* && $vq_d =~ *x*) set verbose # verbose asked
        endif
	if ("$intat" != "x0" && "$cd_y" == "-") then	# execute batch
	  set b_aa="-" ; set b_ab="-" ; set b_ac="-"
	  foreach i ($qual)				# set all qualifiers
	    set l0=(`eval echo \$${i}q_d`)
	    if ("$l0" != "") then			# set qual
	      set b_aa="${b_aa}q$i<$l0>"
	    endif
	  end
	  foreach i ($codes)				# set all codes
	    set l0=(`eval echo \$cd_$i`)
	    if ("$l0" != "-") then			# set normal code
	      set b_ab="${b_ab}$i$l0"
	      if ("$i" =~ [$scodex]) then		# set extended code
	        set l1=(`eval echo \$${i}_d`)
	        set b_ac="${b_ac}${i}$l0<$l1>"
	      endif
	    endif
	  end
	  echo "" ; echo "Command: $pnam $b_ab"
	  echo "               $b_ac" ; echo "               $b_aa"
	  echo "               $fnam" ; echo ""
	endif
#
#  Do all files
#
	while ("$fnam" != "")				# not ready
	  set lob="`set noglob; echo $fnam[1] | tr $Upc $Lowc; unset noglob`" # lc
	  shift fnam					# file name
	  set l00="`set noglob; echo $lob | grep [^a-z\.0-9_/]; unset noglob`"
							# see if regular exp.
	  if ("$pcod" != "nl" && "$l00" != "") then	# regular expression
	    set l00=(`ar t $WNG_TLB/${l_d}.tlb | grep "$lob"`) # get file names
	    if ("$l00" != "") then			# files found
	      set loo=($fg_cd) ; @ lop=1		# add y
	      foreach i ($codes)
	        if ("$i" == "y") set loo[$lop]="0"
	        @ lop += 1
	      end
	      csh -f $WNG/nxec.sun x1 $pnam $pcod $dep "$loo" "$fg_cx" \
				"$l00"			# do files
	      if ($?olbset) unsetenv olbset		# set done
	      if ($?olbdel) unsetenv olbdel
	      if ($?tlbset) unsetenv tlbset
	      if ($?tlbdel) unsetenv tlbdel
	      if ($?taxset) unsetenv taxset
	      if ($?taxdel) unsetenv taxdel
	    endif
	    continue					# next file
	  endif
	  set l1=""					# not indirect
	  if ("$lob" =~ "@*") then			# indirect
	    set lob=`echo $lob | tr -d "@"` ; set l1="@" # delete @; set indir.
	  endif
	  set lobh=$lob:r ; set lobe=$lob:e		# file name/ext
	  if ($lobe == "" && "$cd_y" == "-" && $pcod != nl) then # no extension
	    set l00=(`ls ${lobh}.*`)			# see if files
	    if ("$l00" != "") then			# files found
	      if ("$l1" == "@") then			# indirect
	        @ i = 0					# add @ to names
	        while ($i < $#l00 )
		  @ i += 1
		  set l00[$i]="@$l00[$i]"
	        end
	      endif
	      set loo=($fg_cd) ; @ lop=1		# add y
	      foreach i ($codes)
	        if ("$i" == "y") set loo[$lop]="0"
	        @ lop += 1
	      end
	      csh -f $WNG/nxec.sun x1 $pnam $pcod $dep "$loo" "$fg_cx" \
				"$l00"			# do files
	      if ($?olbset) unsetenv olbset		# set done
	      if ($?olbdel) unsetenv olbdel
	      if ($?tlbset) unsetenv tlbset
	      if ($?tlbdel) unsetenv tlbdel
	      if ($?taxset) unsetenv taxset
	      if ($?taxdel) unsetenv taxdel
	    endif
	    continue					# next file
	  endif
	  if ("$lobe" == "grp" && "$cd_z" != "-" && $l1 == "") \
					set l1 = "@"	# indirect
#
#  Do a file.
#
	  if ("$l1" == "@" && "$cd_z" != "-") then	# indirect possible
	    if ("$gQ_D" == "$lobh:t.$lobe") set l1 = ""	# stop indirect loop
	  endif
	  if ("$l1" == "@" && "$cd_z" != "-") then	# indirect
	    if (! -e ${lobh}.$lobe) then		# file not known
	      if ("$pcod" != "nc") continue		# forget if not ncomp
	      if ("$lobh:t" != "$lobh") continue	# forget if other dir
	      source $WNG/nget.sun			# get it first
	      if (! -e ${lobh}.$lobe) continue		# not found
	    endif
	    set loo=($fg_cd) ; @ lop=1			# add y
	    foreach i ($codes)
	      if ("$i" == "y") set loo[$lop]="0"
	      @ lop += 1
	    end
	    setenv gQ_D "$lobh:t.$lobe"			# save current name
	    awk -F! '{print $1} END {print "endend"}' ${lobh}.$lobe | \
	    	csh -f $WNG/nxec.sun x2 $pnam $pcod $dep "$loo" "$fg_cx"
	    if ($?olbset) unsetenv olbset		# set done
	    if ($?olbdel) unsetenv olbdel
	    if ($?tlbset) unsetenv tlbset
	    if ($?tlbdel) unsetenv tlbdel
	    if ($?taxset) unsetenv taxset
	    if ($?taxdel) unsetenv taxdel
	  else						# normal
	    if ("$pcod" != "nl") then			# check skip
	      if ($lobe !~ ??? ) continue		# not 3 char. extension
	      set l01=(`echo $chtp | grep "$lobe "`)	# see if exclude
	      if ("$l01" != "") continue		# excluded
	      if ("$pq_d" != "") then			# maybe pure only
		set pq_d=`echo $pq_d | tr $Upc $Lowc`
		set l01=(`echo $pq_d | grep ".$lobe"`)
		if ("$l01" == "") continue		# not in pure list
	      endif
	    endif
	    if ("$pcod" == "nc") then			# ncomp
	      if (! -e ${lobh}.$lobe) then		# try nget first
	        if ("$lobh:t" == "$lobh") then		# do if same dir
	          source $WNG/nget.sun
	        endif
	      endif
	    endif
	    set findb=""				# for repeat
	    source $WNG/${pnam}.sun			# do a file
	    if ("$findb" != "") then			# do .dsc output
	      set scd_p=$cd_p ; set cd_p="-"		# no print
	      while ($#findb > 0)			# more to do
	        set lob=$findb[1] ; shift findb		# next name
	        if ($lob != "") then
	          set lobh=$lob:r ; set lobe=$lob:e	# name/ext
	          source $WNG/${pnam}.sun		# do a file
	        endif
	      end
	      set cd_p=$scd_p				# restore print
	    endif
	  endif
	end						# more
#
# More to read
#
	if ("$intat" == "x2") goto RLIN			# next line
#
# Routines
#
#
#  EXIT
#
exex:
	if ($?tlbset || $?olbset || $?tlbdel || $?olbdel || \
			$?taxset || $?taxdel) then	# do ar
	  if ($?tlbset) then
	    echo "Update ${l_d}.tlb" \
			| tee -a $c_upd
	    ar crl $WNG_TLB/${l_d}.tlb $tlbset
	  endif
	  if ($?taxset) then
	    echo "Update ${l_d}_ax.tlb" \
			| tee -a $c_upd
	    ar crl $WNG_TLB/${l_d}_ax.tlb $taxset
	  endif
	  if ($?olbset) then
	    echo "Update ${l_d}.olb" \
			| tee -a $c_upd
	    ar crl $WNG_OLB/${l_d}.olb $olbset
	    'rm' $olbset >& /dev/null
	  endif
	  if ($?tlbdel) then
	    echo "Update ${l_d}.tlb" \
			| tee -a $c_upd
	    ar dl $WNG_TLB/${l_d}.tlb $tlbdel
	  endif
	  if ($?taxdel) then
	    echo "Update ${l_d}_ax.tlb" \
			| tee -a $c_upd
	    ar dl $WNG_TLB/${l_d}_ax.tlb $taxdel
	  endif
	  if ($?olbdel) then
	    echo "Update ${l_d}.olb" \
			| tee -a $c_upd
	    ar dl $WNG_OLB/${l_d}.olb $olbdel
	  endif
	  if ($?olbset || $?olbdel) then
	    ranlib $WNG_OLB/${l_d}.olb			# rearrange olb
	  endif
	endif
exex1:
	exit

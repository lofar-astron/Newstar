C+ WNCTRP.FOR
C  JPH 930331
C
C  Revisions:
C
	SUBROUTINE WNCTRC (SRC, TEXT, TEXT1)
C
C Output fatal-error message and post signal SIGTRAP to calling process to 
C  trigger dbx. (For this to work, program must be fired up through dbx -r .)
C
C	WNCTRC (SRC_C:I, TEXT_C:I, TEXT1_C:I)
C	WNCTRJ (SRC_C:I, TEXT_C:I, J_J:I)
C	WNCTRX (SRC_C:I, TEXT_C:I, J_J:I)
C
C  Result:
C
C
C  Include files:
	INCLUDE		'WNG_DEF'
#ifdef wn_vx__
	INCLUDE		'($SSDEF)'
#endif
C
C
C  Parameters:
	INTEGER		SIGTRAP
	PARAMETER	(SIGTRAP=5)
C
C  Arguments:
	CHARACTER*(*)	SRC			!source file and line number
	CHARACTER*(*)	TEXT			!descriptive text
	CHARACTER*(*)	TEXT1			!parameter text
C
C
C  Function references:
C
	INTEGER		GETPID			!get own PID
C
C  Data declarations:
C
C-
	CALL WNCTXT(F_T,'FATAL ERROR !AS !AS !AS', SRC, TEXT, TEXT1)
	GOTO 10
C
C
	ENTRY WNCTRJ (SRC, TEXT, J)
C
	CALL WNCTXT(F_T,'FATAL ERROR !AS !AS !SJ', SRC, TEXT, J)
	GOTO 10
C
C
	ENTRY WNCTRX (SRC, TEXT, J)
C
	CALL WNCTXT(F_T,'FATAL ERROR !AS !AS !XJ', SRC, TEXT, J)
	GOTO 10
C
C
10	CONTINUE
#ifdef wn_vx__
	CALL LIB$SIGNAL (%VAL(SS$_DEBUG))
#else
 #ifdef wn_cx__
	CALL WNCTXT (F_T,'Generating a trap by a zero division')
	J=1/WNFEOF(0)
 #else
	CALL KILL (GETPID(), SIGTRAP)
 #endif
#endif
	RETURN
	END

C+ WNDNOD.FOR
C  WNB 900130
C
C  Revisions:
C	WNB 910909	Delete WND.DEF reference
C	WNB 930413	Give message if creating 'update' node
C			Maybe solve HP logical problem
C	HjV 930513	Replace in CLOSE-statement DISP= by STATUS=
C	WNB 930607	Add WNDNOC
C	CMV 930922	Also try lowercase name if opened for 'R', 'U'
C	CMV 940223      Ignore DATAB if equal to '*'
C	CMV 940224	Search model files in MODELB as well
C	CMV 940422	Give warning for datatype
C	CMV 940504	Option to list matching names by answer **
C	CMV 940808	Number matching files in list
C	CMV 940822	Decent message if open fails
C	CMV 940823	Show DATAB first time a node is asked
C	JPH 940829	Indent DATAB display as for WNCXP*
C	JPH 940907	Call WNDPOHC at all RETURNs 
C	CMV 000928	Add scanning of MODELB directory for **, show MODELB first
C	CMV 001107	Disabled scanning of MODELB directory for ** (show with *+)
C
C
	LOGICAL FUNCTION WNDNOD(KW,USP,PFX,TP,NODOUT,FILOUT)
C
C  Obtain node name from user
C
C  Result:
C
C	WNDNOD_J = WNDNOD( KW_C*:I, USP_C*:I, PFX_C*:I, TP_C1:I,
C				NODOUT_C*:O, FILOUT_C*:O)
C			Obtain a node NODOUT for the PFX node type. Use
C			USP as default value, and the keyword KW for the
C			user prompt. The type TP can be: R (read), W (write) or
C			U (update: old if present, else create new).
C			Default: U
C	WNDNOC_J = WNDNOC( KW_C*:I, USP_C*:I, PFX_C*:I, TP_C1:I,
C				NODOUT_C*:O, FILOUT_C*:O)
C			Change the TP of FILOUT only. KW, USP not
C			used. Useage in program e.g. to change from 'R' to 'U':
C				WNFCL(FCA)
C				WNDNOC(.....,'U',' ',FILE_NAME)
C				WNFOP(FCA,FILE_NAME,...)
C
C  PIN:
C
C	'KW'			!Given by caller
C	DELETE_NODE		!To overwrite node
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WND_DEF'
	INCLUDE 'GFH_O_DEF'			!GENERAL FILE HEADER
C
C  Parameters:
C
C
C  Arguments:
C
	CHARACTER*(*) KW			!PIN KEYWORD
	CHARACTER*(*) USP			!USER DEFAULT
	CHARACTER*(*) PFX			!FILE TYPE (NORMALLY 3 LONG)
	CHARACTER*(*) TP			!R/W/U TYPE
	CHARACTER*(*) NODOUT			!NODE NAME (80 NORMALLY)
	CHARACTER*(*) FILOUT			!OUTPUT FILE NAME (160)
C
C  Entry points:
C
	LOGICAL WNDNOC
C
C  Function references:
C
	INTEGER WNCALN				!STRING LENGTH
	LOGICAL WNDPAR				!GET USER DATA
	LOGICAL WNDFIL				!CONVERT NODE TO FILE
	CHARACTER*1 WNCAUP			!CONVERT TO UC
	LOGICAL WNFOP				!OPEN FILE
	LOGICAL WNFWR,WNFRD			!READ/WRITE FILE
	LOGICAL WNGSDL				!LIST MATCHING NODES
C
C  Data declarations:
C
	INTEGER CVT				!DATA TYPE
	BYTE GFH(0:GFHHDL-1)			!FILE HEADER
	  INTEGER GFH_J(0:GFHHDL/4-1)
	  EQUIVALENCE(GFH,GFH_J)
	CHARACTER*23 DTTM			!DATE/TIME
	CHARACTER*(GFH_ID_N) SID		!ID HEADER
	LOGICAL NOC				!NOC TYPE
	LOGICAL*1 LG1
	LOGICAL LJ, LG4
	INTEGER LN,LD,LF			!LENGTH OF STRINGS
C
	LOGICAL FIRST				!FIRST TIME NODE ASKED
	DATA    FIRST/.TRUE./
	SAVE    FIRST
C-
C
C INIT
C
	NOC=.FALSE.					!NOT NOC
C
C RESTART
C
 10	CONTINUE
	A_J(0)=1				! hold local prompt etc.
	WNDNOD=.TRUE.				!ASSUME OK
	IF (NOC) THEN				!CANNOT REPEAT
	  WNDNOD=.FALSE.
	  E_C=0
	  CALL WNDPOHC
	  RETURN
	END IF
C
C GET USER NODE INPUT
C
	IF (FIRST) THEN					!SHOW DATAB FIRST TIME
	     CALL WNCTXT(F_T,
	1	'!4C\Your default directory (DATAB) is !AS',
	1	DATAB(:WNCALN(DATAB)))
	     CALL WNCTXT(F_T,
	1	'!4C\Your default model directory (MODELB) is !AS',
	1	MODELB(:WNCALN(MODELB)))
	   FIRST=.FALSE.
	END IF
C
	IF (USP.NE.' ') THEN
	  JS=WNDPAR(KW,NODOUT,LEN(NODOUT),J0,USP(1:WNCALN(USP))) !GET NODE
	ELSE
	  JS=WNDPAR(KW,NODOUT,LEN(NODOUT),J0,'""')	!GET NODE
	END IF
	IF (.NOT.JS) THEN				!ERROR
	  IF (E_C.EQ.DWC_ENDOFLOOP) THEN		!^Z
	    WNDNOD=.FALSE.				!READY
	    NODOUT=' '
	    FILOUT=' '
	    CALL WNDPOHC
	    RETURN
	  ELSE
	    GOTO 10					!RETRY
	  END IF
	END IF
	IF (J0.EQ.0) THEN				!""
	  NODOUT=' '
	  FILOUT=' '
	  E_C=DWC_NULLVALUE
	  CALL WNDPOHC
	  RETURN
	END IF
	IF (J0.EQ.-1) THEN				!*
	  NODOUT=' '
	  FILOUT=' '
	  E_C=DWC_WILDCARD
	  CALL WNDPOHC
	  RETURN
	END IF
C
C MAKE FILE NAME
C
	IF (.NOT.WNDFIL(NODOUT,PFX,NODOUT,FILOUT)) THEN	!GET FILE NAME
 20	  CONTINUE
	  CALL WNCTXT(F_TP,'Format error in database/node specification')
	  GOTO 10
	END IF
C
C GENERATE LIST OF MATCHING NAMES IN DATAB IF ** ANSWERED FOR FILE
C
	IF (PFX(1:3).EQ.'MDL'.AND.NODOUT(1:2).EQ.'*+') THEN
	   CALL WNCTXT(F_T,'List of !AS nodes in directory !AS:',
	1			PFX,MODELB)
	   I1=1						!INIT SEARCH
	   DO WHILE (WNGSDL(FILOUT,MODELB,PFX,I1))	!FIND NEXT
	      CALL WNCTXT(F_T,' !AS',FILOUT)		!SHOW
	   END DO
	   CALL WNCTXT(F_T,' ')
	   GOTO 10					!ASK AGAIN
	ELSE IF (NODOUT(1:1).EQ.'*') THEN
	   CALL WNCTXT(F_T,'List of !AS nodes in directory !AS:',
	1			PFX,DATAB)
	   I1=1						!INIT SEARCH
	   I2=1						!COUNT MATCHES
	   DO WHILE (WNGSDL(FILOUT,DATAB,PFX,I1)) 	!FIND NEXT
	     CALL WNCTXT(F_T,'#!UJ = !AS',I2,FILOUT)	!SHOW
	     I2=I2+1
	   END DO
	   IF (PFX.EQ.'MDL') CALL WNCTXT(F_T,
	1	'Type *+ to list directory !AS',MODELB)
	   CALL WNCTXT(F_T,' ')
	   GOTO 10					!ASK AGAIN
	END IF
C
	GOTO 30						!FOUND FILE
C
C Entry WNDNOC
C
	ENTRY WNDNOC(KW,USP,PFX,TP,NODOUT,FILOUT)
C
	WNDNOC=.TRUE.					!ASSUME OK
	NOC=.TRUE.					!NOC TYPE
C
 30	CONTINUE
	LN=WNCALN(NODOUT)
	LF=WNCALN(FILOUT)
	LD=WNCALN(DATAB)
C
C READ
C
	IF (WNCAUP(TP(1:1)).EQ.'R') THEN		!OLD FILE
	  I1=WNCALN(DATAB)
	  IF (DATAB.EQ.' '.OR.DATAB.EQ.'*') I1=0	!NO DATAB
	  I2=WNCALN(MODELB)
	  IF (MODELB.EQ.' '.OR.MODELB.EQ.'*') I2=0	!NO MODELB
C
C	  CALL WNCTXT(F_P,'Trying !AS',FILOUT)
	  INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)		!FILE EXISTS?
	  IF (.NOT.LJ.AND.PFX.EQ.'MDL'.AND.I2.GT.0) THEN !TRY MDL FILE 
	     FILOUT=MODELB(1:I2)//FILOUT(I1+1:)		!IN MODELB
C	     CALL WNCTXT(F_P,'Trying !AS',FILOUT)
	     INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)	!FILE EXISTS?
	     IF (.NOT.LJ) FILOUT=DATAB(1:I1)//FILOUT(I2+1:)  !RESTORE DATAB
	  END IF
	  IF (.NOT.LJ) THEN				!TRY LOWERCASE NAME
	     CALL WNCALC(FILOUT)			!LOWERCASE ALL
	     IF (I1.GT.0) FILOUT=DATAB(1:I1)//FILOUT(I1+1:)  !RESTORE DATAB
C	     CALL WNCTXT(F_P,'Trying !AS',FILOUT)
	     INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)	!FILE EXISTS?
	     IF (.NOT.LJ.AND.PFX.EQ.'MDL'.AND.I2.GT.0) THEN !TRY MDL FILE 
	        FILOUT=MODELB(1:I2)//FILOUT(I1+1:)	    ! IN MODELB
C	        CALL WNCTXT(F_P,'Trying !AS',FILOUT)
	        INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)	!FILE EXISTS?
	     END IF
	  ENDIF
	  LF=WNCALN(FILOUT)				!MAY HAVE CHANGED
	  IF (.NOT.LJ) THEN				!READY
	    CALL WNCTXT(F_TP,'Node !AS does not exist in !AS',
	1			NODOUT(:LN),DATAB(:LD))
	    GOTO 10
	  END IF
	  IF (.NOT.WNFOP(J,FILOUT,'R')) THEN		!CHECK
	    CALL WNCTXT(F_TP,'Cannot open file !AS',FILOUT(:LF))
	    GOTO 10
	  END IF
	  IF (.NOT.WNFRD(J,GFHHDL,GFH(0),0)) THEN	!READ HEADER
	    CALL WNCTXT(F_TP,
	1	'Cannot read file header for !AS',FILOUT(:LF))
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CALL WNGMTS(GFH_ID_N,GFH(GFH_ID_C),SID)	!GET ID
	  IF (SID.NE.'.'//PFX(1:3)) THEN
	    CALL WNCTXT(F_TP,'Specified node is not of !AS type',PFX)
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CVT=GFH(GFH_DATTP_B)
	  CALL WNTTCH(CVT,PRGDAT,L0)			!TEST TRANSLATE
	  IF (L0) CALL WNCTXT(F_TP,
	1	'Node has different datatype, please convert with CVX')
	  CALL WNFCL(J)
	  CALL WNDPOHC
	  RETURN					!CORRECT NODE
C
C WRITE
C
	ELSE IF (WNCAUP(TP(1:1)).EQ.'W' .AND. .NOT.NOC) THEN !NEW FILE
 32	  CONTINUE
	  INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)		!FILE EXISTS?
	  IF (.NOT.LJ ) THEN				!NO
	    IF (.NOT.WNFOP(J,FILOUT,'W')) THEN		!CREATE
	      CALL WNCTXT(F_TP,'Error creating file !AS',FILOUT(:LF))
	      GOTO 10
	    END IF
	    CALL WNGMVZ(GFHHDL,GFH(0))			!CLEAR HEADER
	    CALL WNGMFS(GFH_ID_N,'.'//PFX(:3),GFH(GFH_ID_C)) !SET ID
	    GFH_J(GFH_LEN_J)=GFHHDL			!LENGTH
	    GFH_J(GFH_VER_J)=GFHHDV			!VERSION
	    CALL WNGSYT(DTTM)				!GET DATE/TIME
	    CALL WNGMFS(GFH_CDAT_N,DTTM,GFH(GFH_CDAT_C)) !CREATION DATE
	    CALL WNGMFS(GFH_CTIM_N,DTTM(13:),GFH(GFH_CTIM_C)) !CREATION TIME
	    CALL WNGMFS(GFH_RDAT_N,DTTM,GFH(GFH_RDAT_C)) !REVISION DATE
	    CALL WNGMFS(GFH_RTIM_N,DTTM(13:),GFH(GFH_RTIM_C)) !REVISION TIME
	    CALL WNGMFS(GFH_NAME_N,NODOUT,GFH(GFH_NAME_C)) !NODE NAME
	    GFH(GFH_DATTP_B)=PRGDAT			!SET DATA TYPE
	    GFH_J(GFH_LINK_J)=GFH_LINK_1		!INIT. LINK
	    GFH_J(GFH_LINK_J+1)=GFH_LINK_1
	    GFH_J(GFH_LINKG_J)=GFH_LINKG_1		!INIT. LINKG
	    GFH_J(GFH_LINKG_J+1)=GFH_LINKG_1
	    IF (.NOT.WNFWR(J,GFHHDL,GFH(0),0)) THEN	!WRITE HEADER
	      CALL WNCTXT(F_TP,'Cannot write to node !AS',NODOUT(:LN))
	      CALL WNFCL(J)
	      GOTO 10
	    END IF
	    CALL WNFCL(J)				!CLOSE NODE
	    CALL WNDPOHC
	    RETURN
	  END IF
	  CALL WNCTXT(F_TP,
	1	'File !AS already exists. Overwrite?',FILOUT(:LF))
 31	  CONTINUE
	  IF (.NOT.WNDPAR('DELETE_NODE',LG1,1,J0,'N')) GOTO 31
	  LG4=LG1
	  IF (J0.EQ.1 .AND. LG4) THEN			!YES
	    CALL WNGLUN(J1)				!GET LUN
	    OPEN (UNIT=J1,FILE=FILOUT,STATUS='OLD',ERR=33) !DELETE FILE
	    CLOSE(UNIT=J1,STATUS='DELETE',ERR=33)
	    CALL WNGLUF(J1)				!FREE LUN
	    CALL WNCTXT(F_TP,'File !AS deleted',FILOUT(:LF))
	    GOTO 32					!RETRY
 33	    CONTINUE
	    CALL WNGLUF(J1)
	    CALL WNCTXT(F_TP,'Cannot delete !AS',FILOUT(:LF))
	  END IF
	  GOTO 10
C
C UPDATE
C
	ELSE						!UPDATE
	  INQUIRE(FILE=FILOUT,ERR=20,EXIST=LJ)		!FILE EXISTS?
	  IF (.NOT.LJ .AND. .NOT.NOC) THEN		!NO, CREATE
	    CALL WNCTXT(F_TP,'Creating node !AS in !AS',
	1		NODOUT(:LN),DATAB(:LD))
	    GOTO 32					!CREATE
	  END IF
	  IF (.NOT.WNFOP(J,FILOUT,'U')) THEN		!CHECK
	    CALL WNCTXT(F_TP,'Cannot open file !AS for update',
	1	FILOUT(:LF))
	    GOTO 10
	  END IF
	  IF (.NOT.WNFRD(J,GFHHDL,GFH(0),0)) THEN	!READ HEADER
	    CALL WNCTXT(F_TP,
	1	  'Cannot read file header for !AS',FILOUT(:LF))
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CALL WNGMTS(GFH_ID_N,GFH(GFH_ID_C),SID)	!GET ID
	  IF (SID.NE.'.'//PFX(1:3)) THEN
	    CALL WNCTXT(F_TP,'Specified node is not of !AS type',PFX)
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CVT=GFH(GFH_DATTP_B)
	  CALL WNTTCH(CVT,PRGDAT,L0)			!TEST TRANSLATE
	  IF (L0) THEN
	    CALL WNCTXT(F_TP,
	1	'The specified node is not of the correct datatype')
	    CALL WNCTXT(F_TP,'Please convert it with CVX first')
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CALL WNGSYT(DTTM)				!GET DATE/TIME
	  CALL WNGMFS(GFH_RDAT_N,DTTM,GFH(GFH_RDAT_C)) !REVISION DATE
	  CALL WNGMFS(GFH_RTIM_N,DTTM(13:),GFH(GFH_RTIM_C)) !REVISION TIME
	  GFH_J(GFH_RCNT_J)=GFH_J(GFH_RCNT_J)+1		!UPDATE REVISION COUNT
	  IF (.NOT.WNFWR(J,GFHHDL,GFH(0),0)) THEN	!WRITE HEADER
	    CALL WNCTXT(F_TP,'Cannot write to node !AS',NODOUT(:LN))
	    CALL WNFCL(J)
	    GOTO 10
	  END IF
	  CALL WNFCL(J)
	  CALL WNDPOHC
	  RETURN					!CORRECT NODE
	END IF
C
	CALL WNDPOHC
	RETURN						!READY
C
C
	END

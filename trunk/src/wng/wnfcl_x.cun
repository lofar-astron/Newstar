/*+ wnfcl_x.cun
.   WNB 900107
.
.   Revisions:
.	WNB 920114	Tape positioning
.	GvD 920513	Exit immediately when chan=0
.	WNB 921210	Delete tmp files
.	JPH 930414	FCA_M_WRT --> FCA_M_WRTAPE
.	WNB 930803	Change to _o_inc and to .cun
.	CMV 940204	Split off write() for remote tapedrive
.	CMV 940822	Restore original protection for write-lock
.	CMV 940926	Do not write end of tape marks if no data written
.       AXC 040326      Placed sys/file outside { to help Fedora builds
.
...									*/
#include "fca_o_inc"
#include "mca_o_inc"
#include <sys/file.h>
/*
...									*/
			wnfcl_x_(fcap,mcap)
/*
.   Close disk/tape file for general stream/direct I/O
.
.   Result:
.
.	wnfcl_x_j = wnfcl_x( FCA_J:I, MCA_J:I)
.
.	See WNFCL.FOR for details
.
.   PIN references:
...									*/
/*
.   Arguments:
...									*/
		struct fca *fcap;		/* FCA ptr		*/
		struct mca *mcap;		/* MCA ptr		*/
{
/*
.   Include files:
...									*/
#include "wng_inc"
#include <errno.h>
#include <ctype.h>
extern int errno ;
/*
.   Parameters:
...									*/
/*
.   Equivalences:
...									*/
/*
.   Commons:
...									*/
/*-									*/
/*
.   Function references:
...									*/
	int wnftsf_();				/* skip tape files	*/
	int wnfttm_();				/* write tm		*/
	int wnftwb_();				/* write buffer		*/
/*
.   Data declarations:
...									*/
/*	int j;    in wng_inc
	int j1;
	int js;
*/
	static char *no_change="No changes written to tape";

/* Exit when file not open
...									*/
	if (fcap->chan == 0) return(1);		/* not open		*/
/* Write tape labels
.
.  If fcap->map <= 0, we used to write some dummy label followed
.  by the end-of-data blocks. This way, a tape would be effectively
.  erased if a user regrets using this tape between opening and 
.  winding up to the end of the tape. So now, we only write the
.  closing stuff if data was acutally written to the tape.
.									*/
	if (fcap->bits & FCA_M_MAG)		/* tape			*/
	{ if (fcap->bits & FCA_M_WRTAPE)	/* tape write		*/
	  {
	   if (fcap->maw > 0)			/* and written to	*/
	   {
	    if (fcap->map <= 0)			/* write a block	*/
	    { wnftwb_(mcap,mcap->hd1,80);
	      fcap->map += 80;
	      fcap->mab += 1;
	    }
	    js= wnfttm_(mcap);			/* write tape mark EOD	*/
	    mcap->magf += 1;			/* indicate		*/
	    if (!(mcap->bits & MCA_M_UNL))	/* labeled		*/
	    {
	      bcopy("EOF1",mcap->hd1,4);	/* fill	EOF1,2		*/
	      bcopy("EOF2",mcap->hd2,4);
						/*** fill more		*/
	      js= wnftwb_(mcap,mcap->hd1,80); /* write EOF1,2	*/
	      js= wnftwb_(mcap,mcap->hd2,80);
	      js= wnfttm_(mcap);		/* write tapemark	*/
	      mcap->magf += 1;
	    }
	    js= wnfttm_(mcap);			/* write EOV tm		*/
	    mcap->magf += 1;
	    js= wnftsf_(mcap,-1);		/* backup		*/
	    mcap->magf += -1;

           } else {
	    js=F_TP;
	    wnctxt_(&js,no_change,strlen(no_change));
           }

	  }
	  js= wnftsf_(mcap,-1);			/* backup		*/
	  mcap->magf += -1;
	  js= wnftsf_(mcap,1);			/* proper position	*/
	  mcap->magf += 1;
	}
/* Close file
...									*/
	if (!(fcap->bits & FCA_M_MAG))		/* disk			*/
	{ if (fcap->bits & FCA_M_TMP)		/* delete		*/
	  { ftruncate(fcap->chan,0);		/* truncation		*/
	    js= close(fcap->chan);		/* close file		*/
	    js= unlink(fcap->fnam);		/* delete file		*/
	  }
	  else
	  {	
	    if (fcap->bits & FCA_M_WRITE) 
	      fchmod(fcap->chan,fcap->atrj.atrj[0]); /* restore mode	*/
	    js= close(fcap->chan);		/* close file		*/
	  }
	}
/* Ready
...									*/
	return(1);
}
/*
.
...									*/

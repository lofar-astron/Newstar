C+ WNFIO.FSC
C  WNB 890725
C
C  Revisions:
C	JPH 930402	C#ERROR, .FSC file. L_J/L_B --> LB_J
C	JPH 930405	check write access
C	CMV 930708	make proper check on write access
C	WNB 930811	Get rid of A_OJ; %VAL
C
C
	LOGICAL FUNCTION WNFRD(FCA,LEN,BUF,DISK)
C
C  Read/write data from/to disk/tape
C
C  Result:
C	WNFRD_L = WNFRD( FCA_J:I, LEN_J:I, BUF_B(*), DISK_J:I)
C			Read data from file given by FCA starting at disk
C			address DISK of length LEN into buffer BUF
C	WNFRDS_L = WNFRDS( FCA_J:I, LEN_J:I, BUF_B(*))
C			Read data from file given by FCA starting after last
C			read address of length LEN into buffer BUF
C	WNFRDA_L = WNFRDA( FCA_J:I, LEN_J:I, ADISK_J:I)
C			Read data ahead from file given by FCA starting at disk
C			address ADISK of length LEN.
C	WNFWR, WNFWRS, WNFWRA identical for write
C
C	WNFPUR_L = WNFPUR( FCA_J:I)
C			Purge all buffers to disk/tape
C
C  PIN references:
C
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'MCA_O_DEF'			!MCA
	INCLUDE 'FCA_O_DEF'			!FCA
	INCLUDE 'FBC_O_DEF'			!FBC
	INCLUDE 'FEL_O_DEF'			!FEL
C
C  Parameters:
C
C
C  Arguments:
C
	INTEGER FCA				!DYNAMIC FILE AREA POINTER
	INTEGER LEN				!BUFFER LENGTH
	BYTE BUF(*)				!DATA BUFFER
	INTEGER DISK,ADISK			!DISK ADDRESS
C
C  Entry points:
C
	LOGICAL WNFRDS,WNFRDA
	LOGICAL WNFWR,WNFWRS,WNFWRA
	LOGICAL WNFPUR
C
C  Function references:
C
	INTEGER WNFIO_X,WNFPUR_X		!ACTUAL I/O
	INTEGER WNFTFC				!TEST FCA PRESENT
	INTEGER WNGARA				!GET ADDRESS
C
C  Data declarations:
C
	INTEGER LLEN,LBUFAD,LDISK,LCOD		!LOCAL DATA
	INTEGER LFEL(0:FELHDL/4-1)		!ELEMENT
C
C  Equivalences:
C
C
C  Commons:
C
C-
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=WNGARA(BUF)				!BUFFER ADDRESS
	LDISK=DISK					!DISK POINTER
	LCOD=1						!READ
	GOTO 11
C
C WNFRDS
C
	ENTRY WNFRDS(FCA,LEN,BUF)
C
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=WNGARA(BUF)				!BUFFER ADDRESS
	LDISK=-1					!DISK POINTER
	LCOD=1						!READ
	GOTO 11
C
C WNFRDA
C
	ENTRY WNFRDA(FCA,LEN,ADISK)
C
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=0					!BUFFER ADDRESS
	LDISK=ADISK					!DISK POINTER
	LCOD=1						!READ
	GOTO 11
C
C  WNFWR
C
	ENTRY WNFWR(FCA,LEN,BUF,DISK)
C
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=WNGARA(BUF)				!BUFFER ADDRESS
	LDISK=DISK					!DISK POINTER
	LCOD=0						!WRITE
	GOTO 10
C
C WNFWRS
C
	ENTRY WNFWRS(FCA,LEN,BUF)
C
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=WNGARA(BUF)				!BUFFER ADDRESS
	LDISK=-1					!DISK POINTER
	LCOD=0						!WRITE
	GOTO 10
C
C WNFWRA
C
	ENTRY WNFWRA(FCA,LEN,ADISK)
C
	LLEN=LEN					!BUFFER LENGTH
	LBUFAD=0					!BUFFER ADDRESS
	LDISK=ADISK					!DISK POINTER
	LCOD=0						!WRITE
	GOTO 10
C
C test write access
C
10	CONTINUE
C
C	If tape: find FPA and check, else check FPA directly
C
	I0=WNFTFC(FCA)					!TYPE OF BLOCK
	J1=FCA
	IF (I0.LT.0) THEN				!TAPE
	  J=(J1-A_OB)/(LB_J)				!DUMMY ARRAY OFFSET
	  J1=A_J(J+MCA_FCA_J)				!PROPER FCA
	  IF (J1.EQ.0) THEN				!NO FILE OPEN ON MCA
C#ERROR 'no file open on MCA'
	    RETURN
	  ENDIF
	END IF
	J= A_J((J1-A_OB)/LB_J+FCA_BITS_J)
	IF (IAND (J, FCA_M_WRITE) .EQ.0 ) THEN
C#ERRORX 'write to read-only fca', FCA
	  WNFRD=.FALSE.
	  RETURN
	ENDIF
	
C
C DO READ/WRITE
C
 11	CONTINUE
C
C TEST FCA
C
	WNFRD=.FALSE.					!ASSUME ERROR
	I0=WNFTFC(FCA)					!TYPE OF BLOCK
	IF (I0.EQ.0) THEN				!ILLEGAL FCA
C#ERROR 'illegal FCA'
	  RETURN
	ENDIF
	J=FCA
	IF (I0.LT.0) THEN				!TAPE
	  J1=(J-A_OB)/(LB_J)				!DUMMY ARRAY OFFSET
	  J=A_J(J1+MCA_FCA_J)				!PROPER FCA
	  IF (J.EQ.0) THEN				!NO FILE OPEN ON MCA
C#ERROR 'no file open on MCA'
	    RETURN
	  ENDIF
	END IF
C
C SET DATA
C
	LFEL(FEL_BITS_J)=LCOD				!SET READ/WRITE
	LFEL(FEL_BUFAD_J)=LBUFAD			!BUFFER
	LFEL(FEL_BUFLEN_J)=LLEN				!LENGTH
	LFEL(FEL_DKAD_J)=LDISK				!DISK ADDRES
	E_C=WNFIO_X(A_B(J-A_OB),LFEL)			!DO I/O
	IF (IAND(E_C,1).EQ.1) THEN
	  WNFRD=.TRUE.
	ELSE
C#ERRORJ 'error from WNFIO_X', E_C
	ENDIF	
C
	RETURN
C
C WNFPUR
C
	ENTRY WNFPUR(FCA)
C
	WNFPUR=.FALSE.					!ASSUME ERROR
	I0=WNFTFC(FCA)					!TYPE OF BLOCK
	IF (I0.EQ.0) THEN				!ILLEGAL FCA
C#ERROR 'illegal FCA'
	  RETURN
	ENDIF
	J=FCA
	IF (I0.LT.0) THEN				!TAPE
	  J1=(J-A_OB)/(LB_J)				!DUMMY ARRAY OFFSET
	  J=A_J(J1+MCA_FCA_J)				!PROPER FCA
	  IF (J.EQ.0) THEN				!NO FILE OPEN ON MCA
C#ERROR 'no file open on MCA'
	    RETURN
	  ENDIF	
	END IF
	E_C=WNFPUR_X(A_B(J-A_OB))			!PURGE
	IF (IAND(E_C,1).EQ.1) THEN
	  WNFPUR=.TRUE.
	ELSE
C#ERRORJ 'error from WNFPUR_X', E_C
	ENDIF
C
C
	END

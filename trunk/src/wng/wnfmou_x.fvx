C+ WNFMOU_X.FVX
C  WNB 930804
C
C  Revisions:
C	CMV 940808	Add entry WNFMLI_X, does not work properly yet
C
C
	INTEGER FUNCTION WNFMOU_X(MCAJ,UNIT)
C
C  Mount tape
C
C
C  Result:
C
C	WNFMOU_X_J = WNFMOU_X( MCAJ_J(0:*):I, UNIT_C*:I)	Mount tape
C
C	WNFMLI_X_J = WNFMLI_X( UNIT_C*:I, TXT_C*:O, LTXT_J:O)	Get name
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE '($DVIDEF)'		!GETDVI INFO
	INCLUDE '($LNMDEF)'		!LOGICAL NAME TRANSLATION
	INCLUDE '($MNTDEF)'		!MOUNT INFO
	INCLUDE '($MTDEF)'		!MAGNETIC TAPE DATA
	INCLUDE '($IODEF)'		!I/O CODES
	INCLUDE '($SSDEF)'		!ERROR CODES
	INCLUDE '($DEVDEF)'		!DEVICE INFO
	INCLUDE 'MCA_O_DEF'		!MCA
C
C  Parameters:
C
C
C  Entry-points:
C
	INTEGER	WNFMLI_X		!LIST NAME
C
C  Arguments:
C
	INTEGER MCAJ(0:*)	!MCA BLOCK
	CHARACTER*(*) UNIT	!UNIT NAME
	CHARACTER*(*) UNITL	! idem WNFMLI_X
	CHARACTER*(*) TXT	!DESCRIPTION
	INTEGER LTXT		!LENGTH OF TXT
C
C  Function references:
C
	INTEGER SYS$TRNLNM
	INTEGER SYS$ALLOC
	INTEGER SYS$ASSIGN
	INTEGER SYS$MOUNT
	INTEGER LIB$GET_EF
	INTEGER LIB$EXTZV
	INTEGER SYS$GETDVIW
	INTEGER WNFTRW		!REWIND TAPE
	INTEGER WNFTRD		!READ TAPE
C
C  Data declarations:
C
	INTEGER TRNLST(0:3)	!NAME TRANSLATION
	  INTEGER*2 TRNLSI(0:7)
	  EQUIVALENCE (TRNLST,TRNLSI)
	  DATA TRNLSI/0,LNM$_STRING,0,0,0,0,0,0/
	INTEGER TRNATR		!TRANSLATION ATTRIBUTES
	  DATA TRNATR/LNM$M_CASE_BLIND/
	CHARACTER*12 TABDES	!TABLE NAME
	  DATA TABDES/'LNM$FILE_DEV'/
	INTEGER MNTLST(0:9)	!MOUNT
	  INTEGER*2 MNTLSI(0:19)
	  EQUIVALENCE (MNTLST,MNTLSI)
	  DATA MNTLSI/0,MNT$_DEVNAM,0,0,0,0,4,MNT$_FLAGS,0,0,0,0,
	1		4,MNT$_DENSITY,0,0,0,0,0,0/
	INTEGER MNTFLG		!FLAGS
	INTEGER DVILST(0:6)	!DEVICE INFO
	  INTEGER*2 DVILSI(0:13)
	  EQUIVALENCE (DVILST,DVILSI)
	  DATA DVILSI/4,DVI$_DEVCHAR,0,0,0,0,4,DVI$_DEVDEPEND,
	1		0,0,0,0,0,0/
	INTEGER DVICHA		!DEVICE CHARACTERISTICS
	INTEGER DVIDEP		!DEVICE DEPENDED
C-
C
C ALLOCATE UNIT
C
	MCAJ(MCA_UNDES_J)=32			!MAKE UNIT DESCRIPTOR
	MCAJ(MCA_UNDES_J+1)=%LOC(MCAJ)+MCA_UNIT_1
C
C TRANSLATE LOGICAL NAME
C
	TRNLSI(0)=MCAJ(MCA_UNDES_J)		!STRING LENGTH
	TRNLST(1)=MCAJ(MCA_UNDES_J+1)		!STRING ADDRESS
	TRNLST(2)=%LOC(MCAJ)+MCA_UNDES_1	!STRING DESCRIPTOR
	JS=SYS$TRNLNM(TRNATR,TABDES,UNIT,,TRNLST) !TRANSLATE NAME
	IF (.NOT.JS) THEN			!SET ORIGINAL NAME
	  MCAJ(MCA_UNDES_J)=32			!RESET LENGTH
	  CALL WNGMFS(32,UNIT,MCAJ(MCA_UNIT_1/LB_J)) !RESET STRING
	END IF
C
C ALLOCATE
C
	JS=SYS$ALLOC(MCAJ(MCA_UNDES_J),,,,)	!ALLOCATE
	IF (IAND(JS,'0000FFFF'X).NE.SS$_DEVALRALLOC) THEN !NOT YET ALLOCATED
	  IF (JS) MCAJ(MCA_BITS_J)=IOR(MCAJ(MCA_BITS_J),MCA_M_ALL) !SET ALLOC.
	END IF
C
C ASSIGN
C
	WNFMOU_X=SYS$ASSIGN(MCAJ(MCA_UNDES_J),MCAJ(MCA_CHAN_J),,,) !ASSIGN
	IF (.NOT.WNFMOU_X) GOTO 800		!ERROR
	MCAJ(MCA_BITS_J)=IOR(MCAJ(MCA_BITS_J),MCA_M_ASS) !SET ASSIGNED

C
C MOUNT
C
	MCAJ(MCA_DENS_J)=1600			!DEFAULT DENSITY
	MNTLST(4)=%LOC(MNTFLG)			!FLAG ADDRESS
	MNTLST(7)=%LOC(MCAJ)+MCA_DENS_1		!DENSITY ADDRESS
	MNTLSI(0)=MCAJ(MCA_UNDES_J)		!LENGTH UNIT NAME
	MNTLST(1)=%LOC(MCAJ)+MCA_UNIT_1		!UNIT NAME
	MNTFLG=IOR(MNT$M_FOREIGN,MNT$M_NOASSIST) !FLAGS
	IF (IAND(MCAJ(MCA_BITS_J),MCA_M_OUT).EQ.0)
	1		MNTFLG=IOR(MNTFLG,MNT$M_NOWRITE) !INPUT
	WNFMOU_X=SYS$MOUNT(MNTLST)		!MOUNT
	IF (WNFMOU_X) THEN			!OK
	  MCAJ(MCA_BITS_J)=IOR(MCA_M_MOU,MCAJ(MCA_BITS_J)) !SET MOUNTED
	ELSE
	  IF (IAND(WNFMOU_X,'0000FFFF'X).NE.SS$_DEVMOUNT) GOTO 800 !ERROR
	END IF
	WNFMOU_X=WNFTRW(MCAJ)			!REWIND TAPE
	IF (.NOT.WNFMOU_X) GOTO 800
	IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).EQ.0) THEN !MAYBE LABELED
	  WNFMOU_X=WNFTRD(MCAJ,MCAJ(MCA_VOL_1/LB_J)) !READ VOLUME LABEL
	  IF (WNFMOU_X) THEN
	    IF (MCAJ(MCA_VOL_1/LB_J).NE.'VOL1')
	1	MCAJ(MCA_BITS_J)=IOR(MCAJ(MCA_BITS_J),MCA_M_UNL) !FORCE NOLABEL
	  ELSE
	    MCAJ(MCA_BITS_J)=IOR(MCAJ(MCA_BITS_J),MCA_M_UNL) !FORCE NOLABEL
	  END IF
	END IF
	IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).NE.0) !UNLABELED
	1	CALL WNGMFS(80,' ',MCAJ(MCA_VOL_1/LB_J)) !CLEAR VOLUME LABEL
	JS=WNFTRW(MCAJ)				!MAKE SURE REWIND
C
C GET DEVICE INFO
C
	DVILST(1)=%LOC(DVICHA)
	DVILST(4)=%LOC(DVIDEP)
	WNFMOU_X=SYS$GETDVIW(,%VAL(MCAJ(MCA_CHAN_J)),,DVILST,
	1		MCAJ(MCA_IOSB_J),,,)	!GET DEVICE INFO
	IF (.NOT.WNFMOU_X) GOTO 800
	IF (.NOT.MCAJ(MCA_IOSB_J)) THEN
	  WNFMOU_X=MCAJ(MCA_IOSB_J)		!I/O ERROR
	  GOTO 800
	END IF
	I=LIB$EXTZV(MT$V_DENSITY,MT$S_DENSITY,DVIDEP) !REAL DENSITY
	IF (I.EQ.MT$K_PE_1600) THEN
	  MCAJ(MCA_DENS_J)=1600			!DENSITY
	ELSE IF (I.EQ.MT$K_GCR_6250) THEN
	  MCAJ(MCA_DENS_J)=6259
	ELSE
	  MCAJ(MCA_DENS_J)=800
	END IF
	WNFMOU_X=0				!ASSUME ERROR
	IF (IAND(DEV$M_MNT,DVICHA).EQ.0) GOTO 800 !NOT MOUNTED
	IF (IAND(DEV$M_FOR,DVICHA).EQ.0) GOTO 800 !NOT FOREIGN
	IF (IAND(MT$M_HWL,DVIDEP).NE.0) THEN	!WRITE LOCKED
	  IF (IAND(MCA_M_OUT,MCAJ(MCA_BITS_J)).NE.0) THEN !OUTPUT WANTED
	    MCAJ(MCA_BITS_J)=
	1	IAND(NOT(MCA_M_OUT),MCAJ(MCA_BITS_J)) !SET NO OUTPUT POSSIBLE
	    WNFMOU_X=SS$_WRITLCK
	    GOTO 800
	  END IF
	END IF
	WNFMOU_X=SS$_NORMAL			!ALL OK
C
C READY
C
 800	CONTINUE
	WNFMOU_X=IAND('0000FFFF'X,WNFMOU_X)	!RETURN ERROR
C
	RETURN
C
	ENTRY WNFMLI_X(UNITL,TXT,LTXT)
C
	WNFMLI=0				!ALWAYS NOT FOUND
	RETURN
C
C TRANSLATE LOGICAL NAME
C
	TRNLSI(0)=LEN(TXT)			!STRING LENGTH
	TRNLST(1)=%LOC(TXT)			!STRING ADDRESS
	TRNLST(2)=%LOC(TXT)			!STRING DESCRIPTOR
	JS=SYS$TRNLNM(TRNATR,TABDES,UNITL,,TRNLST) !TRANSLATE NAME
	IF (.NOT.JS) THEN			!SET ORIGINAL NAME
	  WNFMLI_X=0				!NOT FOUND
	ELSE
	  WNFMLI_X=1				!OK
	END IF
C
	RETURN
C
C
	END

C+ WNFOP_X.FVX
C  WNB 930804
C
C  Revisions:
C
	INTEGER FUNCTION WNFOP_X(FCAJ,MCAJ,FNAM,RLEN,TAPLAB)
C
C  Open file
C
C
C  Result:
C
C	WNFOP_X_J = WNFOP_X( FCAJ_J(0:*):I, MCAJ_J(0:*):I, FNAM_C*:I, RLEN_J:I,
C				TABLAB_J:I)	Open file
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE	'($FIBDEF)'		!FIB BLOCK
	INCLUDE '($FABDEF)'		!FAB BLOCK
	INCLUDE '($NAMDEF)'		!NAM BLOCK
	INCLUDE '($RABDEF)'		!RAB BLOCK
	INCLUDE '($SSDEF)'		!ERROR CODES
	INCLUDE '($IODEF)'		!I/O CODES
	INCLUDE 'FCA_O_DEF'		!FCA
	INCLUDE 'MCA_O_DEF'		!MCA
C
C  Parameters:
C
	CHARACTER*(7) DFNAM	!DEFAULT FILE NAME
	  PARAMETER (DFNAM='TMP.DAT')
C
C  Arguments:
C
	INTEGER FCAJ(0:*)	!POINTER TO FCA BLOCK
	INTEGER MCAJ(0:*)	!MCA BLOCK
	CHARACTER*(*) FNAM	!FILE NAME
	INTEGER RLEN		!RECORD LENGTH TO USE
	INTEGER TAPLAB		!TAPE LABEL/INIT ALLOCATION
C
C  Function references:
C
	INTEGER SYS$QIOW
	INTEGER SYS$CLOSE
	INTEGER SYS$OPEN
	INTEGER SYS$CREATE
	INTEGER SYS$ASSIGN
	INTEGER SYS$CONNECT
	INTEGER LIB$EXTZV
	INTEGER LIB$GET_EF
	INTEGER WNFTWR		!WRITE TAPE BLOCK
	INTEGER WNFTRD		!READ TAPE BLOCK
	INTEGER WNFTTM		!WRITE TM
	INTEGER WNFTRW		!REWIND TAPE
	INTEGER WNFTSF		!SKIP TAPE FILE
	INTEGER WNFTSB		!SKIP TAPE BLOCK
C
C  Data declarations:
C
	INTEGER ECOD		!LOCAL ERROR CODE
	CHARACTER*6 STR1
	INTEGER DVIDSC(0:1)	!DEVICE ID DESCRIPTOR
	RECORD /FABDEF/ FABLOC	!LOCAL FAB
	RECORD /RABDEF/ RABLOC	!LOCAL RAB
	RECORD /NAMDEF/	NAMLOC	!LOCAL NAM
C-
C
C INIT
C
	ECOD=SS$_NORMAL				!ASSUME OK
	IF (FIB$K_LENGTH.GT.FIB__L) THEN	!CANNOT DO
	  ECOD=0				!ERROR
	  CALL WNCTXT(F_T,'VMS FIB length changed: change FCA.DSC')
	  GOTO 900
	END IF
C
C GET AND FILL FAB, RAB, NAM BLOCKS
C
	IF (IAND(FCA_M_MAG,FCAJ(FCA_BITS_J)).EQ.0) THEN !DISK
	  CALL WNGMVZ(FAB$K_BLN,FABLOC)		!MAKE SURE ALL EMPTY
	  CALL WNGMVZ(RAB$K_BLN,RABLOC)
	  CALL WNGMVZ(NAM$K_BLN,NAMLOC)
	  FABLOC.FAB$B_BID=FAB$C_BID		!SET ID AND LENGTH
	  FABLOC.FAB$B_BLN=FAB$K_BLN
	  RABLOC.RAB$B_BID=RAB$C_BID
	  RABLOC.RAB$B_BLN=RAB$K_BLN
	  NAMLOC.NAM$B_BID=NAM$C_BID
	  NAMLOC.NAM$B_BLN=NAM$K_BLN
	  FABLOC.FAB$L_DNA=%LOC(DFNAM)		!DEFAULT NAME
	  FABLOC.FAB$B_DNS=LEN(DFNAM)		!AND LENGTH
	  FABLOC.FAB$B_FAC=FAB$M_BRO+FAB$M_GET+
	1		FAB$M_PUT		!FACILITIES
	  FABLOC.FAB$L_FOP=FAB$M_CBT+FAB$M_TEF+
	1		FAB$M_WCK		!FILE PROCESSING OPTIONS
	  FABLOC.FAB$B_ORG=FAB$C_SEQ		!SEQUENTIAL
	  FABLOC.FAB$B_RFM=FAB$C_FIX		!FIXED RECORDS
	  FABLOC.FAB$B_SHR=FAB$M_NIL		!NO SHARE
	  FABLOC.FAB$L_NAM=%LOC(NAMLOC)		!NAMBLK ADDRESS
	  FABLOC.FAB$L_ALQ=TAPLAB
	  FABLOC.FAB$B_FNS=LEN(FNAM)		!FILE NAME LENGTH
	  FABLOC.FAB$L_FNA=%LOC(FNAM)		!FILE NAME PTR
	  FABLOC.FAB$W_MRS=RLEN			!MAX. RECORD SIZE
	  RABLOC.RAB$B_RAC=RAB$C_SEQ		!ACCESS TYPE
	  RABLOC.RAB$L_FAB=%LOC(FABLOC)		!FAB POINTER
	  RABLOC.RAB$W_RSZ=RLEN			!RECORD SIZE
	  NAMLOC.NAM$B_RSS=FCA__FNL		!NAME SIZE
	  NAMLOC.NAM$L_RSA=%LOC(FCAJ)+FCA_FNAM_1 !NAME ADDRESS
C
C CREATE/OPEN FILE
C
	  IF (IAND(FCA_M_OLD,FCAJ(FCA_BITS_J)).EQ.0) THEN !NEW
	    ECOD=SYS$CREATE(FABLOC)		!CREATE FILE
	  ELSE					!OLD
	    ECOD=SYS$OPEN(FABLOC)
	  END IF
	  IF (.NOT.ECOD) GOTO 900		!CANNOT OPEN/CREATE
	  IF (NAMLOC.NAM$B_RSS.NE.0)		!FILE NAME WANTED
	1		FCAJ(FCA_FNAML_J)=NAMLOC.NAM$B_RSS
	  ECOD=SYS$CONNECT(RABLOC)		!CONNECT FILE
	  IF (.NOT.ECOD) THEN			!CANNOT CONNECT
	    JS=SYS$CLOSE(FABLOC)
	    GOTO 900
	  END IF
	  ECOD=SYS$CLOSE(FABLOC)		!CLOSE FILE FOR NOW
	  IF (.NOT.ECOD) GOTO 900		!SOME ERROR
	END IF
C
C FILL FCA
C
	ECOD=LIB$GET_EF(FCAJ(FCA_EF_J))		!GET EVENT FLAGS
	IF (.NOT.ECOD) GOTO 900
	ECOD=LIB$GET_EF(FCAJ(FCA_EFA_J))
	IF (.NOT.ECOD) GOTO 900
	IF (IAND(FCA_M_MAG,FCAJ(FCA_BITS_J)).EQ.0) THEN !DISK
	  DVIDSC(0)=ICHAR(NAMLOC.NAM$T_DVI(1:1)) !LENGTH DVI
	  DVIDSC(1)=%LOC(NAMLOC.NAM$T_DVI)+1	!DVI STRING ADDRESS
	  CALL WNFOP_X0(FCAJ,FCAJ(FCA_FIBJ_J),
	1		FCAJ(FCA_ATRJ_J),NAMLOC) !FILL FIB AND ATR
C
C ASSIGN CHANNEL
C
	  ECOD=SYS$ASSIGN(DVIDSC,
	1		FCAJ(FCA_CHAN_J),,,)	!ASSIGN CHANNEL
	  IF (.NOT.ECOD) GOTO 900
	  FCAJ(FCA_BITS_J)=IOR(FCA_M_ASS,
	1		FCAJ(FCA_BITS_J))	!SET ASSIGNED
	  ECOD=SYS$QIOW(,%VAL(FCAJ(FCA_CHAN_J)),
	1		%VAL(IOR(IO$_ACCESS,IO$M_ACCESS)),
	1		FCAJ(FCA_IOSB_J),,,
	1		FCAJ(FCA_FIBDES_J),,,,
	1		FCAJ(FCA_ATRJ_J),)	!ACCESS FILE
	  IF (.NOT.ECOD) GOTO 900
	  ECOD=FCAJ(FCA_IOSB_J)			!EXECUTION ERROR
	  IF (.NOT.ECOD) GOTO 900
	  CALL LIB$INSV(A_B(%LOC(FCAJ)-A_OB+FCA_RECATR_1+FAT_HIBLKL_1),
	1	9,16,FCAJ(FCA_HIBLK_J))		!EXTEND
	  CALL LIB$INSV(A_B(%LOC(FCAJ)-A_OB+FCA_RECATR_1+FAT_HIBLKH_1),
	1	25,7,FCAJ(FCA_HIBLK_J))
	  FCAJ(FCA_EOF_J)=LIB$EXTZV(0,9,
	1	A_B(%LOC(FCAJ)-A_OB+FCA_RECATR_1+FAT_FFBYTE_1)) !EOF BYTE
	  CALL LIB$INSV(A_B(%LOC(FCAJ)-A_OB+FCA_RECATR_1+FAT_EFBLKL_1),
	1	9,16,FCAJ(FCA_EOF_J))
	  CALL LIB$INSV(A_B(%LOC(FCAJ)-A_OB+FCA_RECATR_1+FAT_EFBLKH_1),
	1	25,7,FCAJ(FCA_EOF_J))
	  FCAJ(FCA_EOF_J)=FCAJ(FCA_EOF_J)-512	!CORRECT DISK ADDRESS
	  FCAJ(FCA_BITS_J)=IOR(FCAJ(FCA_BITS_J),FCA_M_ACC) !SET ACCESSED
C
C POSITION TAPE
C
	ELSE					!TAPE
	  IF (TAPLAB.LE.0) THEN			!NO LABEL SPECIFIED
	    IF (IAND(FCAJ(FCA_BITS_J),FCA_M_WRTAPE).NE.0) THEN !GOTO EOT
 10	      CONTINUE
	      ECOD=WNFTSF(MCAJ,300)		!SKIP SOME
	      IF (.NOT.ECOD) THEN		!ERROR
		IF (ECOD.NE.SS$_ENDOFVOLUME) GOTO 900
	      END IF
	      MCAJ(MCA_MAGF_J)=
	1		MCAJ(MCA_MAGF_J)+
	1		A_I((%LOC(FCAJ)-A_OB)/LB_I+FCA_IOSBI_I+1) !NEW POS.
	      IF (ECOD.NE.SS$_ENDOFVOLUME) GOTO 10 !SKIP MORE
	      J=MCAJ(MCA_MAGF_J)		!TAPE POSITION
	      IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).EQ.0) THEN !LABELED
		J=J/3
	      END IF
	      J=J+1
	    ELSE				!READ TAPE
	      J=1				!GOTO BOT
	    END IF				!WRITE/READ TAPE
	  ELSE
	    J=TAPLAB				!LABEL TO ACT UPON
	  END IF				!NO LABEL
	  IF (J.GT.1) THEN			!CAN DO
	    J=J-1
	    IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).EQ.0) J=J*3 !LABELED
	    J=J-MCAJ(MCA_MAGF_J)		!FILES TO SKIP
	    J=J-1				!-1
	    IF (J.NE.0) THEN			!NOT THERE
	      ECOD=WNFTSF(MCAJ,J)		!GO THERE
	      IF (.NOT.ECOD) THEN
	        IF (A_I((%LOC(FCAJ)-A_OB)/LB_I+FCA_IOSBI_I+1).NE.J) GOTO 900
	      END IF
	    END IF
	    MCAJ(MCA_MAGF_J)=MCAJ(MCA_MAGF_J)+J !SAVE POSITION
	    J=1					!1 MORE
	    ECOD=WNFTSF(MCAJ,J)			!GO THERE
	    IF (.NOT.ECOD) THEN
	      IF (A_I((%LOC(FCAJ)-A_OB)/LB_I+FCA_IOSBI_I+1).NE.J) GOTO 900
	    END IF
	    MCAJ(MCA_MAGF_J)=MCAJ(MCA_MAGF_J)+J	!SAVE POSITION
	  ELSE IF (J.LT.1) THEN			!ERROR
	    ECOD=0
	    GOTO 900
	  ELSE					!GOTO BOT
	    ECOD=WNFTRW(MCAJ)			!REWIND
	    MCAJ(MCA_MAGF_J)=0			!RESET POSITION
	    IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).EQ.0) THEN !LABELED
	      ECOD=WNFTSB(MCAJ,1)		!SKIP VOLUME LABEL
	      IF (.NOT.ECOD) GOTO 900
	    END IF
	  END IF
	  IF (IAND(MCAJ(MCA_BITS_J),MCA_M_UNL).EQ.0) THEN !LABELED
	    IF (IAND(FCAJ(FCA_BITS_J),FCA_M_WRTAPE).EQ.0) THEN !READ
	      ECOD=WNFTRD(MCAJ,MCAJ(MCA_HD1_1/LB_J)) !READ HDR1
	      IF (.NOT.ECOD) GOTO 900
	      ECOD=0				!ASSUME ERROR
	      IF (MCAJ(MCA_HD1_1/LB_J).NE.'HDR1') GOTO 900
	      ECOD=WNFTRD(MCAJ,MCAJ(MCA_HD2_1/LB_J)) !READ HDR2
	      IF (.NOT.ECOD) THEN
	        IF (ECOD.NE.SS$_ENDOFFILE) GOTO 900 !ACCEPT TM I.S.O HDR2
	      ELSE
	        ECOD=0				!ASSUME ERROR
	        IF (MCAJ(MCA_HD2_1/LB_J).NE.'HDR2') GOTO 900
	        ECOD=WNFTSF(MCAJ,1)		!SKIP TAPE MARK
	        IF (.NOT.ECOD) GOTO 900
	      END IF
	      MCAJ(MCA_MAGF_J)=MCAJ(MCA_MAGF_J)+1 !SAVE POSITION
C
C WRITE TAPE HEADERS
C
	    ELSE				!WRITE
	      CALL WNGMV(6,A_B(%LOC(MCAJ)-A_OB+MCA_VOL_1+4),
	1		A_B(%LOC(MCAJ)-A_OB+MCA_HD1_1+21)) !VOLUME LABEL
	      CALL WNCTXS(STR1,'!ZJ',MCAJ(MCA_MAGF_J)/3+1) !TAPE POS.
	      IF (A_B(%LOC(MCAJ)-A_OB+MCA_HD1_1+4).NE.' ') THEN !NO FILE NAME
	        A_I((%LOC(MCAJ)-A_OB+MCA_HD1_1+4)/LB_I)='L0' !SET FILE NAME
		CALL WNGMV(4,A_B(%LOC(MCAJ)-A_OB+MCA_HD1_1+31),
	1		A_B(%LOC(MCAJ)-A_OB+MCA_HD1_1+6))
	      END IF
	      ECOD=WNFTWR(MCAJ,MCAJ(MCA_HD1_1/LB_J)) !WRITE HDR1
	      IF (.NOT.ECOD) GOTO 900
	      ECOD=WNFTWR(MCAJ,MCAJ(MCA_HD2_1/LB_J)) !WRITE HDR2
	      IF (.NOT.ECOD) GOTO 900
	      ECOD=WNFTTM(MCAJ)			!WRITE TM
	      IF (.NOT.ECOD) GOTO 900
	      MCAJ(MCA_MAGF_J)=MCAJ(MCA_MAGF_J)+1 !SAVE POSITION
	    END IF				!READ/WRITE
	  END IF				!LABELED
	END IF					!DISK/TAPE
C
C READY
C
	ECOD=SS$_NORMAL				!OK
C
C ERROR
C
 900	CONTINUE
	WNFOP_X=IAND('0000FFFF'X,ECOD)		!RETURN ERROR
C
	RETURN
C
C
	END
C+
C WNFOP_X0(FCAJ,FIB,ATR,NAM)		!Set ATR and FIB
C
	SUBROUTINE WNFOP_X0(FCAJ,FIB,ATR,NAM)
C
	INCLUDE 'WNG_DEF'
	INCLUDE '($ATRDEF)'
	INCLUDE '($NAMDEF)'
	INCLUDE '($FIBDEF)'
	INCLUDE 'FCA_O_DEF'
C
	INTEGER FCAJ(0:*)
	RECORD /FIBDEF/ FIB
	RECORD /ATRDEF/ ATR
	RECORD /NAMDEF/ NAM
C
	CALL WNGMV(6,NAM.NAM$W_FID,
	1		FIB.FIB$W_FID)		!SAVE FILE ID
	CALL WNGMV(6,NAM.NAM$W_DID,
	1		A_B(%LOC(FCAJ)-A_OB+FCA_DID_1)) !SAVE DIR. ID
	FCAJ(FCA_FIBDES_J)=FIB$K_LENGTH		!SET FIB DESCRIPTOR
	FCAJ(FCA_FIBDES_J+1)=%LOC(FCAJ)+FCA_FIB_1
	FIB.FIB$W_EXCTL=IOR(FIB$M_ALCONB,FIB$M_ALDEF) !EXTEND BITS
	FIB.FIB$L_EXSZ=0			!# OF BLOCKS TO EXTEND BY
	FIB.FIB$L_ACCTL=IOR(FIB$M_NOWRITE,FIB$M_WRITECK) !READ
	IF (IAND(FCAJ(FCA_BITS_J),FCA_M_WRITE).NE.0) THEN !NOT READ ONLY
	  FIB.FIB$L_ACCTL=IOR(FIB.FIB$L_ACCTL,
	1		FIB$M_WRITE)		!SET WRITE
	END IF
	ATR.ATR$W_SIZE=ATR$S_RECATTR		!SET ATTRIB. CONTROL
	ATR.ATR$W_TYPE=ATR$C_RECATTR		!TYPE
	ATR.ATR$L_ADDR=%LOC(FCAJ)+FCA_RECATR_1	!ADDR
C
	RETURN
C
C
	END

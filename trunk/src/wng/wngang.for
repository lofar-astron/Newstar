C+ WNGANG.FOR
C  WNB 890111
C
C  Revisions:
C	WNB 900828	Typo
C	CMV 940123	Split in DOUBLE and REAL function for alpha
C
	DOUBLE PRECISION FUNCTION WNGDPD(VALD)
C
C  Convert and normalize angles
C
C  Result:
C
C	E/D = WNGDPD (VAL_E/D:I)
C	           ENR
C	             F
C				Normalise angles:
C				D/E	DOUBLE PRECISION or REAL input/output
C				P/N	normalise Positive (0-360 deg) or
C					Negative (-180-+180)
C				D/R/F	input/output Degrees, Radians or
C					Fraction of circles
C	E/D = WNGDDF (VAL_E/D:I)
C	           ER
C				Convert to fraction of circles:
C				D/E	DOUBLE PRECISION or REAL input/output
C				D/R	Degrees or Radians input
C	E/D = WNGDFD (VAL_E/D:I)
C		   E R
C				Convert from fraction of circles:
C				D/E	DOUBLE PRECISION or REAL input/output
C				D/R	Degrees or Radians output
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
C
C  Parameters:
C
C
C  Arguments:
C
	DOUBLE PRECISION VALD			!INPUT VALUE
C
C  Entry points:
C
	DOUBLE PRECISION WNGDND,WNGDPR,WNGDNR,WNGDPF,WNGDNF
	DOUBLE PRECISION WNGDDF,WNGDRF,WNGDFD,WNGDFR
C
C  Function references:
C
C
C  Data declarations:
C
C
C  Equivalences:
C
C
C  Commons:
C
C-
C
C DPD
C
	WNGDPD=MOD(VALD,360D0)
	IF (WNGDPD.LT.0) WNGDPD=WNGDPD+360D0
C
	RETURN
C
C DPR
C
	ENTRY WNGDPR(VALD)
C
	WNGDPR=MOD(VALD,DPI2)
	IF (WNGDPR.LT.0) WNGDPR=WNGDPR+DPI2
C
	RETURN
C
C DPF
C
	ENTRY WNGDPF(VALD)
C
	WNGDPF=MOD(VALD,1D0)
	IF (WNGDPF.LT.0) WNGDPF=WNGDPF+1D0
C
	RETURN
C
C DND
C
	ENTRY WNGDND(VALD)
C
	WNGDND=MOD(VALD,360D0)
	IF (WNGDND.LT.0) WNGDND=WNGDND+360D0
	IF (WNGDND.GT.180D0) WNGDND=WNGDND-360D0
C
	RETURN
C
C DNR
C
	ENTRY WNGDNR(VALD)
C
	WNGDNR=MOD(VALD,DPI2)
	IF (WNGDNR.LT.0) WNGDNR=WNGDNR+DPI2
	IF (WNGDNR.GT.DPI) WNGDNR=WNGDNR-DPI2
C
	RETURN
C
C DNF
C
	ENTRY WNGDNF(VALD)
C
	WNGDNF=MOD(VALD,1D0)
	IF (WNGDNF.LT.0) WNGDNF=WNGDNF+1D0
	IF (WNGDNF.GT.0.5D0) WNGDNF=WNGDNF-1D0
C
	RETURN
C
C DDF
C
	ENTRY WNGDDF(VALD)
C
	WNGDDF=VALD/360D0
	WNGDDF=MOD(WNGDDF,1D0)
	IF (WNGDDF.LT.0) WNGDDF=WNGDDF+1D0
C
	RETURN
C
C DRF
C
	ENTRY WNGDRF(VALD)
C
	WNGDRF=VALD/DPI2
	WNGDRF=MOD(WNGDRF,1D0)
	IF (WNGDRF.LT.0) WNGDRF=WNGDRF+1D0
C
	RETURN
C
C DFD
C
	ENTRY WNGDFD(VALD)
C
	WNGDFD=VALD*360D0
	WNGDFD=MOD(WNGDFD,360D0)
	IF (WNGDFD.LT.0) WNGDFD=WNGDFD+360D0
C
	RETURN
C
C DFR
C
	ENTRY WNGDFR(VALD)
C
	WNGDFR=VALD*DPI2
	WNGDFR=MOD(WNGDFR,DPI2)
	IF (WNGDFR.LT.0) WNGDFR=WNGDFR+DPI2
C
	RETURN
	END
C
C EPD
C
	REAL FUNCTION WNGEPD(VALE)
C
	INCLUDE 'WNG_DEF'
C
	REAL VALE
C
	REAL WNGEND,WNGEPR,WNGENR,WNGEPF,WNGENF
	REAL WNGEDF,WNGERF,WNGEFD,WNGEFR
C
C
	WNGEPD=MOD(VALE,360E0)
	IF (WNGEPD.LT.0) WNGEPD=WNGEPD+360E0
C
	RETURN
C
C EPR
C
	ENTRY WNGEPR(VALE)
C
	WNGEPR=MOD(VALE,PI2)
	IF (WNGEPR.LT.0) WNGEPR=WNGEPR+PI2
C
	RETURN
C
C EPF
C
	ENTRY WNGEPF(VALE)
C
	WNGEPF=MOD(VALE,1E0)
	IF (WNGEPF.LT.0) WNGEPF=WNGEPF+1E0
C
	RETURN
C
C END
C
	ENTRY WNGEND(VALE)
C
	WNGEND=MOD(VALE,360E0)
	IF (WNGEND.LT.0) WNGEND=WNGEND+360E0
	IF (WNGEND.GT.180E0) WNGEND=WNGEND-360E0
C
	RETURN
C
C ENR
C
	ENTRY WNGENR(VALE)
C
	WNGENR=MOD(VALE,PI2)
	IF (WNGENR.LT.0) WNGENR=WNGENR+PI2
	IF (WNGENR.GT.PI) WNGENR=WNGENR-PI2
C
	RETURN
C
C ENF
C
	ENTRY WNGENF(VALE)
C
	WNGENF=MOD(VALE,1E0)
	IF (WNGENF.LT.0) WNGENF=WNGENF+1E0
	IF (WNGENF.GT.0.5E0) WNGENF=WNGENF-1E0
C
	RETURN
C
C EDF
C
	ENTRY WNGEDF(VALE)
C
	WNGEDF=VALE/360E0
	WNGEDF=MOD(WNGEDF,1E0)
	IF (WNGEDF.LT.0) WNGEDF=WNGEDF+1E0
C
	RETURN
C
C ERF
C
	ENTRY WNGERF(VALE)
C
	WNGERF=VALE/PI2
	WNGERF=MOD(WNGERF,1E0)
	IF (WNGERF.LT.0) WNGERF=WNGERF+1E0
C
	RETURN
C
C EFD
C
	ENTRY WNGEFD(VALE)
C
	WNGEFD=VALE*360E0
	WNGEFD=MOD(WNGEFD,360E0)
	IF (WNGEFD.LT.0) WNGEFD=WNGEFD+360E0
C
	RETURN
C
C EDR
C
	ENTRY WNGEFR(VALE)
C
	WNGEFR=VALE*PI2
	WNGEFR=MOD(WNGEFR,PI2)
	IF (WNGEFR.LT.0) WNGEFR=WNGEFR+PI2
C
	RETURN
C
C
	END

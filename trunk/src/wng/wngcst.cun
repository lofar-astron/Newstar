/*+ wngcst.cun
.   WNB 910320
.
.   Revisions:
.	WNB 921215	Make CUN for hp and others
.	CMV 940929	Proper include file for ucb
.	HjV 960618	Proper include files for Solaris
...									*/
#include <sys/time.h>
#ifdef wn_hp__
#  include <sys/times.h>
#else
#ifdef wn_ucb__
#  include </usr/ucbinclude/sys/resource.h>
#else
#ifdef wn_so__
#  include </usr/ucbinclude/sys/rusage.h>
#  include </usr/ucbinclude/sys/resource.h>
#else
#  include <sys/resource.h>
#endif
#endif
#endif
/*  History
...									*/
		int ival = 0;
#ifdef wn_hp__
		struct tms rush;
#else
		struct rusage rush;
#endif
		struct timeval tvlh;
/*
...									*/
			int wngcst_(rar,iar)
/*
.   Get computing statistics
.
.   Result:
.
.	wngcst = wngcst ( RAR_E(0:3):O, IAR_E(0:3):O)
.				returns computing statistics (see
.				WNGCST.FVX for details)
...									*/
/*
.   Arguments:
...									*/
		float rar[];			/* returned times	*/
		int iar[];			/* returned counts	*/
{
/*
.   Include files:
...									*/
/*
.   Parameters:
...									*/
/*-									*/
/*
.   Function references:
...									*/
	extern int gettimeofday();
#ifndef wn_hp__
	extern int getrusage();
#endif
/*
.   Data declarations:
...									*/
#ifdef wn_hp__
	struct tms ruse;			/* usage info		*/
#else
	struct rusage ruse;			/* usage info		*/
#endif
	struct timeval tvl;			/* time info		*/
	int i;
/* Init
.									*/
	if (ival == 0)				/* first time		*/
	{ gettimeofday(&tvlh,0);
#ifdef wn_hp__
	  times(&rush);
#else
	  getrusage(RUSAGE_SELF,&rush);
#endif
	  ival = 1;				/* not first		*/
	  for (i = 0; i <= 3; i++)
	  { rar[i] = 0;				/* set zeroes		*/
	    iar[i] = 0;
	  }
	  return(0);
	}
/* Get usage
.									*/
	for (i = 0; i <= 3; i++)
	{ rar[i] = 0;				/* set zeroes		*/
	  iar[i] = 0;
	}
	gettimeofday(&tvl,0);			/* get time of day	*/
#ifdef wn_hp__
	times(&ruse);				/* get values		*/
#else
	getrusage(RUSAGE_SELF,&ruse);		/* get values		*/
#endif
	rar[0] = (tvl.tv_sec - tvlh.tv_sec) +
		(tvl.tv_usec - tvlh.tv_usec) / 1e6; /* elapsed time	*/
#ifdef wn_hp__
	rar[1] = (ruse.tms_utime + ruse.tms_stime -
		rush.tms_utime - rush.tms_stime) / CLK_TCK;
/*
.  I/O count and page fault temporay on zero                            */
	iar[0] = 0;				/* I/O count		*/
	iar[1] = 0;				/* page faults		*/
#else
	rar[1] = (ruse.ru_utime.tv_sec + ruse.ru_stime.tv_sec -
		rush.ru_utime.tv_sec - rush.ru_stime.tv_sec) +
		(ruse.ru_utime.tv_usec + ruse.ru_stime.tv_usec -
		rush.ru_utime.tv_usec - rush.ru_stime.tv_usec) / 1e6;
	iar[0] = ruse.ru_inblock + ruse.ru_oublock -
		rush.ru_inblock - rush.ru_oublock; /* I/O count	*/
	iar[1] = ruse.ru_minflt + ruse.ru_majflt -
		rush.ru_minflt - rush.ru_majflt; /* page faults		*/
#endif
/* Ready
.									*/
	return(0);				/* ready		*/
}
/*
.
...									*/

C+ WNPOPC.FOR
C  WNB 910624
C
C  Revisions:
C	WNB 920303	SUN problem ()
C	WNB 921021	Add A3 plotter
C	HJV 921222	Add X-windows system
C	CMV 940518	Remove call to WNGIN1
C       HjV 950704	Change names of PS/EPS DEF-files
C                       Add DEF-files and device list for A0/A1/A2-plotter
C
	LOGICAL FUNCTION WQOPEN()
C
C  Open/close WNP plot system
C
C  Result:
C
C	WQOPEN_L = WQOPEN()
C				Open the WNP (WQ) plot system. If no explicit
C				call given, the DVOP will do it implicitly.
C	WQCLOS_L = WQCLOS()
C				Close the WNP system. It will also close any
C				open device.
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WQG_DEF'		!GENERAL AREA
	INCLUDE	'WQD_O_DEF'		!DEVICE AREA
	INCLUDE 'WQ_QMS_DEF'		!QMS LANDSCAPE
	INCLUDE 'WQ_QMP_DEF'		!QMS PORTRAIT
	INCLUDE 'WQ_REG_DEF'		!REGIS
	INCLUDE 'WQ_EL4_DEF'		!EL4
	INCLUDE 'WQ_EP4_DEF'		!EP4
	INCLUDE 'WQ_PL4_DEF'		!PL4
	INCLUDE 'WQ_PP4_DEF'		!PP4
	INCLUDE 'WQ_EL3_DEF'		!EL3
	INCLUDE 'WQ_EP3_DEF'		!EP3
	INCLUDE 'WQ_PL3_DEF'		!PL3
	INCLUDE 'WQ_PP3_DEF'		!PP3
	INCLUDE 'WQ_EL2_DEF'		!EL2
	INCLUDE 'WQ_EP2_DEF'		!EP2
	INCLUDE 'WQ_PL2_DEF'		!PL2
	INCLUDE 'WQ_PP2_DEF'		!PP2
	INCLUDE 'WQ_EL1_DEF'		!EL1
	INCLUDE 'WQ_EP1_DEF'		!EP1
	INCLUDE 'WQ_PL1_DEF'		!PL1
	INCLUDE 'WQ_PP1_DEF'		!PP1
	INCLUDE 'WQ_EL0_DEF'		!EL0
	INCLUDE 'WQ_EP0_DEF'		!EP0
	INCLUDE 'WQ_PL0_DEF'		!PL0
	INCLUDE 'WQ_PP0_DEF'		!PP0
	INCLUDE 'WQ_XWI_DEF'		!X-WINDOWS
	INCLUDE 'WQF_O_DEF'		!FONT DESCRIPTOR
	INCLUDE 'WQ_FNA_DEF'		!FONT 1
	INCLUDE 'WQ_FNB_DEF'		!FONT 2
C
C  Parameters:
C
C
C  Entry points:
C
	LOGICAL WQCLOS			!CLOSE DEVICE
C
C  Arguments:
C
C
C  Function references:
C
	EXTERNAL WNQQMS			!QMS LANDSCAPE
	EXTERNAL WNQQMP			!QMS PORTRAIT
	EXTERNAL WNQREG			!REGIS
	EXTERNAL WNQEL4			!EL4
	EXTERNAL WNQEP4			!EP4
	EXTERNAL WNQPL4			!PL4
	EXTERNAL WNQPP4			!PP4
	EXTERNAL WNQEL3			!EL3
	EXTERNAL WNQEP3			!EP3
	EXTERNAL WNQPL3			!PL3
	EXTERNAL WNQPP3			!PP3
	EXTERNAL WNQEL2			!EL2
	EXTERNAL WNQEP2			!EP2
	EXTERNAL WNQPL2			!PL2
	EXTERNAL WNQPP2			!PP2
	EXTERNAL WNQEL1			!EL1
	EXTERNAL WNQEP1			!EP1
	EXTERNAL WNQPL1			!PL1
	EXTERNAL WNQPP1			!PP1
	EXTERNAL WNQEL0			!EL0
	EXTERNAL WNQEP0			!EP0
	EXTERNAL WNQPL0			!PL0
	EXTERNAL WNQPP0			!PP0
	EXTERNAL WNQXWI			!X-WINDOWS
	EXTERNAL WNPEXH			!EXIT HANDLER
C
	INTEGER WNGARA			!GET ADDRESS
C
C  Data declarations:
C
C-
	WQOPEN=.TRUE.					!ASSUME OK
	IF (WQG_STATE.GT.0) RETURN			!ALREADY OPEN SYSTEM
C
C MAKE SURE DUMMY ARRAYS ADDRESSABLE
C
C**	CALL WNGIN1
C
C INIT RANDOM
C
	CALL WNMRIN(69069)				!INITIATE RANDOM
C
C OPEN SYSTEM
C
	J=WNGARA(WQL_EOL)-WNGARA(WQL_SOL)		!LENGTH AREA
	IF (WNGARA(WQG_EOL)-WNGARA(WQG_SOL).NE.J) THEN	!ERROR IN DEFINED WQG
 10	  CONTINUE
	  E_C=1						!CANNOT OPEN
	  WQOPEN=.FALSE.
	  RETURN
	END IF
	CALL WNGMV(J,WQL_SOL,WQG_SOL)			!INIT. AREA
C
C FILL DEVICE LIST
C
	IF (WQG_DVLST.EQ.0) THEN			!STILL TO FILL
C
C QMS
C
	  J=WNGARA(QMS_SVP)-WNGARA(QMS_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(QMS_QUE,WNQQMS)			!LINK DEVICE
C
C QMP
C
	  J=WNGARA(QMP_SVP)-WNGARA(QMP_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(QMP_QUE,WNQQMP)			!LINK DEVICE
C
C REGIS
C
	  J=WNGARA(REG_SVP)-WNGARA(REG_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(REG_QUE,WNQREG)			!LINK DEVICE
C
C EL4
C
	  J=WNGARA(EL4_SVP)-WNGARA(EL4_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EL4_QUE,WNQEL4)			!LINK DEVICE
C
C EP4
C
	  J=WNGARA(EP4_SVP)-WNGARA(EP4_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EP4_QUE,WNQEP4)			!LINK DEVICE
C
C PL4
C
	  J=WNGARA(PL4_SVP)-WNGARA(PL4_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PL4_QUE,WNQPL4)			!LINK DEVICE
C
C PP4
C
	  J=WNGARA(PP4_SVP)-WNGARA(PP4_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PP4_QUE,WNQPP4)			!LINK DEVICE
C
C EL3
C
	  J=WNGARA(EL3_SVP)-WNGARA(EL3_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EL3_QUE,WNQEL3)			!LINK DEVICE
C
C EP3
C
	  J=WNGARA(EP3_SVP)-WNGARA(EP3_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EP3_QUE,WNQEP3)			!LINK DEVICE
C
C PL3
C
	  J=WNGARA(PL3_SVP)-WNGARA(PL3_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PL3_QUE,WNQPL3)			!LINK DEVICE
C
C PP3
C
	  J=WNGARA(PP3_SVP)-WNGARA(PP3_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PP3_QUE,WNQPP3)			!LINK DEVICE
C
C EL2
C
	  J=WNGARA(EL2_SVP)-WNGARA(EL2_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EL2_QUE,WNQEL2)			!LINK DEVICE
C
C EP2
C
	  J=WNGARA(EP2_SVP)-WNGARA(EP2_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EP2_QUE,WNQEP2)			!LINK DEVICE
C
C PL2
C
	  J=WNGARA(PL2_SVP)-WNGARA(PL2_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PL2_QUE,WNQPL2)			!LINK DEVICE
C
C PP2
C
	  J=WNGARA(PP2_SVP)-WNGARA(PP2_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PP2_QUE,WNQPP2)			!LINK DEVICE
C
C EL1
C
	  J=WNGARA(EL1_SVP)-WNGARA(EL1_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EL1_QUE,WNQEL1)			!LINK DEVICE
C
C EP1
C
	  J=WNGARA(EP1_SVP)-WNGARA(EP1_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EP1_QUE,WNQEP1)			!LINK DEVICE
C
C PL1
C
	  J=WNGARA(PL1_SVP)-WNGARA(PL1_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PL1_QUE,WNQPL1)			!LINK DEVICE
C
C PP1
C
	  J=WNGARA(PP1_SVP)-WNGARA(PP1_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PP1_QUE,WNQPP1)			!LINK DEVICE
C
C EL0
C
	  J=WNGARA(EL0_SVP)-WNGARA(EL0_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EL0_QUE,WNQEL0)			!LINK DEVICE
C
C EP0
C
	  J=WNGARA(EP0_SVP)-WNGARA(EP0_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(EP0_QUE,WNQEP0)			!LINK DEVICE
C
C PL0
C
	  J=WNGARA(PL0_SVP)-WNGARA(PL0_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PL0_QUE,WNQPL0)			!LINK DEVICE
C
C PP0
C
	  J=WNGARA(PP0_SVP)-WNGARA(PP0_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(PP0_QUE,WNQPP0)			!LINK DEVICE
C
C XWI
C
	  J=WNGARA(XWI_SVP)-WNGARA(XWI_QUE)		!LENGTH FIXED PART
	  IF (J.NE.WQD_SVP_1) GOTO 10			!DEFINITION ERROR DEVICE
	  CALL WNPIND(XWI_QUE,WNQXWI)			!LINK DEVICE
C
	END IF
C
C SET FONTS
C
	IF (WQG_NFONT.EQ.0) THEN			!STILL TO FILL
C
C FONT 1 AND 2
C
	  J1=(WNGARA(FNA_FTP)-A_OB)/LB_J		!PTR FONT 1 LIST
	  J2=(WNGARA(FNB_FTP)-A_OB)/LB_J		!PTR FONT 2 LIST
	  J0=(WNGARA(FNA_L20)-A_OB)/LB_I		!PTR FONT 1 CHAR. LIST
	  DO I=FNA_LCH-FNA_LCH,FNA_HCH-FNA_LCH		!SET ALL CHAR. PTRS
	    A_J(J1+I)=J0				!PTR FONT 1
	    A_J(J2+I)=J0
	    DO WHILE(A_I(J0).NE.0)			!SEARCH END DESCRIPTOR
	      J0=J0+1
	    END DO
	    J0=J0+1					!SKIP END
	  END DO
	  WQG_FONT(1)=(WNGARA(FNA_HGT)-A_OB)/LB_J	!FONT 1 PTR
	  WQG_FONT(2)=(WNGARA(FNB_HGT)-A_OB)/LB_J	!FONT 2 PTR
C
C SET FILLED FONTS
C
	  WQG_NFONT=2
	END IF
C
C SET OPEN
C
	IF (WQG_EXH(1).EQ.0) CALL WNGSXH(WQG_EXH,WNPEXH) !SET EXIT HANDLER
	WQG_STATE=1
C
	RETURN
C
C WQCLOS
C
	ENTRY WQCLOS
C
	WQCLOS=.TRUE.					!ASSUME OK
C
C CLOSE EVERYTHING
C
	IF (WQG_STATE.GT.0) THEN			!SOMETHING OPEN
	  DO WHILE (WQG_QOP.NE.0)			!MORE OPEN
	    J=WQG_QOP
	    CALL WQDVCL(J)				!CLOSE DEVICE
	  END DO
	  IF (WQG_LOUT.GT.0) THEN			!REMOVE AREAS
	    CALL WNGFVM(WQG_LOUT*LB_J,WQG_OUT1)
	    CALL WNGFVM(WQG_LOUT*LB_J,WQG_OUT2)
	    CALL WNGFVM(WQG_LOUT*LB_J,WQG_OUT3)
	  END IF
	  WQG_LOUT=0
	END IF
	WQG_STATE=0					!CORRECT STATE
C
	RETURN
C
C
	END

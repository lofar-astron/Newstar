C+ WNTIBP.FOR
C  WNB 930501
C
C  Revisions:
C
	INTEGER FUNCTION WNTIBP(BDES,DAT)
C
C  Put data into variable length buffer
C
C  Result:
C
C	WNTIBP_J = WNTIBP( BDES_J(*):IO, DAT_B(*):I)
C					Put data DAT into buffer described
C					by BDES. WNTIBP returns the buffer
C					line number of the data
C	WNTIBW_J = WNTIBW( BDES_J(*):I, DAT_B(*):I, NENT_J:I)
C					Write entry at NENT
C	WNTIBR_J = WNTIBR( BDES_J(*):I, DAT_B(*):O, NENT_J:I)
C					Read entry at NENT
C
C  Include files:
C
	INCLUDE 'WNG_DEF'
	INCLUDE 'WNT_O_DEF'
C
C  Parameters:
C
C
C  Entry points:
C
	INTEGER WNTIBW,WNTIBR
C
C  Arguments:
C
	INTEGER BDES(0:*)		!BUFFER DESCRIPTOR
	BYTE DAT(0:*)			!DATA
	INTEGER NENT			!ENTRY NUMBER
C
C  Function references:
C
	LOGICAL WNGGVM			!GET MEMORY
C
C  Data declarations:
C
C-
C
C WNTIBP
C
	IF (BDES(WNTB_CNT_J).GE.BDES(WNTB_CCNT_J)) THEN !CANNOT FIT MORE
	  I=MAX(2*BDES(WNTB_CCNT_J),INCCNT)	!NEW LENGTH
	  IF (.NOT.WNGGVM(I*BDES(WNTB_ELEN_J),J0)) THEN !GET NEW BUFFER
	    CALL WNCTXT(F_TP,'Fatal -- No memory for buffers')
	    CALL WNGEX				!STOP
	  END IF
	  J0=J0-A_OB				!NEW BUFFER PTR
	  CALL WNGMV(BDES(WNTB_CCNT_J)*BDES(WNTB_ELEN_J),
	1		A_B(BDES(WNTB_BPTR_J)),A_B(J0)) !SAVE OLD BUFFER
	  IF (BDES(WNTB_CCNT_J).GT.0)		!REMOVE OLD BUFFER
	1	CALL WNGFVM(BDES(WNTB_CCNT_J)*BDES(WNTB_ELEN_J),
	1		A_OB+BDES(WNTB_BPTR_J))	!FREE OLD BUFFER
	  BDES(WNTB_BPTR_J)=J0			!NEW POINTERS
	  BDES(WNTB_JPTR_J)=J0/LB_J
	  BDES(WNTB_CCNT_J)=I			!NEW LENGTH
	END IF
	CALL WNGMV(BDES(WNTB_ELEN_J),DAT,
	1		A_B(BDES(WNTB_BPTR_J)+
	1		BDES(WNTB_CNT_J)*BDES(WNTB_ELEN_J))) !SAVE DATA
	WNTIBP=BDES(WNTB_CNT_J)			!RETURN LINE POINTER
	BDES(WNTB_CNT_J)=BDES(WNTB_CNT_J)+1	!COUNT ENTRY
C
	RETURN
C
C WNTIBW
C
	ENTRY WNTIBW(BDES,DAT,NENT)
C
	CALL WNGMV(BDES(WNTB_ELEN_J),DAT,
	1		A_B(BDES(WNTB_BPTR_J)+
	1		NENT*BDES(WNTB_ELEN_J))) !SAVE DATA
	WNTIBW=NENT				!RETURN LINE POINTER
C
	RETURN
C
C WNTIBR
C
	ENTRY WNTIBR(BDES,DAT,NENT)
C
	CALL WNGMV(BDES(WNTB_ELEN_J),A_B(BDES(WNTB_BPTR_J)+
	1		NENT*BDES(WNTB_ELEN_J)),DAT) !READ DATA
	WNTIBR=NENT				!RETURN LINE POINTER
C
	RETURN
C
C
	END
